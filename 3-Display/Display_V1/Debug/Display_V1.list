
Display_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001ca4  08001ca4  00011ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001ce0  08001ce0  00011ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001ce4  08001ce4  00011ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000074  2000000c  08001cf4  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000080  08001cf4  00020080  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b2e6  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000017cc  00000000  00000000  0002b31b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000688  00000000  00000000  0002cae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005e0  00000000  00000000  0002d170  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003668  00000000  00000000  0002d750  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002195  00000000  00000000  00030db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00032f4d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000197c  00000000  00000000  00032fcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001c8c 	.word	0x08001c8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001c8c 	.word	0x08001c8c

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f927 	bl	80003b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fc80 	bl	8001a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f931 	bl	80003fe <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f907 	bl	80003c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad2      	subs	r2, r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d3f7      	bcc.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da0b      	bge.n	80002e4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	490d      	ldr	r1, [pc, #52]	; (8000304 <NVIC_SetPriority+0x4c>)
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	f003 030f 	and.w	r3, r3, #15
 80002d4:	3b04      	subs	r3, #4
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	b2d2      	uxtb	r2, r2
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e2:	e009      	b.n	80002f8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	4908      	ldr	r1, [pc, #32]	; (8000308 <NVIC_SetPriority+0x50>)
 80002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ea:	683a      	ldr	r2, [r7, #0]
 80002ec:	b2d2      	uxtb	r2, r2
 80002ee:	0112      	lsls	r2, r2, #4
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	440b      	add	r3, r1
 80002f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	e000e100 	.word	0xe000e100

0800030c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800030c:	b480      	push	{r7}
 800030e:	b089      	sub	sp, #36	; 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	f1c3 0307 	rsb	r3, r3, #7
 8000326:	2b04      	cmp	r3, #4
 8000328:	bf28      	it	cs
 800032a:	2304      	movcs	r3, #4
 800032c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3304      	adds	r3, #4
 8000332:	2b06      	cmp	r3, #6
 8000334:	d902      	bls.n	800033c <NVIC_EncodePriority+0x30>
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3b03      	subs	r3, #3
 800033a:	e000      	b.n	800033e <NVIC_EncodePriority+0x32>
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	2201      	movs	r2, #1
 8000342:	69bb      	ldr	r3, [r7, #24]
 8000344:	fa02 f303 	lsl.w	r3, r2, r3
 8000348:	1e5a      	subs	r2, r3, #1
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	401a      	ands	r2, r3
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000352:	2101      	movs	r1, #1
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	fa01 f303 	lsl.w	r3, r1, r3
 800035a:	1e59      	subs	r1, r3, #1
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000360:	4313      	orrs	r3, r2
         );
}
 8000362:	4618      	mov	r0, r3
 8000364:	3724      	adds	r7, #36	; 0x24
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3b01      	subs	r3, #1
 8000378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800037c:	d301      	bcc.n	8000382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800037e:	2301      	movs	r3, #1
 8000380:	e00f      	b.n	80003a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000382:	4a0a      	ldr	r2, [pc, #40]	; (80003ac <SysTick_Config+0x40>)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3b01      	subs	r3, #1
 8000388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800038a:	210f      	movs	r1, #15
 800038c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000390:	f7ff ff92 	bl	80002b8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <SysTick_Config+0x40>)
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800039a:	4b04      	ldr	r3, [pc, #16]	; (80003ac <SysTick_Config+0x40>)
 800039c:	2207      	movs	r2, #7
 800039e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a0:	2300      	movs	r3, #0
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	e000e010 	.word	0xe000e010

080003b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f7ff ff4b 	bl	8000254 <NVIC_SetPriorityGrouping>
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b086      	sub	sp, #24
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	4603      	mov	r3, r0
 80003ce:	60b9      	str	r1, [r7, #8]
 80003d0:	607a      	str	r2, [r7, #4]
 80003d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003d4:	2300      	movs	r3, #0
 80003d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003d8:	f7ff ff60 	bl	800029c <NVIC_GetPriorityGrouping>
 80003dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	68b9      	ldr	r1, [r7, #8]
 80003e2:	6978      	ldr	r0, [r7, #20]
 80003e4:	f7ff ff92 	bl	800030c <NVIC_EncodePriority>
 80003e8:	4602      	mov	r2, r0
 80003ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003ee:	4611      	mov	r1, r2
 80003f0:	4618      	mov	r0, r3
 80003f2:	f7ff ff61 	bl	80002b8 <NVIC_SetPriority>
}
 80003f6:	bf00      	nop
 80003f8:	3718      	adds	r7, #24
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	b082      	sub	sp, #8
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f7ff ffb0 	bl	800036c <SysTick_Config>
 800040c:	4603      	mov	r3, r0
}
 800040e:	4618      	mov	r0, r3
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000418:	b480      	push	{r7}
 800041a:	b08b      	sub	sp, #44	; 0x2c
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000426:	2300      	movs	r3, #0
 8000428:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800042e:	2300      	movs	r3, #0
 8000430:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000432:	2300      	movs	r3, #0
 8000434:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000436:	2300      	movs	r3, #0
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
 800043a:	e127      	b.n	800068c <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800043c:	2201      	movs	r2, #1
 800043e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000440:	fa02 f303 	lsl.w	r3, r2, r3
 8000444:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	69fb      	ldr	r3, [r7, #28]
 800044c:	4013      	ands	r3, r2
 800044e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000450:	69ba      	ldr	r2, [r7, #24]
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	429a      	cmp	r2, r3
 8000456:	f040 8116 	bne.w	8000686 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	2b12      	cmp	r3, #18
 8000460:	d034      	beq.n	80004cc <HAL_GPIO_Init+0xb4>
 8000462:	2b12      	cmp	r3, #18
 8000464:	d80d      	bhi.n	8000482 <HAL_GPIO_Init+0x6a>
 8000466:	2b02      	cmp	r3, #2
 8000468:	d02b      	beq.n	80004c2 <HAL_GPIO_Init+0xaa>
 800046a:	2b02      	cmp	r3, #2
 800046c:	d804      	bhi.n	8000478 <HAL_GPIO_Init+0x60>
 800046e:	2b00      	cmp	r3, #0
 8000470:	d031      	beq.n	80004d6 <HAL_GPIO_Init+0xbe>
 8000472:	2b01      	cmp	r3, #1
 8000474:	d01c      	beq.n	80004b0 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000476:	e048      	b.n	800050a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000478:	2b03      	cmp	r3, #3
 800047a:	d043      	beq.n	8000504 <HAL_GPIO_Init+0xec>
 800047c:	2b11      	cmp	r3, #17
 800047e:	d01b      	beq.n	80004b8 <HAL_GPIO_Init+0xa0>
          break;
 8000480:	e043      	b.n	800050a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000482:	4a87      	ldr	r2, [pc, #540]	; (80006a0 <HAL_GPIO_Init+0x288>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d026      	beq.n	80004d6 <HAL_GPIO_Init+0xbe>
 8000488:	4a85      	ldr	r2, [pc, #532]	; (80006a0 <HAL_GPIO_Init+0x288>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d806      	bhi.n	800049c <HAL_GPIO_Init+0x84>
 800048e:	4a85      	ldr	r2, [pc, #532]	; (80006a4 <HAL_GPIO_Init+0x28c>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d020      	beq.n	80004d6 <HAL_GPIO_Init+0xbe>
 8000494:	4a84      	ldr	r2, [pc, #528]	; (80006a8 <HAL_GPIO_Init+0x290>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d01d      	beq.n	80004d6 <HAL_GPIO_Init+0xbe>
          break;
 800049a:	e036      	b.n	800050a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800049c:	4a83      	ldr	r2, [pc, #524]	; (80006ac <HAL_GPIO_Init+0x294>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d019      	beq.n	80004d6 <HAL_GPIO_Init+0xbe>
 80004a2:	4a83      	ldr	r2, [pc, #524]	; (80006b0 <HAL_GPIO_Init+0x298>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d016      	beq.n	80004d6 <HAL_GPIO_Init+0xbe>
 80004a8:	4a82      	ldr	r2, [pc, #520]	; (80006b4 <HAL_GPIO_Init+0x29c>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d013      	beq.n	80004d6 <HAL_GPIO_Init+0xbe>
          break;
 80004ae:	e02c      	b.n	800050a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	623b      	str	r3, [r7, #32]
          break;
 80004b6:	e028      	b.n	800050a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	3304      	adds	r3, #4
 80004be:	623b      	str	r3, [r7, #32]
          break;
 80004c0:	e023      	b.n	800050a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	3308      	adds	r3, #8
 80004c8:	623b      	str	r3, [r7, #32]
          break;
 80004ca:	e01e      	b.n	800050a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	330c      	adds	r3, #12
 80004d2:	623b      	str	r3, [r7, #32]
          break;
 80004d4:	e019      	b.n	800050a <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d102      	bne.n	80004e4 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004de:	2304      	movs	r3, #4
 80004e0:	623b      	str	r3, [r7, #32]
          break;
 80004e2:	e012      	b.n	800050a <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d105      	bne.n	80004f8 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004ec:	2308      	movs	r3, #8
 80004ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	69fa      	ldr	r2, [r7, #28]
 80004f4:	611a      	str	r2, [r3, #16]
          break;
 80004f6:	e008      	b.n	800050a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004f8:	2308      	movs	r3, #8
 80004fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	69fa      	ldr	r2, [r7, #28]
 8000500:	615a      	str	r2, [r3, #20]
          break;
 8000502:	e002      	b.n	800050a <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000504:	2300      	movs	r3, #0
 8000506:	623b      	str	r3, [r7, #32]
          break;
 8000508:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800050a:	69bb      	ldr	r3, [r7, #24]
 800050c:	2bff      	cmp	r3, #255	; 0xff
 800050e:	d801      	bhi.n	8000514 <HAL_GPIO_Init+0xfc>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	e001      	b.n	8000518 <HAL_GPIO_Init+0x100>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	3304      	adds	r3, #4
 8000518:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800051a:	69bb      	ldr	r3, [r7, #24]
 800051c:	2bff      	cmp	r3, #255	; 0xff
 800051e:	d802      	bhi.n	8000526 <HAL_GPIO_Init+0x10e>
 8000520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	e002      	b.n	800052c <HAL_GPIO_Init+0x114>
 8000526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000528:	3b08      	subs	r3, #8
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	210f      	movs	r1, #15
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	fa01 f303 	lsl.w	r3, r1, r3
 800053a:	43db      	mvns	r3, r3
 800053c:	401a      	ands	r2, r3
 800053e:	6a39      	ldr	r1, [r7, #32]
 8000540:	693b      	ldr	r3, [r7, #16]
 8000542:	fa01 f303 	lsl.w	r3, r1, r3
 8000546:	431a      	orrs	r2, r3
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000554:	2b00      	cmp	r3, #0
 8000556:	f000 8096 	beq.w	8000686 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800055a:	4a57      	ldr	r2, [pc, #348]	; (80006b8 <HAL_GPIO_Init+0x2a0>)
 800055c:	4b56      	ldr	r3, [pc, #344]	; (80006b8 <HAL_GPIO_Init+0x2a0>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6193      	str	r3, [r2, #24]
 8000566:	4b54      	ldr	r3, [pc, #336]	; (80006b8 <HAL_GPIO_Init+0x2a0>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000572:	4a52      	ldr	r2, [pc, #328]	; (80006bc <HAL_GPIO_Init+0x2a4>)
 8000574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000576:	089b      	lsrs	r3, r3, #2
 8000578:	3302      	adds	r3, #2
 800057a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800057e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000582:	f003 0303 	and.w	r3, r3, #3
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	220f      	movs	r2, #15
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	43db      	mvns	r3, r3
 8000590:	697a      	ldr	r2, [r7, #20]
 8000592:	4013      	ands	r3, r2
 8000594:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a49      	ldr	r2, [pc, #292]	; (80006c0 <HAL_GPIO_Init+0x2a8>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d013      	beq.n	80005c6 <HAL_GPIO_Init+0x1ae>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a48      	ldr	r2, [pc, #288]	; (80006c4 <HAL_GPIO_Init+0x2ac>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d00d      	beq.n	80005c2 <HAL_GPIO_Init+0x1aa>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a47      	ldr	r2, [pc, #284]	; (80006c8 <HAL_GPIO_Init+0x2b0>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d007      	beq.n	80005be <HAL_GPIO_Init+0x1a6>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a46      	ldr	r2, [pc, #280]	; (80006cc <HAL_GPIO_Init+0x2b4>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d101      	bne.n	80005ba <HAL_GPIO_Init+0x1a2>
 80005b6:	2303      	movs	r3, #3
 80005b8:	e006      	b.n	80005c8 <HAL_GPIO_Init+0x1b0>
 80005ba:	2304      	movs	r3, #4
 80005bc:	e004      	b.n	80005c8 <HAL_GPIO_Init+0x1b0>
 80005be:	2302      	movs	r3, #2
 80005c0:	e002      	b.n	80005c8 <HAL_GPIO_Init+0x1b0>
 80005c2:	2301      	movs	r3, #1
 80005c4:	e000      	b.n	80005c8 <HAL_GPIO_Init+0x1b0>
 80005c6:	2300      	movs	r3, #0
 80005c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005ca:	f002 0203 	and.w	r2, r2, #3
 80005ce:	0092      	lsls	r2, r2, #2
 80005d0:	4093      	lsls	r3, r2
 80005d2:	697a      	ldr	r2, [r7, #20]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80005d8:	4938      	ldr	r1, [pc, #224]	; (80006bc <HAL_GPIO_Init+0x2a4>)
 80005da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005dc:	089b      	lsrs	r3, r3, #2
 80005de:	3302      	adds	r3, #2
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d006      	beq.n	8000600 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005f2:	4937      	ldr	r1, [pc, #220]	; (80006d0 <HAL_GPIO_Init+0x2b8>)
 80005f4:	4b36      	ldr	r3, [pc, #216]	; (80006d0 <HAL_GPIO_Init+0x2b8>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	600b      	str	r3, [r1, #0]
 80005fe:	e006      	b.n	800060e <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000600:	4933      	ldr	r1, [pc, #204]	; (80006d0 <HAL_GPIO_Init+0x2b8>)
 8000602:	4b33      	ldr	r3, [pc, #204]	; (80006d0 <HAL_GPIO_Init+0x2b8>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	43db      	mvns	r3, r3
 800060a:	4013      	ands	r3, r2
 800060c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000616:	2b00      	cmp	r3, #0
 8000618:	d006      	beq.n	8000628 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800061a:	492d      	ldr	r1, [pc, #180]	; (80006d0 <HAL_GPIO_Init+0x2b8>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	; (80006d0 <HAL_GPIO_Init+0x2b8>)
 800061e:	685a      	ldr	r2, [r3, #4]
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	4313      	orrs	r3, r2
 8000624:	604b      	str	r3, [r1, #4]
 8000626:	e006      	b.n	8000636 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000628:	4929      	ldr	r1, [pc, #164]	; (80006d0 <HAL_GPIO_Init+0x2b8>)
 800062a:	4b29      	ldr	r3, [pc, #164]	; (80006d0 <HAL_GPIO_Init+0x2b8>)
 800062c:	685a      	ldr	r2, [r3, #4]
 800062e:	69bb      	ldr	r3, [r7, #24]
 8000630:	43db      	mvns	r3, r3
 8000632:	4013      	ands	r3, r2
 8000634:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800063e:	2b00      	cmp	r3, #0
 8000640:	d006      	beq.n	8000650 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000642:	4923      	ldr	r1, [pc, #140]	; (80006d0 <HAL_GPIO_Init+0x2b8>)
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <HAL_GPIO_Init+0x2b8>)
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	4313      	orrs	r3, r2
 800064c:	608b      	str	r3, [r1, #8]
 800064e:	e006      	b.n	800065e <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000650:	491f      	ldr	r1, [pc, #124]	; (80006d0 <HAL_GPIO_Init+0x2b8>)
 8000652:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <HAL_GPIO_Init+0x2b8>)
 8000654:	689a      	ldr	r2, [r3, #8]
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	43db      	mvns	r3, r3
 800065a:	4013      	ands	r3, r2
 800065c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000666:	2b00      	cmp	r3, #0
 8000668:	d006      	beq.n	8000678 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800066a:	4919      	ldr	r1, [pc, #100]	; (80006d0 <HAL_GPIO_Init+0x2b8>)
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <HAL_GPIO_Init+0x2b8>)
 800066e:	68da      	ldr	r2, [r3, #12]
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	4313      	orrs	r3, r2
 8000674:	60cb      	str	r3, [r1, #12]
 8000676:	e006      	b.n	8000686 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000678:	4915      	ldr	r1, [pc, #84]	; (80006d0 <HAL_GPIO_Init+0x2b8>)
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <HAL_GPIO_Init+0x2b8>)
 800067c:	68da      	ldr	r2, [r3, #12]
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	43db      	mvns	r3, r3
 8000682:	4013      	ands	r3, r2
 8000684:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000688:	3301      	adds	r3, #1
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
 800068c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068e:	2b0f      	cmp	r3, #15
 8000690:	f67f aed4 	bls.w	800043c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000694:	bf00      	nop
 8000696:	372c      	adds	r7, #44	; 0x2c
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	10210000 	.word	0x10210000
 80006a4:	10110000 	.word	0x10110000
 80006a8:	10120000 	.word	0x10120000
 80006ac:	10310000 	.word	0x10310000
 80006b0:	10320000 	.word	0x10320000
 80006b4:	10220000 	.word	0x10220000
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010000 	.word	0x40010000
 80006c0:	40010800 	.word	0x40010800
 80006c4:	40010c00 	.word	0x40010c00
 80006c8:	40011000 	.word	0x40011000
 80006cc:	40011400 	.word	0x40011400
 80006d0:	40010400 	.word	0x40010400

080006d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	807b      	strh	r3, [r7, #2]
 80006e0:	4613      	mov	r3, r2
 80006e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006e4:	787b      	ldrb	r3, [r7, #1]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d003      	beq.n	80006f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006ea:	887a      	ldrh	r2, [r7, #2]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80006f0:	e003      	b.n	80006fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80006f2:	887b      	ldrh	r3, [r7, #2]
 80006f4:	041a      	lsls	r2, r3, #16
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	611a      	str	r2, [r3, #16]
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	887b      	ldrh	r3, [r7, #2]
 8000716:	405a      	eors	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	60da      	str	r2, [r3, #12]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
	...

08000728 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	e0e7      	b.n	8000912 <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d106      	bne.n	800075c <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f001 f9aa 	bl	8001ab0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2224      	movs	r2, #36	; 0x24
 8000760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	6812      	ldr	r2, [r2, #0]
 800076c:	6812      	ldr	r2, [r2, #0]
 800076e:	f022 0201 	bic.w	r2, r2, #1
 8000772:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000774:	f000 ffa8 	bl	80016c8 <HAL_RCC_GetPCLK1Freq>
 8000778:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	4a67      	ldr	r2, [pc, #412]	; (800091c <HAL_I2C_Init+0x1f4>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d807      	bhi.n	8000794 <HAL_I2C_Init+0x6c>
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	4a66      	ldr	r2, [pc, #408]	; (8000920 <HAL_I2C_Init+0x1f8>)
 8000788:	4293      	cmp	r3, r2
 800078a:	bf94      	ite	ls
 800078c:	2301      	movls	r3, #1
 800078e:	2300      	movhi	r3, #0
 8000790:	b2db      	uxtb	r3, r3
 8000792:	e006      	b.n	80007a2 <HAL_I2C_Init+0x7a>
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	4a63      	ldr	r2, [pc, #396]	; (8000924 <HAL_I2C_Init+0x1fc>)
 8000798:	4293      	cmp	r3, r2
 800079a:	bf94      	ite	ls
 800079c:	2301      	movls	r3, #1
 800079e:	2300      	movhi	r3, #0
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e0b3      	b.n	8000912 <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	4a5e      	ldr	r2, [pc, #376]	; (8000928 <HAL_I2C_Init+0x200>)
 80007ae:	fba2 2303 	umull	r2, r3, r2, r3
 80007b2:	0c9b      	lsrs	r3, r3, #18
 80007b4:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	4955      	ldr	r1, [pc, #340]	; (800091c <HAL_I2C_Init+0x1f4>)
 80007c8:	428b      	cmp	r3, r1
 80007ca:	d802      	bhi.n	80007d2 <HAL_I2C_Init+0xaa>
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	3301      	adds	r3, #1
 80007d0:	e009      	b.n	80007e6 <HAL_I2C_Init+0xbe>
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80007d8:	fb01 f303 	mul.w	r3, r1, r3
 80007dc:	4953      	ldr	r1, [pc, #332]	; (800092c <HAL_I2C_Init+0x204>)
 80007de:	fba1 1303 	umull	r1, r3, r1, r3
 80007e2:	099b      	lsrs	r3, r3, #6
 80007e4:	3301      	adds	r3, #1
 80007e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6819      	ldr	r1, [r3, #0]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	4a4a      	ldr	r2, [pc, #296]	; (800091c <HAL_I2C_Init+0x1f4>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d80d      	bhi.n	8000812 <HAL_I2C_Init+0xea>
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	1e5a      	subs	r2, r3, #1
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	fbb2 f3f3 	udiv	r3, r2, r3
 8000804:	3301      	adds	r3, #1
 8000806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800080a:	2b04      	cmp	r3, #4
 800080c:	bf38      	it	cc
 800080e:	2304      	movcc	r3, #4
 8000810:	e04f      	b.n	80008b2 <HAL_I2C_Init+0x18a>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d111      	bne.n	800083e <HAL_I2C_Init+0x116>
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	1e58      	subs	r0, r3, #1
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	685a      	ldr	r2, [r3, #4]
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	fbb0 f3f3 	udiv	r3, r0, r3
 800082c:	3301      	adds	r3, #1
 800082e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000832:	2b00      	cmp	r3, #0
 8000834:	bf0c      	ite	eq
 8000836:	2301      	moveq	r3, #1
 8000838:	2300      	movne	r3, #0
 800083a:	b2db      	uxtb	r3, r3
 800083c:	e012      	b.n	8000864 <HAL_I2C_Init+0x13c>
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	1e58      	subs	r0, r3, #1
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685a      	ldr	r2, [r3, #4]
 8000846:	4613      	mov	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	009a      	lsls	r2, r3, #2
 800084e:	4413      	add	r3, r2
 8000850:	fbb0 f3f3 	udiv	r3, r0, r3
 8000854:	3301      	adds	r3, #1
 8000856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800085a:	2b00      	cmp	r3, #0
 800085c:	bf0c      	ite	eq
 800085e:	2301      	moveq	r3, #1
 8000860:	2300      	movne	r3, #0
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <HAL_I2C_Init+0x144>
 8000868:	2301      	movs	r3, #1
 800086a:	e022      	b.n	80008b2 <HAL_I2C_Init+0x18a>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d10e      	bne.n	8000892 <HAL_I2C_Init+0x16a>
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	1e58      	subs	r0, r3, #1
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	685a      	ldr	r2, [r3, #4]
 800087c:	4613      	mov	r3, r2
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	4413      	add	r3, r2
 8000882:	fbb0 f3f3 	udiv	r3, r0, r3
 8000886:	3301      	adds	r3, #1
 8000888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800088c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000890:	e00f      	b.n	80008b2 <HAL_I2C_Init+0x18a>
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	1e58      	subs	r0, r3, #1
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685a      	ldr	r2, [r3, #4]
 800089a:	4613      	mov	r3, r2
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	4413      	add	r3, r2
 80008a0:	009a      	lsls	r2, r3, #2
 80008a2:	4413      	add	r3, r2
 80008a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80008a8:	3301      	adds	r3, #1
 80008aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	69d1      	ldr	r1, [r2, #28]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	6a12      	ldr	r2, [r2, #32]
 80008c0:	430a      	orrs	r2, r1
 80008c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	6911      	ldr	r1, [r2, #16]
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	68d2      	ldr	r2, [r2, #12]
 80008d0:	430a      	orrs	r2, r1
 80008d2:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	6951      	ldr	r1, [r2, #20]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	6992      	ldr	r2, [r2, #24]
 80008e0:	430a      	orrs	r2, r1
 80008e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	6812      	ldr	r2, [r2, #0]
 80008ec:	6812      	ldr	r2, [r2, #0]
 80008ee:	f042 0201 	orr.w	r2, r2, #1
 80008f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2220      	movs	r2, #32
 80008fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	000186a0 	.word	0x000186a0
 8000920:	001e847f 	.word	0x001e847f
 8000924:	003d08ff 	.word	0x003d08ff
 8000928:	431bde83 	.word	0x431bde83
 800092c:	10624dd3 	.word	0x10624dd3

08000930 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af02      	add	r7, sp, #8
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	461a      	mov	r2, r3
 800093c:	460b      	mov	r3, r1
 800093e:	817b      	strh	r3, [r7, #10]
 8000940:	4613      	mov	r3, r2
 8000942:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000948:	f7ff fc58 	bl	80001fc <HAL_GetTick>
 800094c:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b20      	cmp	r3, #32
 8000958:	f040 80ee 	bne.w	8000b38 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	2319      	movs	r3, #25
 8000962:	2201      	movs	r2, #1
 8000964:	4977      	ldr	r1, [pc, #476]	; (8000b44 <HAL_I2C_Master_Transmit+0x214>)
 8000966:	68f8      	ldr	r0, [r7, #12]
 8000968:	f000 f972 	bl	8000c50 <I2C_WaitOnFlagUntilTimeout>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8000972:	2302      	movs	r3, #2
 8000974:	e0e1      	b.n	8000b3a <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800097c:	2b01      	cmp	r3, #1
 800097e:	d101      	bne.n	8000984 <HAL_I2C_Master_Transmit+0x54>
 8000980:	2302      	movs	r3, #2
 8000982:	e0da      	b.n	8000b3a <HAL_I2C_Master_Transmit+0x20a>
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2201      	movs	r2, #1
 8000988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	2b01      	cmp	r3, #1
 8000998:	d007      	beq.n	80009aa <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	6812      	ldr	r2, [r2, #0]
 80009a2:	6812      	ldr	r2, [r2, #0]
 80009a4:	f042 0201 	orr.w	r2, r2, #1
 80009a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	6812      	ldr	r2, [r2, #0]
 80009b2:	6812      	ldr	r2, [r2, #0]
 80009b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009b8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2221      	movs	r2, #33	; 0x21
 80009be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2210      	movs	r2, #16
 80009c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2200      	movs	r2, #0
 80009ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	893a      	ldrh	r2, [r7, #8]
 80009da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4a5a      	ldr	r2, [pc, #360]	; (8000b48 <HAL_I2C_Master_Transmit+0x218>)
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80009ec:	8979      	ldrh	r1, [r7, #10]
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	6a3a      	ldr	r2, [r7, #32]
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f000 f8aa 	bl	8000b4c <I2C_MasterRequestWrite>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00f      	beq.n	8000a1e <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d105      	bne.n	8000a12 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e093      	b.n	8000b3a <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2200      	movs	r2, #0
 8000a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	e08d      	b.n	8000b3a <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8000a34:	e066      	b.n	8000b04 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a36:	697a      	ldr	r2, [r7, #20]
 8000a38:	6a39      	ldr	r1, [r7, #32]
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f000 f9c7 	bl	8000dce <I2C_WaitOnTXEFlagUntilTimeout>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d00f      	beq.n	8000a66 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d109      	bne.n	8000a62 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	6812      	ldr	r2, [r2, #0]
 8000a56:	6812      	ldr	r2, [r2, #0]
 8000a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a5c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e06b      	b.n	8000b3a <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8000a62:	2303      	movs	r3, #3
 8000a64:	e069      	b.n	8000b3a <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6e:	1c58      	adds	r0, r3, #1
 8000a70:	68f9      	ldr	r1, [r7, #12]
 8000a72:	6248      	str	r0, [r1, #36]	; 0x24
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	d119      	bne.n	8000ad4 <HAL_I2C_Master_Transmit+0x1a4>
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d015      	beq.n	8000ad4 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab0:	1c58      	adds	r0, r3, #1
 8000ab2:	68f9      	ldr	r1, [r7, #12]
 8000ab4:	6248      	str	r0, [r1, #36]	; 0x24
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000acc:	3b01      	subs	r3, #1
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	6a39      	ldr	r1, [r7, #32]
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f000 f9b5 	bl	8000e48 <I2C_WaitOnBTFFlagUntilTimeout>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d00f      	beq.n	8000b04 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	d109      	bne.n	8000b00 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	6812      	ldr	r2, [r2, #0]
 8000af4:	6812      	ldr	r2, [r2, #0]
 8000af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000afa:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	e01c      	b.n	8000b3a <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8000b00:	2303      	movs	r3, #3
 8000b02:	e01a      	b.n	8000b3a <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d194      	bne.n	8000a36 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	6812      	ldr	r2, [r2, #0]
 8000b14:	6812      	ldr	r2, [r2, #0]
 8000b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2220      	movs	r2, #32
 8000b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	e000      	b.n	8000b3a <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8000b38:	2302      	movs	r3, #2
  }
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	00100002 	.word	0x00100002
 8000b48:	ffff0000 	.word	0xffff0000

08000b4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af02      	add	r7, sp, #8
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	2b04      	cmp	r3, #4
 8000b66:	d006      	beq.n	8000b76 <I2C_MasterRequestWrite+0x2a>
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d003      	beq.n	8000b76 <I2C_MasterRequestWrite+0x2a>
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000b74:	d108      	bne.n	8000b88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	6812      	ldr	r2, [r2, #0]
 8000b7e:	6812      	ldr	r2, [r2, #0]
 8000b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	e00b      	b.n	8000ba0 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	2b12      	cmp	r3, #18
 8000b8e:	d107      	bne.n	8000ba0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	6812      	ldr	r2, [r2, #0]
 8000b98:	6812      	ldr	r2, [r2, #0]
 8000b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b9e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000bac:	68f8      	ldr	r0, [r7, #12]
 8000bae:	f000 f84f 	bl	8000c50 <I2C_WaitOnFlagUntilTimeout>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e040      	b.n	8000c3e <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bc4:	d107      	bne.n	8000bd6 <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	897a      	ldrh	r2, [r7, #10]
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000bd2:	611a      	str	r2, [r3, #16]
 8000bd4:	e021      	b.n	8000c1a <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	897a      	ldrh	r2, [r7, #10]
 8000bdc:	11d2      	asrs	r2, r2, #7
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	f002 0206 	and.w	r2, r2, #6
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	f062 020f 	orn	r2, r2, #15
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	4915      	ldr	r1, [pc, #84]	; (8000c48 <I2C_MasterRequestWrite+0xfc>)
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f000 f87c 	bl	8000cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d007      	beq.n	8000c10 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d101      	bne.n	8000c0c <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e018      	b.n	8000c3e <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	e016      	b.n	8000c3e <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	897a      	ldrh	r2, [r7, #10]
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	490b      	ldr	r1, [pc, #44]	; (8000c4c <I2C_MasterRequestWrite+0x100>)
 8000c20:	68f8      	ldr	r0, [r7, #12]
 8000c22:	f000 f866 	bl	8000cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d007      	beq.n	8000c3c <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d101      	bne.n	8000c38 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e002      	b.n	8000c3e <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	00010008 	.word	0x00010008
 8000c4c:	00010002 	.word	0x00010002

08000c50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000c60:	e01f      	b.n	8000ca2 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c68:	d01b      	beq.n	8000ca2 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d007      	beq.n	8000c80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8000c70:	f7ff fac4 	bl	80001fc <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	1ad2      	subs	r2, r2, r3
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d910      	bls.n	8000ca2 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2200      	movs	r2, #0
 8000c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2220      	movs	r2, #32
 8000c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e023      	b.n	8000cea <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	0c1b      	lsrs	r3, r3, #16
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d10d      	bne.n	8000cc8 <I2C_WaitOnFlagUntilTimeout+0x78>
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	bf0c      	ite	eq
 8000cbe:	2301      	moveq	r3, #1
 8000cc0:	2300      	movne	r3, #0
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	e00c      	b.n	8000ce2 <I2C_WaitOnFlagUntilTimeout+0x92>
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	bf0c      	ite	eq
 8000cda:	2301      	moveq	r3, #1
 8000cdc:	2300      	movne	r3, #0
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d0bc      	beq.n	8000c62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000d00:	e040      	b.n	8000d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d10:	d11c      	bne.n	8000d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	6812      	ldr	r2, [r2, #0]
 8000d1a:	6812      	ldr	r2, [r2, #0]
 8000d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d20:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000d2a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2204      	movs	r2, #4
 8000d30:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2200      	movs	r2, #0
 8000d36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2220      	movs	r2, #32
 8000d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e03c      	b.n	8000dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d52:	d017      	beq.n	8000d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d007      	beq.n	8000d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8000d5a:	f7ff fa4f 	bl	80001fc <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	1ad2      	subs	r2, r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d90c      	bls.n	8000d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2220      	movs	r2, #32
 8000d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8000d80:	2303      	movs	r3, #3
 8000d82:	e020      	b.n	8000dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	0c1b      	lsrs	r3, r3, #16
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d10c      	bne.n	8000da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	43da      	mvns	r2, r3
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	bf14      	ite	ne
 8000da0:	2301      	movne	r3, #1
 8000da2:	2300      	moveq	r3, #0
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	e00b      	b.n	8000dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	43da      	mvns	r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4013      	ands	r3, r2
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	bf14      	ite	ne
 8000dba:	2301      	movne	r3, #1
 8000dbc:	2300      	moveq	r3, #0
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d19e      	bne.n	8000d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000dda:	e029      	b.n	8000e30 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000ddc:	68f8      	ldr	r0, [r7, #12]
 8000dde:	f000 f870 	bl	8000ec2 <I2C_IsAcknowledgeFailed>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e029      	b.n	8000e40 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000df2:	d01d      	beq.n	8000e30 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d007      	beq.n	8000e0a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8000dfa:	f7ff f9ff 	bl	80001fc <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	1ad2      	subs	r2, r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d912      	bls.n	8000e30 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f043 0220 	orr.w	r2, r3, #32
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2220      	movs	r2, #32
 8000e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e007      	b.n	8000e40 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3a:	2b80      	cmp	r3, #128	; 0x80
 8000e3c:	d1ce      	bne.n	8000ddc <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000e54:	e029      	b.n	8000eaa <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	f000 f833 	bl	8000ec2 <I2C_IsAcknowledgeFailed>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e029      	b.n	8000eba <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e6c:	d01d      	beq.n	8000eaa <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d007      	beq.n	8000e84 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8000e74:	f7ff f9c2 	bl	80001fc <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	1ad2      	subs	r2, r2, r3
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d912      	bls.n	8000eaa <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	f043 0220 	orr.w	r2, r3, #32
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2200      	movs	r2, #0
 8000e94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2220      	movs	r2, #32
 8000e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e007      	b.n	8000eba <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d1ce      	bne.n	8000e56 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ed8:	d114      	bne.n	8000f04 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000ee2:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2220      	movs	r2, #32
 8000ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 8087 	beq.w	8001038 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f2a:	4b92      	ldr	r3, [pc, #584]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 030c 	and.w	r3, r3, #12
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	d00c      	beq.n	8000f50 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f36:	4b8f      	ldr	r3, [pc, #572]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 030c 	and.w	r3, r3, #12
 8000f3e:	2b08      	cmp	r3, #8
 8000f40:	d112      	bne.n	8000f68 <HAL_RCC_OscConfig+0x58>
 8000f42:	4b8c      	ldr	r3, [pc, #560]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f4e:	d10b      	bne.n	8000f68 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f50:	4b88      	ldr	r3, [pc, #544]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d06c      	beq.n	8001036 <HAL_RCC_OscConfig+0x126>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d168      	bne.n	8001036 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e22d      	b.n	80013c4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f70:	d106      	bne.n	8000f80 <HAL_RCC_OscConfig+0x70>
 8000f72:	4a80      	ldr	r2, [pc, #512]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8000f74:	4b7f      	ldr	r3, [pc, #508]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e02e      	b.n	8000fde <HAL_RCC_OscConfig+0xce>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10c      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x92>
 8000f88:	4a7a      	ldr	r2, [pc, #488]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8000f8a:	4b7a      	ldr	r3, [pc, #488]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4a77      	ldr	r2, [pc, #476]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8000f96:	4b77      	ldr	r3, [pc, #476]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	e01d      	b.n	8000fde <HAL_RCC_OscConfig+0xce>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000faa:	d10c      	bne.n	8000fc6 <HAL_RCC_OscConfig+0xb6>
 8000fac:	4a71      	ldr	r2, [pc, #452]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8000fae:	4b71      	ldr	r3, [pc, #452]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	4a6e      	ldr	r2, [pc, #440]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8000fba:	4b6e      	ldr	r3, [pc, #440]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	e00b      	b.n	8000fde <HAL_RCC_OscConfig+0xce>
 8000fc6:	4a6b      	ldr	r2, [pc, #428]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8000fc8:	4b6a      	ldr	r3, [pc, #424]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	4a68      	ldr	r2, [pc, #416]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8000fd4:	4b67      	ldr	r3, [pc, #412]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fdc:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d013      	beq.n	800100e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe6:	f7ff f909 	bl	80001fc <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fee:	f7ff f905 	bl	80001fc <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b64      	cmp	r3, #100	; 0x64
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e1e1      	b.n	80013c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001000:	4b5c      	ldr	r3, [pc, #368]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f0      	beq.n	8000fee <HAL_RCC_OscConfig+0xde>
 800100c:	e014      	b.n	8001038 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100e:	f7ff f8f5 	bl	80001fc <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001016:	f7ff f8f1 	bl	80001fc <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b64      	cmp	r3, #100	; 0x64
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e1cd      	b.n	80013c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001028:	4b52      	ldr	r3, [pc, #328]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1f0      	bne.n	8001016 <HAL_RCC_OscConfig+0x106>
 8001034:	e000      	b.n	8001038 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001036:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d063      	beq.n	800110c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001044:	4b4b      	ldr	r3, [pc, #300]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 030c 	and.w	r3, r3, #12
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00b      	beq.n	8001068 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001050:	4b48      	ldr	r3, [pc, #288]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 030c 	and.w	r3, r3, #12
 8001058:	2b08      	cmp	r3, #8
 800105a:	d11c      	bne.n	8001096 <HAL_RCC_OscConfig+0x186>
 800105c:	4b45      	ldr	r3, [pc, #276]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d116      	bne.n	8001096 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001068:	4b42      	ldr	r3, [pc, #264]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d005      	beq.n	8001080 <HAL_RCC_OscConfig+0x170>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d001      	beq.n	8001080 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e1a1      	b.n	80013c4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001080:	493c      	ldr	r1, [pc, #240]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8001082:	4b3c      	ldr	r3, [pc, #240]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4313      	orrs	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001094:	e03a      	b.n	800110c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d020      	beq.n	80010e0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800109e:	4b36      	ldr	r3, [pc, #216]	; (8001178 <HAL_RCC_OscConfig+0x268>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff f8aa 	bl	80001fc <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ac:	f7ff f8a6 	bl	80001fc <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e182      	b.n	80013c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f0      	beq.n	80010ac <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ca:	492a      	ldr	r1, [pc, #168]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 80010cc:	4b29      	ldr	r3, [pc, #164]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4313      	orrs	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]
 80010de:	e015      	b.n	800110c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <HAL_RCC_OscConfig+0x268>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e6:	f7ff f889 	bl	80001fc <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ee:	f7ff f885 	bl	80001fc <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e161      	b.n	80013c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f0      	bne.n	80010ee <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	2b00      	cmp	r3, #0
 8001116:	d039      	beq.n	800118c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d019      	beq.n	8001154 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001122:	2201      	movs	r2, #1
 8001124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001126:	f7ff f869 	bl	80001fc <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800112e:	f7ff f865 	bl	80001fc <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e141      	b.n	80013c4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_RCC_OscConfig+0x264>)
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f000 facf 	bl	80016f0 <RCC_Delay>
 8001152:	e01b      	b.n	800118c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff f84f 	bl	80001fc <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001160:	e00e      	b.n	8001180 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001162:	f7ff f84b 	bl	80001fc <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d907      	bls.n	8001180 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e127      	b.n	80013c4 <HAL_RCC_OscConfig+0x4b4>
 8001174:	40021000 	.word	0x40021000
 8001178:	42420000 	.word	0x42420000
 800117c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001180:	4b92      	ldr	r3, [pc, #584]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 8001182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1ea      	bne.n	8001162 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80a6 	beq.w	80012e6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800119e:	4b8b      	ldr	r3, [pc, #556]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10d      	bne.n	80011c6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	4a88      	ldr	r2, [pc, #544]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 80011ac:	4b87      	ldr	r3, [pc, #540]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	61d3      	str	r3, [r2, #28]
 80011b6:	4b85      	ldr	r3, [pc, #532]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011c2:	2301      	movs	r3, #1
 80011c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c6:	4b82      	ldr	r3, [pc, #520]	; (80013d0 <HAL_RCC_OscConfig+0x4c0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d118      	bne.n	8001204 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011d2:	4a7f      	ldr	r2, [pc, #508]	; (80013d0 <HAL_RCC_OscConfig+0x4c0>)
 80011d4:	4b7e      	ldr	r3, [pc, #504]	; (80013d0 <HAL_RCC_OscConfig+0x4c0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011de:	f7ff f80d 	bl	80001fc <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e6:	f7ff f809 	bl	80001fc <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b64      	cmp	r3, #100	; 0x64
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e0e5      	b.n	80013c4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f8:	4b75      	ldr	r3, [pc, #468]	; (80013d0 <HAL_RCC_OscConfig+0x4c0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f0      	beq.n	80011e6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d106      	bne.n	800121a <HAL_RCC_OscConfig+0x30a>
 800120c:	4a6f      	ldr	r2, [pc, #444]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 800120e:	4b6f      	ldr	r3, [pc, #444]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6213      	str	r3, [r2, #32]
 8001218:	e02d      	b.n	8001276 <HAL_RCC_OscConfig+0x366>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0x32c>
 8001222:	4a6a      	ldr	r2, [pc, #424]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 8001224:	4b69      	ldr	r3, [pc, #420]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	f023 0301 	bic.w	r3, r3, #1
 800122c:	6213      	str	r3, [r2, #32]
 800122e:	4a67      	ldr	r2, [pc, #412]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 8001230:	4b66      	ldr	r3, [pc, #408]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	f023 0304 	bic.w	r3, r3, #4
 8001238:	6213      	str	r3, [r2, #32]
 800123a:	e01c      	b.n	8001276 <HAL_RCC_OscConfig+0x366>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b05      	cmp	r3, #5
 8001242:	d10c      	bne.n	800125e <HAL_RCC_OscConfig+0x34e>
 8001244:	4a61      	ldr	r2, [pc, #388]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 8001246:	4b61      	ldr	r3, [pc, #388]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	6213      	str	r3, [r2, #32]
 8001250:	4a5e      	ldr	r2, [pc, #376]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 8001252:	4b5e      	ldr	r3, [pc, #376]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6213      	str	r3, [r2, #32]
 800125c:	e00b      	b.n	8001276 <HAL_RCC_OscConfig+0x366>
 800125e:	4a5b      	ldr	r2, [pc, #364]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 8001260:	4b5a      	ldr	r3, [pc, #360]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	f023 0301 	bic.w	r3, r3, #1
 8001268:	6213      	str	r3, [r2, #32]
 800126a:	4a58      	ldr	r2, [pc, #352]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 800126c:	4b57      	ldr	r3, [pc, #348]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	f023 0304 	bic.w	r3, r3, #4
 8001274:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d015      	beq.n	80012aa <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127e:	f7fe ffbd 	bl	80001fc <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001284:	e00a      	b.n	800129c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001286:	f7fe ffb9 	bl	80001fc <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	f241 3288 	movw	r2, #5000	; 0x1388
 8001294:	4293      	cmp	r3, r2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e093      	b.n	80013c4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800129c:	4b4b      	ldr	r3, [pc, #300]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0ee      	beq.n	8001286 <HAL_RCC_OscConfig+0x376>
 80012a8:	e014      	b.n	80012d4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012aa:	f7fe ffa7 	bl	80001fc <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b0:	e00a      	b.n	80012c8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012b2:	f7fe ffa3 	bl	80001fc <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e07d      	b.n	80013c4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c8:	4b40      	ldr	r3, [pc, #256]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1ee      	bne.n	80012b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d105      	bne.n	80012e6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012da:	4a3c      	ldr	r2, [pc, #240]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 80012dc:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 80012de:	69db      	ldr	r3, [r3, #28]
 80012e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d069      	beq.n	80013c2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012ee:	4b37      	ldr	r3, [pc, #220]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d061      	beq.n	80013be <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d146      	bne.n	8001390 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001302:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7fe ff78 	bl	80001fc <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001310:	f7fe ff74 	bl	80001fc <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e050      	b.n	80013c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001336:	d108      	bne.n	800134a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001338:	4924      	ldr	r1, [pc, #144]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	4313      	orrs	r3, r2
 8001348:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800134a:	4820      	ldr	r0, [pc, #128]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a19      	ldr	r1, [r3, #32]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135c:	430b      	orrs	r3, r1
 800135e:	4313      	orrs	r3, r2
 8001360:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7fe ff48 	bl	80001fc <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001370:	f7fe ff44 	bl	80001fc <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e020      	b.n	80013c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x460>
 800138e:	e018      	b.n	80013c2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001390:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7fe ff31 	bl	80001fc <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800139e:	f7fe ff2d 	bl	80001fc <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e009      	b.n	80013c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_RCC_OscConfig+0x4bc>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f0      	bne.n	800139e <HAL_RCC_OscConfig+0x48e>
 80013bc:	e001      	b.n	80013c2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40007000 	.word	0x40007000
 80013d4:	42420060 	.word	0x42420060

080013d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80013e6:	4b7e      	ldr	r3, [pc, #504]	; (80015e0 <HAL_RCC_ClockConfig+0x208>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0207 	and.w	r2, r3, #7
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d210      	bcs.n	8001416 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f4:	497a      	ldr	r1, [pc, #488]	; (80015e0 <HAL_RCC_ClockConfig+0x208>)
 80013f6:	4b7a      	ldr	r3, [pc, #488]	; (80015e0 <HAL_RCC_ClockConfig+0x208>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 0207 	bic.w	r2, r3, #7
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001404:	4b76      	ldr	r3, [pc, #472]	; (80015e0 <HAL_RCC_ClockConfig+0x208>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0207 	and.w	r2, r3, #7
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d001      	beq.n	8001416 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e0e0      	b.n	80015d8 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d020      	beq.n	8001464 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b00      	cmp	r3, #0
 800142c:	d005      	beq.n	800143a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800142e:	4a6d      	ldr	r2, [pc, #436]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 8001430:	4b6c      	ldr	r3, [pc, #432]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001438:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	d005      	beq.n	8001452 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001446:	4a67      	ldr	r2, [pc, #412]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 8001448:	4b66      	ldr	r3, [pc, #408]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001450:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001452:	4964      	ldr	r1, [pc, #400]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 8001454:	4b63      	ldr	r3, [pc, #396]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d06a      	beq.n	8001546 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d107      	bne.n	8001488 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001478:	4b5a      	ldr	r3, [pc, #360]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d115      	bne.n	80014b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0a7      	b.n	80015d8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d107      	bne.n	80014a0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001490:	4b54      	ldr	r3, [pc, #336]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d109      	bne.n	80014b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e09b      	b.n	80015d8 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a0:	4b50      	ldr	r3, [pc, #320]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e093      	b.n	80015d8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b0:	494c      	ldr	r1, [pc, #304]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 80014b2:	4b4c      	ldr	r3, [pc, #304]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f023 0203 	bic.w	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4313      	orrs	r3, r2
 80014c0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c2:	f7fe fe9b 	bl	80001fc <HAL_GetTick>
 80014c6:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d112      	bne.n	80014f6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014d0:	e00a      	b.n	80014e8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d2:	f7fe fe93 	bl	80001fc <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e077      	b.n	80015d8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014e8:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 030c 	and.w	r3, r3, #12
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d1ee      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xfa>
 80014f4:	e027      	b.n	8001546 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d11d      	bne.n	800153a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014fe:	e00a      	b.n	8001516 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001500:	f7fe fe7c 	bl	80001fc <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f241 3288 	movw	r2, #5000	; 0x1388
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e060      	b.n	80015d8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001516:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b08      	cmp	r3, #8
 8001520:	d1ee      	bne.n	8001500 <HAL_RCC_ClockConfig+0x128>
 8001522:	e010      	b.n	8001546 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001524:	f7fe fe6a 	bl	80001fc <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e04e      	b.n	80015d8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800153a:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1ee      	bne.n	8001524 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_RCC_ClockConfig+0x208>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0207 	and.w	r2, r3, #7
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d910      	bls.n	8001576 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001554:	4922      	ldr	r1, [pc, #136]	; (80015e0 <HAL_RCC_ClockConfig+0x208>)
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <HAL_RCC_ClockConfig+0x208>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 0207 	bic.w	r2, r3, #7
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	4313      	orrs	r3, r2
 8001562:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001564:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <HAL_RCC_ClockConfig+0x208>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0207 	and.w	r2, r3, #7
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d001      	beq.n	8001576 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e030      	b.n	80015d8 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001582:	4918      	ldr	r1, [pc, #96]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d009      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015a0:	4910      	ldr	r1, [pc, #64]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015b4:	f000 f81c 	bl	80015f0 <HAL_RCC_GetSysClockFreq>
 80015b8:	4601      	mov	r1, r0
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_RCC_ClockConfig+0x20c>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	f003 030f 	and.w	r3, r3, #15
 80015c4:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <HAL_RCC_ClockConfig+0x210>)
 80015c6:	5cd3      	ldrb	r3, [r2, r3]
 80015c8:	fa21 f303 	lsr.w	r3, r1, r3
 80015cc:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_RCC_ClockConfig+0x214>)
 80015ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7fe fdd1 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40022000 	.word	0x40022000
 80015e4:	40021000 	.word	0x40021000
 80015e8:	08001cc8 	.word	0x08001cc8
 80015ec:	20000008 	.word	0x20000008

080015f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f0:	b490      	push	{r4, r7}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015f6:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015f8:	1d3c      	adds	r4, r7, #4
 80015fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800161a:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b04      	cmp	r3, #4
 8001628:	d002      	beq.n	8001630 <HAL_RCC_GetSysClockFreq+0x40>
 800162a:	2b08      	cmp	r3, #8
 800162c:	d003      	beq.n	8001636 <HAL_RCC_GetSysClockFreq+0x46>
 800162e:	e02d      	b.n	800168c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001632:	623b      	str	r3, [r7, #32]
      break;
 8001634:	e02d      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	0c9b      	lsrs	r3, r3, #18
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001642:	4413      	add	r3, r2
 8001644:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001648:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d013      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	0c5b      	lsrs	r3, r3, #17
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001662:	4413      	add	r3, r2
 8001664:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001668:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800166e:	fb02 f203 	mul.w	r2, r2, r3
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	fbb2 f3f3 	udiv	r3, r2, r3
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
 800167a:	e004      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	4a0c      	ldr	r2, [pc, #48]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001680:	fb02 f303 	mul.w	r3, r2, r3
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	623b      	str	r3, [r7, #32]
      break;
 800168a:	e002      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800168e:	623b      	str	r3, [r7, #32]
      break;
 8001690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001692:	6a3b      	ldr	r3, [r7, #32]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bc90      	pop	{r4, r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	08001ca4 	.word	0x08001ca4
 80016a4:	08001cb4 	.word	0x08001cb4
 80016a8:	40021000 	.word	0x40021000
 80016ac:	007a1200 	.word	0x007a1200
 80016b0:	003d0900 	.word	0x003d0900

080016b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016b8:	4b02      	ldr	r3, [pc, #8]	; (80016c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016ba:	681b      	ldr	r3, [r3, #0]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	20000008 	.word	0x20000008

080016c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016cc:	f7ff fff2 	bl	80016b4 <HAL_RCC_GetHCLKFreq>
 80016d0:	4601      	mov	r1, r0
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	4a03      	ldr	r2, [pc, #12]	; (80016ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80016e4:	4618      	mov	r0, r3
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000
 80016ec:	08001cd8 	.word	0x08001cd8

080016f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <RCC_Delay+0x34>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <RCC_Delay+0x38>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	0a5b      	lsrs	r3, r3, #9
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800170c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	60fa      	str	r2, [r7, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f9      	bne.n	800170c <RCC_Delay+0x1c>
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000008 	.word	0x20000008
 8001728:	10624dd3 	.word	0x10624dd3

0800172c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af02      	add	r7, sp, #8
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	f023 030f 	bic.w	r3, r3, #15
 800173c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	f043 030c 	orr.w	r3, r3, #12
 800174a:	b2db      	uxtb	r3, r3
 800174c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	b2db      	uxtb	r3, r3
 8001756:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001758:	7bbb      	ldrb	r3, [r7, #14]
 800175a:	f043 030c 	orr.w	r3, r3, #12
 800175e:	b2db      	uxtb	r3, r3
 8001760:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001762:	7bbb      	ldrb	r3, [r7, #14]
 8001764:	f043 0308 	orr.w	r3, r3, #8
 8001768:	b2db      	uxtb	r3, r3
 800176a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800176c:	f107 0208 	add.w	r2, r7, #8
 8001770:	2364      	movs	r3, #100	; 0x64
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2304      	movs	r3, #4
 8001776:	214e      	movs	r1, #78	; 0x4e
 8001778:	4803      	ldr	r0, [pc, #12]	; (8001788 <lcd_send_cmd+0x5c>)
 800177a:	f7ff f8d9 	bl	8000930 <HAL_I2C_Master_Transmit>
}
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000002c 	.word	0x2000002c

0800178c <lcd_send_data>:

void lcd_send_data (char data)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af02      	add	r7, sp, #8
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	f023 030f 	bic.w	r3, r3, #15
 800179c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	f043 030d 	orr.w	r3, r3, #13
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	f043 0309 	orr.w	r3, r3, #9
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80017b8:	7bbb      	ldrb	r3, [r7, #14]
 80017ba:	f043 030d 	orr.w	r3, r3, #13
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80017c2:	7bbb      	ldrb	r3, [r7, #14]
 80017c4:	f043 0309 	orr.w	r3, r3, #9
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80017cc:	f107 0208 	add.w	r2, r7, #8
 80017d0:	2364      	movs	r3, #100	; 0x64
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2304      	movs	r3, #4
 80017d6:	214e      	movs	r1, #78	; 0x4e
 80017d8:	4803      	ldr	r0, [pc, #12]	; (80017e8 <lcd_send_data+0x5c>)
 80017da:	f7ff f8a9 	bl	8000930 <HAL_I2C_Master_Transmit>
}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000002c 	.word	0x2000002c

080017ec <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80017f0:	2032      	movs	r0, #50	; 0x32
 80017f2:	f7fe fd0d 	bl	8000210 <HAL_Delay>
	lcd_send_cmd (0x30);
 80017f6:	2030      	movs	r0, #48	; 0x30
 80017f8:	f7ff ff98 	bl	800172c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80017fc:	2005      	movs	r0, #5
 80017fe:	f7fe fd07 	bl	8000210 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001802:	2030      	movs	r0, #48	; 0x30
 8001804:	f7ff ff92 	bl	800172c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001808:	2001      	movs	r0, #1
 800180a:	f7fe fd01 	bl	8000210 <HAL_Delay>
	lcd_send_cmd (0x30);
 800180e:	2030      	movs	r0, #48	; 0x30
 8001810:	f7ff ff8c 	bl	800172c <lcd_send_cmd>
	HAL_Delay(10);
 8001814:	200a      	movs	r0, #10
 8001816:	f7fe fcfb 	bl	8000210 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800181a:	2020      	movs	r0, #32
 800181c:	f7ff ff86 	bl	800172c <lcd_send_cmd>
	HAL_Delay(10);
 8001820:	200a      	movs	r0, #10
 8001822:	f7fe fcf5 	bl	8000210 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001826:	2028      	movs	r0, #40	; 0x28
 8001828:	f7ff ff80 	bl	800172c <lcd_send_cmd>
	HAL_Delay(1);
 800182c:	2001      	movs	r0, #1
 800182e:	f7fe fcef 	bl	8000210 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001832:	2008      	movs	r0, #8
 8001834:	f7ff ff7a 	bl	800172c <lcd_send_cmd>
	HAL_Delay(1);
 8001838:	2001      	movs	r0, #1
 800183a:	f7fe fce9 	bl	8000210 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800183e:	2001      	movs	r0, #1
 8001840:	f7ff ff74 	bl	800172c <lcd_send_cmd>
	HAL_Delay(1);
 8001844:	2001      	movs	r0, #1
 8001846:	f7fe fce3 	bl	8000210 <HAL_Delay>
	HAL_Delay(1);
 800184a:	2001      	movs	r0, #1
 800184c:	f7fe fce0 	bl	8000210 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001850:	2006      	movs	r0, #6
 8001852:	f7ff ff6b 	bl	800172c <lcd_send_cmd>
	HAL_Delay(1);
 8001856:	2001      	movs	r0, #1
 8001858:	f7fe fcda 	bl	8000210 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800185c:	200c      	movs	r0, #12
 800185e:	f7ff ff65 	bl	800172c <lcd_send_cmd>
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}

08001866 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800186e:	e006      	b.n	800187e <lcd_send_string+0x18>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff87 	bl	800178c <lcd_send_data>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f4      	bne.n	8001870 <lcd_send_string+0xa>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001894:	f7fe fc5a 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001898:	f000 f822 	bl	80018e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800189c:	f000 f894 	bl	80019c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80018a0:	f000 f864 	bl	800196c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80018a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018a8:	f7fe fcb2 	bl	8000210 <HAL_Delay>
  lcd_init ();
 80018ac:	f7ff ff9e 	bl	80017ec <lcd_init>
  lcd_send_string("Hello");
 80018b0:	4808      	ldr	r0, [pc, #32]	; (80018d4 <main+0x44>)
 80018b2:	f7ff ffd8 	bl	8001866 <lcd_send_string>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_send_cmd (0x80);
 80018b6:	2080      	movs	r0, #128	; 0x80
 80018b8:	f7ff ff38 	bl	800172c <lcd_send_cmd>
	  lcd_send_string("adams");
 80018bc:	4806      	ldr	r0, [pc, #24]	; (80018d8 <main+0x48>)
 80018be:	f7ff ffd2 	bl	8001866 <lcd_send_string>


	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80018c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <main+0x4c>)
 80018c8:	f7fe ff1c 	bl	8000704 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80018cc:	2064      	movs	r0, #100	; 0x64
 80018ce:	f7fe fc9f 	bl	8000210 <HAL_Delay>
	  lcd_send_cmd (0x80);
 80018d2:	e7f0      	b.n	80018b6 <main+0x26>
 80018d4:	08001cb8 	.word	0x08001cb8
 80018d8:	08001cc0 	.word	0x08001cc0
 80018dc:	40011000 	.word	0x40011000

080018e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b090      	sub	sp, #64	; 0x40
 80018e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e6:	f107 0318 	add.w	r3, r7, #24
 80018ea:	2228      	movs	r2, #40	; 0x28
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f9c4 	bl	8001c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001902:	2301      	movs	r3, #1
 8001904:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800190a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001910:	2301      	movs	r3, #1
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001914:	2302      	movs	r3, #2
 8001916:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800191c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800191e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001922:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001924:	f107 0318 	add.w	r3, r7, #24
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff faf1 	bl	8000f10 <HAL_RCC_OscConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001934:	f000 f894 	bl	8001a60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001938:	230f      	movs	r3, #15
 800193a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193c:	2302      	movs	r3, #2
 800193e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001948:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2102      	movs	r1, #2
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fd40 	bl	80013d8 <HAL_RCC_ClockConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800195e:	f000 f87f 	bl	8001a60 <Error_Handler>
  }
}
 8001962:	bf00      	nop
 8001964:	3740      	adds	r7, #64	; 0x40
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <MX_I2C1_Init+0x50>)
 8001972:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <MX_I2C1_Init+0x54>)
 8001974:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <MX_I2C1_Init+0x50>)
 8001978:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <MX_I2C1_Init+0x58>)
 800197a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <MX_I2C1_Init+0x50>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <MX_I2C1_Init+0x50>)
 8001984:	2200      	movs	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <MX_I2C1_Init+0x50>)
 800198a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800198e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001990:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <MX_I2C1_Init+0x50>)
 8001992:	2200      	movs	r2, #0
 8001994:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <MX_I2C1_Init+0x50>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <MX_I2C1_Init+0x50>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <MX_I2C1_Init+0x50>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019a8:	4804      	ldr	r0, [pc, #16]	; (80019bc <MX_I2C1_Init+0x50>)
 80019aa:	f7fe febd 	bl	8000728 <HAL_I2C_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019b4:	f000 f854 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	2000002c 	.word	0x2000002c
 80019c0:	40005400 	.word	0x40005400
 80019c4:	000186a0 	.word	0x000186a0

080019c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ce:	f107 0310 	add.w	r3, r7, #16
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019dc:	4a1e      	ldr	r2, [pc, #120]	; (8001a58 <MX_GPIO_Init+0x90>)
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <MX_GPIO_Init+0x90>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f043 0310 	orr.w	r3, r3, #16
 80019e6:	6193      	str	r3, [r2, #24]
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <MX_GPIO_Init+0x90>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f4:	4a18      	ldr	r2, [pc, #96]	; (8001a58 <MX_GPIO_Init+0x90>)
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <MX_GPIO_Init+0x90>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f043 0320 	orr.w	r3, r3, #32
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <MX_GPIO_Init+0x90>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0320 	and.w	r3, r3, #32
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <MX_GPIO_Init+0x90>)
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <MX_GPIO_Init+0x90>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	f043 0308 	orr.w	r3, r3, #8
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <MX_GPIO_Init+0x90>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a24:	2200      	movs	r2, #0
 8001a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a2a:	480c      	ldr	r0, [pc, #48]	; (8001a5c <MX_GPIO_Init+0x94>)
 8001a2c:	f7fe fe52 	bl	80006d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a36:	2301      	movs	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	4619      	mov	r1, r3
 8001a48:	4804      	ldr	r0, [pc, #16]	; (8001a5c <MX_GPIO_Init+0x94>)
 8001a4a:	f7fe fce5 	bl	8000418 <HAL_GPIO_Init>

}
 8001a4e:	bf00      	nop
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40011000 	.word	0x40011000

08001a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a72:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <HAL_MspInit+0x40>)
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_MspInit+0x40>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6193      	str	r3, [r2, #24]
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_MspInit+0x40>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4a08      	ldr	r2, [pc, #32]	; (8001aac <HAL_MspInit+0x40>)
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <HAL_MspInit+0x40>)
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	61d3      	str	r3, [r2, #28]
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_MspInit+0x40>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	40021000 	.word	0x40021000

08001ab0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a15      	ldr	r2, [pc, #84]	; (8001b20 <HAL_I2C_MspInit+0x70>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d123      	bne.n	8001b18 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad0:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <HAL_I2C_MspInit+0x74>)
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_I2C_MspInit+0x74>)
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f043 0308 	orr.w	r3, r3, #8
 8001ada:	6193      	str	r3, [r2, #24]
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_I2C_MspInit+0x74>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ae8:	23c0      	movs	r3, #192	; 0xc0
 8001aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aec:	2312      	movs	r3, #18
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	4619      	mov	r1, r3
 8001afa:	480b      	ldr	r0, [pc, #44]	; (8001b28 <HAL_I2C_MspInit+0x78>)
 8001afc:	f7fe fc8c 	bl	8000418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b00:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_I2C_MspInit+0x74>)
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <HAL_I2C_MspInit+0x74>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b0a:	61d3      	str	r3, [r2, #28]
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_I2C_MspInit+0x74>)
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b18:	bf00      	nop
 8001b1a:	3720      	adds	r7, #32
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40005400 	.word	0x40005400
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010c00 	.word	0x40010c00

08001b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <HardFault_Handler+0x4>

08001b3e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <MemManage_Handler+0x4>

08001b44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <BusFault_Handler+0x4>

08001b4a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <UsageFault_Handler+0x4>

08001b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b78:	f7fe fb2e 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001b84:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <SystemInit+0x5c>)
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <SystemInit+0x5c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001b90:	4912      	ldr	r1, [pc, #72]	; (8001bdc <SystemInit+0x5c>)
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <SystemInit+0x5c>)
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <SystemInit+0x60>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001b9c:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <SystemInit+0x5c>)
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <SystemInit+0x5c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001baa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <SystemInit+0x5c>)
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <SystemInit+0x5c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001bb8:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <SystemInit+0x5c>)
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <SystemInit+0x5c>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001bc2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <SystemInit+0x5c>)
 8001bc6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001bca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <SystemInit+0x64>)
 8001bce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bd2:	609a      	str	r2, [r3, #8]
#endif 
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	f8ff0000 	.word	0xf8ff0000
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001be8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001bea:	e003      	b.n	8001bf4 <LoopCopyDataInit>

08001bec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001bee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001bf0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001bf2:	3104      	adds	r1, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bf4:	480a      	ldr	r0, [pc, #40]	; (8001c20 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001bf8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bfa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bfc:	d3f6      	bcc.n	8001bec <CopyDataInit>
  ldr r2, =_sbss
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c00:	e002      	b.n	8001c08 <LoopFillZerobss>

08001c02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c04:	f842 3b04 	str.w	r3, [r2], #4

08001c08 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c0a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c0c:	d3f9      	bcc.n	8001c02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c0e:	f7ff ffb7 	bl	8001b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c12:	f000 f80f 	bl	8001c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c16:	f7ff fe3b 	bl	8001890 <main>
  bx lr
 8001c1a:	4770      	bx	lr
  ldr r3, =_sidata
 8001c1c:	08001ce8 	.word	0x08001ce8
  ldr r0, =_sdata
 8001c20:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c24:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001c28:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001c2c:	20000080 	.word	0x20000080

08001c30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c30:	e7fe      	b.n	8001c30 <ADC1_2_IRQHandler>
	...

08001c34 <__libc_init_array>:
 8001c34:	b570      	push	{r4, r5, r6, lr}
 8001c36:	2500      	movs	r5, #0
 8001c38:	4e0c      	ldr	r6, [pc, #48]	; (8001c6c <__libc_init_array+0x38>)
 8001c3a:	4c0d      	ldr	r4, [pc, #52]	; (8001c70 <__libc_init_array+0x3c>)
 8001c3c:	1ba4      	subs	r4, r4, r6
 8001c3e:	10a4      	asrs	r4, r4, #2
 8001c40:	42a5      	cmp	r5, r4
 8001c42:	d109      	bne.n	8001c58 <__libc_init_array+0x24>
 8001c44:	f000 f822 	bl	8001c8c <_init>
 8001c48:	2500      	movs	r5, #0
 8001c4a:	4e0a      	ldr	r6, [pc, #40]	; (8001c74 <__libc_init_array+0x40>)
 8001c4c:	4c0a      	ldr	r4, [pc, #40]	; (8001c78 <__libc_init_array+0x44>)
 8001c4e:	1ba4      	subs	r4, r4, r6
 8001c50:	10a4      	asrs	r4, r4, #2
 8001c52:	42a5      	cmp	r5, r4
 8001c54:	d105      	bne.n	8001c62 <__libc_init_array+0x2e>
 8001c56:	bd70      	pop	{r4, r5, r6, pc}
 8001c58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c5c:	4798      	blx	r3
 8001c5e:	3501      	adds	r5, #1
 8001c60:	e7ee      	b.n	8001c40 <__libc_init_array+0xc>
 8001c62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c66:	4798      	blx	r3
 8001c68:	3501      	adds	r5, #1
 8001c6a:	e7f2      	b.n	8001c52 <__libc_init_array+0x1e>
 8001c6c:	08001ce0 	.word	0x08001ce0
 8001c70:	08001ce0 	.word	0x08001ce0
 8001c74:	08001ce0 	.word	0x08001ce0
 8001c78:	08001ce4 	.word	0x08001ce4

08001c7c <memset>:
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4402      	add	r2, r0
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d100      	bne.n	8001c86 <memset+0xa>
 8001c84:	4770      	bx	lr
 8001c86:	f803 1b01 	strb.w	r1, [r3], #1
 8001c8a:	e7f9      	b.n	8001c80 <memset+0x4>

08001c8c <_init>:
 8001c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c8e:	bf00      	nop
 8001c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c92:	bc08      	pop	{r3}
 8001c94:	469e      	mov	lr, r3
 8001c96:	4770      	bx	lr

08001c98 <_fini>:
 8001c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c9a:	bf00      	nop
 8001c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c9e:	bc08      	pop	{r3}
 8001ca0:	469e      	mov	lr, r3
 8001ca2:	4770      	bx	lr

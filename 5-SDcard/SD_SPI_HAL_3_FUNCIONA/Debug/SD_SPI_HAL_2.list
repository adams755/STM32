
SD_SPI_HAL_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08002c54  08002c54  00012c54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002d38  08002d38  00012d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002d3c  08002d3c  00012d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08002d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000009b0  20000024  08002d64  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200009d4  08002d64  000209d4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016d89  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002fd2  00000000  00000000  00036dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008b05  00000000  00000000  00039da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000980  00000000  00000000  000428b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c88  00000000  00000000  00043230  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005d56  00000000  00000000  00043eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002d78  00000000  00000000  00049c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004c986  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ac4  00000000  00000000  0004ca04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c3c 	.word	0x08002c3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08002c3c 	.word	0x08002c3c

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f880 	bl	8000268 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 f842 	bl	8000200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f81b 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f002 f90c 	bl	80023c8 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000070 	.word	0x20000070
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000070 	.word	0x20000070

080001dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001de:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001ea:	041b      	lsls	r3, r3, #16
 80001ec:	0c1b      	lsrs	r3, r3, #16
 80001ee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f8:	60d3      	str	r3, [r2, #12]
 80001fa:	4770      	bx	lr
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000202:	b530      	push	{r4, r5, lr}
 8000204:	68dc      	ldr	r4, [r3, #12]
 8000206:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000210:	2b04      	cmp	r3, #4
 8000212:	bf28      	it	cs
 8000214:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021c:	bf98      	it	ls
 800021e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	fa05 f303 	lsl.w	r3, r5, r3
 8000224:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000228:	bf88      	it	hi
 800022a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800022c:	4019      	ands	r1, r3
 800022e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000230:	fa05 f404 	lsl.w	r4, r5, r4
 8000234:	3c01      	subs	r4, #1
 8000236:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000238:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	ea42 0201 	orr.w	r2, r2, r1
 800023e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	bfaf      	iteee	ge
 8000244:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	4b06      	ldrlt	r3, [pc, #24]	; (8000264 <HAL_NVIC_SetPriority+0x64>)
 800024a:	f000 000f 	andlt.w	r0, r0, #15
 800024e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	bfa5      	ittet	ge
 8000252:	b2d2      	uxtbge	r2, r2
 8000254:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800025e:	bd30      	pop	{r4, r5, pc}
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	e000ed14 	.word	0xe000ed14

08000268 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000268:	3801      	subs	r0, #1
 800026a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800026e:	d20a      	bcs.n	8000286 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	4a06      	ldr	r2, [pc, #24]	; (8000290 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000276:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000278:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800027c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800027e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000280:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000286:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	e000e010 	.word	0xe000e010
 8000290:	e000ed00 	.word	0xe000ed00

08000294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000298:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800029a:	4616      	mov	r6, r2
 800029c:	4b65      	ldr	r3, [pc, #404]	; (8000434 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800029e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000444 <HAL_GPIO_Init+0x1b0>
 80002a2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000448 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002a6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002aa:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002ac:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002b0:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002b4:	45a0      	cmp	r8, r4
 80002b6:	d17f      	bne.n	80003b8 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002b8:	684d      	ldr	r5, [r1, #4]
 80002ba:	2d12      	cmp	r5, #18
 80002bc:	f000 80af 	beq.w	800041e <HAL_GPIO_Init+0x18a>
 80002c0:	f200 8088 	bhi.w	80003d4 <HAL_GPIO_Init+0x140>
 80002c4:	2d02      	cmp	r5, #2
 80002c6:	f000 80a7 	beq.w	8000418 <HAL_GPIO_Init+0x184>
 80002ca:	d87c      	bhi.n	80003c6 <HAL_GPIO_Init+0x132>
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	f000 808e 	beq.w	80003ee <HAL_GPIO_Init+0x15a>
 80002d2:	2d01      	cmp	r5, #1
 80002d4:	f000 809e 	beq.w	8000414 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002d8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002dc:	2cff      	cmp	r4, #255	; 0xff
 80002de:	bf93      	iteet	ls
 80002e0:	4682      	movls	sl, r0
 80002e2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80002e6:	3d08      	subhi	r5, #8
 80002e8:	f8d0 b000 	ldrls.w	fp, [r0]
 80002ec:	bf92      	itee	ls
 80002ee:	00b5      	lslls	r5, r6, #2
 80002f0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80002f4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002f6:	fa09 f805 	lsl.w	r8, r9, r5
 80002fa:	ea2b 0808 	bic.w	r8, fp, r8
 80002fe:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000302:	bf88      	it	hi
 8000304:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000308:	ea48 0505 	orr.w	r5, r8, r5
 800030c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000310:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000314:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000318:	d04e      	beq.n	80003b8 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800031a:	4d47      	ldr	r5, [pc, #284]	; (8000438 <HAL_GPIO_Init+0x1a4>)
 800031c:	4f46      	ldr	r7, [pc, #280]	; (8000438 <HAL_GPIO_Init+0x1a4>)
 800031e:	69ad      	ldr	r5, [r5, #24]
 8000320:	f026 0803 	bic.w	r8, r6, #3
 8000324:	f045 0501 	orr.w	r5, r5, #1
 8000328:	61bd      	str	r5, [r7, #24]
 800032a:	69bd      	ldr	r5, [r7, #24]
 800032c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000330:	f005 0501 	and.w	r5, r5, #1
 8000334:	9501      	str	r5, [sp, #4]
 8000336:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800033a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800033e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000340:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000344:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000348:	fa09 f90b 	lsl.w	r9, r9, fp
 800034c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000350:	4d3a      	ldr	r5, [pc, #232]	; (800043c <HAL_GPIO_Init+0x1a8>)
 8000352:	42a8      	cmp	r0, r5
 8000354:	d068      	beq.n	8000428 <HAL_GPIO_Init+0x194>
 8000356:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800035a:	42a8      	cmp	r0, r5
 800035c:	d066      	beq.n	800042c <HAL_GPIO_Init+0x198>
 800035e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000362:	42a8      	cmp	r0, r5
 8000364:	d064      	beq.n	8000430 <HAL_GPIO_Init+0x19c>
 8000366:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800036a:	42a8      	cmp	r0, r5
 800036c:	bf0c      	ite	eq
 800036e:	2503      	moveq	r5, #3
 8000370:	2504      	movne	r5, #4
 8000372:	fa05 f50b 	lsl.w	r5, r5, fp
 8000376:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800037a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800037e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000380:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000384:	bf14      	ite	ne
 8000386:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000388:	43a5      	biceq	r5, r4
 800038a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800038c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800038e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000392:	bf14      	ite	ne
 8000394:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000396:	43a5      	biceq	r5, r4
 8000398:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800039a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800039c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003a0:	bf14      	ite	ne
 80003a2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003a4:	43a5      	biceq	r5, r4
 80003a6:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003a8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003aa:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003ae:	bf14      	ite	ne
 80003b0:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003b2:	ea25 0404 	biceq.w	r4, r5, r4
 80003b6:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003b8:	3601      	adds	r6, #1
 80003ba:	2e10      	cmp	r6, #16
 80003bc:	f47f af73 	bne.w	80002a6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003c0:	b003      	add	sp, #12
 80003c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003c6:	2d03      	cmp	r5, #3
 80003c8:	d022      	beq.n	8000410 <HAL_GPIO_Init+0x17c>
 80003ca:	2d11      	cmp	r5, #17
 80003cc:	d184      	bne.n	80002d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003ce:	68ca      	ldr	r2, [r1, #12]
 80003d0:	3204      	adds	r2, #4
          break;
 80003d2:	e781      	b.n	80002d8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003d4:	4f1a      	ldr	r7, [pc, #104]	; (8000440 <HAL_GPIO_Init+0x1ac>)
 80003d6:	42bd      	cmp	r5, r7
 80003d8:	d009      	beq.n	80003ee <HAL_GPIO_Init+0x15a>
 80003da:	d812      	bhi.n	8000402 <HAL_GPIO_Init+0x16e>
 80003dc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800044c <HAL_GPIO_Init+0x1b8>
 80003e0:	454d      	cmp	r5, r9
 80003e2:	d004      	beq.n	80003ee <HAL_GPIO_Init+0x15a>
 80003e4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80003e8:	454d      	cmp	r5, r9
 80003ea:	f47f af75 	bne.w	80002d8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80003ee:	688a      	ldr	r2, [r1, #8]
 80003f0:	b1c2      	cbz	r2, 8000424 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80003f2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80003f4:	bf0c      	ite	eq
 80003f6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80003fa:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80003fe:	2208      	movs	r2, #8
 8000400:	e76a      	b.n	80002d8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000402:	4575      	cmp	r5, lr
 8000404:	d0f3      	beq.n	80003ee <HAL_GPIO_Init+0x15a>
 8000406:	4565      	cmp	r5, ip
 8000408:	d0f1      	beq.n	80003ee <HAL_GPIO_Init+0x15a>
 800040a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000450 <HAL_GPIO_Init+0x1bc>
 800040e:	e7eb      	b.n	80003e8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000410:	2200      	movs	r2, #0
 8000412:	e761      	b.n	80002d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000414:	68ca      	ldr	r2, [r1, #12]
          break;
 8000416:	e75f      	b.n	80002d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000418:	68ca      	ldr	r2, [r1, #12]
 800041a:	3208      	adds	r2, #8
          break;
 800041c:	e75c      	b.n	80002d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800041e:	68ca      	ldr	r2, [r1, #12]
 8000420:	320c      	adds	r2, #12
          break;
 8000422:	e759      	b.n	80002d8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000424:	2204      	movs	r2, #4
 8000426:	e757      	b.n	80002d8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000428:	2500      	movs	r5, #0
 800042a:	e7a2      	b.n	8000372 <HAL_GPIO_Init+0xde>
 800042c:	2501      	movs	r5, #1
 800042e:	e7a0      	b.n	8000372 <HAL_GPIO_Init+0xde>
 8000430:	2502      	movs	r5, #2
 8000432:	e79e      	b.n	8000372 <HAL_GPIO_Init+0xde>
 8000434:	40010400 	.word	0x40010400
 8000438:	40021000 	.word	0x40021000
 800043c:	40010800 	.word	0x40010800
 8000440:	10210000 	.word	0x10210000
 8000444:	10310000 	.word	0x10310000
 8000448:	10320000 	.word	0x10320000
 800044c:	10110000 	.word	0x10110000
 8000450:	10220000 	.word	0x10220000

08000454 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000454:	b10a      	cbz	r2, 800045a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000456:	6101      	str	r1, [r0, #16]
 8000458:	4770      	bx	lr
 800045a:	0409      	lsls	r1, r1, #16
 800045c:	e7fb      	b.n	8000456 <HAL_GPIO_WritePin+0x2>
	...

08000460 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000460:	6803      	ldr	r3, [r0, #0]
{
 8000462:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000466:	07db      	lsls	r3, r3, #31
{
 8000468:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800046a:	d410      	bmi.n	800048e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800046c:	682b      	ldr	r3, [r5, #0]
 800046e:	079f      	lsls	r7, r3, #30
 8000470:	d45e      	bmi.n	8000530 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000472:	682b      	ldr	r3, [r5, #0]
 8000474:	0719      	lsls	r1, r3, #28
 8000476:	f100 8095 	bmi.w	80005a4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800047a:	682b      	ldr	r3, [r5, #0]
 800047c:	075a      	lsls	r2, r3, #29
 800047e:	f100 80bf 	bmi.w	8000600 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000482:	69ea      	ldr	r2, [r5, #28]
 8000484:	2a00      	cmp	r2, #0
 8000486:	f040 812d 	bne.w	80006e4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800048a:	2000      	movs	r0, #0
 800048c:	e014      	b.n	80004b8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800048e:	4c90      	ldr	r4, [pc, #576]	; (80006d0 <HAL_RCC_OscConfig+0x270>)
 8000490:	6863      	ldr	r3, [r4, #4]
 8000492:	f003 030c 	and.w	r3, r3, #12
 8000496:	2b04      	cmp	r3, #4
 8000498:	d007      	beq.n	80004aa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800049a:	6863      	ldr	r3, [r4, #4]
 800049c:	f003 030c 	and.w	r3, r3, #12
 80004a0:	2b08      	cmp	r3, #8
 80004a2:	d10c      	bne.n	80004be <HAL_RCC_OscConfig+0x5e>
 80004a4:	6863      	ldr	r3, [r4, #4]
 80004a6:	03de      	lsls	r6, r3, #15
 80004a8:	d509      	bpl.n	80004be <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004aa:	6823      	ldr	r3, [r4, #0]
 80004ac:	039c      	lsls	r4, r3, #14
 80004ae:	d5dd      	bpl.n	800046c <HAL_RCC_OscConfig+0xc>
 80004b0:	686b      	ldr	r3, [r5, #4]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d1da      	bne.n	800046c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004b6:	2001      	movs	r0, #1
}
 80004b8:	b002      	add	sp, #8
 80004ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004be:	686b      	ldr	r3, [r5, #4]
 80004c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004c4:	d110      	bne.n	80004e8 <HAL_RCC_OscConfig+0x88>
 80004c6:	6823      	ldr	r3, [r4, #0]
 80004c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004cc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004ce:	f7ff fe7f 	bl	80001d0 <HAL_GetTick>
 80004d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80004d4:	6823      	ldr	r3, [r4, #0]
 80004d6:	0398      	lsls	r0, r3, #14
 80004d8:	d4c8      	bmi.n	800046c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80004da:	f7ff fe79 	bl	80001d0 <HAL_GetTick>
 80004de:	1b80      	subs	r0, r0, r6
 80004e0:	2864      	cmp	r0, #100	; 0x64
 80004e2:	d9f7      	bls.n	80004d4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80004e4:	2003      	movs	r0, #3
 80004e6:	e7e7      	b.n	80004b8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004e8:	b99b      	cbnz	r3, 8000512 <HAL_RCC_OscConfig+0xb2>
 80004ea:	6823      	ldr	r3, [r4, #0]
 80004ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004f0:	6023      	str	r3, [r4, #0]
 80004f2:	6823      	ldr	r3, [r4, #0]
 80004f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004fa:	f7ff fe69 	bl	80001d0 <HAL_GetTick>
 80004fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000500:	6823      	ldr	r3, [r4, #0]
 8000502:	0399      	lsls	r1, r3, #14
 8000504:	d5b2      	bpl.n	800046c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000506:	f7ff fe63 	bl	80001d0 <HAL_GetTick>
 800050a:	1b80      	subs	r0, r0, r6
 800050c:	2864      	cmp	r0, #100	; 0x64
 800050e:	d9f7      	bls.n	8000500 <HAL_RCC_OscConfig+0xa0>
 8000510:	e7e8      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000512:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000516:	6823      	ldr	r3, [r4, #0]
 8000518:	d103      	bne.n	8000522 <HAL_RCC_OscConfig+0xc2>
 800051a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800051e:	6023      	str	r3, [r4, #0]
 8000520:	e7d1      	b.n	80004c6 <HAL_RCC_OscConfig+0x66>
 8000522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000526:	6023      	str	r3, [r4, #0]
 8000528:	6823      	ldr	r3, [r4, #0]
 800052a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800052e:	e7cd      	b.n	80004cc <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000530:	4c67      	ldr	r4, [pc, #412]	; (80006d0 <HAL_RCC_OscConfig+0x270>)
 8000532:	6863      	ldr	r3, [r4, #4]
 8000534:	f013 0f0c 	tst.w	r3, #12
 8000538:	d007      	beq.n	800054a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800053a:	6863      	ldr	r3, [r4, #4]
 800053c:	f003 030c 	and.w	r3, r3, #12
 8000540:	2b08      	cmp	r3, #8
 8000542:	d110      	bne.n	8000566 <HAL_RCC_OscConfig+0x106>
 8000544:	6863      	ldr	r3, [r4, #4]
 8000546:	03da      	lsls	r2, r3, #15
 8000548:	d40d      	bmi.n	8000566 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800054a:	6823      	ldr	r3, [r4, #0]
 800054c:	079b      	lsls	r3, r3, #30
 800054e:	d502      	bpl.n	8000556 <HAL_RCC_OscConfig+0xf6>
 8000550:	692b      	ldr	r3, [r5, #16]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d1af      	bne.n	80004b6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000556:	6823      	ldr	r3, [r4, #0]
 8000558:	696a      	ldr	r2, [r5, #20]
 800055a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800055e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000562:	6023      	str	r3, [r4, #0]
 8000564:	e785      	b.n	8000472 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000566:	692a      	ldr	r2, [r5, #16]
 8000568:	4b5a      	ldr	r3, [pc, #360]	; (80006d4 <HAL_RCC_OscConfig+0x274>)
 800056a:	b16a      	cbz	r2, 8000588 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 800056c:	2201      	movs	r2, #1
 800056e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000570:	f7ff fe2e 	bl	80001d0 <HAL_GetTick>
 8000574:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000576:	6823      	ldr	r3, [r4, #0]
 8000578:	079f      	lsls	r7, r3, #30
 800057a:	d4ec      	bmi.n	8000556 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800057c:	f7ff fe28 	bl	80001d0 <HAL_GetTick>
 8000580:	1b80      	subs	r0, r0, r6
 8000582:	2802      	cmp	r0, #2
 8000584:	d9f7      	bls.n	8000576 <HAL_RCC_OscConfig+0x116>
 8000586:	e7ad      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000588:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800058a:	f7ff fe21 	bl	80001d0 <HAL_GetTick>
 800058e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000590:	6823      	ldr	r3, [r4, #0]
 8000592:	0798      	lsls	r0, r3, #30
 8000594:	f57f af6d 	bpl.w	8000472 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000598:	f7ff fe1a 	bl	80001d0 <HAL_GetTick>
 800059c:	1b80      	subs	r0, r0, r6
 800059e:	2802      	cmp	r0, #2
 80005a0:	d9f6      	bls.n	8000590 <HAL_RCC_OscConfig+0x130>
 80005a2:	e79f      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005a4:	69aa      	ldr	r2, [r5, #24]
 80005a6:	4c4a      	ldr	r4, [pc, #296]	; (80006d0 <HAL_RCC_OscConfig+0x270>)
 80005a8:	4b4b      	ldr	r3, [pc, #300]	; (80006d8 <HAL_RCC_OscConfig+0x278>)
 80005aa:	b1da      	cbz	r2, 80005e4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005ac:	2201      	movs	r2, #1
 80005ae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005b0:	f7ff fe0e 	bl	80001d0 <HAL_GetTick>
 80005b4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005b8:	079b      	lsls	r3, r3, #30
 80005ba:	d50d      	bpl.n	80005d8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005bc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005c0:	4b46      	ldr	r3, [pc, #280]	; (80006dc <HAL_RCC_OscConfig+0x27c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80005c8:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80005ca:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80005cc:	9b01      	ldr	r3, [sp, #4]
 80005ce:	1e5a      	subs	r2, r3, #1
 80005d0:	9201      	str	r2, [sp, #4]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d1f9      	bne.n	80005ca <HAL_RCC_OscConfig+0x16a>
 80005d6:	e750      	b.n	800047a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80005d8:	f7ff fdfa 	bl	80001d0 <HAL_GetTick>
 80005dc:	1b80      	subs	r0, r0, r6
 80005de:	2802      	cmp	r0, #2
 80005e0:	d9e9      	bls.n	80005b6 <HAL_RCC_OscConfig+0x156>
 80005e2:	e77f      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80005e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005e6:	f7ff fdf3 	bl	80001d0 <HAL_GetTick>
 80005ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80005ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005ee:	079f      	lsls	r7, r3, #30
 80005f0:	f57f af43 	bpl.w	800047a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80005f4:	f7ff fdec 	bl	80001d0 <HAL_GetTick>
 80005f8:	1b80      	subs	r0, r0, r6
 80005fa:	2802      	cmp	r0, #2
 80005fc:	d9f6      	bls.n	80005ec <HAL_RCC_OscConfig+0x18c>
 80005fe:	e771      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000600:	4c33      	ldr	r4, [pc, #204]	; (80006d0 <HAL_RCC_OscConfig+0x270>)
 8000602:	69e3      	ldr	r3, [r4, #28]
 8000604:	00d8      	lsls	r0, r3, #3
 8000606:	d424      	bmi.n	8000652 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000608:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	69e3      	ldr	r3, [r4, #28]
 800060c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000610:	61e3      	str	r3, [r4, #28]
 8000612:	69e3      	ldr	r3, [r4, #28]
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800061c:	4e30      	ldr	r6, [pc, #192]	; (80006e0 <HAL_RCC_OscConfig+0x280>)
 800061e:	6833      	ldr	r3, [r6, #0]
 8000620:	05d9      	lsls	r1, r3, #23
 8000622:	d518      	bpl.n	8000656 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000624:	68eb      	ldr	r3, [r5, #12]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d126      	bne.n	8000678 <HAL_RCC_OscConfig+0x218>
 800062a:	6a23      	ldr	r3, [r4, #32]
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000632:	f7ff fdcd 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000636:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800063a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800063c:	6a23      	ldr	r3, [r4, #32]
 800063e:	079b      	lsls	r3, r3, #30
 8000640:	d53f      	bpl.n	80006c2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000642:	2f00      	cmp	r7, #0
 8000644:	f43f af1d 	beq.w	8000482 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000648:	69e3      	ldr	r3, [r4, #28]
 800064a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800064e:	61e3      	str	r3, [r4, #28]
 8000650:	e717      	b.n	8000482 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000652:	2700      	movs	r7, #0
 8000654:	e7e2      	b.n	800061c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000656:	6833      	ldr	r3, [r6, #0]
 8000658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800065c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800065e:	f7ff fdb7 	bl	80001d0 <HAL_GetTick>
 8000662:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000664:	6833      	ldr	r3, [r6, #0]
 8000666:	05da      	lsls	r2, r3, #23
 8000668:	d4dc      	bmi.n	8000624 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800066a:	f7ff fdb1 	bl	80001d0 <HAL_GetTick>
 800066e:	eba0 0008 	sub.w	r0, r0, r8
 8000672:	2864      	cmp	r0, #100	; 0x64
 8000674:	d9f6      	bls.n	8000664 <HAL_RCC_OscConfig+0x204>
 8000676:	e735      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000678:	b9ab      	cbnz	r3, 80006a6 <HAL_RCC_OscConfig+0x246>
 800067a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800067c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000680:	f023 0301 	bic.w	r3, r3, #1
 8000684:	6223      	str	r3, [r4, #32]
 8000686:	6a23      	ldr	r3, [r4, #32]
 8000688:	f023 0304 	bic.w	r3, r3, #4
 800068c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800068e:	f7ff fd9f 	bl	80001d0 <HAL_GetTick>
 8000692:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000694:	6a23      	ldr	r3, [r4, #32]
 8000696:	0798      	lsls	r0, r3, #30
 8000698:	d5d3      	bpl.n	8000642 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800069a:	f7ff fd99 	bl	80001d0 <HAL_GetTick>
 800069e:	1b80      	subs	r0, r0, r6
 80006a0:	4540      	cmp	r0, r8
 80006a2:	d9f7      	bls.n	8000694 <HAL_RCC_OscConfig+0x234>
 80006a4:	e71e      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006a6:	2b05      	cmp	r3, #5
 80006a8:	6a23      	ldr	r3, [r4, #32]
 80006aa:	d103      	bne.n	80006b4 <HAL_RCC_OscConfig+0x254>
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6223      	str	r3, [r4, #32]
 80006b2:	e7ba      	b.n	800062a <HAL_RCC_OscConfig+0x1ca>
 80006b4:	f023 0301 	bic.w	r3, r3, #1
 80006b8:	6223      	str	r3, [r4, #32]
 80006ba:	6a23      	ldr	r3, [r4, #32]
 80006bc:	f023 0304 	bic.w	r3, r3, #4
 80006c0:	e7b6      	b.n	8000630 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006c2:	f7ff fd85 	bl	80001d0 <HAL_GetTick>
 80006c6:	eba0 0008 	sub.w	r0, r0, r8
 80006ca:	42b0      	cmp	r0, r6
 80006cc:	d9b6      	bls.n	800063c <HAL_RCC_OscConfig+0x1dc>
 80006ce:	e709      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
 80006d0:	40021000 	.word	0x40021000
 80006d4:	42420000 	.word	0x42420000
 80006d8:	42420480 	.word	0x42420480
 80006dc:	20000008 	.word	0x20000008
 80006e0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80006e4:	4c22      	ldr	r4, [pc, #136]	; (8000770 <HAL_RCC_OscConfig+0x310>)
 80006e6:	6863      	ldr	r3, [r4, #4]
 80006e8:	f003 030c 	and.w	r3, r3, #12
 80006ec:	2b08      	cmp	r3, #8
 80006ee:	f43f aee2 	beq.w	80004b6 <HAL_RCC_OscConfig+0x56>
 80006f2:	2300      	movs	r3, #0
 80006f4:	4e1f      	ldr	r6, [pc, #124]	; (8000774 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80006f6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80006f8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80006fa:	d12b      	bne.n	8000754 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80006fc:	f7ff fd68 	bl	80001d0 <HAL_GetTick>
 8000700:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000702:	6823      	ldr	r3, [r4, #0]
 8000704:	0199      	lsls	r1, r3, #6
 8000706:	d41f      	bmi.n	8000748 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000708:	6a2b      	ldr	r3, [r5, #32]
 800070a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800070e:	d105      	bne.n	800071c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000710:	6862      	ldr	r2, [r4, #4]
 8000712:	68a9      	ldr	r1, [r5, #8]
 8000714:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000718:	430a      	orrs	r2, r1
 800071a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800071c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800071e:	6862      	ldr	r2, [r4, #4]
 8000720:	430b      	orrs	r3, r1
 8000722:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000726:	4313      	orrs	r3, r2
 8000728:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800072a:	2301      	movs	r3, #1
 800072c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800072e:	f7ff fd4f 	bl	80001d0 <HAL_GetTick>
 8000732:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000734:	6823      	ldr	r3, [r4, #0]
 8000736:	019a      	lsls	r2, r3, #6
 8000738:	f53f aea7 	bmi.w	800048a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800073c:	f7ff fd48 	bl	80001d0 <HAL_GetTick>
 8000740:	1b40      	subs	r0, r0, r5
 8000742:	2802      	cmp	r0, #2
 8000744:	d9f6      	bls.n	8000734 <HAL_RCC_OscConfig+0x2d4>
 8000746:	e6cd      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000748:	f7ff fd42 	bl	80001d0 <HAL_GetTick>
 800074c:	1bc0      	subs	r0, r0, r7
 800074e:	2802      	cmp	r0, #2
 8000750:	d9d7      	bls.n	8000702 <HAL_RCC_OscConfig+0x2a2>
 8000752:	e6c7      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000754:	f7ff fd3c 	bl	80001d0 <HAL_GetTick>
 8000758:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800075a:	6823      	ldr	r3, [r4, #0]
 800075c:	019b      	lsls	r3, r3, #6
 800075e:	f57f ae94 	bpl.w	800048a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000762:	f7ff fd35 	bl	80001d0 <HAL_GetTick>
 8000766:	1b40      	subs	r0, r0, r5
 8000768:	2802      	cmp	r0, #2
 800076a:	d9f6      	bls.n	800075a <HAL_RCC_OscConfig+0x2fa>
 800076c:	e6ba      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000
 8000774:	42420060 	.word	0x42420060

08000778 <HAL_RCC_GetSysClockFreq>:
{
 8000778:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800077c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800077e:	ac02      	add	r4, sp, #8
 8000780:	f103 0510 	add.w	r5, r3, #16
 8000784:	4622      	mov	r2, r4
 8000786:	6818      	ldr	r0, [r3, #0]
 8000788:	6859      	ldr	r1, [r3, #4]
 800078a:	3308      	adds	r3, #8
 800078c:	c203      	stmia	r2!, {r0, r1}
 800078e:	42ab      	cmp	r3, r5
 8000790:	4614      	mov	r4, r2
 8000792:	d1f7      	bne.n	8000784 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000794:	2301      	movs	r3, #1
 8000796:	f88d 3004 	strb.w	r3, [sp, #4]
 800079a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800079c:	4911      	ldr	r1, [pc, #68]	; (80007e4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800079e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007a2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007a4:	f003 020c 	and.w	r2, r3, #12
 80007a8:	2a08      	cmp	r2, #8
 80007aa:	d117      	bne.n	80007dc <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007ac:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80007b0:	a806      	add	r0, sp, #24
 80007b2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007b4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007b6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007ba:	d50c      	bpl.n	80007d6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007bc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007be:	480a      	ldr	r0, [pc, #40]	; (80007e8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007c0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007c4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007c6:	aa06      	add	r2, sp, #24
 80007c8:	4413      	add	r3, r2
 80007ca:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007ce:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80007d2:	b007      	add	sp, #28
 80007d4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <HAL_RCC_GetSysClockFreq+0x74>)
 80007d8:	4350      	muls	r0, r2
 80007da:	e7fa      	b.n	80007d2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80007de:	e7f8      	b.n	80007d2 <HAL_RCC_GetSysClockFreq+0x5a>
 80007e0:	08002c54 	.word	0x08002c54
 80007e4:	40021000 	.word	0x40021000
 80007e8:	007a1200 	.word	0x007a1200
 80007ec:	003d0900 	.word	0x003d0900

080007f0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007f0:	4a54      	ldr	r2, [pc, #336]	; (8000944 <HAL_RCC_ClockConfig+0x154>)
{
 80007f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007f6:	6813      	ldr	r3, [r2, #0]
{
 80007f8:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	428b      	cmp	r3, r1
{
 8000800:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000802:	d32a      	bcc.n	800085a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000804:	6829      	ldr	r1, [r5, #0]
 8000806:	078c      	lsls	r4, r1, #30
 8000808:	d434      	bmi.n	8000874 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800080a:	07ca      	lsls	r2, r1, #31
 800080c:	d447      	bmi.n	800089e <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800080e:	4a4d      	ldr	r2, [pc, #308]	; (8000944 <HAL_RCC_ClockConfig+0x154>)
 8000810:	6813      	ldr	r3, [r2, #0]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	429e      	cmp	r6, r3
 8000818:	f0c0 8082 	bcc.w	8000920 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800081c:	682a      	ldr	r2, [r5, #0]
 800081e:	4c4a      	ldr	r4, [pc, #296]	; (8000948 <HAL_RCC_ClockConfig+0x158>)
 8000820:	f012 0f04 	tst.w	r2, #4
 8000824:	f040 8087 	bne.w	8000936 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000828:	0713      	lsls	r3, r2, #28
 800082a:	d506      	bpl.n	800083a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800082c:	6863      	ldr	r3, [r4, #4]
 800082e:	692a      	ldr	r2, [r5, #16]
 8000830:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000834:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000838:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800083a:	f7ff ff9d 	bl	8000778 <HAL_RCC_GetSysClockFreq>
 800083e:	6863      	ldr	r3, [r4, #4]
 8000840:	4a42      	ldr	r2, [pc, #264]	; (800094c <HAL_RCC_ClockConfig+0x15c>)
 8000842:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000846:	5cd3      	ldrb	r3, [r2, r3]
 8000848:	40d8      	lsrs	r0, r3
 800084a:	4b41      	ldr	r3, [pc, #260]	; (8000950 <HAL_RCC_ClockConfig+0x160>)
 800084c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff fc7c 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000854:	2000      	movs	r0, #0
}
 8000856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800085a:	6813      	ldr	r3, [r2, #0]
 800085c:	f023 0307 	bic.w	r3, r3, #7
 8000860:	430b      	orrs	r3, r1
 8000862:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000864:	6813      	ldr	r3, [r2, #0]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	4299      	cmp	r1, r3
 800086c:	d0ca      	beq.n	8000804 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800086e:	2001      	movs	r0, #1
 8000870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000874:	4b34      	ldr	r3, [pc, #208]	; (8000948 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000876:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800087a:	bf1e      	ittt	ne
 800087c:	685a      	ldrne	r2, [r3, #4]
 800087e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000882:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000884:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000886:	bf42      	ittt	mi
 8000888:	685a      	ldrmi	r2, [r3, #4]
 800088a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800088e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	68a8      	ldr	r0, [r5, #8]
 8000894:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000898:	4302      	orrs	r2, r0
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	e7b5      	b.n	800080a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800089e:	686a      	ldr	r2, [r5, #4]
 80008a0:	4c29      	ldr	r4, [pc, #164]	; (8000948 <HAL_RCC_ClockConfig+0x158>)
 80008a2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008a6:	d11c      	bne.n	80008e2 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008ac:	d0df      	beq.n	800086e <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008ae:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008b0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008b4:	f023 0303 	bic.w	r3, r3, #3
 80008b8:	4313      	orrs	r3, r2
 80008ba:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008bc:	f7ff fc88 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008c0:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008c2:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d114      	bne.n	80008f2 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008c8:	6863      	ldr	r3, [r4, #4]
 80008ca:	f003 030c 	and.w	r3, r3, #12
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	d09d      	beq.n	800080e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008d2:	f7ff fc7d 	bl	80001d0 <HAL_GetTick>
 80008d6:	1bc0      	subs	r0, r0, r7
 80008d8:	4540      	cmp	r0, r8
 80008da:	d9f5      	bls.n	80008c8 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80008dc:	2003      	movs	r0, #3
 80008de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008e2:	2a02      	cmp	r2, #2
 80008e4:	d102      	bne.n	80008ec <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80008e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80008ea:	e7df      	b.n	80008ac <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008ec:	f013 0f02 	tst.w	r3, #2
 80008f0:	e7dc      	b.n	80008ac <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d10f      	bne.n	8000916 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008f6:	6863      	ldr	r3, [r4, #4]
 80008f8:	f003 030c 	and.w	r3, r3, #12
 80008fc:	2b08      	cmp	r3, #8
 80008fe:	d086      	beq.n	800080e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000900:	f7ff fc66 	bl	80001d0 <HAL_GetTick>
 8000904:	1bc0      	subs	r0, r0, r7
 8000906:	4540      	cmp	r0, r8
 8000908:	d9f5      	bls.n	80008f6 <HAL_RCC_ClockConfig+0x106>
 800090a:	e7e7      	b.n	80008dc <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800090c:	f7ff fc60 	bl	80001d0 <HAL_GetTick>
 8000910:	1bc0      	subs	r0, r0, r7
 8000912:	4540      	cmp	r0, r8
 8000914:	d8e2      	bhi.n	80008dc <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000916:	6863      	ldr	r3, [r4, #4]
 8000918:	f013 0f0c 	tst.w	r3, #12
 800091c:	d1f6      	bne.n	800090c <HAL_RCC_ClockConfig+0x11c>
 800091e:	e776      	b.n	800080e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000920:	6813      	ldr	r3, [r2, #0]
 8000922:	f023 0307 	bic.w	r3, r3, #7
 8000926:	4333      	orrs	r3, r6
 8000928:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800092a:	6813      	ldr	r3, [r2, #0]
 800092c:	f003 0307 	and.w	r3, r3, #7
 8000930:	429e      	cmp	r6, r3
 8000932:	d19c      	bne.n	800086e <HAL_RCC_ClockConfig+0x7e>
 8000934:	e772      	b.n	800081c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000936:	6863      	ldr	r3, [r4, #4]
 8000938:	68e9      	ldr	r1, [r5, #12]
 800093a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800093e:	430b      	orrs	r3, r1
 8000940:	6063      	str	r3, [r4, #4]
 8000942:	e771      	b.n	8000828 <HAL_RCC_ClockConfig+0x38>
 8000944:	40022000 	.word	0x40022000
 8000948:	40021000 	.word	0x40021000
 800094c:	08002d1e 	.word	0x08002d1e
 8000950:	20000008 	.word	0x20000008

08000954 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000956:	4a05      	ldr	r2, [pc, #20]	; (800096c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800095e:	5cd3      	ldrb	r3, [r2, r3]
 8000960:	4a03      	ldr	r2, [pc, #12]	; (8000970 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000962:	6810      	ldr	r0, [r2, #0]
}    
 8000964:	40d8      	lsrs	r0, r3
 8000966:	4770      	bx	lr
 8000968:	40021000 	.word	0x40021000
 800096c:	08002d2e 	.word	0x08002d2e
 8000970:	20000008 	.word	0x20000008

08000974 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800097e:	5cd3      	ldrb	r3, [r2, r3]
 8000980:	4a03      	ldr	r2, [pc, #12]	; (8000990 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000982:	6810      	ldr	r0, [r2, #0]
} 
 8000984:	40d8      	lsrs	r0, r3
 8000986:	4770      	bx	lr
 8000988:	40021000 	.word	0x40021000
 800098c:	08002d2e 	.word	0x08002d2e
 8000990:	20000008 	.word	0x20000008

08000994 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000998:	4604      	mov	r4, r0
 800099a:	4688      	mov	r8, r1
 800099c:	4617      	mov	r7, r2
 800099e:	461d      	mov	r5, r3
 80009a0:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80009a2:	6822      	ldr	r2, [r4, #0]
 80009a4:	6893      	ldr	r3, [r2, #8]
 80009a6:	ea38 0303 	bics.w	r3, r8, r3
 80009aa:	bf0c      	ite	eq
 80009ac:	2301      	moveq	r3, #1
 80009ae:	2300      	movne	r3, #0
 80009b0:	429f      	cmp	r7, r3
 80009b2:	d102      	bne.n	80009ba <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80009b4:	2000      	movs	r0, #0
}
 80009b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80009ba:	1c6b      	adds	r3, r5, #1
 80009bc:	d0f2      	beq.n	80009a4 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80009be:	bb55      	cbnz	r5, 8000a16 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80009c0:	6823      	ldr	r3, [r4, #0]
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80009c8:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80009ca:	6862      	ldr	r2, [r4, #4]
 80009cc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80009d0:	d10a      	bne.n	80009e8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80009d2:	68a2      	ldr	r2, [r4, #8]
 80009d4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80009d8:	d002      	beq.n	80009e0 <SPI_WaitFlagStateUntilTimeout+0x4c>
 80009da:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80009de:	d103      	bne.n	80009e8 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80009e6:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80009e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009ea:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80009ee:	d109      	bne.n	8000a04 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80009f6:	0412      	lsls	r2, r2, #16
 80009f8:	0c12      	lsrs	r2, r2, #16
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000a02:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000a04:	2301      	movs	r3, #1
 8000a06:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000a16:	f7ff fbdb 	bl	80001d0 <HAL_GetTick>
 8000a1a:	1b80      	subs	r0, r0, r6
 8000a1c:	4285      	cmp	r5, r0
 8000a1e:	d8c0      	bhi.n	80009a2 <SPI_WaitFlagStateUntilTimeout+0xe>
 8000a20:	e7ce      	b.n	80009c0 <SPI_WaitFlagStateUntilTimeout+0x2c>

08000a22 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000a22:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000a24:	460b      	mov	r3, r1
 8000a26:	9200      	str	r2, [sp, #0]
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	2200      	movs	r2, #0
{
 8000a2c:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000a2e:	f7ff ffb1 	bl	8000994 <SPI_WaitFlagStateUntilTimeout>
 8000a32:	b120      	cbz	r0, 8000a3e <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8000a34:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000a36:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a38:	f043 0320 	orr.w	r3, r3, #32
 8000a3c:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd10      	pop	{r4, pc}

08000a42 <HAL_SPI_TransmitReceive>:
{
 8000a42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a46:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8000a48:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000a4c:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8000a4e:	2b01      	cmp	r3, #1
{
 8000a50:	4604      	mov	r4, r0
 8000a52:	460d      	mov	r5, r1
 8000a54:	4616      	mov	r6, r2
 8000a56:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8000a58:	f000 80ee 	beq.w	8000c38 <HAL_SPI_TransmitReceive+0x1f6>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000a62:	f7ff fbb5 	bl	80001d0 <HAL_GetTick>
  tmp  = hspi->State;
 8000a66:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8000a6a:	4680      	mov	r8, r0
  tmp  = hspi->State;
 8000a6c:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000a6e:	2b01      	cmp	r3, #1
  tmp1 = hspi->Init.Mode;
 8000a70:	6861      	ldr	r1, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000a72:	d00a      	beq.n	8000a8a <HAL_SPI_TransmitReceive+0x48>
 8000a74:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000a78:	f040 80dc 	bne.w	8000c34 <HAL_SPI_TransmitReceive+0x1f2>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000a7c:	68a2      	ldr	r2, [r4, #8]
 8000a7e:	2a00      	cmp	r2, #0
 8000a80:	f040 80d8 	bne.w	8000c34 <HAL_SPI_TransmitReceive+0x1f2>
 8000a84:	2b04      	cmp	r3, #4
 8000a86:	f040 80d5 	bne.w	8000c34 <HAL_SPI_TransmitReceive+0x1f2>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000a8a:	2d00      	cmp	r5, #0
 8000a8c:	d04e      	beq.n	8000b2c <HAL_SPI_TransmitReceive+0xea>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	d04c      	beq.n	8000b2c <HAL_SPI_TransmitReceive+0xea>
 8000a92:	f1b9 0f00 	cmp.w	r9, #0
 8000a96:	d049      	beq.n	8000b2c <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8000a98:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000a9c:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8000a9e:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000aa0:	bf04      	itt	eq
 8000aa2:	2305      	moveq	r3, #5
 8000aa4:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000aac:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000aae:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ab0:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000ab2:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000ab6:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000aba:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000abc:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ac0:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000ac2:	bf58      	it	pl
 8000ac4:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000ac6:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000ac8:	bf58      	it	pl
 8000aca:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000ace:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000ad2:	bf58      	it	pl
 8000ad4:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000ad6:	68e2      	ldr	r2, [r4, #12]
 8000ad8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000adc:	d15d      	bne.n	8000b9a <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000ade:	b119      	cbz	r1, 8000ae8 <HAL_SPI_TransmitReceive+0xa6>
 8000ae0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000ae2:	b292      	uxth	r2, r2
 8000ae4:	2a01      	cmp	r2, #1
 8000ae6:	d106      	bne.n	8000af6 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000ae8:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000aec:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000aee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000af0:	3b01      	subs	r3, #1
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000af6:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000afa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	b9bb      	cbnz	r3, 8000b30 <HAL_SPI_TransmitReceive+0xee>
 8000b00:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	b9a3      	cbnz	r3, 8000b30 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000b06:	f8cd 8000 	str.w	r8, [sp]
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2102      	movs	r1, #2
 8000b10:	4620      	mov	r0, r4
 8000b12:	f7ff ff3f 	bl	8000994 <SPI_WaitFlagStateUntilTimeout>
 8000b16:	2800      	cmp	r0, #0
 8000b18:	d135      	bne.n	8000b86 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000b1a:	4642      	mov	r2, r8
 8000b1c:	4639      	mov	r1, r7
 8000b1e:	4620      	mov	r0, r4
 8000b20:	f7ff ff7f 	bl	8000a22 <SPI_CheckFlag_BSY>
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d07a      	beq.n	8000c1e <HAL_SPI_TransmitReceive+0x1dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000b28:	2320      	movs	r3, #32
 8000b2a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	e02b      	b.n	8000b88 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000b30:	f1b9 0f00 	cmp.w	r9, #0
 8000b34:	d00f      	beq.n	8000b56 <HAL_SPI_TransmitReceive+0x114>
 8000b36:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	b163      	cbz	r3, 8000b56 <HAL_SPI_TransmitReceive+0x114>
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	689a      	ldr	r2, [r3, #8]
 8000b40:	0791      	lsls	r1, r2, #30
 8000b42:	d508      	bpl.n	8000b56 <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 8000b44:	f04f 0900 	mov.w	r9, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000b48:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000b4c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8000b4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000b50:	3b01      	subs	r3, #1
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000b56:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	b163      	cbz	r3, 8000b76 <HAL_SPI_TransmitReceive+0x134>
 8000b5c:	6823      	ldr	r3, [r4, #0]
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	07d2      	lsls	r2, r2, #31
 8000b62:	d508      	bpl.n	8000b76 <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 8000b64:	f04f 0901 	mov.w	r9, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8000b6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000b70:	3b01      	subs	r3, #1
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000b76:	1c78      	adds	r0, r7, #1
 8000b78:	d0bf      	beq.n	8000afa <HAL_SPI_TransmitReceive+0xb8>
 8000b7a:	f7ff fb29 	bl	80001d0 <HAL_GetTick>
 8000b7e:	eba0 0008 	sub.w	r0, r0, r8
 8000b82:	4287      	cmp	r7, r0
 8000b84:	d8b9      	bhi.n	8000afa <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8000b86:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000b94:	b005      	add	sp, #20
 8000b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000b9a:	b119      	cbz	r1, 8000ba4 <HAL_SPI_TransmitReceive+0x162>
 8000b9c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000b9e:	b292      	uxth	r2, r2
 8000ba0:	2a01      	cmp	r2, #1
 8000ba2:	d106      	bne.n	8000bb2 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8000ba4:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000ba8:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8000baa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000bac:	3b01      	subs	r3, #1
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000bb2:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000bb6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	b91b      	cbnz	r3, 8000bc4 <HAL_SPI_TransmitReceive+0x182>
 8000bbc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d0a0      	beq.n	8000b06 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000bc4:	f1b9 0f00 	cmp.w	r9, #0
 8000bc8:	d00f      	beq.n	8000bea <HAL_SPI_TransmitReceive+0x1a8>
 8000bca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	b163      	cbz	r3, 8000bea <HAL_SPI_TransmitReceive+0x1a8>
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	0791      	lsls	r1, r2, #30
 8000bd6:	d508      	bpl.n	8000bea <HAL_SPI_TransmitReceive+0x1a8>
        txallowed = 0U;
 8000bd8:	f04f 0900 	mov.w	r9, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8000bdc:	782a      	ldrb	r2, [r5, #0]
 8000bde:	3501      	adds	r5, #1
 8000be0:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000be2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000be4:	3b01      	subs	r3, #1
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000bea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	b16b      	cbz	r3, 8000c0c <HAL_SPI_TransmitReceive+0x1ca>
 8000bf0:	6823      	ldr	r3, [r4, #0]
 8000bf2:	689a      	ldr	r2, [r3, #8]
 8000bf4:	07d2      	lsls	r2, r2, #31
 8000bf6:	d509      	bpl.n	8000c0c <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8000bf8:	f04f 0901 	mov.w	r9, #1
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	3601      	adds	r6, #1
 8000c00:	f806 3c01 	strb.w	r3, [r6, #-1]
        hspi->RxXferCount--;
 8000c04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000c06:	3b01      	subs	r3, #1
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000c0c:	1c7b      	adds	r3, r7, #1
 8000c0e:	d0d2      	beq.n	8000bb6 <HAL_SPI_TransmitReceive+0x174>
 8000c10:	f7ff fade 	bl	80001d0 <HAL_GetTick>
 8000c14:	eba0 0008 	sub.w	r0, r0, r8
 8000c18:	4287      	cmp	r7, r0
 8000c1a:	d8cc      	bhi.n	8000bb6 <HAL_SPI_TransmitReceive+0x174>
 8000c1c:	e7b3      	b.n	8000b86 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000c1e:	68a3      	ldr	r3, [r4, #8]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1b1      	bne.n	8000b88 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	9003      	str	r0, [sp, #12]
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	9203      	str	r2, [sp, #12]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	9303      	str	r3, [sp, #12]
 8000c30:	9b03      	ldr	r3, [sp, #12]
 8000c32:	e7a9      	b.n	8000b88 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8000c34:	2002      	movs	r0, #2
 8000c36:	e7a7      	b.n	8000b88 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8000c38:	2002      	movs	r0, #2
 8000c3a:	e7ab      	b.n	8000b94 <HAL_SPI_TransmitReceive+0x152>

08000c3c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000c3c:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000c3e:	4604      	mov	r4, r0
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d034      	beq.n	8000cae <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000c48:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000c4c:	b90b      	cbnz	r3, 8000c52 <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000c4e:	f001 fbdd 	bl	800240c <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8000c52:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000c54:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000c56:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000c5a:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000c5c:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c62:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000c64:	6863      	ldr	r3, [r4, #4]
 8000c66:	69a2      	ldr	r2, [r4, #24]
 8000c68:	4303      	orrs	r3, r0
 8000c6a:	68e0      	ldr	r0, [r4, #12]
 8000c6c:	4303      	orrs	r3, r0
 8000c6e:	6920      	ldr	r0, [r4, #16]
 8000c70:	4303      	orrs	r3, r0
 8000c72:	6960      	ldr	r0, [r4, #20]
 8000c74:	4303      	orrs	r3, r0
 8000c76:	69e0      	ldr	r0, [r4, #28]
 8000c78:	4303      	orrs	r3, r0
 8000c7a:	6a20      	ldr	r0, [r4, #32]
 8000c7c:	4303      	orrs	r3, r0
 8000c7e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000c80:	4303      	orrs	r3, r0
 8000c82:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000c86:	4303      	orrs	r3, r0
 8000c88:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000c8a:	0c12      	lsrs	r2, r2, #16
 8000c8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c8e:	f002 0204 	and.w	r2, r2, #4
 8000c92:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000c94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000c96:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000c98:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000c9a:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000c9c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000c9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ca2:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8000ca4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000ca6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8000ca8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8000cac:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000cae:	2001      	movs	r0, #1
}
 8000cb0:	bd10      	pop	{r4, pc}
	...

08000cb4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000cb8:	6805      	ldr	r5, [r0, #0]
 8000cba:	68c2      	ldr	r2, [r0, #12]
 8000cbc:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000cbe:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000cc0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000cc8:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000cca:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ccc:	430b      	orrs	r3, r1
 8000cce:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000cd0:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000cd4:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000cd8:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000cde:	696b      	ldr	r3, [r5, #20]
 8000ce0:	6982      	ldr	r2, [r0, #24]
 8000ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000cea:	4b40      	ldr	r3, [pc, #256]	; (8000dec <UART_SetConfig+0x138>)
{
 8000cec:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000cee:	429d      	cmp	r5, r3
 8000cf0:	f04f 0419 	mov.w	r4, #25
 8000cf4:	d146      	bne.n	8000d84 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000cf6:	f7ff fe3d 	bl	8000974 <HAL_RCC_GetPCLK2Freq>
 8000cfa:	fb04 f300 	mul.w	r3, r4, r0
 8000cfe:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000d02:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000d06:	00b6      	lsls	r6, r6, #2
 8000d08:	fbb3 f3f6 	udiv	r3, r3, r6
 8000d0c:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d10:	011e      	lsls	r6, r3, #4
 8000d12:	f7ff fe2f 	bl	8000974 <HAL_RCC_GetPCLK2Freq>
 8000d16:	4360      	muls	r0, r4
 8000d18:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	fbb0 f7f3 	udiv	r7, r0, r3
 8000d22:	f7ff fe27 	bl	8000974 <HAL_RCC_GetPCLK2Freq>
 8000d26:	4360      	muls	r0, r4
 8000d28:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d32:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d36:	fb08 7313 	mls	r3, r8, r3, r7
 8000d3a:	011b      	lsls	r3, r3, #4
 8000d3c:	3332      	adds	r3, #50	; 0x32
 8000d3e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d42:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000d46:	f7ff fe15 	bl	8000974 <HAL_RCC_GetPCLK2Freq>
 8000d4a:	4360      	muls	r0, r4
 8000d4c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000d50:	0092      	lsls	r2, r2, #2
 8000d52:	fbb0 faf2 	udiv	sl, r0, r2
 8000d56:	f7ff fe0d 	bl	8000974 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000d5a:	4360      	muls	r0, r4
 8000d5c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d66:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d6a:	fb08 a313 	mls	r3, r8, r3, sl
 8000d6e:	011b      	lsls	r3, r3, #4
 8000d70:	3332      	adds	r3, #50	; 0x32
 8000d72:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	433b      	orrs	r3, r7
 8000d7c:	4433      	add	r3, r6
 8000d7e:	60ab      	str	r3, [r5, #8]
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	f7ff fde6 	bl	8000954 <HAL_RCC_GetPCLK1Freq>
 8000d88:	fb04 f300 	mul.w	r3, r4, r0
 8000d8c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000d90:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000d94:	00b6      	lsls	r6, r6, #2
 8000d96:	fbb3 f3f6 	udiv	r3, r3, r6
 8000d9a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d9e:	011e      	lsls	r6, r3, #4
 8000da0:	f7ff fdd8 	bl	8000954 <HAL_RCC_GetPCLK1Freq>
 8000da4:	4360      	muls	r0, r4
 8000da6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	fbb0 f7f3 	udiv	r7, r0, r3
 8000db0:	f7ff fdd0 	bl	8000954 <HAL_RCC_GetPCLK1Freq>
 8000db4:	4360      	muls	r0, r4
 8000db6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dc0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000dc4:	fb08 7313 	mls	r3, r8, r3, r7
 8000dc8:	011b      	lsls	r3, r3, #4
 8000dca:	3332      	adds	r3, #50	; 0x32
 8000dcc:	fbb3 f3f8 	udiv	r3, r3, r8
 8000dd0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000dd4:	f7ff fdbe 	bl	8000954 <HAL_RCC_GetPCLK1Freq>
 8000dd8:	4360      	muls	r0, r4
 8000dda:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	fbb0 faf2 	udiv	sl, r0, r2
 8000de4:	f7ff fdb6 	bl	8000954 <HAL_RCC_GetPCLK1Freq>
 8000de8:	e7b7      	b.n	8000d5a <UART_SetConfig+0xa6>
 8000dea:	bf00      	nop
 8000dec:	40013800 	.word	0x40013800

08000df0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	4604      	mov	r4, r0
 8000df4:	460e      	mov	r6, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000dfa:	6821      	ldr	r1, [r4, #0]
 8000dfc:	680b      	ldr	r3, [r1, #0]
 8000dfe:	ea36 0303 	bics.w	r3, r6, r3
 8000e02:	d101      	bne.n	8000e08 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000e04:	2000      	movs	r0, #0
}
 8000e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000e08:	1c6b      	adds	r3, r5, #1
 8000e0a:	d0f7      	beq.n	8000dfc <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000e0c:	b995      	cbnz	r5, 8000e34 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e0e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000e10:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000e18:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e1a:	695a      	ldr	r2, [r3, #20]
 8000e1c:	f022 0201 	bic.w	r2, r2, #1
 8000e20:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000e22:	2320      	movs	r3, #32
 8000e24:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000e28:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000e34:	f7ff f9cc 	bl	80001d0 <HAL_GetTick>
 8000e38:	1bc0      	subs	r0, r0, r7
 8000e3a:	4285      	cmp	r5, r0
 8000e3c:	d2dd      	bcs.n	8000dfa <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000e3e:	e7e6      	b.n	8000e0e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000e40 <HAL_UART_Init>:
{
 8000e40:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000e42:	4604      	mov	r4, r0
 8000e44:	b340      	cbz	r0, 8000e98 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000e46:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000e4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e4e:	b91b      	cbnz	r3, 8000e58 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000e50:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000e54:	f001 fb14 	bl	8002480 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000e58:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000e5a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000e5c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000e60:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000e62:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000e64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e68:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000e6a:	f7ff ff23 	bl	8000cb4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e6e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e70:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e72:	691a      	ldr	r2, [r3, #16]
 8000e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000e7a:	695a      	ldr	r2, [r3, #20]
 8000e7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000e80:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e88:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000e8a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e8c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000e8e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000e92:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000e96:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e98:	2001      	movs	r0, #1
}
 8000e9a:	bd10      	pop	{r4, pc}

08000e9c <HAL_UART_Transmit>:
{
 8000e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ea0:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000ea2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000ea6:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000ea8:	2b20      	cmp	r3, #32
{
 8000eaa:	460d      	mov	r5, r1
 8000eac:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000eae:	d14e      	bne.n	8000f4e <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000eb0:	2900      	cmp	r1, #0
 8000eb2:	d049      	beq.n	8000f48 <HAL_UART_Transmit+0xac>
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	d047      	beq.n	8000f48 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000eb8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d046      	beq.n	8000f4e <HAL_UART_Transmit+0xb2>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000eca:	2321      	movs	r3, #33	; 0x21
 8000ecc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000ed0:	f7ff f97e 	bl	80001d0 <HAL_GetTick>
 8000ed4:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000ed6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000eda:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000ede:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	b96b      	cbnz	r3, 8000f00 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4632      	mov	r2, r6
 8000ee8:	2140      	movs	r1, #64	; 0x40
 8000eea:	4620      	mov	r0, r4
 8000eec:	f7ff ff80 	bl	8000df0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000ef0:	b9a8      	cbnz	r0, 8000f1e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000ef2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000ef4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000ef8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000f00:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f02:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000f04:	3b01      	subs	r3, #1
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f0a:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f0c:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f12:	4620      	mov	r0, r4
 8000f14:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f16:	d10e      	bne.n	8000f36 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f18:	f7ff ff6a 	bl	8000df0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000f1c:	b110      	cbz	r0, 8000f24 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000f1e:	2003      	movs	r0, #3
 8000f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000f24:	882b      	ldrh	r3, [r5, #0]
 8000f26:	6822      	ldr	r2, [r4, #0]
 8000f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f2c:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000f2e:	6923      	ldr	r3, [r4, #16]
 8000f30:	b943      	cbnz	r3, 8000f44 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8000f32:	3502      	adds	r5, #2
 8000f34:	e7d3      	b.n	8000ede <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f36:	f7ff ff5b 	bl	8000df0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d1ef      	bne.n	8000f1e <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	782a      	ldrb	r2, [r5, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	3501      	adds	r5, #1
 8000f46:	e7ca      	b.n	8000ede <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000f48:	2001      	movs	r0, #1
 8000f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000f4e:	2002      	movs	r0, #2
}
 8000f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000f54 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <disk_status+0x10>)
 8000f56:	181a      	adds	r2, r3, r0
 8000f58:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	7a10      	ldrb	r0, [r2, #8]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	4718      	bx	r3
 8000f64:	20000060 	.word	0x20000060

08000f68 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <disk_initialize+0x1c>)
 8000f6a:	5c1a      	ldrb	r2, [r3, r0]
 8000f6c:	b942      	cbnz	r2, 8000f80 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8000f6e:	2201      	movs	r2, #1
 8000f70:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8000f72:	181a      	adds	r2, r3, r0
 8000f74:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	7a10      	ldrb	r0, [r2, #8]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4718      	bx	r3
  }
  return stat;
}
 8000f80:	2000      	movs	r0, #0
 8000f82:	4770      	bx	lr
 8000f84:	20000060 	.word	0x20000060

08000f88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8000f88:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8000f8a:	4c05      	ldr	r4, [pc, #20]	; (8000fa0 <disk_read+0x18>)
 8000f8c:	1825      	adds	r5, r4, r0
 8000f8e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8000f92:	6860      	ldr	r0, [r4, #4]
 8000f94:	6884      	ldr	r4, [r0, #8]
 8000f96:	7a28      	ldrb	r0, [r5, #8]
 8000f98:	46a4      	mov	ip, r4
  return res;
}
 8000f9a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8000f9c:	4760      	bx	ip
 8000f9e:	bf00      	nop
 8000fa0:	20000060 	.word	0x20000060

08000fa4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8000fa4:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8000fa6:	4c05      	ldr	r4, [pc, #20]	; (8000fbc <disk_write+0x18>)
 8000fa8:	1825      	adds	r5, r4, r0
 8000faa:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8000fae:	6860      	ldr	r0, [r4, #4]
 8000fb0:	68c4      	ldr	r4, [r0, #12]
 8000fb2:	7a28      	ldrb	r0, [r5, #8]
 8000fb4:	46a4      	mov	ip, r4
  return res;
}
 8000fb6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8000fb8:	4760      	bx	ip
 8000fba:	bf00      	nop
 8000fbc:	20000060 	.word	0x20000060

08000fc0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8000fc0:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <disk_ioctl+0x14>)
 8000fc4:	181c      	adds	r4, r3, r0
 8000fc6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	7a20      	ldrb	r0, [r4, #8]
 8000fce:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8000fd0:	bc10      	pop	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8000fd2:	4718      	bx	r3
 8000fd4:	20000060 	.word	0x20000060

08000fd8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8000fd8:	3801      	subs	r0, #1
 8000fda:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8000fdc:	4291      	cmp	r1, r2
 8000fde:	d100      	bne.n	8000fe2 <mem_cpy+0xa>
		*d++ = *s++;
}
 8000fe0:	4770      	bx	lr
		*d++ = *s++;
 8000fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000fe6:	f800 3f01 	strb.w	r3, [r0, #1]!
 8000fea:	e7f7      	b.n	8000fdc <mem_cpy+0x4>

08000fec <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8000fec:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8000fee:	4290      	cmp	r0, r2
 8000ff0:	d100      	bne.n	8000ff4 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 8000ff2:	4770      	bx	lr
		*d++ = (BYTE)val;
 8000ff4:	f800 1b01 	strb.w	r1, [r0], #1
 8000ff8:	e7f9      	b.n	8000fee <mem_set+0x2>
	...

08000ffc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8000ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8000ffe:	2400      	movs	r4, #0
 8001000:	4a16      	ldr	r2, [pc, #88]	; (800105c <chk_lock+0x60>)
 8001002:	4623      	mov	r3, r4
 8001004:	4616      	mov	r6, r2
		if (Files[i].fs) {	/* Existing entry */
 8001006:	6815      	ldr	r5, [r2, #0]
 8001008:	b1c5      	cbz	r5, 800103c <chk_lock+0x40>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800100a:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 800100e:	42bd      	cmp	r5, r7
 8001010:	d115      	bne.n	800103e <chk_lock+0x42>
 8001012:	6857      	ldr	r7, [r2, #4]
 8001014:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8001018:	42af      	cmp	r7, r5
 800101a:	d110      	bne.n	800103e <chk_lock+0x42>
				Files[i].clu == dp->sclust &&
 800101c:	8917      	ldrh	r7, [r2, #8]
 800101e:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8001022:	42af      	cmp	r7, r5
 8001024:	d10b      	bne.n	800103e <chk_lock+0x42>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001026:	b9b9      	cbnz	r1, 8001058 <chk_lock+0x5c>
 8001028:	220c      	movs	r2, #12
 800102a:	fb02 6303 	mla	r3, r2, r3, r6
 800102e:	895b      	ldrh	r3, [r3, #10]
 8001030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001034:	bf14      	ite	ne
 8001036:	2000      	movne	r0, #0
 8001038:	2010      	moveq	r0, #16
 800103a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 800103c:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 800103e:	3301      	adds	r3, #1
 8001040:	2b02      	cmp	r3, #2
 8001042:	f102 020c 	add.w	r2, r2, #12
 8001046:	d1de      	bne.n	8001006 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8001048:	b10c      	cbz	r4, 800104e <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800104a:	2000      	movs	r0, #0
 800104c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800104e:	2902      	cmp	r1, #2
 8001050:	bf0c      	ite	eq
 8001052:	2000      	moveq	r0, #0
 8001054:	2012      	movne	r0, #18
 8001056:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001058:	2010      	movs	r0, #16
 800105a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800105c:	20000044 	.word	0x20000044

08001060 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001062:	4c20      	ldr	r4, [pc, #128]	; (80010e4 <inc_lock+0x84>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001064:	2300      	movs	r3, #0
 8001066:	4622      	mov	r2, r4
		if (Files[i].fs == dp->fs &&
 8001068:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
 800106c:	6825      	ldr	r5, [r4, #0]
 800106e:	42b5      	cmp	r5, r6
 8001070:	d109      	bne.n	8001086 <inc_lock+0x26>
 8001072:	6867      	ldr	r7, [r4, #4]
 8001074:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8001078:	42af      	cmp	r7, r5
 800107a:	d104      	bne.n	8001086 <inc_lock+0x26>
			Files[i].clu == dp->sclust &&
 800107c:	8927      	ldrh	r7, [r4, #8]
 800107e:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8001082:	42af      	cmp	r7, r5
 8001084:	d022      	beq.n	80010cc <inc_lock+0x6c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001086:	3301      	adds	r3, #1
 8001088:	2b02      	cmp	r3, #2
 800108a:	f104 040c 	add.w	r4, r4, #12
 800108e:	d1ed      	bne.n	800106c <inc_lock+0xc>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001090:	6813      	ldr	r3, [r2, #0]
 8001092:	b113      	cbz	r3, 800109a <inc_lock+0x3a>
 8001094:	68d3      	ldr	r3, [r2, #12]
 8001096:	bb1b      	cbnz	r3, 80010e0 <inc_lock+0x80>
 8001098:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 800109a:	240c      	movs	r4, #12
 800109c:	435c      	muls	r4, r3
 800109e:	1915      	adds	r5, r2, r4
 80010a0:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 80010a2:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 80010a6:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
		Files[i].clu = dp->sclust;
 80010aa:	606c      	str	r4, [r5, #4]
		Files[i].idx = dp->index;
 80010ac:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 80010ae:	2000      	movs	r0, #0
 80010b0:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80010b2:	b991      	cbnz	r1, 80010da <inc_lock+0x7a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80010b4:	210c      	movs	r1, #12
 80010b6:	fb01 2103 	mla	r1, r1, r3, r2
 80010ba:	8949      	ldrh	r1, [r1, #10]
 80010bc:	3101      	adds	r1, #1
 80010be:	b289      	uxth	r1, r1
 80010c0:	200c      	movs	r0, #12
 80010c2:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 80010c6:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80010c8:	8151      	strh	r1, [r2, #10]
	return i + 1;
 80010ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80010cc:	2900      	cmp	r1, #0
 80010ce:	d0f1      	beq.n	80010b4 <inc_lock+0x54>
 80010d0:	210c      	movs	r1, #12
 80010d2:	fb01 2103 	mla	r1, r1, r3, r2
 80010d6:	8949      	ldrh	r1, [r1, #10]
 80010d8:	b911      	cbnz	r1, 80010e0 <inc_lock+0x80>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80010da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010de:	e7ef      	b.n	80010c0 <inc_lock+0x60>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80010e0:	2000      	movs	r0, #0
 80010e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010e4:	20000044 	.word	0x20000044

080010e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80010e8:	b530      	push	{r4, r5, lr}
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80010ea:	1e45      	subs	r5, r0, #1
 80010ec:	2d01      	cmp	r5, #1
 80010ee:	d811      	bhi.n	8001114 <dec_lock+0x2c>
		n = Files[i].ctr;
 80010f0:	220c      	movs	r2, #12
 80010f2:	490a      	ldr	r1, [pc, #40]	; (800111c <dec_lock+0x34>)
 80010f4:	fb02 1305 	mla	r3, r2, r5, r1
 80010f8:	895c      	ldrh	r4, [r3, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n) n--;					/* Decrement read mode open count */
 80010fa:	f424 7380 	bic.w	r3, r4, #256	; 0x100
 80010fe:	b298      	uxth	r0, r3
 8001100:	b108      	cbz	r0, 8001106 <dec_lock+0x1e>
 8001102:	3c01      	subs	r4, #1
 8001104:	b2a0      	uxth	r0, r4
		Files[i].ctr = n;
 8001106:	fb02 f305 	mul.w	r3, r2, r5
 800110a:	18ca      	adds	r2, r1, r3
 800110c:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800110e:	b918      	cbnz	r0, 8001118 <dec_lock+0x30>
 8001110:	50c8      	str	r0, [r1, r3]
 8001112:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8001114:	2002      	movs	r0, #2
 8001116:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
 8001118:	2000      	movs	r0, #0
	}
	return res;
}
 800111a:	bd30      	pop	{r4, r5, pc}
 800111c:	20000044 	.word	0x20000044

08001120 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8001120:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
 8001124:	0a49      	lsrs	r1, r1, #9
 8001126:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800112a:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800112e:	fbb1 f1f2 	udiv	r1, r1, r2
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8001132:	3304      	adds	r3, #4
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8001134:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 8001136:	b130      	cbz	r0, 8001146 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8001138:	4281      	cmp	r1, r0
 800113a:	d302      	bcc.n	8001142 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 800113c:	1a09      	subs	r1, r1, r0
 800113e:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8001140:	e7f8      	b.n	8001134 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8001142:	6858      	ldr	r0, [r3, #4]
 8001144:	4408      	add	r0, r1
}
 8001146:	4770      	bx	lr

08001148 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8001148:	6802      	ldr	r2, [r0, #0]
{
 800114a:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 800114c:	b152      	cbz	r2, 8001164 <get_ldnumber+0x1c>
 800114e:	4611      	mov	r1, r2
 8001150:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8001152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001156:	2c20      	cmp	r4, #32
 8001158:	d90c      	bls.n	8001174 <get_ldnumber+0x2c>
 800115a:	2c3a      	cmp	r4, #58	; 0x3a
 800115c:	d1f8      	bne.n	8001150 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 800115e:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8001160:	428b      	cmp	r3, r1
 8001162:	d002      	beq.n	800116a <get_ldnumber+0x22>
	int vol = -1;
 8001164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8001168:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800116a:	7812      	ldrb	r2, [r2, #0]
 800116c:	2a30      	cmp	r2, #48	; 0x30
 800116e:	d1f9      	bne.n	8001164 <get_ldnumber+0x1c>
					*path = ++tt;
 8001170:	3301      	adds	r3, #1
 8001172:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8001174:	2000      	movs	r0, #0
 8001176:	bd10      	pop	{r4, pc}

08001178 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8001178:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800117a:	b190      	cbz	r0, 80011a2 <validate+0x2a>
 800117c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8001180:	b17b      	cbz	r3, 80011a2 <validate+0x2a>
 8001182:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 8001186:	b162      	cbz	r2, 80011a2 <validate+0x2a>
 8001188:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 800118c:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 8001190:	4291      	cmp	r1, r2
 8001192:	d106      	bne.n	80011a2 <validate+0x2a>
 8001194:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8001198:	f7ff fedc 	bl	8000f54 <disk_status>
 800119c:	f010 0001 	ands.w	r0, r0, #1
 80011a0:	d000      	beq.n	80011a4 <validate+0x2c>
		return FR_INVALID_OBJECT;
 80011a2:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 80011a4:	bd08      	pop	{r3, pc}

080011a6 <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 80011a6:	7eca      	ldrb	r2, [r1, #27]
 80011a8:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 80011aa:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 80011ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80011b0:	bf01      	itttt	eq
 80011b2:	7d48      	ldrbeq	r0, [r1, #21]
 80011b4:	7d0a      	ldrbeq	r2, [r1, #20]
 80011b6:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 80011ba:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 80011be:	4618      	mov	r0, r3
 80011c0:	4770      	bx	lr

080011c2 <sync_window.part.2>:
FRESULT sync_window (
 80011c2:	b570      	push	{r4, r5, r6, lr}
		wsect = fs->winsect;	/* Current sector number */
 80011c4:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
FRESULT sync_window (
 80011c8:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80011ca:	4601      	mov	r1, r0
 80011cc:	2301      	movs	r3, #1
 80011ce:	462a      	mov	r2, r5
 80011d0:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80011d4:	f7ff fee6 	bl	8000fa4 <disk_write>
 80011d8:	b9d0      	cbnz	r0, 8001210 <sync_window.part.2+0x4e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80011da:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 80011de:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 80011e2:	1aeb      	subs	r3, r5, r3
 80011e4:	4293      	cmp	r3, r2
			fs->wflag = 0;
 80011e6:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80011ea:	d301      	bcc.n	80011f0 <sync_window.part.2+0x2e>
	FRESULT res = FR_OK;
 80011ec:	2000      	movs	r0, #0
 80011ee:	bd70      	pop	{r4, r5, r6, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80011f0:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 80011f4:	2e01      	cmp	r6, #1
 80011f6:	d9f9      	bls.n	80011ec <sync_window.part.2+0x2a>
					wsect += fs->fsize;
 80011f8:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80011fc:	4621      	mov	r1, r4
					wsect += fs->fsize;
 80011fe:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8001200:	462a      	mov	r2, r5
 8001202:	2301      	movs	r3, #1
 8001204:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8001208:	f7ff fecc 	bl	8000fa4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800120c:	3e01      	subs	r6, #1
 800120e:	e7f1      	b.n	80011f4 <sync_window.part.2+0x32>
			res = FR_DISK_ERR;
 8001210:	2001      	movs	r0, #1
}
 8001212:	bd70      	pop	{r4, r5, r6, pc}

08001214 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8001214:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8001218:	b10b      	cbz	r3, 800121e <sync_window+0xa>
 800121a:	f7ff bfd2 	b.w	80011c2 <sync_window.part.2>
}
 800121e:	4618      	mov	r0, r3
 8001220:	4770      	bx	lr

08001222 <sync_fs>:
{
 8001222:	b538      	push	{r3, r4, r5, lr}
 8001224:	4604      	mov	r4, r0
	res = sync_window(fs);
 8001226:	f7ff fff5 	bl	8001214 <sync_window>
 800122a:	4605      	mov	r5, r0
	if (res == FR_OK) {
 800122c:	2800      	cmp	r0, #0
 800122e:	d154      	bne.n	80012da <sync_fs+0xb8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8001230:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8001234:	2b03      	cmp	r3, #3
 8001236:	d147      	bne.n	80012c8 <sync_fs+0xa6>
 8001238:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 800123c:	2b01      	cmp	r3, #1
 800123e:	d143      	bne.n	80012c8 <sync_fs+0xa6>
			mem_set(fs->win.d8, 0, SS(fs));
 8001240:	4601      	mov	r1, r0
 8001242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff fed0 	bl	8000fec <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800124c:	2255      	movs	r2, #85	; 0x55
 800124e:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
 8001252:	22aa      	movs	r2, #170	; 0xaa
 8001254:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8001258:	2252      	movs	r2, #82	; 0x52
 800125a:	7022      	strb	r2, [r4, #0]
 800125c:	7062      	strb	r2, [r4, #1]
 800125e:	2261      	movs	r2, #97	; 0x61
 8001260:	2141      	movs	r1, #65	; 0x41
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8001262:	2072      	movs	r0, #114	; 0x72
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8001264:	70a2      	strb	r2, [r4, #2]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8001266:	f884 21e7 	strb.w	r2, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800126a:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800126e:	70e1      	strb	r1, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8001270:	f884 11e6 	strb.w	r1, [r4, #486]	; 0x1e6
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8001274:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001278:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
 800127c:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 8001280:	0c11      	lsrs	r1, r2, #16
 8001282:	0e12      	lsrs	r2, r2, #24
 8001284:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8001288:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800128c:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8001290:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001294:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 8001298:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 800129c:	0c11      	lsrs	r1, r2, #16
 800129e:	0e12      	lsrs	r2, r2, #24
 80012a0:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 80012a4:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80012a8:	f884 01e4 	strb.w	r0, [r4, #484]	; 0x1e4
			fs->winsect = fs->volbase + 1;
 80012ac:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80012ae:	f884 01e5 	strb.w	r0, [r4, #485]	; 0x1e5
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80012b2:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
			fs->winsect = fs->volbase + 1;
 80012b6:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80012ba:	4621      	mov	r1, r4
 80012bc:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80012c0:	f7ff fe70 	bl	8000fa4 <disk_write>
			fs->fsi_flag = 0;
 80012c4:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80012c8:	2200      	movs	r2, #0
 80012ca:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80012ce:	4611      	mov	r1, r2
 80012d0:	f7ff fe76 	bl	8000fc0 <disk_ioctl>
 80012d4:	3000      	adds	r0, #0
 80012d6:	bf18      	it	ne
 80012d8:	2001      	movne	r0, #1
}
 80012da:	bd38      	pop	{r3, r4, r5, pc}

080012dc <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 80012dc:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
{
 80012e0:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 80012e2:	428b      	cmp	r3, r1
{
 80012e4:	4606      	mov	r6, r0
 80012e6:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80012e8:	d013      	beq.n	8001312 <move_window+0x36>
		res = sync_window(fs);		/* Write-back changes */
 80012ea:	f7ff ff93 	bl	8001214 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80012ee:	4604      	mov	r4, r0
 80012f0:	b968      	cbnz	r0, 800130e <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80012f2:	462a      	mov	r2, r5
 80012f4:	2301      	movs	r3, #1
 80012f6:	4631      	mov	r1, r6
 80012f8:	f896 0201 	ldrb.w	r0, [r6, #513]	; 0x201
 80012fc:	f7ff fe44 	bl	8000f88 <disk_read>
 8001300:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8001302:	bf1c      	itt	ne
 8001304:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8001308:	2401      	movne	r4, #1
			fs->winsect = sector;
 800130a:	f8c6 522c 	str.w	r5, [r6, #556]	; 0x22c
}
 800130e:	4620      	mov	r0, r4
 8001310:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8001312:	2400      	movs	r4, #0
 8001314:	e7fb      	b.n	800130e <move_window+0x32>
	...

08001318 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8001318:	2300      	movs	r3, #0
{
 800131a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800131c:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 8001320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001324:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
{
 8001328:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800132a:	f7ff ffd7 	bl	80012dc <move_window>
 800132e:	b9c0      	cbnz	r0, 8001362 <check_fs+0x4a>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8001330:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8001334:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8001338:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800133c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8001340:	4293      	cmp	r3, r2
 8001342:	d110      	bne.n	8001366 <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8001344:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8001348:	4a08      	ldr	r2, [pc, #32]	; (800136c <check_fs+0x54>)
 800134a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800134e:	4293      	cmp	r3, r2
 8001350:	d00a      	beq.n	8001368 <check_fs+0x50>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8001352:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8001356:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 800135a:	1a80      	subs	r0, r0, r2
 800135c:	bf18      	it	ne
 800135e:	2001      	movne	r0, #1
 8001360:	bd10      	pop	{r4, pc}
 8001362:	2003      	movs	r0, #3
 8001364:	bd10      	pop	{r4, pc}
		return 2;
 8001366:	2002      	movs	r0, #2
}
 8001368:	bd10      	pop	{r4, pc}
 800136a:	bf00      	nop
 800136c:	00544146 	.word	0x00544146

08001370 <find_volume>:
	*rfs = 0;
 8001370:	2300      	movs	r3, #0
{
 8001372:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 8001374:	6003      	str	r3, [r0, #0]
{
 8001376:	b085      	sub	sp, #20
 8001378:	4607      	mov	r7, r0
	vol = get_ldnumber(path);
 800137a:	4608      	mov	r0, r1
{
 800137c:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800137e:	f7ff fee3 	bl	8001148 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8001382:	1e06      	subs	r6, r0, #0
 8001384:	f2c0 8120 	blt.w	80015c8 <find_volume+0x258>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8001388:	4b93      	ldr	r3, [pc, #588]	; (80015d8 <find_volume+0x268>)
 800138a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800138e:	2c00      	cmp	r4, #0
 8001390:	f000 811c 	beq.w	80015cc <find_volume+0x25c>
	*rfs = fs;							/* Return pointer to the file system object */
 8001394:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8001396:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800139a:	b173      	cbz	r3, 80013ba <find_volume+0x4a>
		stat = disk_status(fs->drv);
 800139c:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80013a0:	f7ff fdd8 	bl	8000f54 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80013a4:	07c7      	lsls	r7, r0, #31
 80013a6:	d408      	bmi.n	80013ba <find_volume+0x4a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80013a8:	2d00      	cmp	r5, #0
 80013aa:	f000 8111 	beq.w	80015d0 <find_volume+0x260>
 80013ae:	f010 0004 	ands.w	r0, r0, #4
 80013b2:	d000      	beq.n	80013b6 <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 80013b4:	200a      	movs	r0, #10
}
 80013b6:	b005      	add	sp, #20
 80013b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80013ba:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80013bc:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80013be:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80013c2:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80013c6:	f7ff fdcf 	bl	8000f68 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80013ca:	07c1      	lsls	r1, r0, #31
 80013cc:	f100 8102 	bmi.w	80015d4 <find_volume+0x264>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80013d0:	b10d      	cbz	r5, 80013d6 <find_volume+0x66>
 80013d2:	0742      	lsls	r2, r0, #29
 80013d4:	d4ee      	bmi.n	80013b4 <find_volume+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80013d6:	2100      	movs	r1, #0
 80013d8:	4620      	mov	r0, r4
 80013da:	f7ff ff9d 	bl	8001318 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80013de:	2801      	cmp	r0, #1
 80013e0:	f040 80d9 	bne.w	8001596 <find_volume+0x226>
 80013e4:	2200      	movs	r2, #0
 80013e6:	f504 71e3 	add.w	r1, r4, #454	; 0x1c6
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80013ea:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80013ee:	b103      	cbz	r3, 80013f2 <find_volume+0x82>
 80013f0:	680b      	ldr	r3, [r1, #0]
 80013f2:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80013f6:	3201      	adds	r2, #1
 80013f8:	2a04      	cmp	r2, #4
 80013fa:	f101 0110 	add.w	r1, r1, #16
 80013fe:	d1f4      	bne.n	80013ea <find_volume+0x7a>
 8001400:	2600      	movs	r6, #0
			bsect = br[i];
 8001402:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8001406:	2d00      	cmp	r5, #0
 8001408:	f000 80bc 	beq.w	8001584 <find_volume+0x214>
 800140c:	4629      	mov	r1, r5
 800140e:	4620      	mov	r0, r4
 8001410:	f7ff ff82 	bl	8001318 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8001414:	2800      	cmp	r0, #0
 8001416:	f040 80b6 	bne.w	8001586 <find_volume+0x216>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800141a:	7b22      	ldrb	r2, [r4, #12]
 800141c:	7ae3      	ldrb	r3, [r4, #11]
 800141e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001426:	f040 80b9 	bne.w	800159c <find_volume+0x22c>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800142a:	7de3      	ldrb	r3, [r4, #23]
 800142c:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800142e:	7c20      	ldrb	r0, [r4, #16]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8001430:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
 8001434:	bf08      	it	eq
 8001436:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8001438:	1e43      	subs	r3, r0, #1
 800143a:	2b01      	cmp	r3, #1
	fs->fsize = fasize;
 800143c:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8001440:	f884 0203 	strb.w	r0, [r4, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8001444:	f200 80aa 	bhi.w	800159c <find_volume+0x22c>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8001448:	7b66      	ldrb	r6, [r4, #13]
 800144a:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800144e:	2e00      	cmp	r6, #0
 8001450:	f000 80a4 	beq.w	800159c <find_volume+0x22c>
 8001454:	1e73      	subs	r3, r6, #1
 8001456:	4233      	tst	r3, r6
 8001458:	f040 80a0 	bne.w	800159c <find_volume+0x22c>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800145c:	7ca3      	ldrb	r3, [r4, #18]
 800145e:	7c67      	ldrb	r7, [r4, #17]
 8001460:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8001464:	073b      	lsls	r3, r7, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8001466:	f8a4 7208 	strh.w	r7, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800146a:	f040 8097 	bne.w	800159c <find_volume+0x22c>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800146e:	7d22      	ldrb	r2, [r4, #20]
 8001470:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8001472:	f894 e00f 	ldrb.w	lr, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8001476:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800147a:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800147c:	bf08      	it	eq
 800147e:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8001480:	ea52 220e 	orrs.w	r2, r2, lr, lsl #8
 8001484:	f000 808a 	beq.w	800159c <find_volume+0x22c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8001488:	fb01 fe00 	mul.w	lr, r1, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800148c:	eb02 1017 	add.w	r0, r2, r7, lsr #4
 8001490:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8001492:	4283      	cmp	r3, r0
 8001494:	f0c0 8082 	bcc.w	800159c <find_volume+0x22c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8001498:	1a1b      	subs	r3, r3, r0
 800149a:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d07c      	beq.n	800159c <find_volume+0x22c>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80014a2:	f640 76f5 	movw	r6, #4085	; 0xff5
 80014a6:	42b3      	cmp	r3, r6
 80014a8:	d97c      	bls.n	80015a4 <find_volume+0x234>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80014aa:	f64f 76f5 	movw	r6, #65525	; 0xfff5
 80014ae:	42b3      	cmp	r3, r6
 80014b0:	bf94      	ite	ls
 80014b2:	2602      	movls	r6, #2
 80014b4:	2603      	movhi	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80014b6:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80014b8:	442a      	add	r2, r5
	fs->database = bsect + sysect;						/* Data start sector */
 80014ba:	4428      	add	r0, r5
	if (fmt == FS_FAT32) {
 80014bc:	2e03      	cmp	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80014be:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 80014c2:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80014c6:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80014ca:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 80014ce:	d16b      	bne.n	80015a8 <find_volume+0x238>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80014d0:	2f00      	cmp	r7, #0
 80014d2:	d163      	bne.n	800159c <find_volume+0x22c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80014d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80014d6:	009b      	lsls	r3, r3, #2
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80014d8:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80014dc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80014e0:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 80014e4:	d35a      	bcc.n	800159c <find_volume+0x22c>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ea:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 80014ee:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	fs->fsi_flag = 0x80;
 80014f2:	2380      	movs	r3, #128	; 0x80
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80014f4:	2e03      	cmp	r6, #3
	fs->fsi_flag = 0x80;
 80014f6:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80014fa:	d12d      	bne.n	8001558 <find_volume+0x1e8>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80014fc:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8001500:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001504:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001508:	2b01      	cmp	r3, #1
 800150a:	d125      	bne.n	8001558 <find_volume+0x1e8>
		&& move_window(fs, bsect + 1) == FR_OK)
 800150c:	1c69      	adds	r1, r5, #1
 800150e:	4620      	mov	r0, r4
 8001510:	f7ff fee4 	bl	80012dc <move_window>
 8001514:	bb00      	cbnz	r0, 8001558 <find_volume+0x1e8>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8001516:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 800151a:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 800151e:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8001522:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001526:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800152a:	4293      	cmp	r3, r2
 800152c:	d114      	bne.n	8001558 <find_volume+0x1e8>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800152e:	6822      	ldr	r2, [r4, #0]
 8001530:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <find_volume+0x26c>)
 8001532:	429a      	cmp	r2, r3
 8001534:	d110      	bne.n	8001558 <find_volume+0x1e8>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8001536:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 800153a:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 800153e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001542:	3320      	adds	r3, #32
 8001544:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8001546:	bf01      	itttt	eq
 8001548:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 800154c:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8001550:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 8001554:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 8001558:	4a21      	ldr	r2, [pc, #132]	; (80015e0 <find_volume+0x270>)
	fs->fs_type = fmt;	/* FAT sub-type */
 800155a:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800155e:	8813      	ldrh	r3, [r2, #0]
 8001560:	2000      	movs	r0, #0
 8001562:	3301      	adds	r3, #1
 8001564:	b29b      	uxth	r3, r3
 8001566:	8013      	strh	r3, [r2, #0]
 8001568:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <find_volume+0x274>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4294      	cmp	r4, r2
 8001572:	bf04      	itt	eq
 8001574:	2200      	moveq	r2, #0
 8001576:	601a      	streq	r2, [r3, #0]
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	4294      	cmp	r4, r2
 800157c:	f47f af1b 	bne.w	80013b6 <find_volume+0x46>
 8001580:	60d8      	str	r0, [r3, #12]
 8001582:	e718      	b.n	80013b6 <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8001584:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8001586:	3601      	adds	r6, #1
 8001588:	2e04      	cmp	r6, #4
 800158a:	f47f af3a 	bne.w	8001402 <find_volume+0x92>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800158e:	2803      	cmp	r0, #3
 8001590:	d104      	bne.n	800159c <find_volume+0x22c>
 8001592:	2001      	movs	r0, #1
 8001594:	e70f      	b.n	80013b6 <find_volume+0x46>
 8001596:	2803      	cmp	r0, #3
 8001598:	d0fb      	beq.n	8001592 <find_volume+0x222>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800159a:	b108      	cbz	r0, 80015a0 <find_volume+0x230>
 800159c:	200d      	movs	r0, #13
 800159e:	e70a      	b.n	80013b6 <find_volume+0x46>
	bsect = 0;
 80015a0:	4605      	mov	r5, r0
 80015a2:	e73a      	b.n	800141a <find_volume+0xaa>
	fmt = FS_FAT12;
 80015a4:	2601      	movs	r6, #1
 80015a6:	e786      	b.n	80014b6 <find_volume+0x146>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80015a8:	2f00      	cmp	r7, #0
 80015aa:	d0f7      	beq.n	800159c <find_volume+0x22c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80015ac:	4472      	add	r2, lr
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80015ae:	2e02      	cmp	r6, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80015b0:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 80015b4:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80015b8:	bf1b      	ittet	ne
 80015ba:	18d2      	addne	r2, r2, r3
 80015bc:	f003 0301 	andne.w	r3, r3, #1
 80015c0:	4613      	moveq	r3, r2
 80015c2:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 80015c6:	e789      	b.n	80014dc <find_volume+0x16c>
	if (vol < 0) return FR_INVALID_DRIVE;
 80015c8:	200b      	movs	r0, #11
 80015ca:	e6f4      	b.n	80013b6 <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80015cc:	200c      	movs	r0, #12
 80015ce:	e6f2      	b.n	80013b6 <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 80015d0:	4628      	mov	r0, r5
 80015d2:	e6f0      	b.n	80013b6 <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80015d4:	2003      	movs	r0, #3
 80015d6:	e6ee      	b.n	80013b6 <find_volume+0x46>
 80015d8:	20000040 	.word	0x20000040
 80015dc:	41615252 	.word	0x41615252
 80015e0:	2000005c 	.word	0x2000005c
 80015e4:	20000044 	.word	0x20000044

080015e8 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80015e8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	clst -= 2;
 80015ec:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80015ee:	3b02      	subs	r3, #2
 80015f0:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 80015f2:	bf3d      	ittte	cc
 80015f4:	f890 3202 	ldrbcc.w	r3, [r0, #514]	; 0x202
 80015f8:	f8d0 0228 	ldrcc.w	r0, [r0, #552]	; 0x228
 80015fc:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001600:	2000      	movcs	r0, #0
}
 8001602:	4770      	bx	lr

08001604 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001604:	2901      	cmp	r1, #1
{
 8001606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001608:	4606      	mov	r6, r0
 800160a:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800160c:	d959      	bls.n	80016c2 <get_fat+0xbe>
 800160e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001612:	4299      	cmp	r1, r3
 8001614:	d255      	bcs.n	80016c2 <get_fat+0xbe>
		switch (fs->fs_type) {
 8001616:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 800161a:	2b02      	cmp	r3, #2
 800161c:	d027      	beq.n	800166e <get_fat+0x6a>
 800161e:	2b03      	cmp	r3, #3
 8001620:	d036      	beq.n	8001690 <get_fat+0x8c>
 8001622:	2b01      	cmp	r3, #1
 8001624:	d14d      	bne.n	80016c2 <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 8001626:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800162a:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800162e:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 8001632:	f7ff fe53 	bl	80012dc <move_window>
 8001636:	b110      	cbz	r0, 800163e <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8001638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800163c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800163e:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 8001642:	1c67      	adds	r7, r4, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001644:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win.d8[bc++ % SS(fs)];
 8001648:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800164c:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 800164e:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001650:	f7ff fe44 	bl	80012dc <move_window>
 8001654:	2800      	cmp	r0, #0
 8001656:	d1ef      	bne.n	8001638 <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8001658:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800165c:	5df0      	ldrb	r0, [r6, r7]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800165e:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8001660:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8001664:	bf4c      	ite	mi
 8001666:	0900      	lsrmi	r0, r0, #4
 8001668:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800166c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800166e:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8001672:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8001676:	f7ff fe31 	bl	80012dc <move_window>
 800167a:	2800      	cmp	r0, #0
 800167c:	d1dc      	bne.n	8001638 <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800167e:	006d      	lsls	r5, r5, #1
 8001680:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 8001684:	1973      	adds	r3, r6, r5
 8001686:	785b      	ldrb	r3, [r3, #1]
 8001688:	5d70      	ldrb	r0, [r6, r5]
 800168a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800168e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001690:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8001694:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8001698:	f7ff fe20 	bl	80012dc <move_window>
 800169c:	2800      	cmp	r0, #0
 800169e:	d1cb      	bne.n	8001638 <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80016a0:	00ad      	lsls	r5, r5, #2
 80016a2:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 80016a6:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80016a8:	7898      	ldrb	r0, [r3, #2]
 80016aa:	78da      	ldrb	r2, [r3, #3]
 80016ac:	0400      	lsls	r0, r0, #16
 80016ae:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80016b2:	5d72      	ldrb	r2, [r6, r5]
 80016b4:	785b      	ldrb	r3, [r3, #1]
 80016b6:	4310      	orrs	r0, r2
 80016b8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80016bc:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80016c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 80016c2:	2001      	movs	r0, #1
}
 80016c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080016c6 <dir_sdi>:
{
 80016c6:	b570      	push	{r4, r5, r6, lr}
 80016c8:	4604      	mov	r4, r0
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80016ca:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 80016ce:	460d      	mov	r5, r1
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80016d0:	2a01      	cmp	r2, #1
	dp->index = (WORD)idx;	/* Current index */
 80016d2:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80016d6:	d101      	bne.n	80016dc <dir_sdi+0x16>
		return FR_INT_ERR;
 80016d8:	2002      	movs	r0, #2
 80016da:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80016dc:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 80016e0:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 80016e4:	428a      	cmp	r2, r1
 80016e6:	d2f7      	bcs.n	80016d8 <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80016e8:	b9f2      	cbnz	r2, 8001728 <dir_sdi+0x62>
 80016ea:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 80016ee:	2903      	cmp	r1, #3
 80016f0:	d102      	bne.n	80016f8 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 80016f2:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80016f6:	b9c1      	cbnz	r1, 800172a <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80016f8:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 80016fc:	428d      	cmp	r5, r1
 80016fe:	d2eb      	bcs.n	80016d8 <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 8001700:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 8001704:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8001708:	2800      	cmp	r0, #0
 800170a:	d0e5      	beq.n	80016d8 <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800170c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8001710:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8001714:	f005 050f 	and.w	r5, r5, #15
 8001718:	eb03 1545 	add.w	r5, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800171c:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8001720:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 8001724:	2000      	movs	r0, #0
 8001726:	bd70      	pop	{r4, r5, r6, pc}
 8001728:	4611      	mov	r1, r2
		while (idx >= ic) {	/* Follow cluster chain */
 800172a:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800172c:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
 8001730:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8001732:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8001734:	4611      	mov	r1, r2
 8001736:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
		while (idx >= ic) {	/* Follow cluster chain */
 800173a:	d202      	bcs.n	8001742 <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 800173c:	f7ff ff54 	bl	80015e8 <clust2sect>
 8001740:	e7e0      	b.n	8001704 <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8001742:	f7ff ff5f 	bl	8001604 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001746:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8001748:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800174a:	d009      	beq.n	8001760 <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800174c:	2801      	cmp	r0, #1
 800174e:	d9c3      	bls.n	80016d8 <dir_sdi+0x12>
 8001750:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001754:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001758:	4298      	cmp	r0, r3
 800175a:	d2bd      	bcs.n	80016d8 <dir_sdi+0x12>
			idx -= ic;
 800175c:	1bad      	subs	r5, r5, r6
 800175e:	e7e8      	b.n	8001732 <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001760:	2001      	movs	r0, #1
}
 8001762:	bd70      	pop	{r4, r5, r6, pc}

08001764 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001764:	2901      	cmp	r1, #1
{
 8001766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800176a:	4605      	mov	r5, r0
 800176c:	460c      	mov	r4, r1
 800176e:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001770:	d96f      	bls.n	8001852 <put_fat+0xee>
 8001772:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001776:	4299      	cmp	r1, r3
 8001778:	d26b      	bcs.n	8001852 <put_fat+0xee>
		switch (fs->fs_type) {
 800177a:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 800177e:	2b02      	cmp	r3, #2
 8001780:	d03d      	beq.n	80017fe <put_fat+0x9a>
 8001782:	2b03      	cmp	r3, #3
 8001784:	d04b      	beq.n	800181e <put_fat+0xba>
 8001786:	2b01      	cmp	r3, #1
 8001788:	d163      	bne.n	8001852 <put_fat+0xee>
			bc = (UINT)clst; bc += bc / 2;
 800178a:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800178e:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8001792:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8001796:	f7ff fda1 	bl	80012dc <move_window>
			if (res != FR_OK) break;
 800179a:	2800      	cmp	r0, #0
 800179c:	d15a      	bne.n	8001854 <put_fat+0xf0>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800179e:	f014 0401 	ands.w	r4, r4, #1
			p = &fs->win.d8[bc++ % SS(fs)];
 80017a2:	f107 0801 	add.w	r8, r7, #1
 80017a6:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80017aa:	bf17      	itett	ne
 80017ac:	5deb      	ldrbne	r3, [r5, r7]
 80017ae:	b2f3      	uxtbeq	r3, r6
 80017b0:	f003 020f 	andne.w	r2, r3, #15
 80017b4:	0133      	lslne	r3, r6, #4
 80017b6:	bf1c      	itt	ne
 80017b8:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 80017bc:	4313      	orrne	r3, r2
 80017be:	55eb      	strb	r3, [r5, r7]
			fs->wflag = 1;
 80017c0:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80017c2:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
			fs->wflag = 1;
 80017c6:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80017ca:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80017ce:	4628      	mov	r0, r5
 80017d0:	f7ff fd84 	bl	80012dc <move_window>
			if (res != FR_OK) break;
 80017d4:	bbf0      	cbnz	r0, 8001854 <put_fat+0xf0>
			p = &fs->win.d8[bc % SS(fs)];
 80017d6:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80017da:	b144      	cbz	r4, 80017ee <put_fat+0x8a>
 80017dc:	f3c6 1207 	ubfx	r2, r6, #4, #8
 80017e0:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 80017ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80017ee:	f815 2008 	ldrb.w	r2, [r5, r8]
 80017f2:	f3c6 2603 	ubfx	r6, r6, #8, #4
 80017f6:	f022 020f 	bic.w	r2, r2, #15
 80017fa:	4332      	orrs	r2, r6
 80017fc:	e7f0      	b.n	80017e0 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80017fe:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8001802:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8001806:	f7ff fd69 	bl	80012dc <move_window>
			if (res != FR_OK) break;
 800180a:	bb18      	cbnz	r0, 8001854 <put_fat+0xf0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800180c:	0064      	lsls	r4, r4, #1
 800180e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 8001812:	552e      	strb	r6, [r5, r4]
 8001814:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8001818:	442c      	add	r4, r5
 800181a:	7062      	strb	r2, [r4, #1]
 800181c:	e7e2      	b.n	80017e4 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800181e:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8001822:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8001826:	f7ff fd59 	bl	80012dc <move_window>
			if (res != FR_OK) break;
 800182a:	b998      	cbnz	r0, 8001854 <put_fat+0xf0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800182c:	00a4      	lsls	r4, r4, #2
 800182e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8001832:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 8001834:	78cb      	ldrb	r3, [r1, #3]
 8001836:	061b      	lsls	r3, r3, #24
 8001838:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800183c:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 8001840:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8001844:	552a      	strb	r2, [r5, r4]
 8001846:	704b      	strb	r3, [r1, #1]
 8001848:	0c13      	lsrs	r3, r2, #16
 800184a:	0e12      	lsrs	r2, r2, #24
 800184c:	708b      	strb	r3, [r1, #2]
 800184e:	70ca      	strb	r2, [r1, #3]
 8001850:	e7c8      	b.n	80017e4 <put_fat+0x80>
			res = FR_INT_ERR;
 8001852:	2002      	movs	r0, #2
}
 8001854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001858 <create_chain>:
{
 8001858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185a:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 800185c:	460f      	mov	r7, r1
 800185e:	b989      	cbnz	r1, 8001884 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8001860:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8001864:	b1fe      	cbz	r6, 80018a6 <create_chain+0x4e>
 8001866:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800186a:	429e      	cmp	r6, r3
 800186c:	bf28      	it	cs
 800186e:	2601      	movcs	r6, #1
 8001870:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8001872:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		ncl++;							/* Next cluster */
 8001876:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8001878:	429c      	cmp	r4, r3
 800187a:	d317      	bcc.n	80018ac <create_chain+0x54>
			if (ncl > scl) return 0;	/* No free cluster */
 800187c:	2e01      	cmp	r6, #1
 800187e:	d814      	bhi.n	80018aa <create_chain+0x52>
 8001880:	2400      	movs	r4, #0
 8001882:	e008      	b.n	8001896 <create_chain+0x3e>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8001884:	f7ff febe 	bl	8001604 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 8001888:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800188a:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 800188c:	d93b      	bls.n	8001906 <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800188e:	3001      	adds	r0, #1
 8001890:	d103      	bne.n	800189a <create_chain+0x42>
			ncl = 2;
 8001892:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8001896:	4620      	mov	r0, r4
 8001898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800189a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800189e:	429c      	cmp	r4, r3
 80018a0:	d3f9      	bcc.n	8001896 <create_chain+0x3e>
 80018a2:	463e      	mov	r6, r7
 80018a4:	e7e4      	b.n	8001870 <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80018a6:	2601      	movs	r6, #1
 80018a8:	e7e2      	b.n	8001870 <create_chain+0x18>
			ncl = 2;
 80018aa:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80018ac:	4621      	mov	r1, r4
 80018ae:	4628      	mov	r0, r5
 80018b0:	f7ff fea8 	bl	8001604 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 80018b4:	b130      	cbz	r0, 80018c4 <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80018b6:	1c41      	adds	r1, r0, #1
 80018b8:	d0eb      	beq.n	8001892 <create_chain+0x3a>
 80018ba:	2801      	cmp	r0, #1
 80018bc:	d023      	beq.n	8001906 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 80018be:	42b4      	cmp	r4, r6
 80018c0:	d1d7      	bne.n	8001872 <create_chain+0x1a>
 80018c2:	e7dd      	b.n	8001880 <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80018c4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80018c8:	4621      	mov	r1, r4
 80018ca:	4628      	mov	r0, r5
 80018cc:	f7ff ff4a 	bl	8001764 <put_fat>
	if (res == FR_OK && clst != 0) {
 80018d0:	b9b8      	cbnz	r0, 8001902 <create_chain+0xaa>
 80018d2:	b97f      	cbnz	r7, 80018f4 <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 80018d4:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 80018d8:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	d0da      	beq.n	8001896 <create_chain+0x3e>
			fs->free_clust--;
 80018e0:	3b01      	subs	r3, #1
 80018e2:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 80018e6:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 80018f2:	e7d0      	b.n	8001896 <create_chain+0x3e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80018f4:	4622      	mov	r2, r4
 80018f6:	4639      	mov	r1, r7
 80018f8:	4628      	mov	r0, r5
 80018fa:	f7ff ff33 	bl	8001764 <put_fat>
	if (res == FR_OK) {
 80018fe:	2800      	cmp	r0, #0
 8001900:	d0e8      	beq.n	80018d4 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8001902:	2801      	cmp	r0, #1
 8001904:	d0c5      	beq.n	8001892 <create_chain+0x3a>
 8001906:	2401      	movs	r4, #1
 8001908:	e7c5      	b.n	8001896 <create_chain+0x3e>

0800190a <dir_next>:
{
 800190a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 800190e:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
{
 8001912:	4604      	mov	r4, r0
	i = dp->index + 1;
 8001914:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8001916:	b2b3      	uxth	r3, r6
{
 8001918:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800191a:	b913      	cbnz	r3, 8001922 <dir_next+0x18>
		return FR_NO_FILE;
 800191c:	2004      	movs	r0, #4
 800191e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8001922:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f8      	beq.n	800191c <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800192a:	f016 080f 	ands.w	r8, r6, #15
 800192e:	d10b      	bne.n	8001948 <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 8001930:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 8001934:	3301      	adds	r3, #1
 8001936:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 800193a:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		if (!dp->clust) {		/* Static table */
 800193e:	b971      	cbnz	r1, 800195e <dir_next+0x54>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8001940:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 8001944:	429e      	cmp	r6, r3
 8001946:	d2e9      	bcs.n	800191c <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8001948:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->index = (WORD)i;	/* Current index */
 800194c:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8001950:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8001954:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 8001958:	2000      	movs	r0, #0
 800195a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800195e:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 8001962:	3f01      	subs	r7, #1
 8001964:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 8001968:	d1ee      	bne.n	8001948 <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800196a:	f7ff fe4b 	bl	8001604 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 800196e:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8001970:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 8001972:	d802      	bhi.n	800197a <dir_next+0x70>
 8001974:	2002      	movs	r0, #2
 8001976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800197a:	1c42      	adds	r2, r0, #1
 800197c:	d102      	bne.n	8001984 <dir_next+0x7a>
 800197e:	2001      	movs	r0, #1
 8001980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8001984:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8001988:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800198c:	429d      	cmp	r5, r3
 800198e:	d32f      	bcc.n	80019f0 <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8001990:	f1b9 0f00 	cmp.w	r9, #0
 8001994:	d0c2      	beq.n	800191c <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8001996:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 800199a:	f7ff ff5d 	bl	8001858 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800199e:	4605      	mov	r5, r0
 80019a0:	2800      	cmp	r0, #0
 80019a2:	d03e      	beq.n	8001a22 <dir_next+0x118>
					if (clst == 1) return FR_INT_ERR;
 80019a4:	2801      	cmp	r0, #1
 80019a6:	d0e5      	beq.n	8001974 <dir_next+0x6a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80019a8:	1c43      	adds	r3, r0, #1
 80019aa:	d0e8      	beq.n	800197e <dir_next+0x74>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80019ac:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80019b0:	f7ff fc30 	bl	8001214 <sync_window>
 80019b4:	4601      	mov	r1, r0
 80019b6:	2800      	cmp	r0, #0
 80019b8:	d1e1      	bne.n	800197e <dir_next+0x74>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80019ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019be:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80019c2:	f7ff fb13 	bl	8000fec <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80019c6:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 80019ca:	4629      	mov	r1, r5
 80019cc:	4610      	mov	r0, r2
 80019ce:	f7ff fe0b 	bl	80015e8 <clust2sect>
						dp->fs->wflag = 1;
 80019d2:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80019d6:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80019da:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80019de:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 80019e2:	429f      	cmp	r7, r3
 80019e4:	d30e      	bcc.n	8001a04 <dir_next+0xfa>
					dp->fs->winsect -= c;						/* Rewind window offset */
 80019e6:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 80019ea:	1bdf      	subs	r7, r3, r7
 80019ec:	f8c0 722c 	str.w	r7, [r0, #556]	; 0x22c
				dp->clust = clst;				/* Initialize data for new cluster */
 80019f0:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80019f4:	4629      	mov	r1, r5
 80019f6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80019fa:	f7ff fdf5 	bl	80015e8 <clust2sect>
 80019fe:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 8001a02:	e7a1      	b.n	8001948 <dir_next+0x3e>
						dp->fs->wflag = 1;
 8001a04:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
 8001a08:	f7ff fbdb 	bl	80011c2 <sync_window.part.2>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8001a0c:	2800      	cmp	r0, #0
 8001a0e:	d1b6      	bne.n	800197e <dir_next+0x74>
						dp->fs->winsect++;
 8001a10:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8001a14:	3701      	adds	r7, #1
						dp->fs->winsect++;
 8001a16:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
 8001a20:	e7db      	b.n	80019da <dir_next+0xd0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8001a22:	2007      	movs	r0, #7
}
 8001a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001a28 <follow_path>:
{
 8001a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8001a2c:	780b      	ldrb	r3, [r1, #0]
{
 8001a2e:	4604      	mov	r4, r0
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8001a30:	2b2f      	cmp	r3, #47	; 0x2f
{
 8001a32:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8001a34:	d001      	beq.n	8001a3a <follow_path+0x12>
 8001a36:	2b5c      	cmp	r3, #92	; 0x5c
 8001a38:	d100      	bne.n	8001a3c <follow_path+0x14>
		path++;
 8001a3a:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8001a3c:	2600      	movs	r6, #0
 8001a3e:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8001a42:	782b      	ldrb	r3, [r5, #0]
 8001a44:	2b1f      	cmp	r3, #31
 8001a46:	d936      	bls.n	8001ab6 <follow_path+0x8e>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8001a48:	4e5f      	ldr	r6, [pc, #380]	; (8001bc8 <follow_path+0x1a0>)
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8001a4a:	782b      	ldrb	r3, [r5, #0]
 8001a4c:	46a8      	mov	r8, r5
 8001a4e:	2b2f      	cmp	r3, #47	; 0x2f
 8001a50:	f105 0501 	add.w	r5, r5, #1
 8001a54:	d0f9      	beq.n	8001a4a <follow_path+0x22>
 8001a56:	2b5c      	cmp	r3, #92	; 0x5c
 8001a58:	d0f7      	beq.n	8001a4a <follow_path+0x22>
	sfn = dp->fn;
 8001a5a:	f8d4 7218 	ldr.w	r7, [r4, #536]	; 0x218
	mem_set(sfn, ' ', 11);
 8001a5e:	220b      	movs	r2, #11
 8001a60:	2120      	movs	r1, #32
 8001a62:	4638      	mov	r0, r7
 8001a64:	f7ff fac2 	bl	8000fec <mem_set>
	si = i = b = 0; ni = 8;
 8001a68:	f04f 0e00 	mov.w	lr, #0
 8001a6c:	2108      	movs	r1, #8
 8001a6e:	46f4      	mov	ip, lr
 8001a70:	4672      	mov	r2, lr
 8001a72:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
		c = (BYTE)p[si++];
 8001a76:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 8001a7a:	f10c 0c01 	add.w	ip, ip, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8001a7e:	2b20      	cmp	r3, #32
 8001a80:	d928      	bls.n	8001ad4 <follow_path+0xac>
 8001a82:	2b2f      	cmp	r3, #47	; 0x2f
 8001a84:	d026      	beq.n	8001ad4 <follow_path+0xac>
 8001a86:	2b5c      	cmp	r3, #92	; 0x5c
 8001a88:	d024      	beq.n	8001ad4 <follow_path+0xac>
		if (c == '.' || i >= ni) {
 8001a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8001a8c:	f000 8085 	beq.w	8001b9a <follow_path+0x172>
 8001a90:	4571      	cmp	r1, lr
 8001a92:	d90d      	bls.n	8001ab0 <follow_path+0x88>
		if (c >= 0x80) {				/* Extended character? */
 8001a94:	0618      	lsls	r0, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8001a96:	bf44      	itt	mi
 8001a98:	3b80      	submi	r3, #128	; 0x80
 8001a9a:	5cf3      	ldrbmi	r3, [r6, r3]
 8001a9c:	4d4b      	ldr	r5, [pc, #300]	; (8001bcc <follow_path+0x1a4>)
			b |= 3;						/* Eliminate NT flag */
 8001a9e:	bf48      	it	mi
 8001aa0:	f042 0203 	orrmi.w	r2, r2, #3
	while (*str && *str != chr) str++;
 8001aa4:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d07d      	beq.n	8001ba8 <follow_path+0x180>
 8001aac:	4283      	cmp	r3, r0
 8001aae:	d1f9      	bne.n	8001aa4 <follow_path+0x7c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8001ab0:	2006      	movs	r0, #6
	return res;
 8001ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, 0);
 8001ab6:	4631      	mov	r1, r6
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f7ff fe04 	bl	80016c6 <dir_sdi>
		dp->dir = 0;
 8001abe:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
 8001ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				b |= 2;
 8001ac6:	f042 0202 	orr.w	r2, r2, #2
			sfn[i++] = c;
 8001aca:	f807 300e 	strb.w	r3, [r7, lr]
 8001ace:	f10e 0e01 	add.w	lr, lr, #1
 8001ad2:	e7d0      	b.n	8001a76 <follow_path+0x4e>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8001ad4:	2b21      	cmp	r3, #33	; 0x21
	*path = &p[si];						/* Return pointer to the next segment */
 8001ad6:	eb08 050c 	add.w	r5, r8, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8001ada:	bf34      	ite	cc
 8001adc:	2304      	movcc	r3, #4
 8001ade:	2300      	movcs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8001ae0:	f1be 0f00 	cmp.w	lr, #0
 8001ae4:	d0e4      	beq.n	8001ab0 <follow_path+0x88>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8001ae6:	7838      	ldrb	r0, [r7, #0]
 8001ae8:	28e5      	cmp	r0, #229	; 0xe5
 8001aea:	bf04      	itt	eq
 8001aec:	2005      	moveq	r0, #5
 8001aee:	7038      	strbeq	r0, [r7, #0]
	if (ni == 8) b <<= 2;
 8001af0:	2908      	cmp	r1, #8
 8001af2:	bf04      	itt	eq
 8001af4:	0092      	lsleq	r2, r2, #2
 8001af6:	b2d2      	uxtbeq	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8001af8:	f002 0103 	and.w	r1, r2, #3
 8001afc:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8001afe:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8001b02:	bf08      	it	eq
 8001b04:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8001b08:	2a04      	cmp	r2, #4
 8001b0a:	bf08      	it	eq
 8001b0c:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8001b10:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8001b12:	2100      	movs	r1, #0
 8001b14:	4620      	mov	r0, r4
 8001b16:	f7ff fdd6 	bl	80016c6 <dir_sdi>
	if (res != FR_OK) return res;
 8001b1a:	b9f8      	cbnz	r0, 8001b5c <follow_path+0x134>
		res = move_window(dp->fs, dp->sect);
 8001b1c:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8001b20:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8001b24:	f7ff fbda 	bl	80012dc <move_window>
		if (res != FR_OK) break;
 8001b28:	b9c0      	cbnz	r0, 8001b5c <follow_path+0x134>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8001b2a:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8001b2e:	7813      	ldrb	r3, [r2, #0]
 8001b30:	b19b      	cbz	r3, 8001b5a <follow_path+0x132>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8001b32:	7ad3      	ldrb	r3, [r2, #11]
 8001b34:	0719      	lsls	r1, r3, #28
 8001b36:	d40b      	bmi.n	8001b50 <follow_path+0x128>
 8001b38:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8001b3c:	f103 0e0b 	add.w	lr, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8001b40:	4573      	cmp	r3, lr
 8001b42:	d00b      	beq.n	8001b5c <follow_path+0x134>
 8001b44:	f812 7b01 	ldrb.w	r7, [r2], #1
 8001b48:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001b4c:	428f      	cmp	r7, r1
 8001b4e:	d0f7      	beq.n	8001b40 <follow_path+0x118>
		res = dir_next(dp, 0);		/* Next entry */
 8001b50:	2100      	movs	r1, #0
 8001b52:	4620      	mov	r0, r4
 8001b54:	f7ff fed9 	bl	800190a <dir_next>
 8001b58:	e7df      	b.n	8001b1a <follow_path+0xf2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8001b5a:	2004      	movs	r0, #4
			ns = dp->fn[NSFLAG];
 8001b5c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8001b60:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8001b62:	b138      	cbz	r0, 8001b74 <follow_path+0x14c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8001b64:	2804      	cmp	r0, #4
 8001b66:	d12c      	bne.n	8001bc2 <follow_path+0x19a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8001b68:	f013 0f04 	tst.w	r3, #4
 8001b6c:	bf08      	it	eq
 8001b6e:	2005      	moveq	r0, #5
 8001b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8001b74:	075a      	lsls	r2, r3, #29
 8001b76:	d424      	bmi.n	8001bc2 <follow_path+0x19a>
			dir = dp->dir;						/* Follow the sub-directory */
 8001b78:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8001b7c:	7acb      	ldrb	r3, [r1, #11]
 8001b7e:	06db      	lsls	r3, r3, #27
 8001b80:	d508      	bpl.n	8001b94 <follow_path+0x16c>
			dp->sclust = ld_clust(dp->fs, dir);
 8001b82:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001b86:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8001b8a:	f7ff fb0c 	bl	80011a6 <ld_clust.isra.0>
 8001b8e:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8001b92:	e75a      	b.n	8001a4a <follow_path+0x22>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8001b94:	2005      	movs	r0, #5
 8001b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8001b9a:	2908      	cmp	r1, #8
 8001b9c:	d188      	bne.n	8001ab0 <follow_path+0x88>
			b <<= 2; continue;
 8001b9e:	0092      	lsls	r2, r2, #2
			i = 8; ni = 11;
 8001ba0:	468e      	mov	lr, r1
			b <<= 2; continue;
 8001ba2:	b2d2      	uxtb	r2, r2
			i = 8; ni = 11;
 8001ba4:	210b      	movs	r1, #11
 8001ba6:	e766      	b.n	8001a76 <follow_path+0x4e>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8001ba8:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 8001bac:	2819      	cmp	r0, #25
 8001bae:	d98a      	bls.n	8001ac6 <follow_path+0x9e>
				if (IsLower(c)) {		/* ASCII small capital? */
 8001bb0:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 8001bb4:	2819      	cmp	r0, #25
					b |= 1; c -= 0x20;
 8001bb6:	bf9e      	ittt	ls
 8001bb8:	3b20      	subls	r3, #32
 8001bba:	f042 0201 	orrls.w	r2, r2, #1
 8001bbe:	b2db      	uxtbls	r3, r3
 8001bc0:	e783      	b.n	8001aca <follow_path+0xa2>
}
 8001bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bc6:	bf00      	nop
 8001bc8:	08002c64 	.word	0x08002c64
 8001bcc:	08002ce3 	.word	0x08002ce3

08001bd0 <dir_register>:
{
 8001bd0:	b538      	push	{r3, r4, r5, lr}
	res = dir_sdi(dp, 0);
 8001bd2:	2100      	movs	r1, #0
{
 8001bd4:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 8001bd6:	f7ff fd76 	bl	80016c6 <dir_sdi>
	if (res == FR_OK) {
 8001bda:	4604      	mov	r4, r0
 8001bdc:	bb78      	cbnz	r0, 8001c3e <dir_register+0x6e>
			res = move_window(dp->fs, dp->sect);
 8001bde:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8001be2:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8001be6:	f7ff fb79 	bl	80012dc <move_window>
			if (res != FR_OK) break;
 8001bea:	4604      	mov	r4, r0
 8001bec:	bb38      	cbnz	r0, 8001c3e <dir_register+0x6e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8001bee:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2be5      	cmp	r3, #229	; 0xe5
 8001bf6:	d11b      	bne.n	8001c30 <dir_register+0x60>
		res = move_window(dp->fs, dp->sect);
 8001bf8:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8001bfc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8001c00:	f7ff fb6c 	bl	80012dc <move_window>
		if (res == FR_OK) {
 8001c04:	4604      	mov	r4, r0
 8001c06:	b988      	cbnz	r0, 8001c2c <dir_register+0x5c>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8001c08:	4601      	mov	r1, r0
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 8001c10:	f7ff f9ec 	bl	8000fec <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8001c14:	220b      	movs	r2, #11
 8001c16:	f8d5 1218 	ldr.w	r1, [r5, #536]	; 0x218
 8001c1a:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 8001c1e:	f7ff f9db 	bl	8000fd8 <mem_cpy>
			dp->fs->wflag = 1;
 8001c22:	2201      	movs	r2, #1
 8001c24:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 8001c28:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	bd38      	pop	{r3, r4, r5, pc}
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0e1      	beq.n	8001bf8 <dir_register+0x28>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8001c34:	2101      	movs	r1, #1
 8001c36:	4628      	mov	r0, r5
 8001c38:	f7ff fe67 	bl	800190a <dir_next>
 8001c3c:	e7cd      	b.n	8001bda <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8001c3e:	2c04      	cmp	r4, #4
 8001c40:	bf08      	it	eq
 8001c42:	2407      	moveq	r4, #7
 8001c44:	e7f2      	b.n	8001c2c <dir_register+0x5c>

08001c46 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001c46:	2901      	cmp	r1, #1
{
 8001c48:	b570      	push	{r4, r5, r6, lr}
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001c4e:	d801      	bhi.n	8001c54 <remove_chain+0xe>
		res = FR_INT_ERR;
 8001c50:	2002      	movs	r0, #2
 8001c52:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001c54:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001c58:	4299      	cmp	r1, r3
 8001c5a:	d2f9      	bcs.n	8001c50 <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8001c5c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8001c60:	429d      	cmp	r5, r3
 8001c62:	d205      	bcs.n	8001c70 <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8001c64:	4629      	mov	r1, r5
 8001c66:	4620      	mov	r0, r4
 8001c68:	f7ff fccc 	bl	8001604 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8001c6c:	4606      	mov	r6, r0
 8001c6e:	b908      	cbnz	r0, 8001c74 <remove_chain+0x2e>
		res = FR_INT_ERR;
 8001c70:	2000      	movs	r0, #0
 8001c72:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8001c74:	2801      	cmp	r0, #1
 8001c76:	d0eb      	beq.n	8001c50 <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8001c78:	1c41      	adds	r1, r0, #1
 8001c7a:	d014      	beq.n	8001ca6 <remove_chain+0x60>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4629      	mov	r1, r5
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7ff fd6f 	bl	8001764 <put_fat>
			if (res != FR_OK) break;
 8001c86:	b978      	cbnz	r0, 8001ca8 <remove_chain+0x62>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8001c88:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	d008      	beq.n	8001ca2 <remove_chain+0x5c>
				fs->free_clust++;
 8001c90:	3301      	adds	r3, #1
 8001c92:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
				fs->fsi_flag |= 1;
 8001c96:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
{
 8001ca2:	4635      	mov	r5, r6
 8001ca4:	e7da      	b.n	8001c5c <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8001ca6:	2001      	movs	r0, #1
}
 8001ca8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001cac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8001cac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001cae:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8001cb0:	a804      	add	r0, sp, #16
 8001cb2:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8001cb6:	9100      	str	r1, [sp, #0]
 8001cb8:	4616      	mov	r6, r2


	vol = get_ldnumber(&rp);
 8001cba:	f7ff fa45 	bl	8001148 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8001cbe:	1e05      	subs	r5, r0, #0
 8001cc0:	db21      	blt.n	8001d06 <f_mount+0x5a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8001cc2:	4913      	ldr	r1, [pc, #76]	; (8001d10 <f_mount+0x64>)
 8001cc4:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8001cc8:	b164      	cbz	r4, 8001ce4 <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <f_mount+0x68>)
 8001ccc:	2000      	movs	r0, #0
 8001cce:	681a      	ldr	r2, [r3, #0]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8001cd0:	f884 0200 	strb.w	r0, [r4, #512]	; 0x200
		if (Files[i].fs == fs) Files[i].fs = 0;
 8001cd4:	4294      	cmp	r4, r2
 8001cd6:	bf04      	itt	eq
 8001cd8:	2200      	moveq	r2, #0
 8001cda:	601a      	streq	r2, [r3, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	4294      	cmp	r4, r2
 8001ce0:	bf08      	it	eq
 8001ce2:	60d8      	streq	r0, [r3, #12]
	}

	if (fs) {
 8001ce4:	9801      	ldr	r0, [sp, #4]
 8001ce6:	b110      	cbz	r0, 8001cee <f_mount+0x42>
		fs->fs_type = 0;				/* Clear new fs object */
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8001cee:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8001cf2:	b130      	cbz	r0, 8001d02 <f_mount+0x56>
 8001cf4:	2e01      	cmp	r6, #1
 8001cf6:	d108      	bne.n	8001d0a <f_mount+0x5e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	4669      	mov	r1, sp
 8001cfc:	a801      	add	r0, sp, #4
 8001cfe:	f7ff fb37 	bl	8001370 <find_volume>
	LEAVE_FF(fs, res);
}
 8001d02:	b004      	add	sp, #16
 8001d04:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8001d06:	200b      	movs	r0, #11
 8001d08:	e7fb      	b.n	8001d02 <f_mount+0x56>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	e7f9      	b.n	8001d02 <f_mount+0x56>
 8001d0e:	bf00      	nop
 8001d10:	20000040 	.word	0x20000040
 8001d14:	20000044 	.word	0x20000044

08001d18 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8001d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d1c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8001d20:	9101      	str	r1, [sp, #4]
 8001d22:	4690      	mov	r8, r2
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8001d24:	4605      	mov	r5, r0
 8001d26:	2800      	cmp	r0, #0
 8001d28:	f000 80a6 	beq.w	8001e78 <f_open+0x160>
	fp->fs = 0;			/* Clear file object */
 8001d2c:	2300      	movs	r3, #0

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8001d2e:	f002 021e 	and.w	r2, r2, #30
	fp->fs = 0;			/* Clear file object */
 8001d32:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8001d36:	a901      	add	r1, sp, #4
 8001d38:	a886      	add	r0, sp, #536	; 0x218
 8001d3a:	f7ff fb19 	bl	8001370 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8001d3e:	4606      	mov	r6, r0
 8001d40:	2800      	cmp	r0, #0
 8001d42:	f040 8094 	bne.w	8001e6e <f_open+0x156>
		INIT_BUF(dj);
 8001d46:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 8001d48:	9901      	ldr	r1, [sp, #4]
 8001d4a:	a806      	add	r0, sp, #24
		INIT_BUF(dj);
 8001d4c:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 8001d4e:	f7ff fe6b 	bl	8001a28 <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8001d52:	f008 071f 	and.w	r7, r8, #31
		dir = dj.dir;
 8001d56:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8001d58:	b948      	cbnz	r0, 8001d6e <f_open+0x56>
			if (!dir)	/* Default directory itself */
 8001d5a:	2c00      	cmp	r4, #0
 8001d5c:	d05b      	beq.n	8001e16 <f_open+0xfe>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8001d5e:	f017 0f1e 	tst.w	r7, #30
 8001d62:	bf14      	ite	ne
 8001d64:	2101      	movne	r1, #1
 8001d66:	2100      	moveq	r1, #0
 8001d68:	a806      	add	r0, sp, #24
 8001d6a:	f7ff f947 	bl	8000ffc <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8001d6e:	f018 0f1c 	tst.w	r8, #28
 8001d72:	d05b      	beq.n	8001e2c <f_open+0x114>
			if (res != FR_OK) {					/* No file, create new */
 8001d74:	2800      	cmp	r0, #0
 8001d76:	d050      	beq.n	8001e1a <f_open+0x102>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8001d78:	2804      	cmp	r0, #4
 8001d7a:	d14a      	bne.n	8001e12 <f_open+0xfa>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001d7c:	4b51      	ldr	r3, [pc, #324]	; (8001ec4 <f_open+0x1ac>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	b11a      	cbz	r2, 8001d8a <f_open+0x72>
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f040 809b 	bne.w	8001ec0 <f_open+0x1a8>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8001d8a:	a806      	add	r0, sp, #24
 8001d8c:	f7ff ff20 	bl	8001bd0 <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d13e      	bne.n	8001e12 <f_open+0xfa>
				dir = dj.dir;					/* New entry */
 8001d94:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8001d96:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8001d9a:	073b      	lsls	r3, r7, #28
 8001d9c:	d550      	bpl.n	8001e40 <f_open+0x128>
				dw = GET_FATTIME();				/* Created time */
 8001d9e:	f000 fa29 	bl	80021f4 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8001da2:	f04f 0800 	mov.w	r8, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 8001da6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8001daa:	73a0      	strb	r0, [r4, #14]
 8001dac:	73e3      	strb	r3, [r4, #15]
 8001dae:	0c03      	lsrs	r3, r0, #16
 8001db0:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8001db2:	f884 800b 	strb.w	r8, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8001db6:	f884 801c 	strb.w	r8, [r4, #28]
 8001dba:	f884 801d 	strb.w	r8, [r4, #29]
 8001dbe:	f884 801e 	strb.w	r8, [r4, #30]
 8001dc2:	f884 801f 	strb.w	r8, [r4, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8001dc6:	7423      	strb	r3, [r4, #16]
 8001dc8:	7460      	strb	r0, [r4, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8001dca:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8001dcc:	4621      	mov	r1, r4
 8001dce:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8001dd2:	f7ff f9e8 	bl	80011a6 <ld_clust.isra.0>
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 8001dd6:	2201      	movs	r2, #1
	ST_WORD(dir + DIR_FstClusLO, cl);
 8001dd8:	f884 801a 	strb.w	r8, [r4, #26]
 8001ddc:	f884 801b 	strb.w	r8, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8001de0:	f884 8014 	strb.w	r8, [r4, #20]
 8001de4:	f884 8015 	strb.w	r8, [r4, #21]
				dj.fs->wflag = 1;
 8001de8:	9b86      	ldr	r3, [sp, #536]	; 0x218
				if (cl) {						/* Remove the cluster chain if exist */
 8001dea:	4680      	mov	r8, r0
				dj.fs->wflag = 1;
 8001dec:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8001df0:	b330      	cbz	r0, 8001e40 <f_open+0x128>
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
 8001df2:	4601      	mov	r1, r0
 8001df4:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 8001df6:	f8d3 922c 	ldr.w	r9, [r3, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 8001dfa:	f7ff ff24 	bl	8001c46 <remove_chain>
					if (res == FR_OK) {
 8001dfe:	b940      	cbnz	r0, 8001e12 <f_open+0xfa>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8001e00:	9886      	ldr	r0, [sp, #536]	; 0x218
 8001e02:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8001e06:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8001e0a:	4649      	mov	r1, r9
 8001e0c:	f7ff fa66 	bl	80012dc <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 8001e10:	b1b0      	cbz	r0, 8001e40 <f_open+0x128>
					res = FR_DENIED;
 8001e12:	4606      	mov	r6, r0
 8001e14:	e02b      	b.n	8001e6e <f_open+0x156>
				res = FR_INVALID_NAME;
 8001e16:	2006      	movs	r0, #6
 8001e18:	e7a9      	b.n	8001d6e <f_open+0x56>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8001e1a:	7ae3      	ldrb	r3, [r4, #11]
 8001e1c:	f013 0f11 	tst.w	r3, #17
 8001e20:	d12e      	bne.n	8001e80 <f_open+0x168>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8001e22:	f018 0f04 	tst.w	r8, #4
 8001e26:	d0b8      	beq.n	8001d9a <f_open+0x82>
						res = FR_EXIST;
 8001e28:	2608      	movs	r6, #8
 8001e2a:	e020      	b.n	8001e6e <f_open+0x156>
			if (res == FR_OK) {					/* Follow succeeded */
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	d1f0      	bne.n	8001e12 <f_open+0xfa>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8001e30:	7ae3      	ldrb	r3, [r4, #11]
 8001e32:	06d8      	lsls	r0, r3, #27
 8001e34:	d422      	bmi.n	8001e7c <f_open+0x164>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8001e36:	f018 0f02 	tst.w	r8, #2
 8001e3a:	d001      	beq.n	8001e40 <f_open+0x128>
 8001e3c:	07da      	lsls	r2, r3, #31
 8001e3e:	d41f      	bmi.n	8001e80 <f_open+0x168>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8001e40:	073b      	lsls	r3, r7, #28
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8001e42:	9b86      	ldr	r3, [sp, #536]	; 0x218
				mode |= FA__WRITTEN;
 8001e44:	bf48      	it	mi
 8001e46:	f047 0720 	orrmi.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8001e4a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
			fp->dir_ptr = dir;
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8001e4e:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8001e52:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
			fp->dir_ptr = dir;
 8001e56:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8001e5a:	bf14      	ite	ne
 8001e5c:	2101      	movne	r1, #1
 8001e5e:	2100      	moveq	r1, #0
 8001e60:	a806      	add	r0, sp, #24
 8001e62:	f7ff f8fd 	bl	8001060 <inc_lock>
 8001e66:	f8c5 0228 	str.w	r0, [r5, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8001e6a:	b958      	cbnz	r0, 8001e84 <f_open+0x16c>
 8001e6c:	2602      	movs	r6, #2
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8001e6e:	4630      	mov	r0, r6
 8001e70:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8001e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fp) return FR_INVALID_OBJECT;
 8001e78:	2609      	movs	r6, #9
 8001e7a:	e7f8      	b.n	8001e6e <f_open+0x156>
					res = FR_NO_FILE;
 8001e7c:	2604      	movs	r6, #4
 8001e7e:	e7f6      	b.n	8001e6e <f_open+0x156>
					res = FR_DENIED;
 8001e80:	2607      	movs	r6, #7
 8001e82:	e7f4      	b.n	8001e6e <f_open+0x156>
			fp->flag = mode;					/* File access mode */
 8001e84:	f885 7206 	strb.w	r7, [r5, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8001e88:	2700      	movs	r7, #0
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8001e8a:	f8dd 8218 	ldr.w	r8, [sp, #536]	; 0x218
			fp->err = 0;						/* Clear error flag */
 8001e8e:	f885 7207 	strb.w	r7, [r5, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8001e92:	f898 0200 	ldrb.w	r0, [r8, #512]	; 0x200
 8001e96:	4621      	mov	r1, r4
 8001e98:	f7ff f985 	bl	80011a6 <ld_clust.isra.0>
 8001e9c:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8001ea0:	69e3      	ldr	r3, [r4, #28]
			fp->fptr = 0;						/* File pointer */
 8001ea2:	f8c5 7208 	str.w	r7, [r5, #520]	; 0x208
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8001ea6:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
			fp->id = fp->fs->id;
 8001eaa:	f8b8 3206 	ldrh.w	r3, [r8, #518]	; 0x206
			fp->dsect = 0;
 8001eae:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 8001eb2:	f8c5 7224 	str.w	r7, [r5, #548]	; 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 8001eb6:	f8c5 8200 	str.w	r8, [r5, #512]	; 0x200
			fp->id = fp->fs->id;
 8001eba:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
 8001ebe:	e7d6      	b.n	8001e6e <f_open+0x156>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8001ec0:	2012      	movs	r0, #18
 8001ec2:	e7a6      	b.n	8001e12 <f_open+0xfa>
 8001ec4:	20000044 	.word	0x20000044

08001ec8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8001ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ecc:	469b      	mov	fp, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8cb 3000 	str.w	r3, [fp]
{
 8001ed4:	4604      	mov	r4, r0
 8001ed6:	4689      	mov	r9, r1
 8001ed8:	4617      	mov	r7, r2

	res = validate(fp);						/* Check validity */
 8001eda:	f7ff f94d 	bl	8001178 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8001ede:	4606      	mov	r6, r0
 8001ee0:	bb50      	cbnz	r0, 8001f38 <f_write+0x70>
	if (fp->err)							/* Check error */
 8001ee2:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 80da 	bne.w	80020a0 <f_write+0x1d8>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8001eec:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8001ef0:	0799      	lsls	r1, r3, #30
 8001ef2:	f140 80d7 	bpl.w	80020a4 <f_write+0x1dc>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8001ef6:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8001efa:	42df      	cmn	r7, r3
 8001efc:	f0c0 8084 	bcc.w	8002008 <f_write+0x140>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8001f00:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8001f04:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	f200 80c6 	bhi.w	800209a <f_write+0x1d2>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8001f0e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8001f12:	f043 0320 	orr.w	r3, r3, #32
 8001f16:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8001f1a:	e00d      	b.n	8001f38 <f_write+0x70>
					if (fp->cltbl)
 8001f1c:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8001f20:	b173      	cbz	r3, 8001f40 <f_write+0x78>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8001f22:	4620      	mov	r0, r4
 8001f24:	f7ff f8fc 	bl	8001120 <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8001f28:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d0e8      	beq.n	8001f00 <f_write+0x38>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8001f2e:	2901      	cmp	r1, #1
 8001f30:	d109      	bne.n	8001f46 <f_write+0x7e>
 8001f32:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8001f34:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207

	LEAVE_FF(fp->fs, FR_OK);
}
 8001f38:	4630      	mov	r0, r6
 8001f3a:	b003      	add	sp, #12
 8001f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8001f40:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8001f44:	e07b      	b.n	800203e <f_write+0x176>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8001f46:	1c4a      	adds	r2, r1, #1
 8001f48:	d101      	bne.n	8001f4e <f_write+0x86>
 8001f4a:	2601      	movs	r6, #1
 8001f4c:	e7f2      	b.n	8001f34 <f_write+0x6c>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8001f4e:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
				fp->clust = clst;			/* Update current cluster */
 8001f52:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8001f56:	b90b      	cbnz	r3, 8001f5c <f_write+0x94>
 8001f58:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8001f5c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8001f60:	065b      	lsls	r3, r3, #25
 8001f62:	d511      	bpl.n	8001f88 <f_write+0xc0>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8001f64:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8001f6e:	4621      	mov	r1, r4
 8001f70:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8001f74:	f7ff f816 	bl	8000fa4 <disk_write>
 8001f78:	2800      	cmp	r0, #0
 8001f7a:	d1e6      	bne.n	8001f4a <f_write+0x82>
				fp->flag &= ~FA__DIRTY;
 8001f7c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8001f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f84:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8001f88:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 8001f8c:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8001f90:	4650      	mov	r0, sl
 8001f92:	f7ff fb29 	bl	80015e8 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8001f96:	2800      	cmp	r0, #0
 8001f98:	d0cb      	beq.n	8001f32 <f_write+0x6a>
			sect += csect;
 8001f9a:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8001f9c:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8001f9e:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 8001fa2:	d04f      	beq.n	8002044 <f_write+0x17c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8001fa4:	9a01      	ldr	r2, [sp, #4]
 8001fa6:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
 8001faa:	442a      	add	r2, r5
 8001fac:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 8001fae:	bf88      	it	hi
 8001fb0:	9a01      	ldrhi	r2, [sp, #4]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8001fb2:	4649      	mov	r1, r9
					cc = fp->fs->csize - csect;
 8001fb4:	bf88      	it	hi
 8001fb6:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8001fb8:	462b      	mov	r3, r5
 8001fba:	4642      	mov	r2, r8
 8001fbc:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 8001fc0:	f7fe fff0 	bl	8000fa4 <disk_write>
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	d1c0      	bne.n	8001f4a <f_write+0x82>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8001fc8:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 8001fcc:	eba1 0108 	sub.w	r1, r1, r8
 8001fd0:	428d      	cmp	r5, r1
 8001fd2:	d90c      	bls.n	8001fee <f_write+0x126>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8001fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd8:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8001fdc:	4620      	mov	r0, r4
 8001fde:	f7fe fffb 	bl	8000fd8 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8001fe2:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8001fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fea:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8001fee:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8001ff0:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8001ff4:	44a9      	add	r9, r5
 8001ff6:	442b      	add	r3, r5
 8001ff8:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8001ffc:	f8db 3000 	ldr.w	r3, [fp]
 8002000:	1b7f      	subs	r7, r7, r5
 8002002:	442b      	add	r3, r5
 8002004:	f8cb 3000 	str.w	r3, [fp]
	for ( ;  btw;							/* Repeat until all data written */
 8002008:	2f00      	cmp	r7, #0
 800200a:	f43f af79 	beq.w	8001f00 <f_write+0x38>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800200e:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 8002012:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8002016:	bb5b      	cbnz	r3, 8002070 <f_write+0x1a8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8002018:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800201c:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8002020:	3b01      	subs	r3, #1
 8002022:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 8002026:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	d196      	bne.n	8001f5c <f_write+0x94>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800202e:	2900      	cmp	r1, #0
 8002030:	f47f af74 	bne.w	8001f1c <f_write+0x54>
					clst = fp->sclust;		/* Follow from the origin */
 8002034:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 8002038:	2900      	cmp	r1, #0
 800203a:	f47f af78 	bne.w	8001f2e <f_write+0x66>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800203e:	f7ff fc0b 	bl	8001858 <create_chain>
 8002042:	e771      	b.n	8001f28 <f_write+0x60>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8002044:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002048:	4598      	cmp	r8, r3
 800204a:	d00f      	beq.n	800206c <f_write+0x1a4>
				if (fp->fptr < fp->fsize &&
 800204c:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 8002050:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8002054:	429a      	cmp	r2, r3
 8002056:	d209      	bcs.n	800206c <f_write+0x1a4>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8002058:	2301      	movs	r3, #1
 800205a:	4642      	mov	r2, r8
 800205c:	4621      	mov	r1, r4
 800205e:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 8002062:	f7fe ff91 	bl	8000f88 <disk_read>
				if (fp->fptr < fp->fsize &&
 8002066:	2800      	cmp	r0, #0
 8002068:	f47f af6f 	bne.w	8001f4a <f_write+0x82>
			fp->dsect = sect;
 800206c:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8002070:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8002074:	4649      	mov	r1, r9
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8002076:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800207a:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 800207e:	42bd      	cmp	r5, r7
 8002080:	bf28      	it	cs
 8002082:	463d      	movcs	r5, r7
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8002084:	4420      	add	r0, r4
 8002086:	462a      	mov	r2, r5
 8002088:	f7fe ffa6 	bl	8000fd8 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800208c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8002090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002094:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8002098:	e7aa      	b.n	8001ff0 <f_write+0x128>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800209a:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 800209e:	e736      	b.n	8001f0e <f_write+0x46>
 80020a0:	461e      	mov	r6, r3
 80020a2:	e749      	b.n	8001f38 <f_write+0x70>
		LEAVE_FF(fp->fs, FR_DENIED);
 80020a4:	2607      	movs	r6, #7
 80020a6:	e747      	b.n	8001f38 <f_write+0x70>

080020a8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80020ac:	f7ff f864 	bl	8001178 <validate>
	if (res == FR_OK) {
 80020b0:	2800      	cmp	r0, #0
 80020b2:	d158      	bne.n	8002166 <f_sync+0xbe>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80020b4:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80020b8:	069a      	lsls	r2, r3, #26
 80020ba:	d554      	bpl.n	8002166 <f_sync+0xbe>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80020bc:	065b      	lsls	r3, r3, #25
 80020be:	d511      	bpl.n	80020e4 <f_sync+0x3c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80020c0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80020c4:	2301      	movs	r3, #1
 80020c6:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 80020ca:	4621      	mov	r1, r4
 80020cc:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80020d0:	f7fe ff68 	bl	8000fa4 <disk_write>
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d145      	bne.n	8002164 <f_sync+0xbc>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 80020d8:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80020dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020e0:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80020e4:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 80020e8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80020ec:	f7ff f8f6 	bl	80012dc <move_window>
 80020f0:	4606      	mov	r6, r0
			if (res == FR_OK) {
 80020f2:	bbc0      	cbnz	r0, 8002166 <f_sync+0xbe>
				dir = fp->dir_ptr;
 80020f4:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80020f8:	7aeb      	ldrb	r3, [r5, #11]
 80020fa:	f043 0320 	orr.w	r3, r3, #32
 80020fe:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8002100:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8002104:	772b      	strb	r3, [r5, #28]
 8002106:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 800210a:	0a1b      	lsrs	r3, r3, #8
 800210c:	776b      	strb	r3, [r5, #29]
 800210e:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002112:	77ab      	strb	r3, [r5, #30]
 8002114:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 8002118:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800211a:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 800211e:	76ab      	strb	r3, [r5, #26]
 8002120:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8002124:	0c1b      	lsrs	r3, r3, #16
 8002126:	752b      	strb	r3, [r5, #20]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800212c:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 800212e:	f000 f861 	bl	80021f4 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 8002132:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8002136:	75a8      	strb	r0, [r5, #22]
 8002138:	75eb      	strb	r3, [r5, #23]
 800213a:	0c03      	lsrs	r3, r0, #16
 800213c:	0e00      	lsrs	r0, r0, #24
 800213e:	762b      	strb	r3, [r5, #24]
 8002140:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8002142:	74ae      	strb	r6, [r5, #18]
 8002144:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 8002146:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 800214a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 800214e:	f023 0320 	bic.w	r3, r3, #32
 8002152:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 8002156:	2301      	movs	r3, #1
 8002158:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 800215c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 8002160:	f7ff b85f 	b.w	8001222 <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8002164:	2001      	movs	r0, #1
}
 8002166:	bd70      	pop	{r4, r5, r6, pc}

08002168 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8002168:	b510      	push	{r4, lr}
 800216a:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800216c:	f7ff ff9c 	bl	80020a8 <f_sync>
	if (res == FR_OK)
 8002170:	b950      	cbnz	r0, 8002188 <f_close+0x20>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8002172:	4620      	mov	r0, r4
 8002174:	f7ff f800 	bl	8001178 <validate>
		if (res == FR_OK) {
 8002178:	b930      	cbnz	r0, 8002188 <f_close+0x20>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800217a:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
 800217e:	f7fe ffb3 	bl	80010e8 <dec_lock>
			if (res == FR_OK)
 8002182:	b908      	cbnz	r0, 8002188 <f_close+0x20>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8002184:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8002188:	bd10      	pop	{r4, pc}
	...

0800218c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800218c:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 800218e:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <FATFS_LinkDriverEx+0x40>)
 8002190:	7a5c      	ldrb	r4, [r3, #9]
 8002192:	2c01      	cmp	r4, #1
 8002194:	d818      	bhi.n	80021c8 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 8002196:	2400      	movs	r4, #0
 8002198:	7a5d      	ldrb	r5, [r3, #9]
 800219a:	b2ed      	uxtb	r5, r5
 800219c:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 800219e:	7a5d      	ldrb	r5, [r3, #9]
 80021a0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80021a4:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 80021a6:	7a58      	ldrb	r0, [r3, #9]
 80021a8:	4418      	add	r0, r3
 80021aa:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 80021ac:	7a5a      	ldrb	r2, [r3, #9]
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	1c50      	adds	r0, r2, #1
 80021b2:	b2c0      	uxtb	r0, r0
 80021b4:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 80021b6:	233a      	movs	r3, #58	; 0x3a
 80021b8:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80021ba:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 80021bc:	3230      	adds	r2, #48	; 0x30
 80021be:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 80021c0:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80021c2:	70cc      	strb	r4, [r1, #3]
 80021c4:	4620      	mov	r0, r4
 80021c6:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 80021c8:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 80021ca:	bd30      	pop	{r4, r5, pc}
 80021cc:	20000060 	.word	0x20000060

080021d0 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	f7ff bfdb 	b.w	800218c <FATFS_LinkDriverEx>
	...

080021d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80021d8:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80021da:	4903      	ldr	r1, [pc, #12]	; (80021e8 <MX_FATFS_Init+0x10>)
 80021dc:	4803      	ldr	r0, [pc, #12]	; (80021ec <MX_FATFS_Init+0x14>)
 80021de:	f7ff fff7 	bl	80021d0 <FATFS_LinkDriver>
 80021e2:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <MX_FATFS_Init+0x18>)
 80021e4:	7018      	strb	r0, [r3, #0]
 80021e6:	bd08      	pop	{r3, pc}
 80021e8:	20000074 	.word	0x20000074
 80021ec:	2000000c 	.word	0x2000000c
 80021f0:	20000078 	.word	0x20000078

080021f4 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 80021f4:	2000      	movs	r0, #0
 80021f6:	4770      	bx	lr

080021f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f8:	b510      	push	{r4, lr}
 80021fa:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021fc:	2228      	movs	r2, #40	; 0x28
 80021fe:	2100      	movs	r1, #0
 8002200:	a806      	add	r0, sp, #24
 8002202:	f000 fd13 	bl	8002c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002206:	2100      	movs	r1, #0
 8002208:	2214      	movs	r2, #20
 800220a:	a801      	add	r0, sp, #4
 800220c:	f000 fd0e 	bl	8002c2c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002214:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002216:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002218:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800221a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800221c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002220:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002222:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002224:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002226:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002228:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800222a:	f7fe f919 	bl	8000460 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800222e:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002230:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002234:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002236:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002238:	4621      	mov	r1, r4
 800223a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800223e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002240:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002242:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002244:	f7fe fad4 	bl	80007f0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002248:	b010      	add	sp, #64	; 0x40
 800224a:	bd10      	pop	{r4, pc}

0800224c <main>:
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
  HAL_Init();
 8002250:	f7fd ffa0 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8002254:	f7ff ffd0 	bl	80021f8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	2210      	movs	r2, #16
 800225a:	2100      	movs	r1, #0
 800225c:	eb0d 0002 	add.w	r0, sp, r2
 8002260:	f000 fce4 	bl	8002c2c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002264:	4b4a      	ldr	r3, [pc, #296]	; (8002390 <main+0x144>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800226a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800226c:	4849      	ldr	r0, [pc, #292]	; (8002394 <main+0x148>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800226e:	f042 0210 	orr.w	r2, r2, #16
 8002272:	619a      	str	r2, [r3, #24]
 8002274:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002278:	f002 0210 	and.w	r2, r2, #16
 800227c:	9200      	str	r2, [sp, #0]
 800227e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002280:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002282:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002284:	f042 0220 	orr.w	r2, r2, #32
 8002288:	619a      	str	r2, [r3, #24]
 800228a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800228e:	f002 0220 	and.w	r2, r2, #32
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	699a      	ldr	r2, [r3, #24]
  hspi1.Init.CRCPolynomial = 10;
 8002298:	270a      	movs	r7, #10
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800229a:	f042 0204 	orr.w	r2, r2, #4
 800229e:	619a      	str	r2, [r3, #24]
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	f002 0204 	and.w	r2, r2, #4
 80022a6:	9202      	str	r2, [sp, #8]
 80022a8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022aa:	699a      	ldr	r2, [r3, #24]
 80022ac:	f042 0208 	orr.w	r2, r2, #8
 80022b0:	619a      	str	r2, [r3, #24]
 80022b2:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80022b4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	9303      	str	r3, [sp, #12]
 80022bc:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80022be:	f7fe f8c9 	bl	8000454 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c6:	a904      	add	r1, sp, #16
 80022c8:	4832      	ldr	r0, [pc, #200]	; (8002394 <main+0x148>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022ca:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022cc:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d2:	f7fd ffdf 	bl	8000294 <HAL_GPIO_Init>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80022d6:	4622      	mov	r2, r4
 80022d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022dc:	482e      	ldr	r0, [pc, #184]	; (8002398 <main+0x14c>)
 80022de:	f7fe f8b9 	bl	8000454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80022e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e6:	a904      	add	r1, sp, #16
 80022e8:	482b      	ldr	r0, [pc, #172]	; (8002398 <main+0x14c>)
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80022ea:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ec:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f2:	f7fd ffcf 	bl	8000294 <HAL_GPIO_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022f6:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 80022fa:	4828      	ldr	r0, [pc, #160]	; (800239c <main+0x150>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022fc:	4a28      	ldr	r2, [pc, #160]	; (80023a0 <main+0x154>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022fe:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002300:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002308:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800230a:	2338      	movs	r3, #56	; 0x38
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800230c:	60c4      	str	r4, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800230e:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002310:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002312:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002314:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002316:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002318:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800231a:	62c7      	str	r7, [r0, #44]	; 0x2c
  huart1.Init.Mode = UART_MODE_TX_RX;
 800231c:	260c      	movs	r6, #12
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800231e:	f7fe fc8d 	bl	8000c3c <HAL_SPI_Init>
  huart1.Init.BaudRate = 115200;
 8002322:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8002326:	4d1f      	ldr	r5, [pc, #124]	; (80023a4 <main+0x158>)
  huart1.Init.BaudRate = 115200;
 8002328:	491f      	ldr	r1, [pc, #124]	; (80023a8 <main+0x15c>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800232a:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 115200;
 800232c:	e885 000a 	stmia.w	r5, {r1, r3}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002330:	60ac      	str	r4, [r5, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002332:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002334:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002336:	616e      	str	r6, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002338:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800233a:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800233c:	f7fe fd80 	bl	8000e40 <HAL_UART_Init>
  MX_FATFS_Init();
 8002340:	f7ff ff4a 	bl	80021d8 <MX_FATFS_Init>
  f_mount(&FatFs, "", 0);
 8002344:	4622      	mov	r2, r4
 8002346:	4919      	ldr	r1, [pc, #100]	; (80023ac <main+0x160>)
 8002348:	4819      	ldr	r0, [pc, #100]	; (80023b0 <main+0x164>)
 800234a:	f7ff fcaf 	bl	8001cac <f_mount>
  if (f_open(&Fil, "newfile.txt", FA_WRITE | FA_CREATE_ALWAYS) == FR_OK) {	/* Create a file */
 800234e:	463a      	mov	r2, r7
 8002350:	4918      	ldr	r1, [pc, #96]	; (80023b4 <main+0x168>)
 8002352:	4819      	ldr	r0, [pc, #100]	; (80023b8 <main+0x16c>)
 8002354:	f7ff fce0 	bl	8001d18 <f_open>
 8002358:	b9c8      	cbnz	r0, 800238e <main+0x142>
	    HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r f_open OK", strlen("\n\r f_open OK"), HAL_MAX_DELAY);
 800235a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800235e:	4632      	mov	r2, r6
 8002360:	4916      	ldr	r1, [pc, #88]	; (80023bc <main+0x170>)
 8002362:	4628      	mov	r0, r5
 8002364:	f7fe fd9a 	bl	8000e9c <HAL_UART_Transmit>
  		f_write(&Fil, "It works!\r\n", 11, &bw);	/* Write data to the file */
 8002368:	ab04      	add	r3, sp, #16
 800236a:	220b      	movs	r2, #11
 800236c:	4914      	ldr	r1, [pc, #80]	; (80023c0 <main+0x174>)
 800236e:	4812      	ldr	r0, [pc, #72]	; (80023b8 <main+0x16c>)
 8002370:	f7ff fdaa 	bl	8001ec8 <f_write>
  		f_close(&Fil);								/* Close the file */
 8002374:	4810      	ldr	r0, [pc, #64]	; (80023b8 <main+0x16c>)
 8002376:	f7ff fef7 	bl	8002168 <f_close>
  		if (bw == 11) {		/* Lights green LED if data written well */
 800237a:	9b04      	ldr	r3, [sp, #16]
 800237c:	2b0b      	cmp	r3, #11
 800237e:	d106      	bne.n	800238e <main+0x142>
  			HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r OK", strlen("\n\r OK"), HAL_MAX_DELAY);
 8002380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002384:	2205      	movs	r2, #5
 8002386:	490f      	ldr	r1, [pc, #60]	; (80023c4 <main+0x178>)
 8002388:	4628      	mov	r0, r5
 800238a:	f7fe fd87 	bl	8000e9c <HAL_UART_Transmit>
 800238e:	e7fe      	b.n	800238e <main+0x142>
 8002390:	40021000 	.word	0x40021000
 8002394:	40011000 	.word	0x40011000
 8002398:	40010c00 	.word	0x40010c00
 800239c:	20000974 	.word	0x20000974
 80023a0:	40013000 	.word	0x40013000
 80023a4:	20000708 	.word	0x20000708
 80023a8:	40013800 	.word	0x40013800
 80023ac:	08002d17 	.word	0x08002d17
 80023b0:	200004d8 	.word	0x200004d8
 80023b4:	08002cf3 	.word	0x08002cf3
 80023b8:	20000748 	.word	0x20000748
 80023bc:	08002cff 	.word	0x08002cff
 80023c0:	08002d0c 	.word	0x08002d0c
 80023c4:	08002d18 	.word	0x08002d18

080023c8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023c8:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <HAL_MspInit+0x3c>)
{
 80023ca:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	f042 0201 	orr.w	r2, r2, #1
 80023d2:	619a      	str	r2, [r3, #24]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	f002 0201 	and.w	r2, r2, #1
 80023da:	9200      	str	r2, [sp, #0]
 80023dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	69da      	ldr	r2, [r3, #28]
 80023e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023e4:	61da      	str	r2, [r3, #28]
 80023e6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023e8:	4a07      	ldr	r2, [pc, #28]	; (8002408 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023f2:	6853      	ldr	r3, [r2, #4]
 80023f4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fe:	b002      	add	sp, #8
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
 8002408:	40010000 	.word	0x40010000

0800240c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800240c:	b510      	push	{r4, lr}
 800240e:	4604      	mov	r4, r0
 8002410:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002412:	2210      	movs	r2, #16
 8002414:	2100      	movs	r1, #0
 8002416:	a802      	add	r0, sp, #8
 8002418:	f000 fc08 	bl	8002c2c <memset>
  if(hspi->Instance==SPI1)
 800241c:	6822      	ldr	r2, [r4, #0]
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <HAL_SPI_MspInit+0x6c>)
 8002420:	429a      	cmp	r2, r3
 8002422:	d126      	bne.n	8002472 <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002424:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8002428:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 800242c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002430:	619a      	str	r2, [r3, #24]
 8002432:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002434:	4811      	ldr	r0, [pc, #68]	; (800247c <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002436:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800243a:	9200      	str	r2, [sp, #0]
 800243c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	699a      	ldr	r2, [r3, #24]
 8002440:	f042 0204 	orr.w	r2, r2, #4
 8002444:	619a      	str	r2, [r3, #24]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002450:	23a0      	movs	r3, #160	; 0xa0
 8002452:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002458:	2303      	movs	r3, #3
 800245a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245c:	f7fd ff1a 	bl	8000294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002460:	2340      	movs	r3, #64	; 0x40
 8002462:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002464:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002466:	a902      	add	r1, sp, #8
 8002468:	4804      	ldr	r0, [pc, #16]	; (800247c <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246e:	f7fd ff11 	bl	8000294 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002472:	b006      	add	sp, #24
 8002474:	bd10      	pop	{r4, pc}
 8002476:	bf00      	nop
 8002478:	40013000 	.word	0x40013000
 800247c:	40010800 	.word	0x40010800

08002480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002480:	b510      	push	{r4, lr}
 8002482:	4604      	mov	r4, r0
 8002484:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002486:	2210      	movs	r2, #16
 8002488:	2100      	movs	r1, #0
 800248a:	a802      	add	r0, sp, #8
 800248c:	f000 fbce 	bl	8002c2c <memset>
  if(huart->Instance==USART1)
 8002490:	6822      	ldr	r2, [r4, #0]
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <HAL_UART_MspInit+0x70>)
 8002494:	429a      	cmp	r2, r3
 8002496:	d128      	bne.n	80024ea <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002498:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800249c:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80024a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024a4:	619a      	str	r2, [r3, #24]
 80024a6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	4812      	ldr	r0, [pc, #72]	; (80024f4 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80024aa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80024ae:	9200      	str	r2, [sp, #0]
 80024b0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b2:	699a      	ldr	r2, [r3, #24]
 80024b4:	f042 0204 	orr.w	r2, r2, #4
 80024b8:	619a      	str	r2, [r3, #24]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024c8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024ce:	2303      	movs	r3, #3
 80024d0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d2:	f7fd fedf 	bl	8000294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024da:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024dc:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024de:	a902      	add	r1, sp, #8
 80024e0:	4804      	ldr	r0, [pc, #16]	; (80024f4 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e6:	f7fd fed5 	bl	8000294 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024ea:	b006      	add	sp, #24
 80024ec:	bd10      	pop	{r4, pc}
 80024ee:	bf00      	nop
 80024f0:	40013800 	.word	0x40013800
 80024f4:	40010800 	.word	0x40010800

080024f8 <NMI_Handler>:
 80024f8:	4770      	bx	lr

080024fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024fa:	e7fe      	b.n	80024fa <HardFault_Handler>

080024fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024fc:	e7fe      	b.n	80024fc <MemManage_Handler>

080024fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024fe:	e7fe      	b.n	80024fe <BusFault_Handler>

08002500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002500:	e7fe      	b.n	8002500 <UsageFault_Handler>

08002502 <SVC_Handler>:
 8002502:	4770      	bx	lr

08002504 <DebugMon_Handler>:
 8002504:	4770      	bx	lr

08002506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002506:	4770      	bx	lr

08002508 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002508:	f7fd be56 	b.w	80001b8 <HAL_IncTick>

0800250c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <SystemInit+0x40>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	f042 0201 	orr.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002516:	6859      	ldr	r1, [r3, #4]
 8002518:	4a0d      	ldr	r2, [pc, #52]	; (8002550 <SystemInit+0x44>)
 800251a:	400a      	ands	r2, r1
 800251c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002524:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002528:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002530:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002538:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800253a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800253e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002540:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <SystemInit+0x48>)
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	f8ff0000 	.word	0xf8ff0000
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8002558:	f000 b906 	b.w	8002768 <USER_SPI_initialize>

0800255c <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800255c:	f000 b99a 	b.w	8002894 <USER_SPI_status>

08002560 <USER_read>:
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8002560:	f000 b9a2 	b.w	80028a8 <USER_SPI_read>

08002564 <USER_write>:
	UINT count          /* Number of sectors to write */
)
{ 
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8002564:	f000 b9e0 	b.w	8002928 <USER_SPI_write>

08002568 <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8002568:	f000 ba2e 	b.w	80029c8 <USER_SPI_ioctl>

0800256c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800256c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi1, &dat, &rxDat, 1, 50);
 800256e:	2332      	movs	r3, #50	; 0x32
{
 8002570:	f88d 000f 	strb.w	r0, [sp, #15]
    HAL_SPI_TransmitReceive(&hspi1, &dat, &rxDat, 1, 50);
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	f10d 0217 	add.w	r2, sp, #23
 800257a:	2301      	movs	r3, #1
 800257c:	f10d 010f 	add.w	r1, sp, #15
 8002580:	4803      	ldr	r0, [pc, #12]	; (8002590 <xchg_spi+0x24>)
 8002582:	f7fe fa5e 	bl	8000a42 <HAL_SPI_TransmitReceive>
    return rxDat;
}
 8002586:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800258a:	b007      	add	sp, #28
 800258c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002590:	20000974 	.word	0x20000974

08002594 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002594:	b570      	push	{r4, r5, r6, lr}
 8002596:	4605      	mov	r5, r0
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002598:	f7fd fe1a 	bl	80001d0 <HAL_GetTick>
 800259c:	4606      	mov	r6, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
	do {
		d = xchg_spi(0xFF);
 800259e:	20ff      	movs	r0, #255	; 0xff
 80025a0:	f7ff ffe4 	bl	800256c <xchg_spi>
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80025a4:	28ff      	cmp	r0, #255	; 0xff
		d = xchg_spi(0xFF);
 80025a6:	4604      	mov	r4, r0
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80025a8:	d004      	beq.n	80025b4 <wait_ready+0x20>
 80025aa:	f7fd fe11 	bl	80001d0 <HAL_GetTick>
 80025ae:	1b80      	subs	r0, r0, r6
 80025b0:	4285      	cmp	r5, r0
 80025b2:	d8f4      	bhi.n	800259e <wait_ready+0xa>

	return (d == 0xFF) ? 1 : 0;
}
 80025b4:	f1a4 03ff 	sub.w	r3, r4, #255	; 0xff
 80025b8:	4258      	negs	r0, r3
 80025ba:	4158      	adcs	r0, r3
 80025bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080025c0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80025c0:	b508      	push	{r3, lr}
	CS_HIGH();		/* Set CS# high */
 80025c2:	4805      	ldr	r0, [pc, #20]	; (80025d8 <despiselect+0x18>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025ca:	f7fd ff43 	bl	8000454 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */

}
 80025ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80025d2:	20ff      	movs	r0, #255	; 0xff
 80025d4:	f7ff bfca 	b.w	800256c <xchg_spi>
 80025d8:	40010c00 	.word	0x40010c00

080025dc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80025dc:	b510      	push	{r4, lr}
	CS_LOW();		/* Set CS# low */
 80025de:	2200      	movs	r2, #0
 80025e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025e4:	4808      	ldr	r0, [pc, #32]	; (8002608 <spiselect+0x2c>)
 80025e6:	f7fd ff35 	bl	8000454 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80025ea:	20ff      	movs	r0, #255	; 0xff
 80025ec:	f7ff ffbe 	bl	800256c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80025f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025f4:	f7ff ffce 	bl	8002594 <wait_ready>
 80025f8:	4604      	mov	r4, r0
 80025fa:	b918      	cbnz	r0, 8002604 <spiselect+0x28>

	despiselect();
 80025fc:	f7ff ffe0 	bl	80025c0 <despiselect>
	return 0;	/* Timeout */
}
 8002600:	4620      	mov	r0, r4
 8002602:	bd10      	pop	{r4, pc}
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002604:	2401      	movs	r4, #1
 8002606:	e7fb      	b.n	8002600 <spiselect+0x24>
 8002608:	40010c00 	.word	0x40010c00

0800260c <send_cmd>:
)
{
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800260c:	0602      	lsls	r2, r0, #24
{
 800260e:	b538      	push	{r3, r4, r5, lr}
 8002610:	4604      	mov	r4, r0
 8002612:	460d      	mov	r5, r1
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002614:	d507      	bpl.n	8002626 <send_cmd+0x1a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
 8002616:	2100      	movs	r1, #0
 8002618:	2037      	movs	r0, #55	; 0x37
 800261a:	f7ff fff7 	bl	800260c <send_cmd>
		if (res > 1) return res;
 800261e:	2801      	cmp	r0, #1
 8002620:	d833      	bhi.n	800268a <send_cmd+0x7e>
		cmd &= 0x7F;
 8002622:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002626:	2c0c      	cmp	r4, #12
 8002628:	d128      	bne.n	800267c <send_cmd+0x70>
		despiselect();
		if (!spiselect()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800262a:	f044 0040 	orr.w	r0, r4, #64	; 0x40
 800262e:	f7ff ff9d 	bl	800256c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002632:	0e28      	lsrs	r0, r5, #24
 8002634:	f7ff ff9a 	bl	800256c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002638:	f3c5 4007 	ubfx	r0, r5, #16, #8
 800263c:	f7ff ff96 	bl	800256c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002640:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8002644:	f7ff ff92 	bl	800256c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002648:	b2e8      	uxtb	r0, r5
 800264a:	f7ff ff8f 	bl	800256c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800264e:	b1ec      	cbz	r4, 800268c <send_cmd+0x80>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002650:	2c08      	cmp	r4, #8
 8002652:	bf14      	ite	ne
 8002654:	2001      	movne	r0, #1
 8002656:	2087      	moveq	r0, #135	; 0x87
	xchg_spi(n);
 8002658:	f7ff ff88 	bl	800256c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800265c:	2c0c      	cmp	r4, #12
 800265e:	d102      	bne.n	8002666 <send_cmd+0x5a>
 8002660:	20ff      	movs	r0, #255	; 0xff
 8002662:	f7ff ff83 	bl	800256c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002666:	240a      	movs	r4, #10
	n = 10;								/* Wait for response (10 bytes max) */
	do {
		res = xchg_spi(0xFF);
 8002668:	20ff      	movs	r0, #255	; 0xff
 800266a:	f7ff ff7f 	bl	800256c <xchg_spi>
	} while ((res & 0x80) && --n);
 800266e:	0603      	lsls	r3, r0, #24
 8002670:	d50b      	bpl.n	800268a <send_cmd+0x7e>
 8002672:	3c01      	subs	r4, #1
 8002674:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002678:	d1f6      	bne.n	8002668 <send_cmd+0x5c>
 800267a:	bd38      	pop	{r3, r4, r5, pc}
		despiselect();
 800267c:	f7ff ffa0 	bl	80025c0 <despiselect>
		if (!spiselect()) return 0xFF;
 8002680:	f7ff ffac 	bl	80025dc <spiselect>
 8002684:	2800      	cmp	r0, #0
 8002686:	d1d0      	bne.n	800262a <send_cmd+0x1e>
 8002688:	20ff      	movs	r0, #255	; 0xff

	return res;							/* Return received response */
}
 800268a:	bd38      	pop	{r3, r4, r5, pc}
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800268c:	2095      	movs	r0, #149	; 0x95
 800268e:	e7e3      	b.n	8002658 <send_cmd+0x4c>

08002690 <xmit_datablock>:
{
 8002690:	b538      	push	{r3, r4, r5, lr}
 8002692:	4604      	mov	r4, r0
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002694:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
{
 8002698:	460d      	mov	r5, r1
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800269a:	f7ff ff7b 	bl	8002594 <wait_ready>
 800269e:	b1e8      	cbz	r0, 80026dc <xmit_datablock+0x4c>
	xchg_spi(token);					/* Send token */
 80026a0:	4628      	mov	r0, r5
 80026a2:	f7ff ff63 	bl	800256c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80026a6:	2dfd      	cmp	r5, #253	; 0xfd
 80026a8:	d017      	beq.n	80026da <xmit_datablock+0x4a>
 80026aa:	1e65      	subs	r5, r4, #1
 80026ac:	f204 14ff 	addw	r4, r4, #511	; 0x1ff
		xchg_spi(*(buff+i));
 80026b0:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80026b4:	f7ff ff5a 	bl	800256c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80026b8:	42a5      	cmp	r5, r4
 80026ba:	d1f9      	bne.n	80026b0 <xmit_datablock+0x20>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80026bc:	20ff      	movs	r0, #255	; 0xff
 80026be:	f7ff ff55 	bl	800256c <xchg_spi>
 80026c2:	20ff      	movs	r0, #255	; 0xff
 80026c4:	f7ff ff52 	bl	800256c <xchg_spi>
		resp = xchg_spi(0xFF);				/* Receive data resp */
 80026c8:	20ff      	movs	r0, #255	; 0xff
 80026ca:	f7ff ff4f 	bl	800256c <xchg_spi>
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80026ce:	f000 001f 	and.w	r0, r0, #31
 80026d2:	1f43      	subs	r3, r0, #5
 80026d4:	4258      	negs	r0, r3
 80026d6:	4158      	adcs	r0, r3
 80026d8:	bd38      	pop	{r3, r4, r5, pc}
	return 1;
 80026da:	2001      	movs	r0, #1
}
 80026dc:	bd38      	pop	{r3, r4, r5, pc}
	...

080026e0 <SPI_Timer_On>:
void SPI_Timer_On(uint32_t waitTicks) {
 80026e0:	b510      	push	{r4, lr}
 80026e2:	4604      	mov	r4, r0
    spiTimerTickStart = HAL_GetTick();
 80026e4:	f7fd fd74 	bl	80001d0 <HAL_GetTick>
 80026e8:	4b02      	ldr	r3, [pc, #8]	; (80026f4 <SPI_Timer_On+0x14>)
 80026ea:	6018      	str	r0, [r3, #0]
    spiTimerTickDelay = waitTicks;
 80026ec:	4b02      	ldr	r3, [pc, #8]	; (80026f8 <SPI_Timer_On+0x18>)
 80026ee:	601c      	str	r4, [r3, #0]
 80026f0:	bd10      	pop	{r4, pc}
 80026f2:	bf00      	nop
 80026f4:	200009cc 	.word	0x200009cc
 80026f8:	200009d0 	.word	0x200009d0

080026fc <SPI_Timer_Status>:
uint8_t SPI_Timer_Status() {
 80026fc:	b508      	push	{r3, lr}
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80026fe:	f7fd fd67 	bl	80001d0 <HAL_GetTick>
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <SPI_Timer_Status+0x1c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	1ac0      	subs	r0, r0, r3
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <SPI_Timer_Status+0x20>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4298      	cmp	r0, r3
 800270e:	bf2c      	ite	cs
 8002710:	2000      	movcs	r0, #0
 8002712:	2001      	movcc	r0, #1
 8002714:	bd08      	pop	{r3, pc}
 8002716:	bf00      	nop
 8002718:	200009cc 	.word	0x200009cc
 800271c:	200009d0 	.word	0x200009d0

08002720 <rcvr_datablock>:
{
 8002720:	b538      	push	{r3, r4, r5, lr}
 8002722:	4604      	mov	r4, r0
	SPI_Timer_On(200);
 8002724:	20c8      	movs	r0, #200	; 0xc8
{
 8002726:	460d      	mov	r5, r1
	SPI_Timer_On(200);
 8002728:	f7ff ffda 	bl	80026e0 <SPI_Timer_On>
		token = xchg_spi(0xFF);
 800272c:	20ff      	movs	r0, #255	; 0xff
 800272e:	f7ff ff1d 	bl	800256c <xchg_spi>
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002732:	28ff      	cmp	r0, #255	; 0xff
 8002734:	d105      	bne.n	8002742 <rcvr_datablock+0x22>
 8002736:	f7ff ffe1 	bl	80026fc <SPI_Timer_Status>
 800273a:	2800      	cmp	r0, #0
 800273c:	d1f6      	bne.n	800272c <rcvr_datablock+0xc>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800273e:	2000      	movs	r0, #0
 8002740:	bd38      	pop	{r3, r4, r5, pc}
 8002742:	28fe      	cmp	r0, #254	; 0xfe
 8002744:	d1fb      	bne.n	800273e <rcvr_datablock+0x1e>
 8002746:	4425      	add	r5, r4
	for(UINT i=0; i<btr; i++) {
 8002748:	42a5      	cmp	r5, r4
		*(buff+i) = xchg_spi(0xFF);
 800274a:	f04f 00ff 	mov.w	r0, #255	; 0xff
	for(UINT i=0; i<btr; i++) {
 800274e:	d106      	bne.n	800275e <rcvr_datablock+0x3e>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002750:	f7ff ff0c 	bl	800256c <xchg_spi>
 8002754:	20ff      	movs	r0, #255	; 0xff
 8002756:	f7ff ff09 	bl	800256c <xchg_spi>
 800275a:	2001      	movs	r0, #1
}
 800275c:	bd38      	pop	{r3, r4, r5, pc}
		*(buff+i) = xchg_spi(0xFF);
 800275e:	f7ff ff05 	bl	800256c <xchg_spi>
 8002762:	f804 0b01 	strb.w	r0, [r4], #1
 8002766:	e7ef      	b.n	8002748 <rcvr_datablock+0x28>

08002768 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800276a:	2800      	cmp	r0, #0
 800276c:	f040 8089 	bne.w	8002882 <USER_SPI_initialize+0x11a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002770:	4b45      	ldr	r3, [pc, #276]	; (8002888 <USER_SPI_initialize+0x120>)
 8002772:	781a      	ldrb	r2, [r3, #0]
 8002774:	461d      	mov	r5, r3
 8002776:	f012 0f02 	tst.w	r2, #2
 800277a:	d003      	beq.n	8002784 <USER_SPI_initialize+0x1c>
 800277c:	7818      	ldrb	r0, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
	} else {			/* Failed */
		Stat = STA_NOINIT;
	}

	return Stat;
 800277e:	b2c0      	uxtb	r0, r0
}
 8002780:	b003      	add	sp, #12
 8002782:	bdf0      	pop	{r4, r5, r6, r7, pc}
	FCLK_SLOW();
 8002784:	2338      	movs	r3, #56	; 0x38
 8002786:	240a      	movs	r4, #10
 8002788:	4e40      	ldr	r6, [pc, #256]	; (800288c <USER_SPI_initialize+0x124>)
 800278a:	61f3      	str	r3, [r6, #28]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800278c:	20ff      	movs	r0, #255	; 0xff
 800278e:	3c01      	subs	r4, #1
 8002790:	f7ff feec 	bl	800256c <xchg_spi>
 8002794:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002798:	d1f8      	bne.n	800278c <USER_SPI_initialize+0x24>
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800279a:	4621      	mov	r1, r4
 800279c:	4620      	mov	r0, r4
 800279e:	f7ff ff35 	bl	800260c <send_cmd>
 80027a2:	2801      	cmp	r0, #1
 80027a4:	4607      	mov	r7, r0
 80027a6:	d161      	bne.n	800286c <USER_SPI_initialize+0x104>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80027a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027ac:	f7ff ff98 	bl	80026e0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80027b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80027b4:	2008      	movs	r0, #8
 80027b6:	f7ff ff29 	bl	800260c <send_cmd>
 80027ba:	2801      	cmp	r0, #1
 80027bc:	d140      	bne.n	8002840 <USER_SPI_initialize+0xd8>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80027be:	af01      	add	r7, sp, #4
 80027c0:	20ff      	movs	r0, #255	; 0xff
 80027c2:	f7ff fed3 	bl	800256c <xchg_spi>
 80027c6:	5538      	strb	r0, [r7, r4]
 80027c8:	3401      	adds	r4, #1
 80027ca:	2c04      	cmp	r4, #4
 80027cc:	d1f8      	bne.n	80027c0 <USER_SPI_initialize+0x58>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80027ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d14a      	bne.n	800286c <USER_SPI_initialize+0x104>
 80027d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80027da:	2baa      	cmp	r3, #170	; 0xaa
 80027dc:	d146      	bne.n	800286c <USER_SPI_initialize+0x104>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80027de:	f7ff ff8d 	bl	80026fc <SPI_Timer_Status>
 80027e2:	bb28      	cbnz	r0, 8002830 <USER_SPI_initialize+0xc8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80027e4:	f7ff ff8a 	bl	80026fc <SPI_Timer_Status>
 80027e8:	2800      	cmp	r0, #0
 80027ea:	d03f      	beq.n	800286c <USER_SPI_initialize+0x104>
 80027ec:	2100      	movs	r1, #0
 80027ee:	203a      	movs	r0, #58	; 0x3a
 80027f0:	f7ff ff0c 	bl	800260c <send_cmd>
 80027f4:	2800      	cmp	r0, #0
 80027f6:	d139      	bne.n	800286c <USER_SPI_initialize+0x104>
 80027f8:	4604      	mov	r4, r0
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80027fa:	20ff      	movs	r0, #255	; 0xff
 80027fc:	f7ff feb6 	bl	800256c <xchg_spi>
 8002800:	5538      	strb	r0, [r7, r4]
 8002802:	3401      	adds	r4, #1
 8002804:	2c04      	cmp	r4, #4
 8002806:	d1f8      	bne.n	80027fa <USER_SPI_initialize+0x92>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002808:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800280c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002810:	bf14      	ite	ne
 8002812:	240c      	movne	r4, #12
 8002814:	2404      	moveq	r4, #4
	CardType = ty;	/* Card type */
 8002816:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <USER_SPI_initialize+0x128>)
 8002818:	701c      	strb	r4, [r3, #0]
	despiselect();
 800281a:	f7ff fed1 	bl	80025c0 <despiselect>
	if (ty) {			/* OK */
 800281e:	b374      	cbz	r4, 800287e <USER_SPI_initialize+0x116>
		FCLK_FAST();			/* Set fast clock */
 8002820:	2300      	movs	r3, #0
 8002822:	61f3      	str	r3, [r6, #28]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002824:	782b      	ldrb	r3, [r5, #0]
 8002826:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		Stat = STA_NOINIT;
 800282a:	702b      	strb	r3, [r5, #0]
	return Stat;
 800282c:	7828      	ldrb	r0, [r5, #0]
 800282e:	e7a6      	b.n	800277e <USER_SPI_initialize+0x16>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002830:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002834:	20a9      	movs	r0, #169	; 0xa9
 8002836:	f7ff fee9 	bl	800260c <send_cmd>
 800283a:	2800      	cmp	r0, #0
 800283c:	d1cf      	bne.n	80027de <USER_SPI_initialize+0x76>
 800283e:	e7d1      	b.n	80027e4 <USER_SPI_initialize+0x7c>
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002840:	4621      	mov	r1, r4
 8002842:	20a9      	movs	r0, #169	; 0xa9
 8002844:	f7ff fee2 	bl	800260c <send_cmd>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002848:	2802      	cmp	r0, #2
 800284a:	bf36      	itet	cc
 800284c:	2402      	movcc	r4, #2
 800284e:	2401      	movcs	r4, #1
 8002850:	27a9      	movcc	r7, #169	; 0xa9
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002852:	f7ff ff53 	bl	80026fc <SPI_Timer_Status>
 8002856:	b958      	cbnz	r0, 8002870 <USER_SPI_initialize+0x108>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002858:	f7ff ff50 	bl	80026fc <SPI_Timer_Status>
 800285c:	b130      	cbz	r0, 800286c <USER_SPI_initialize+0x104>
 800285e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002862:	2010      	movs	r0, #16
 8002864:	f7ff fed2 	bl	800260c <send_cmd>
 8002868:	2800      	cmp	r0, #0
 800286a:	d0d4      	beq.n	8002816 <USER_SPI_initialize+0xae>
				ty = 0;
 800286c:	2400      	movs	r4, #0
 800286e:	e7d2      	b.n	8002816 <USER_SPI_initialize+0xae>
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002870:	2100      	movs	r1, #0
 8002872:	4638      	mov	r0, r7
 8002874:	f7ff feca 	bl	800260c <send_cmd>
 8002878:	2800      	cmp	r0, #0
 800287a:	d1ea      	bne.n	8002852 <USER_SPI_initialize+0xea>
 800287c:	e7ec      	b.n	8002858 <USER_SPI_initialize+0xf0>
		Stat = STA_NOINIT;
 800287e:	2301      	movs	r3, #1
 8002880:	e7d3      	b.n	800282a <USER_SPI_initialize+0xc2>
	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002882:	2001      	movs	r0, #1
 8002884:	e77c      	b.n	8002780 <USER_SPI_initialize+0x18>
 8002886:	bf00      	nop
 8002888:	20000020 	.word	0x20000020
 800288c:	20000974 	.word	0x20000974
 8002890:	2000006c 	.word	0x2000006c

08002894 <USER_SPI_status>:

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002894:	b918      	cbnz	r0, 800289e <USER_SPI_status+0xa>

	return Stat;	/* Return disk status */
 8002896:	4b03      	ldr	r3, [pc, #12]	; (80028a4 <USER_SPI_status+0x10>)
 8002898:	7818      	ldrb	r0, [r3, #0]
 800289a:	b2c0      	uxtb	r0, r0
 800289c:	4770      	bx	lr
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800289e:	2001      	movs	r0, #1
}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000020 	.word	0x20000020

080028a8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80028a8:	b538      	push	{r3, r4, r5, lr}
 80028aa:	460d      	mov	r5, r1
 80028ac:	461c      	mov	r4, r3
 80028ae:	4611      	mov	r1, r2
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80028b0:	bb88      	cbnz	r0, 8002916 <USER_SPI_read+0x6e>
 80028b2:	b383      	cbz	r3, 8002916 <USER_SPI_read+0x6e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80028b4:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <USER_SPI_read+0x78>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	07da      	lsls	r2, r3, #31
 80028ba:	d42e      	bmi.n	800291a <USER_SPI_read+0x72>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80028bc:	4b19      	ldr	r3, [pc, #100]	; (8002924 <USER_SPI_read+0x7c>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	071b      	lsls	r3, r3, #28
 80028c2:	bf58      	it	pl
 80028c4:	0249      	lslpl	r1, r1, #9

	if (count == 1) {	/* Single sector read */
 80028c6:	2c01      	cmp	r4, #1
 80028c8:	d111      	bne.n	80028ee <USER_SPI_read+0x46>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80028ca:	2011      	movs	r0, #17
 80028cc:	f7ff fe9e 	bl	800260c <send_cmd>
 80028d0:	b938      	cbnz	r0, 80028e2 <USER_SPI_read+0x3a>
			&& rcvr_datablock(buff, 512)) {
 80028d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028d6:	4628      	mov	r0, r5
 80028d8:	f7ff ff22 	bl	8002720 <rcvr_datablock>
 80028dc:	fab0 f480 	clz	r4, r0
 80028e0:	0964      	lsrs	r4, r4, #5
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	despiselect();
 80028e2:	f7ff fe6d 	bl	80025c0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80028e6:	1c20      	adds	r0, r4, #0
 80028e8:	bf18      	it	ne
 80028ea:	2001      	movne	r0, #1
 80028ec:	bd38      	pop	{r3, r4, r5, pc}
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80028ee:	2012      	movs	r0, #18
 80028f0:	f7ff fe8c 	bl	800260c <send_cmd>
 80028f4:	2800      	cmp	r0, #0
 80028f6:	d1f4      	bne.n	80028e2 <USER_SPI_read+0x3a>
				if (!rcvr_datablock(buff, 512)) break;
 80028f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028fc:	4628      	mov	r0, r5
 80028fe:	f7ff ff0f 	bl	8002720 <rcvr_datablock>
 8002902:	b118      	cbz	r0, 800290c <USER_SPI_read+0x64>
			} while (--count);
 8002904:	3c01      	subs	r4, #1
				buff += 512;
 8002906:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 800290a:	d1f5      	bne.n	80028f8 <USER_SPI_read+0x50>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800290c:	2100      	movs	r1, #0
 800290e:	200c      	movs	r0, #12
 8002910:	f7ff fe7c 	bl	800260c <send_cmd>
 8002914:	e7e5      	b.n	80028e2 <USER_SPI_read+0x3a>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002916:	2004      	movs	r0, #4
 8002918:	bd38      	pop	{r3, r4, r5, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800291a:	2003      	movs	r0, #3
}
 800291c:	bd38      	pop	{r3, r4, r5, pc}
 800291e:	bf00      	nop
 8002920:	20000020 	.word	0x20000020
 8002924:	2000006c 	.word	0x2000006c

08002928 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	460d      	mov	r5, r1
 800292c:	4616      	mov	r6, r2
 800292e:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002930:	2800      	cmp	r0, #0
 8002932:	d13f      	bne.n	80029b4 <USER_SPI_write+0x8c>
 8002934:	2b00      	cmp	r3, #0
 8002936:	d03d      	beq.n	80029b4 <USER_SPI_write+0x8c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002938:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <USER_SPI_write+0x98>)
 800293a:	781a      	ldrb	r2, [r3, #0]
 800293c:	07d0      	lsls	r0, r2, #31
 800293e:	d43b      	bmi.n	80029b8 <USER_SPI_write+0x90>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	0759      	lsls	r1, r3, #29
 8002944:	d43a      	bmi.n	80029bc <USER_SPI_write+0x94>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002946:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <USER_SPI_write+0x9c>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	071a      	lsls	r2, r3, #28
 800294c:	bf58      	it	pl
 800294e:	0276      	lslpl	r6, r6, #9

	if (count == 1) {	/* Single sector write */
 8002950:	2c01      	cmp	r4, #1
 8002952:	d111      	bne.n	8002978 <USER_SPI_write+0x50>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002954:	4631      	mov	r1, r6
 8002956:	2018      	movs	r0, #24
 8002958:	f7ff fe58 	bl	800260c <send_cmd>
 800295c:	bb40      	cbnz	r0, 80029b0 <USER_SPI_write+0x88>
			&& xmit_datablock(buff, 0xFE)) {
 800295e:	21fe      	movs	r1, #254	; 0xfe
 8002960:	4628      	mov	r0, r5
 8002962:	f7ff fe95 	bl	8002690 <xmit_datablock>
 8002966:	fab0 f480 	clz	r4, r0
 800296a:	0964      	lsrs	r4, r4, #5
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
		}
	}
	despiselect();
 800296c:	f7ff fe28 	bl	80025c0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002970:	1c20      	adds	r0, r4, #0
 8002972:	bf18      	it	ne
 8002974:	2001      	movne	r0, #1
 8002976:	bd70      	pop	{r4, r5, r6, pc}
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002978:	f013 0f06 	tst.w	r3, #6
 800297c:	d003      	beq.n	8002986 <USER_SPI_write+0x5e>
 800297e:	4621      	mov	r1, r4
 8002980:	2097      	movs	r0, #151	; 0x97
 8002982:	f7ff fe43 	bl	800260c <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002986:	4631      	mov	r1, r6
 8002988:	2019      	movs	r0, #25
 800298a:	f7ff fe3f 	bl	800260c <send_cmd>
 800298e:	2800      	cmp	r0, #0
 8002990:	d1ec      	bne.n	800296c <USER_SPI_write+0x44>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002992:	21fc      	movs	r1, #252	; 0xfc
 8002994:	4628      	mov	r0, r5
 8002996:	f7ff fe7b 	bl	8002690 <xmit_datablock>
 800299a:	b118      	cbz	r0, 80029a4 <USER_SPI_write+0x7c>
			} while (--count);
 800299c:	3c01      	subs	r4, #1
				buff += 512;
 800299e:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 80029a2:	d1f6      	bne.n	8002992 <USER_SPI_write+0x6a>
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80029a4:	21fd      	movs	r1, #253	; 0xfd
 80029a6:	2000      	movs	r0, #0
 80029a8:	f7ff fe72 	bl	8002690 <xmit_datablock>
 80029ac:	2800      	cmp	r0, #0
 80029ae:	d1dd      	bne.n	800296c <USER_SPI_write+0x44>
 80029b0:	2401      	movs	r4, #1
 80029b2:	e7db      	b.n	800296c <USER_SPI_write+0x44>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80029b4:	2004      	movs	r0, #4
 80029b6:	bd70      	pop	{r4, r5, r6, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80029b8:	2003      	movs	r0, #3
 80029ba:	bd70      	pop	{r4, r5, r6, pc}
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80029bc:	2002      	movs	r0, #2
}
 80029be:	bd70      	pop	{r4, r5, r6, pc}
 80029c0:	20000020 	.word	0x20000020
 80029c4:	2000006c 	.word	0x2000006c

080029c8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80029c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80029ca:	4615      	mov	r5, r2
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80029cc:	2800      	cmp	r0, #0
 80029ce:	f040 80db 	bne.w	8002b88 <USER_SPI_ioctl+0x1c0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80029d2:	4b6f      	ldr	r3, [pc, #444]	; (8002b90 <USER_SPI_ioctl+0x1c8>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	07d8      	lsls	r0, r3, #31
 80029d8:	f100 80d8 	bmi.w	8002b8c <USER_SPI_ioctl+0x1c4>

	res = RES_ERROR;

	switch (cmd) {
 80029dc:	2904      	cmp	r1, #4
 80029de:	f200 80d1 	bhi.w	8002b84 <USER_SPI_ioctl+0x1bc>
 80029e2:	e8df f001 	tbb	[pc, r1]
 80029e6:	0903      	.short	0x0903
 80029e8:	4bcf      	.short	0x4bcf
 80029ea:	99          	.byte	0x99
 80029eb:	00          	.byte	0x00
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80029ec:	f7ff fdf6 	bl	80025dc <spiselect>
 80029f0:	fab0 f480 	clz	r4, r0
 80029f4:	0964      	lsrs	r4, r4, #5
 80029f6:	e006      	b.n	8002a06 <USER_SPI_ioctl+0x3e>
		break;

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80029f8:	2100      	movs	r1, #0
 80029fa:	2009      	movs	r0, #9
 80029fc:	f7ff fe06 	bl	800260c <send_cmd>
 8002a00:	4604      	mov	r4, r0
 8002a02:	b128      	cbz	r0, 8002a10 <USER_SPI_ioctl+0x48>
	res = RES_ERROR;
 8002a04:	2401      	movs	r4, #1

	default:
		res = RES_PARERR;
	}

	despiselect();
 8002a06:	f7ff fddb 	bl	80025c0 <despiselect>

	return res;
}
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	b004      	add	sp, #16
 8002a0e:	bd70      	pop	{r4, r5, r6, pc}
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002a10:	2110      	movs	r1, #16
 8002a12:	4668      	mov	r0, sp
 8002a14:	f7ff fe84 	bl	8002720 <rcvr_datablock>
 8002a18:	2800      	cmp	r0, #0
 8002a1a:	d0f3      	beq.n	8002a04 <USER_SPI_ioctl+0x3c>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002a1c:	f89d 3000 	ldrb.w	r3, [sp]
 8002a20:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8002a2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002a30:	d109      	bne.n	8002a46 <USER_SPI_ioctl+0x7e>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002a32:	041a      	lsls	r2, r3, #16
 8002a34:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8002a38:	3201      	adds	r2, #1
 8002a3a:	eb01 2300 	add.w	r3, r1, r0, lsl #8
 8002a3e:	4413      	add	r3, r2
				*(DWORD*)buff = csize << 10;
 8002a40:	029b      	lsls	r3, r3, #10
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002a42:	602b      	str	r3, [r5, #0]
 8002a44:	e7df      	b.n	8002a06 <USER_SPI_ioctl+0x3e>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002a46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	0292      	lsls	r2, r2, #10
 8002a4e:	eb03 1390 	add.w	r3, r3, r0, lsr #6
 8002a52:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002a56:	4413      	add	r3, r2
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002a58:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002a5c:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8002a60:	f002 020f 	and.w	r2, r2, #15
 8002a64:	eb02 12d0 	add.w	r2, r2, r0, lsr #7
 8002a68:	0049      	lsls	r1, r1, #1
 8002a6a:	3202      	adds	r2, #2
 8002a6c:	f001 0106 	and.w	r1, r1, #6
 8002a70:	440a      	add	r2, r1
				*(DWORD*)buff = csize << (n - 9);
 8002a72:	b2d2      	uxtb	r2, r2
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002a74:	3301      	adds	r3, #1
				*(DWORD*)buff = csize << (n - 9);
 8002a76:	3a09      	subs	r2, #9
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002a78:	4093      	lsls	r3, r2
 8002a7a:	e7e2      	b.n	8002a42 <USER_SPI_ioctl+0x7a>
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002a7c:	4c45      	ldr	r4, [pc, #276]	; (8002b94 <USER_SPI_ioctl+0x1cc>)
 8002a7e:	7821      	ldrb	r1, [r4, #0]
 8002a80:	f011 0104 	ands.w	r1, r1, #4
 8002a84:	d01b      	beq.n	8002abe <USER_SPI_ioctl+0xf6>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002a86:	2100      	movs	r1, #0
 8002a88:	208d      	movs	r0, #141	; 0x8d
 8002a8a:	f7ff fdbf 	bl	800260c <send_cmd>
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d1b8      	bne.n	8002a04 <USER_SPI_ioctl+0x3c>
				xchg_spi(0xFF);
 8002a92:	20ff      	movs	r0, #255	; 0xff
 8002a94:	f7ff fd6a 	bl	800256c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002a98:	2110      	movs	r1, #16
 8002a9a:	4668      	mov	r0, sp
 8002a9c:	f7ff fe40 	bl	8002720 <rcvr_datablock>
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	d0af      	beq.n	8002a04 <USER_SPI_ioctl+0x3c>
 8002aa4:	2430      	movs	r4, #48	; 0x30
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002aa6:	20ff      	movs	r0, #255	; 0xff
 8002aa8:	3c01      	subs	r4, #1
 8002aaa:	f7ff fd5f 	bl	800256c <xchg_spi>
 8002aae:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002ab2:	d1f8      	bne.n	8002aa6 <USER_SPI_ioctl+0xde>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002ab4:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8002ab8:	091a      	lsrs	r2, r3, #4
 8002aba:	2310      	movs	r3, #16
 8002abc:	e7dc      	b.n	8002a78 <USER_SPI_ioctl+0xb0>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002abe:	2009      	movs	r0, #9
 8002ac0:	f7ff fda4 	bl	800260c <send_cmd>
 8002ac4:	4606      	mov	r6, r0
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d19c      	bne.n	8002a04 <USER_SPI_ioctl+0x3c>
 8002aca:	2110      	movs	r1, #16
 8002acc:	4668      	mov	r0, sp
 8002ace:	f7ff fe27 	bl	8002720 <rcvr_datablock>
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	d096      	beq.n	8002a04 <USER_SPI_ioctl+0x3c>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002ad6:	7820      	ldrb	r0, [r4, #0]
 8002ad8:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8002adc:	f010 0402 	ands.w	r4, r0, #2
 8002ae0:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8002ae4:	d00d      	beq.n	8002b02 <USER_SPI_ioctl+0x13a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8002aec:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002af0:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 8002af4:	0992      	lsrs	r2, r2, #6
 8002af6:	3301      	adds	r3, #1
 8002af8:	3a01      	subs	r2, #1
 8002afa:	4093      	lsls	r3, r2
 8002afc:	602b      	str	r3, [r5, #0]
				res = RES_OK;
 8002afe:	4634      	mov	r4, r6
 8002b00:	e781      	b.n	8002a06 <USER_SPI_ioctl+0x3e>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002b02:	00ca      	lsls	r2, r1, #3
 8002b04:	f002 0218 	and.w	r2, r2, #24
 8002b08:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8002b0c:	eb02 1251 	add.w	r2, r2, r1, lsr #5
 8002b10:	3301      	adds	r3, #1
 8002b12:	fb02 3303 	mla	r3, r2, r3, r3
 8002b16:	e794      	b.n	8002a42 <USER_SPI_ioctl+0x7a>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002b18:	4c1e      	ldr	r4, [pc, #120]	; (8002b94 <USER_SPI_ioctl+0x1cc>)
 8002b1a:	7822      	ldrb	r2, [r4, #0]
 8002b1c:	f012 0f06 	tst.w	r2, #6
 8002b20:	f43f af70 	beq.w	8002a04 <USER_SPI_ioctl+0x3c>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002b24:	466a      	mov	r2, sp
 8002b26:	210b      	movs	r1, #11
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f7ff ff4d 	bl	80029c8 <USER_SPI_ioctl>
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	f47f af68 	bne.w	8002a04 <USER_SPI_ioctl+0x3c>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002b34:	f89d 3000 	ldrb.w	r3, [sp]
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	d104      	bne.n	8002b46 <USER_SPI_ioctl+0x17e>
 8002b3c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8002b40:	065a      	lsls	r2, r3, #25
 8002b42:	f57f af5f 	bpl.w	8002a04 <USER_SPI_ioctl+0x3c>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002b46:	cd22      	ldmia	r5, {r1, r5}
		if (!(CardType & CT_BLOCK)) {
 8002b48:	7823      	ldrb	r3, [r4, #0]
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002b4a:	2020      	movs	r0, #32
		if (!(CardType & CT_BLOCK)) {
 8002b4c:	071b      	lsls	r3, r3, #28
			st *= 512; ed *= 512;
 8002b4e:	bf5c      	itt	pl
 8002b50:	0249      	lslpl	r1, r1, #9
 8002b52:	026d      	lslpl	r5, r5, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002b54:	f7ff fd5a 	bl	800260c <send_cmd>
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	f47f af53 	bne.w	8002a04 <USER_SPI_ioctl+0x3c>
 8002b5e:	4629      	mov	r1, r5
 8002b60:	2021      	movs	r0, #33	; 0x21
 8002b62:	f7ff fd53 	bl	800260c <send_cmd>
 8002b66:	4601      	mov	r1, r0
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	f47f af4b 	bne.w	8002a04 <USER_SPI_ioctl+0x3c>
 8002b6e:	2026      	movs	r0, #38	; 0x26
 8002b70:	f7ff fd4c 	bl	800260c <send_cmd>
 8002b74:	2800      	cmp	r0, #0
 8002b76:	f47f af45 	bne.w	8002a04 <USER_SPI_ioctl+0x3c>
 8002b7a:	f247 5030 	movw	r0, #30000	; 0x7530
 8002b7e:	f7ff fd09 	bl	8002594 <wait_ready>
 8002b82:	e735      	b.n	80029f0 <USER_SPI_ioctl+0x28>
		res = RES_PARERR;
 8002b84:	2404      	movs	r4, #4
 8002b86:	e73e      	b.n	8002a06 <USER_SPI_ioctl+0x3e>
	if (drv) return RES_PARERR;					/* Check parameter */
 8002b88:	2404      	movs	r4, #4
 8002b8a:	e73e      	b.n	8002a0a <USER_SPI_ioctl+0x42>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002b8c:	2403      	movs	r4, #3
 8002b8e:	e73c      	b.n	8002a0a <USER_SPI_ioctl+0x42>
 8002b90:	20000020 	.word	0x20000020
 8002b94:	2000006c 	.word	0x2000006c

08002b98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002b98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b9a:	e003      	b.n	8002ba4 <LoopCopyDataInit>

08002b9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002b9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002ba0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002ba2:	3104      	adds	r1, #4

08002ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ba4:	480a      	ldr	r0, [pc, #40]	; (8002bd0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ba8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002baa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002bac:	d3f6      	bcc.n	8002b9c <CopyDataInit>
  ldr r2, =_sbss
 8002bae:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002bb0:	e002      	b.n	8002bb8 <LoopFillZerobss>

08002bb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002bb2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002bb4:	f842 3b04 	str.w	r3, [r2], #4

08002bb8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002bb8:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002bba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002bbc:	d3f9      	bcc.n	8002bb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002bbe:	f7ff fca5 	bl	800250c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bc2:	f000 f80f 	bl	8002be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bc6:	f7ff fb41 	bl	800224c <main>
  bx lr
 8002bca:	4770      	bx	lr
  ldr r3, =_sidata
 8002bcc:	08002d40 	.word	0x08002d40
  ldr r0, =_sdata
 8002bd0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002bd4:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8002bd8:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8002bdc:	200009d4 	.word	0x200009d4

08002be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002be0:	e7fe      	b.n	8002be0 <ADC1_2_IRQHandler>
	...

08002be4 <__libc_init_array>:
 8002be4:	b570      	push	{r4, r5, r6, lr}
 8002be6:	2500      	movs	r5, #0
 8002be8:	4e0c      	ldr	r6, [pc, #48]	; (8002c1c <__libc_init_array+0x38>)
 8002bea:	4c0d      	ldr	r4, [pc, #52]	; (8002c20 <__libc_init_array+0x3c>)
 8002bec:	1ba4      	subs	r4, r4, r6
 8002bee:	10a4      	asrs	r4, r4, #2
 8002bf0:	42a5      	cmp	r5, r4
 8002bf2:	d109      	bne.n	8002c08 <__libc_init_array+0x24>
 8002bf4:	f000 f822 	bl	8002c3c <_init>
 8002bf8:	2500      	movs	r5, #0
 8002bfa:	4e0a      	ldr	r6, [pc, #40]	; (8002c24 <__libc_init_array+0x40>)
 8002bfc:	4c0a      	ldr	r4, [pc, #40]	; (8002c28 <__libc_init_array+0x44>)
 8002bfe:	1ba4      	subs	r4, r4, r6
 8002c00:	10a4      	asrs	r4, r4, #2
 8002c02:	42a5      	cmp	r5, r4
 8002c04:	d105      	bne.n	8002c12 <__libc_init_array+0x2e>
 8002c06:	bd70      	pop	{r4, r5, r6, pc}
 8002c08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c0c:	4798      	blx	r3
 8002c0e:	3501      	adds	r5, #1
 8002c10:	e7ee      	b.n	8002bf0 <__libc_init_array+0xc>
 8002c12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c16:	4798      	blx	r3
 8002c18:	3501      	adds	r5, #1
 8002c1a:	e7f2      	b.n	8002c02 <__libc_init_array+0x1e>
 8002c1c:	08002d38 	.word	0x08002d38
 8002c20:	08002d38 	.word	0x08002d38
 8002c24:	08002d38 	.word	0x08002d38
 8002c28:	08002d3c 	.word	0x08002d3c

08002c2c <memset>:
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4402      	add	r2, r0
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d100      	bne.n	8002c36 <memset+0xa>
 8002c34:	4770      	bx	lr
 8002c36:	f803 1b01 	strb.w	r1, [r3], #1
 8002c3a:	e7f9      	b.n	8002c30 <memset+0x4>

08002c3c <_init>:
 8002c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3e:	bf00      	nop
 8002c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c42:	bc08      	pop	{r3}
 8002c44:	469e      	mov	lr, r3
 8002c46:	4770      	bx	lr

08002c48 <_fini>:
 8002c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4a:	bf00      	nop
 8002c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4e:	bc08      	pop	{r3}
 8002c50:	469e      	mov	lr, r3
 8002c52:	4770      	bx	lr

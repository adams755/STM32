
Modulo_Energia_V8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fe4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  080060f0  080060f0  000160f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080066b0  080066b0  000166b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080066b4  080066b4  000166b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  080066b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000260  20000078  08006730  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002d8  08006730  000202d8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018942  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002d35  00000000  00000000  000389e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001188  00000000  00000000  0003b718  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001060  00000000  00000000  0003c8a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000077be  00000000  00000000  0003d900  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004ecd  00000000  00000000  000450be  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00049f8b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004d1c  00000000  00000000  0004a008  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080060d8 	.word	0x080060d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080060d8 	.word	0x080060d8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000160:	4a08      	ldr	r2, [pc, #32]	; (8000184 <HAL_Init+0x28>)
 8000162:	4b08      	ldr	r3, [pc, #32]	; (8000184 <HAL_Init+0x28>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800016c:	2003      	movs	r0, #3
 800016e:	f001 fa77 	bl	8001660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 f808 	bl	8000188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000178:	f005 f90c 	bl	8005394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800017c:	2300      	movs	r3, #0
}
 800017e:	4618      	mov	r0, r3
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40022000 	.word	0x40022000

08000188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000190:	4b12      	ldr	r3, [pc, #72]	; (80001dc <HAL_InitTick+0x54>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b12      	ldr	r3, [pc, #72]	; (80001e0 <HAL_InitTick+0x58>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	4619      	mov	r1, r3
 800019a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019e:	fbb3 f3f1 	udiv	r3, r3, r1
 80001a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80001a6:	4618      	mov	r0, r3
 80001a8:	f001 fa8f 	bl	80016ca <HAL_SYSTICK_Config>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001b2:	2301      	movs	r3, #1
 80001b4:	e00e      	b.n	80001d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2b0f      	cmp	r3, #15
 80001ba:	d80a      	bhi.n	80001d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001bc:	2200      	movs	r2, #0
 80001be:	6879      	ldr	r1, [r7, #4]
 80001c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001c4:	f001 fa57 	bl	8001676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <HAL_InitTick+0x5c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e000      	b.n	80001d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001d2:	2301      	movs	r3, #1
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	20000004 	.word	0x20000004
 80001e4:	20000000 	.word	0x20000000

080001e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <HAL_IncTick+0x1c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <HAL_IncTick+0x20>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4413      	add	r3, r2
 80001f8:	4a03      	ldr	r2, [pc, #12]	; (8000208 <HAL_IncTick+0x20>)
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	20000004 	.word	0x20000004
 8000208:	20000164 	.word	0x20000164

0800020c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  return uwTick;
 8000210:	4b02      	ldr	r3, [pc, #8]	; (800021c <HAL_GetTick+0x10>)
 8000212:	681b      	ldr	r3, [r3, #0]
}
 8000214:	4618      	mov	r0, r3
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	20000164 	.word	0x20000164

08000220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000228:	f7ff fff0 	bl	800020c <HAL_GetTick>
 800022c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000238:	d005      	beq.n	8000246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <HAL_Delay+0x40>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	461a      	mov	r2, r3
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4413      	add	r3, r2
 8000244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000246:	bf00      	nop
 8000248:	f7ff ffe0 	bl	800020c <HAL_GetTick>
 800024c:	4602      	mov	r2, r0
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	1ad2      	subs	r2, r2, r3
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d3f7      	bcc.n	8000248 <HAL_Delay+0x28>
  {
  }
}
 8000258:	bf00      	nop
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000004 	.word	0x20000004

08000264 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800026c:	2300      	movs	r3, #0
 800026e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000270:	2300      	movs	r3, #0
 8000272:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000274:	2300      	movs	r3, #0
 8000276:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d101      	bne.n	8000286 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000282:	2301      	movs	r3, #1
 8000284:	e0be      	b.n	8000404 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000290:	2b00      	cmp	r3, #0
 8000292:	d109      	bne.n	80002a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2200      	movs	r2, #0
 8000298:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2200      	movs	r2, #0
 800029e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f005 f898 	bl	80053d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80002a8:	6878      	ldr	r0, [r7, #4]
 80002aa:	f000 fbb1 	bl	8000a10 <ADC_ConversionStop_Disable>
 80002ae:	4603      	mov	r3, r0
 80002b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002b6:	f003 0310 	and.w	r3, r3, #16
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8099 	bne.w	80003f2 <HAL_ADC_Init+0x18e>
 80002c0:	7dfb      	ldrb	r3, [r7, #23]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	f040 8095 	bne.w	80003f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002d0:	f023 0302 	bic.w	r3, r3, #2
 80002d4:	f043 0202 	orr.w	r2, r3, #2
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80002e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80002ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80002ee:	68ba      	ldr	r2, [r7, #8]
 80002f0:	4313      	orrs	r3, r2
 80002f2:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002fc:	d003      	beq.n	8000306 <HAL_ADC_Init+0xa2>
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d102      	bne.n	800030c <HAL_ADC_Init+0xa8>
 8000306:	f44f 7380 	mov.w	r3, #256	; 0x100
 800030a:	e000      	b.n	800030e <HAL_ADC_Init+0xaa>
 800030c:	2300      	movs	r3, #0
 800030e:	693a      	ldr	r2, [r7, #16]
 8000310:	4313      	orrs	r3, r2
 8000312:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d119      	bne.n	8000350 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d109      	bne.n	8000338 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	3b01      	subs	r3, #1
 800032a:	035a      	lsls	r2, r3, #13
 800032c:	693b      	ldr	r3, [r7, #16]
 800032e:	4313      	orrs	r3, r2
 8000330:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000334:	613b      	str	r3, [r7, #16]
 8000336:	e00b      	b.n	8000350 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800033c:	f043 0220 	orr.w	r2, r3, #32
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000348:	f043 0201 	orr.w	r2, r3, #1
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	6812      	ldr	r2, [r2, #0]
 8000358:	6852      	ldr	r2, [r2, #4]
 800035a:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 800035e:	693a      	ldr	r2, [r7, #16]
 8000360:	430a      	orrs	r2, r1
 8000362:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	6899      	ldr	r1, [r3, #8]
 800036e:	4b27      	ldr	r3, [pc, #156]	; (800040c <HAL_ADC_Init+0x1a8>)
 8000370:	400b      	ands	r3, r1
 8000372:	68b9      	ldr	r1, [r7, #8]
 8000374:	430b      	orrs	r3, r1
 8000376:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000380:	d003      	beq.n	800038a <HAL_ADC_Init+0x126>
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d104      	bne.n	8000394 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	691b      	ldr	r3, [r3, #16]
 800038e:	3b01      	subs	r3, #1
 8000390:	051b      	lsls	r3, r3, #20
 8000392:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	6812      	ldr	r2, [r2, #0]
 800039c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800039e:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 80003a2:	68fa      	ldr	r2, [r7, #12]
 80003a4:	430a      	orrs	r2, r1
 80003a6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	689a      	ldr	r2, [r3, #8]
 80003ae:	4b18      	ldr	r3, [pc, #96]	; (8000410 <HAL_ADC_Init+0x1ac>)
 80003b0:	4013      	ands	r3, r2
 80003b2:	68ba      	ldr	r2, [r7, #8]
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d10b      	bne.n	80003d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2200      	movs	r2, #0
 80003bc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c2:	f023 0303 	bic.w	r3, r3, #3
 80003c6:	f043 0201 	orr.w	r2, r3, #1
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003ce:	e018      	b.n	8000402 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003d4:	f023 0312 	bic.w	r3, r3, #18
 80003d8:	f043 0210 	orr.w	r2, r3, #16
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003e4:	f043 0201 	orr.w	r2, r3, #1
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80003ec:	2301      	movs	r3, #1
 80003ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003f0:	e007      	b.n	8000402 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003f6:	f043 0210 	orr.w	r2, r3, #16
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003fe:	2301      	movs	r3, #1
 8000400:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000402:	7dfb      	ldrb	r3, [r7, #23]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	ffe1f7fd 	.word	0xffe1f7fd
 8000410:	ff1f0efe 	.word	0xff1f0efe

08000414 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800041c:	2300      	movs	r3, #0
 800041e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000426:	2b01      	cmp	r3, #1
 8000428:	d101      	bne.n	800042e <HAL_ADC_Start+0x1a>
 800042a:	2302      	movs	r3, #2
 800042c:	e098      	b.n	8000560 <HAL_ADC_Start+0x14c>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2201      	movs	r2, #1
 8000432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	f000 fa98 	bl	800096c <ADC_Enable>
 800043c:	4603      	mov	r3, r0
 800043e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	2b00      	cmp	r3, #0
 8000444:	f040 8087 	bne.w	8000556 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800044c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000450:	f023 0301 	bic.w	r3, r3, #1
 8000454:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a41      	ldr	r2, [pc, #260]	; (8000568 <HAL_ADC_Start+0x154>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d105      	bne.n	8000472 <HAL_ADC_Start+0x5e>
 8000466:	4b41      	ldr	r3, [pc, #260]	; (800056c <HAL_ADC_Start+0x158>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800046e:	2b00      	cmp	r3, #0
 8000470:	d115      	bne.n	800049e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000476:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000488:	2b00      	cmp	r3, #0
 800048a:	d026      	beq.n	80004da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000490:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000494:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800049c:	e01d      	b.n	80004da <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a2f      	ldr	r2, [pc, #188]	; (800056c <HAL_ADC_Start+0x158>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d004      	beq.n	80004be <HAL_ADC_Start+0xaa>
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a2b      	ldr	r2, [pc, #172]	; (8000568 <HAL_ADC_Start+0x154>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d10d      	bne.n	80004da <HAL_ADC_Start+0xc6>
 80004be:	4b2b      	ldr	r3, [pc, #172]	; (800056c <HAL_ADC_Start+0x158>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d007      	beq.n	80004da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d006      	beq.n	80004f4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ea:	f023 0206 	bic.w	r2, r3, #6
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80004f2:	e002      	b.n	80004fa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2200      	movs	r2, #0
 80004f8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f06f 0202 	mvn.w	r2, #2
 800050a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000516:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800051a:	d113      	bne.n	8000544 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000520:	4a11      	ldr	r2, [pc, #68]	; (8000568 <HAL_ADC_Start+0x154>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d105      	bne.n	8000532 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <HAL_ADC_Start+0x158>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800052e:	2b00      	cmp	r3, #0
 8000530:	d108      	bne.n	8000544 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	6812      	ldr	r2, [r2, #0]
 800053a:	6892      	ldr	r2, [r2, #8]
 800053c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	e00c      	b.n	800055e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	6812      	ldr	r2, [r2, #0]
 800054c:	6892      	ldr	r2, [r2, #8]
 800054e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	e003      	b.n	800055e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2200      	movs	r2, #0
 800055a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800055e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40012800 	.word	0x40012800
 800056c:	40012400 	.word	0x40012400

08000570 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000586:	f7ff fe41 	bl	800020c <HAL_GetTick>
 800058a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00b      	beq.n	80005b2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800059e:	f043 0220 	orr.w	r2, r3, #32
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2200      	movs	r2, #0
 80005aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
 80005b0:	e0c8      	b.n	8000744 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d12a      	bne.n	8000616 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d123      	bne.n	8000616 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80005ce:	e01a      	b.n	8000606 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005d6:	d016      	beq.n	8000606 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d007      	beq.n	80005ee <HAL_ADC_PollForConversion+0x7e>
 80005de:	f7ff fe15 	bl	800020c <HAL_GetTick>
 80005e2:	4602      	mov	r2, r0
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	1ad2      	subs	r2, r2, r3
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d90b      	bls.n	8000606 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005f2:	f043 0204 	orr.w	r2, r3, #4
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000602:	2303      	movs	r3, #3
 8000604:	e09e      	b.n	8000744 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f003 0302 	and.w	r3, r3, #2
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0dd      	beq.n	80005d0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000614:	e06c      	b.n	80006f0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000616:	4b4d      	ldr	r3, [pc, #308]	; (800074c <HAL_ADC_PollForConversion+0x1dc>)
 8000618:	681c      	ldr	r4, [r3, #0]
 800061a:	2002      	movs	r0, #2
 800061c:	f001 fed8 	bl	80023d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8000620:	4603      	mov	r3, r0
 8000622:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6919      	ldr	r1, [r3, #16]
 800062c:	4b48      	ldr	r3, [pc, #288]	; (8000750 <HAL_ADC_PollForConversion+0x1e0>)
 800062e:	400b      	ands	r3, r1
 8000630:	2b00      	cmp	r3, #0
 8000632:	d118      	bne.n	8000666 <HAL_ADC_PollForConversion+0xf6>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	68d9      	ldr	r1, [r3, #12]
 800063a:	4b46      	ldr	r3, [pc, #280]	; (8000754 <HAL_ADC_PollForConversion+0x1e4>)
 800063c:	400b      	ands	r3, r1
 800063e:	2b00      	cmp	r3, #0
 8000640:	d111      	bne.n	8000666 <HAL_ADC_PollForConversion+0xf6>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	6919      	ldr	r1, [r3, #16]
 8000648:	4b43      	ldr	r3, [pc, #268]	; (8000758 <HAL_ADC_PollForConversion+0x1e8>)
 800064a:	400b      	ands	r3, r1
 800064c:	2b00      	cmp	r3, #0
 800064e:	d108      	bne.n	8000662 <HAL_ADC_PollForConversion+0xf2>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	68d9      	ldr	r1, [r3, #12]
 8000656:	4b41      	ldr	r3, [pc, #260]	; (800075c <HAL_ADC_PollForConversion+0x1ec>)
 8000658:	400b      	ands	r3, r1
 800065a:	2b00      	cmp	r3, #0
 800065c:	d101      	bne.n	8000662 <HAL_ADC_PollForConversion+0xf2>
 800065e:	2314      	movs	r3, #20
 8000660:	e020      	b.n	80006a4 <HAL_ADC_PollForConversion+0x134>
 8000662:	2329      	movs	r3, #41	; 0x29
 8000664:	e01e      	b.n	80006a4 <HAL_ADC_PollForConversion+0x134>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6919      	ldr	r1, [r3, #16]
 800066c:	4b3a      	ldr	r3, [pc, #232]	; (8000758 <HAL_ADC_PollForConversion+0x1e8>)
 800066e:	400b      	ands	r3, r1
 8000670:	2b00      	cmp	r3, #0
 8000672:	d106      	bne.n	8000682 <HAL_ADC_PollForConversion+0x112>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	68d9      	ldr	r1, [r3, #12]
 800067a:	4b38      	ldr	r3, [pc, #224]	; (800075c <HAL_ADC_PollForConversion+0x1ec>)
 800067c:	400b      	ands	r3, r1
 800067e:	2b00      	cmp	r3, #0
 8000680:	d00d      	beq.n	800069e <HAL_ADC_PollForConversion+0x12e>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	6919      	ldr	r1, [r3, #16]
 8000688:	4b35      	ldr	r3, [pc, #212]	; (8000760 <HAL_ADC_PollForConversion+0x1f0>)
 800068a:	400b      	ands	r3, r1
 800068c:	2b00      	cmp	r3, #0
 800068e:	d108      	bne.n	80006a2 <HAL_ADC_PollForConversion+0x132>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	68d9      	ldr	r1, [r3, #12]
 8000696:	4b32      	ldr	r3, [pc, #200]	; (8000760 <HAL_ADC_PollForConversion+0x1f0>)
 8000698:	400b      	ands	r3, r1
 800069a:	2b00      	cmp	r3, #0
 800069c:	d101      	bne.n	80006a2 <HAL_ADC_PollForConversion+0x132>
 800069e:	2354      	movs	r3, #84	; 0x54
 80006a0:	e000      	b.n	80006a4 <HAL_ADC_PollForConversion+0x134>
 80006a2:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80006a4:	fb03 f302 	mul.w	r3, r3, r2
 80006a8:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80006aa:	e01d      	b.n	80006e8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006b2:	d016      	beq.n	80006e2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d007      	beq.n	80006ca <HAL_ADC_PollForConversion+0x15a>
 80006ba:	f7ff fda7 	bl	800020c <HAL_GetTick>
 80006be:	4602      	mov	r2, r0
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	1ad2      	subs	r2, r2, r3
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d90b      	bls.n	80006e2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ce:	f043 0204 	orr.w	r2, r3, #4
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80006de:	2303      	movs	r3, #3
 80006e0:	e030      	b.n	8000744 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	3301      	adds	r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d3dd      	bcc.n	80006ac <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f06f 0212 	mvn.w	r2, #18
 80006f8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000710:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000714:	d115      	bne.n	8000742 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	68db      	ldr	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800071a:	2b00      	cmp	r3, #0
 800071c:	d111      	bne.n	8000742 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800072e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000732:	2b00      	cmp	r3, #0
 8000734:	d105      	bne.n	8000742 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800073a:	f043 0201 	orr.w	r2, r3, #1
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	371c      	adds	r7, #28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd90      	pop	{r4, r7, pc}
 800074c:	20000010 	.word	0x20000010
 8000750:	24924924 	.word	0x24924924
 8000754:	00924924 	.word	0x00924924
 8000758:	12492492 	.word	0x12492492
 800075c:	00492492 	.word	0x00492492
 8000760:	00249249 	.word	0x00249249

08000764 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000772:	4618      	mov	r0, r3
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800077c:	b490      	push	{r4, r7}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000786:	2300      	movs	r3, #0
 8000788:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000794:	2b01      	cmp	r3, #1
 8000796:	d101      	bne.n	800079c <HAL_ADC_ConfigChannel+0x20>
 8000798:	2302      	movs	r3, #2
 800079a:	e0dc      	b.n	8000956 <HAL_ADC_ConfigChannel+0x1da>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2201      	movs	r2, #1
 80007a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	2b06      	cmp	r3, #6
 80007aa:	d81c      	bhi.n	80007e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6819      	ldr	r1, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	3b05      	subs	r3, #5
 80007c2:	221f      	movs	r2, #31
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	43db      	mvns	r3, r3
 80007ca:	4018      	ands	r0, r3
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	681c      	ldr	r4, [r3, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	685a      	ldr	r2, [r3, #4]
 80007d4:	4613      	mov	r3, r2
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	4413      	add	r3, r2
 80007da:	3b05      	subs	r3, #5
 80007dc:	fa04 f303 	lsl.w	r3, r4, r3
 80007e0:	4303      	orrs	r3, r0
 80007e2:	634b      	str	r3, [r1, #52]	; 0x34
 80007e4:	e03c      	b.n	8000860 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	2b0c      	cmp	r3, #12
 80007ec:	d81c      	bhi.n	8000828 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6819      	ldr	r1, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	685a      	ldr	r2, [r3, #4]
 80007fc:	4613      	mov	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	3b23      	subs	r3, #35	; 0x23
 8000804:	221f      	movs	r2, #31
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	43db      	mvns	r3, r3
 800080c:	4018      	ands	r0, r3
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	681c      	ldr	r4, [r3, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	4613      	mov	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	3b23      	subs	r3, #35	; 0x23
 800081e:	fa04 f303 	lsl.w	r3, r4, r3
 8000822:	4303      	orrs	r3, r0
 8000824:	630b      	str	r3, [r1, #48]	; 0x30
 8000826:	e01b      	b.n	8000860 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6819      	ldr	r1, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685a      	ldr	r2, [r3, #4]
 8000836:	4613      	mov	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	4413      	add	r3, r2
 800083c:	3b41      	subs	r3, #65	; 0x41
 800083e:	221f      	movs	r2, #31
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	43db      	mvns	r3, r3
 8000846:	4018      	ands	r0, r3
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	681c      	ldr	r4, [r3, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	4613      	mov	r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4413      	add	r3, r2
 8000856:	3b41      	subs	r3, #65	; 0x41
 8000858:	fa04 f303 	lsl.w	r3, r4, r3
 800085c:	4303      	orrs	r3, r0
 800085e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b09      	cmp	r3, #9
 8000866:	d91c      	bls.n	80008a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6819      	ldr	r1, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	68d8      	ldr	r0, [r3, #12]
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	4613      	mov	r3, r2
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	4413      	add	r3, r2
 800087c:	3b1e      	subs	r3, #30
 800087e:	2207      	movs	r2, #7
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	4018      	ands	r0, r3
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	689c      	ldr	r4, [r3, #8]
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4613      	mov	r3, r2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	4413      	add	r3, r2
 8000896:	3b1e      	subs	r3, #30
 8000898:	fa04 f303 	lsl.w	r3, r4, r3
 800089c:	4303      	orrs	r3, r0
 800089e:	60cb      	str	r3, [r1, #12]
 80008a0:	e019      	b.n	80008d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6819      	ldr	r1, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	6918      	ldr	r0, [r3, #16]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4613      	mov	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	2207      	movs	r2, #7
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	4018      	ands	r0, r3
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	689c      	ldr	r4, [r3, #8]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4613      	mov	r3, r2
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	4413      	add	r3, r2
 80008ce:	fa04 f303 	lsl.w	r3, r4, r3
 80008d2:	4303      	orrs	r3, r0
 80008d4:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b10      	cmp	r3, #16
 80008dc:	d003      	beq.n	80008e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008e2:	2b11      	cmp	r3, #17
 80008e4:	d132      	bne.n	800094c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <HAL_ADC_ConfigChannel+0x1e4>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d125      	bne.n	800093c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d126      	bne.n	800094c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	6812      	ldr	r2, [r2, #0]
 8000906:	6892      	ldr	r2, [r2, #8]
 8000908:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800090c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b10      	cmp	r3, #16
 8000914:	d11a      	bne.n	800094c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <HAL_ADC_ConfigChannel+0x1e8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a13      	ldr	r2, [pc, #76]	; (8000968 <HAL_ADC_ConfigChannel+0x1ec>)
 800091c:	fba2 2303 	umull	r2, r3, r2, r3
 8000920:	0c9a      	lsrs	r2, r3, #18
 8000922:	4613      	mov	r3, r2
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	4413      	add	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800092c:	e002      	b.n	8000934 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	3b01      	subs	r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1f9      	bne.n	800092e <HAL_ADC_ConfigChannel+0x1b2>
 800093a:	e007      	b.n	800094c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000940:	f043 0220 	orr.w	r2, r3, #32
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000948:	2301      	movs	r3, #1
 800094a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000954:	7bfb      	ldrb	r3, [r7, #15]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bc90      	pop	{r4, r7}
 800095e:	4770      	bx	lr
 8000960:	40012400 	.word	0x40012400
 8000964:	20000010 	.word	0x20000010
 8000968:	431bde83 	.word	0x431bde83

0800096c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	2b01      	cmp	r3, #1
 8000988:	d039      	beq.n	80009fe <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	6812      	ldr	r2, [r2, #0]
 8000992:	6892      	ldr	r2, [r2, #8]
 8000994:	f042 0201 	orr.w	r2, r2, #1
 8000998:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <ADC_Enable+0x9c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <ADC_Enable+0xa0>)
 80009a0:	fba2 2303 	umull	r2, r3, r2, r3
 80009a4:	0c9b      	lsrs	r3, r3, #18
 80009a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80009a8:	e002      	b.n	80009b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1f9      	bne.n	80009aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80009b6:	f7ff fc29 	bl	800020c <HAL_GetTick>
 80009ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80009bc:	e018      	b.n	80009f0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80009be:	f7ff fc25 	bl	800020c <HAL_GetTick>
 80009c2:	4602      	mov	r2, r0
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d911      	bls.n	80009f0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d0:	f043 0210 	orr.w	r2, r3, #16
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009dc:	f043 0201 	orr.w	r2, r3, #1
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80009ec:	2301      	movs	r3, #1
 80009ee:	e007      	b.n	8000a00 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d1df      	bne.n	80009be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000010 	.word	0x20000010
 8000a0c:	431bde83 	.word	0x431bde83

08000a10 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d127      	bne.n	8000a7a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	6812      	ldr	r2, [r2, #0]
 8000a32:	6892      	ldr	r2, [r2, #8]
 8000a34:	f022 0201 	bic.w	r2, r2, #1
 8000a38:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000a3a:	f7ff fbe7 	bl	800020c <HAL_GetTick>
 8000a3e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a40:	e014      	b.n	8000a6c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000a42:	f7ff fbe3 	bl	800020c <HAL_GetTick>
 8000a46:	4602      	mov	r2, r0
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d90d      	bls.n	8000a6c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a54:	f043 0210 	orr.w	r2, r3, #16
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a60:	f043 0201 	orr.w	r2, r3, #1
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e007      	b.n	8000a7c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d0e3      	beq.n	8000a42 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d101      	bne.n	8000a96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e0ec      	b.n	8000c70 <HAL_CAN_Init+0x1ec>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d102      	bne.n	8000aa8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f004 fcd4 	bl	8005450 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	6812      	ldr	r2, [r2, #0]
 8000ab0:	6812      	ldr	r2, [r2, #0]
 8000ab2:	f022 0202 	bic.w	r2, r2, #2
 8000ab6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ab8:	f7ff fba8 	bl	800020c <HAL_GetTick>
 8000abc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000abe:	e012      	b.n	8000ae6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ac0:	f7ff fba4 	bl	800020c <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	2b0a      	cmp	r3, #10
 8000acc:	d90b      	bls.n	8000ae6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2205      	movs	r2, #5
 8000ade:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e0c4      	b.n	8000c70 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1e5      	bne.n	8000ac0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	6812      	ldr	r2, [r2, #0]
 8000afc:	6812      	ldr	r2, [r2, #0]
 8000afe:	f042 0201 	orr.w	r2, r2, #1
 8000b02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b04:	f7ff fb82 	bl	800020c <HAL_GetTick>
 8000b08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b0a:	e012      	b.n	8000b32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b0c:	f7ff fb7e 	bl	800020c <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	2b0a      	cmp	r3, #10
 8000b18:	d90b      	bls.n	8000b32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2205      	movs	r2, #5
 8000b2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e09e      	b.n	8000c70 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d0e5      	beq.n	8000b0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7e1b      	ldrb	r3, [r3, #24]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d108      	bne.n	8000b5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	6812      	ldr	r2, [r2, #0]
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	e007      	b.n	8000b6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	6812      	ldr	r2, [r2, #0]
 8000b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	7e5b      	ldrb	r3, [r3, #25]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d108      	bne.n	8000b84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	6812      	ldr	r2, [r2, #0]
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	e007      	b.n	8000b94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	6812      	ldr	r2, [r2, #0]
 8000b8c:	6812      	ldr	r2, [r2, #0]
 8000b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	7e9b      	ldrb	r3, [r3, #26]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d108      	bne.n	8000bae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	6812      	ldr	r2, [r2, #0]
 8000ba4:	6812      	ldr	r2, [r2, #0]
 8000ba6:	f042 0220 	orr.w	r2, r2, #32
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	e007      	b.n	8000bbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	6812      	ldr	r2, [r2, #0]
 8000bb8:	f022 0220 	bic.w	r2, r2, #32
 8000bbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	7edb      	ldrb	r3, [r3, #27]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d108      	bne.n	8000bd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	6812      	ldr	r2, [r2, #0]
 8000bd0:	f022 0210 	bic.w	r2, r2, #16
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	e007      	b.n	8000be8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	6812      	ldr	r2, [r2, #0]
 8000be0:	6812      	ldr	r2, [r2, #0]
 8000be2:	f042 0210 	orr.w	r2, r2, #16
 8000be6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	7f1b      	ldrb	r3, [r3, #28]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d108      	bne.n	8000c02 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	6812      	ldr	r2, [r2, #0]
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	f042 0208 	orr.w	r2, r2, #8
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	e007      	b.n	8000c12 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	6812      	ldr	r2, [r2, #0]
 8000c0a:	6812      	ldr	r2, [r2, #0]
 8000c0c:	f022 0208 	bic.w	r2, r2, #8
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	7f5b      	ldrb	r3, [r3, #29]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d108      	bne.n	8000c2c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	6812      	ldr	r2, [r2, #0]
 8000c22:	6812      	ldr	r2, [r2, #0]
 8000c24:	f042 0204 	orr.w	r2, r2, #4
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	e007      	b.n	8000c3c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	6812      	ldr	r2, [r2, #0]
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	f022 0204 	bic.w	r2, r2, #4
 8000c3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	6891      	ldr	r1, [r2, #8]
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	68d2      	ldr	r2, [r2, #12]
 8000c48:	4311      	orrs	r1, r2
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	6912      	ldr	r2, [r2, #16]
 8000c4e:	4311      	orrs	r1, r2
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	6952      	ldr	r2, [r2, #20]
 8000c54:	4311      	orrs	r1, r2
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	6852      	ldr	r2, [r2, #4]
 8000c5a:	3a01      	subs	r2, #1
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b087      	sub	sp, #28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c8e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c90:	7cfb      	ldrb	r3, [r7, #19]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d003      	beq.n	8000c9e <HAL_CAN_ConfigFilter+0x26>
 8000c96:	7cfb      	ldrb	r3, [r7, #19]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	f040 80aa 	bne.w	8000df2 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ca4:	f043 0201 	orr.w	r2, r3, #1
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	f003 031f 	and.w	r3, r3, #31
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	401a      	ands	r2, r3
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	69db      	ldr	r3, [r3, #28]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d123      	bne.n	8000d20 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cfa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3248      	adds	r2, #72	; 0x48
 8000d00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	6892      	ldr	r2, [r2, #8]
 8000d0c:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	6812      	ldr	r2, [r2, #0]
 8000d12:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d16:	6979      	ldr	r1, [r7, #20]
 8000d18:	3348      	adds	r3, #72	; 0x48
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	440b      	add	r3, r1
 8000d1e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	69db      	ldr	r3, [r3, #28]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d122      	bne.n	8000d6e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	431a      	orrs	r2, r3
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d48:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3248      	adds	r2, #72	; 0x48
 8000d4e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	6892      	ldr	r2, [r2, #8]
 8000d5a:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	68d2      	ldr	r2, [r2, #12]
 8000d60:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d62:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d64:	6979      	ldr	r1, [r7, #20]
 8000d66:	3348      	adds	r3, #72	; 0x48
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	440b      	add	r3, r1
 8000d6c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d109      	bne.n	8000d8a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	401a      	ands	r2, r3
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000d88:	e007      	b.n	8000d9a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	431a      	orrs	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	691b      	ldr	r3, [r3, #16]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d109      	bne.n	8000db6 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	401a      	ands	r2, r3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000db4:	e007      	b.n	8000dc6 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	6a1b      	ldr	r3, [r3, #32]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d107      	bne.n	8000dde <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000de4:	f023 0201 	bic.w	r2, r3, #1
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e006      	b.n	8000e00 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
  }
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	371c      	adds	r7, #28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b084      	sub	sp, #16
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d12e      	bne.n	8000e7c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2202      	movs	r2, #2
 8000e22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	6812      	ldr	r2, [r2, #0]
 8000e30:	f022 0201 	bic.w	r2, r2, #1
 8000e34:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e36:	f7ff f9e9 	bl	800020c <HAL_GetTick>
 8000e3a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e3c:	e012      	b.n	8000e64 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e3e:	f7ff f9e5 	bl	800020c <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	2b0a      	cmp	r3, #10
 8000e4a:	d90b      	bls.n	8000e64 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2205      	movs	r2, #5
 8000e5c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e012      	b.n	8000e8a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1e5      	bne.n	8000e3e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e006      	b.n	8000e8a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e80:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
  }
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b089      	sub	sp, #36	; 0x24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ea6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000eb0:	7ffb      	ldrb	r3, [r7, #31]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d003      	beq.n	8000ebe <HAL_CAN_AddTxMessage+0x2c>
 8000eb6:	7ffb      	ldrb	r3, [r7, #31]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	f040 80b4 	bne.w	8001026 <HAL_CAN_AddTxMessage+0x194>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10a      	bne.n	8000ede <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d105      	bne.n	8000ede <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 809c 	beq.w	8001016 <HAL_CAN_AddTxMessage+0x184>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	0e1b      	lsrs	r3, r3, #24
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d907      	bls.n	8000efe <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e09a      	b.n	8001034 <HAL_CAN_AddTxMessage+0x1a2>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000efe:	2201      	movs	r2, #1
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10d      	bne.n	8000f2c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6819      	ldr	r1, [r3, #0]
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	3318      	adds	r3, #24
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	440b      	add	r3, r1
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	e00f      	b.n	8000f4c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	6819      	ldr	r1, [r3, #0]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f3a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	68db      	ldr	r3, [r3, #12]
                                                           pHeader->IDE |
 8000f40:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3318      	adds	r3, #24
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	440b      	add	r3, r1
 8000f4a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6819      	ldr	r1, [r3, #0]
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3318      	adds	r3, #24
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	7d1b      	ldrb	r3, [r3, #20]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d111      	bne.n	8000f8c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6819      	ldr	r1, [r3, #0]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	3318      	adds	r3, #24
 8000f74:	011b      	lsls	r3, r3, #4
 8000f76:	4413      	add	r3, r2
 8000f78:	3304      	adds	r3, #4
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3318      	adds	r3, #24
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	440b      	add	r3, r1
 8000f88:	3304      	adds	r3, #4
 8000f8a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6819      	ldr	r1, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3307      	adds	r3, #7
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	061a      	lsls	r2, r3, #24
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3306      	adds	r3, #6
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	041b      	lsls	r3, r3, #16
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3305      	adds	r3, #5
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	4313      	orrs	r3, r2
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	3204      	adds	r2, #4
 8000fb0:	7812      	ldrb	r2, [r2, #0]
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	440b      	add	r3, r1
 8000fba:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000fbe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6819      	ldr	r1, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3303      	adds	r3, #3
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	061a      	lsls	r2, r3, #24
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3302      	adds	r3, #2
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	041b      	lsls	r3, r3, #16
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	7812      	ldrb	r2, [r2, #0]
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	011b      	lsls	r3, r3, #4
 8000fea:	440b      	add	r3, r1
 8000fec:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000ff0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6819      	ldr	r1, [r3, #0]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3318      	adds	r3, #24
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	4413      	add	r3, r2
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f043 0201 	orr.w	r2, r3, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3318      	adds	r3, #24
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	440b      	add	r3, r1
 8001010:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e00e      	b.n	8001034 <HAL_CAN_AddTxMessage+0x1a2>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e006      	b.n	8001034 <HAL_CAN_AddTxMessage+0x1a2>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
  }
}
 8001034:	4618      	mov	r0, r3
 8001036:	3724      	adds	r7, #36	; 0x24
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800103e:	b480      	push	{r7}
 8001040:	b085      	sub	sp, #20
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800104e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d002      	beq.n	800105c <HAL_CAN_ActivateNotification+0x1e>
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d109      	bne.n	8001070 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6812      	ldr	r2, [r2, #0]
 8001064:	6951      	ldr	r1, [r2, #20]
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	e006      	b.n	800107e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001074:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
  }
}
 800107e:	4618      	mov	r0, r3
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d07c      	beq.n	80011c8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d023      	beq.n	8001120 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2201      	movs	r2, #1
 80010de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f97d 	bl	80013ea <HAL_CAN_TxMailbox0CompleteCallback>
 80010f0:	e016      	b.n	8001120 <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d004      	beq.n	8001106 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
 8001104:	e00c      	b.n	8001120 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	2b00      	cmp	r3, #0
 800110e:	d004      	beq.n	800111a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
 8001118:	e002      	b.n	8001120 <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f980 	bl	8001420 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001126:	2b00      	cmp	r3, #0
 8001128:	d024      	beq.n	8001174 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001132:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f95c 	bl	80013fc <HAL_CAN_TxMailbox1CompleteCallback>
 8001144:	e016      	b.n	8001174 <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114c:	2b00      	cmp	r3, #0
 800114e:	d004      	beq.n	800115a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
 8001158:	e00c      	b.n	8001174 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001160:	2b00      	cmp	r3, #0
 8001162:	d004      	beq.n	800116e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
 800116c:	e002      	b.n	8001174 <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f95f 	bl	8001432 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d024      	beq.n	80011c8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001186:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f93b 	bl	800140e <HAL_CAN_TxMailbox2CompleteCallback>
 8001198:	e016      	b.n	80011c8 <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d004      	beq.n	80011ae <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
 80011ac:	e00c      	b.n	80011c8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d004      	beq.n	80011c2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
 80011c0:	e002      	b.n	80011c8 <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f93e 	bl	8001444 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00c      	beq.n	80011ec <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f003 0310 	and.w	r3, r3, #16
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d007      	beq.n	80011ec <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2210      	movs	r2, #16
 80011ea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80011ec:	6a3b      	ldr	r3, [r7, #32]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d006      	beq.n	800120e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2208      	movs	r2, #8
 8001206:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f92d 	bl	8001468 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d009      	beq.n	800122c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f915 	bl	8001456 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00c      	beq.n	8001250 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	f003 0310 	and.w	r3, r3, #16
 800123c:	2b00      	cmp	r3, #0
 800123e:	d007      	beq.n	8001250 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001246:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2210      	movs	r2, #16
 800124e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00b      	beq.n	8001272 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	f003 0308 	and.w	r3, r3, #8
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2208      	movs	r2, #8
 800126a:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f90d 	bl	800148c <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001272:	6a3b      	ldr	r3, [r7, #32]
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	2b00      	cmp	r3, #0
 800127a:	d009      	beq.n	8001290 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f8f5 	bl	800147a <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00b      	beq.n	80012b2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2210      	movs	r2, #16
 80012aa:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f8f6 	bl	800149e <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00b      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d006      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2208      	movs	r2, #8
 80012cc:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f8ee 	bl	80014b0 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d075      	beq.n	80013ca <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d06c      	beq.n	80013c2 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d008      	beq.n	8001304 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800130a:	2b00      	cmp	r3, #0
 800130c:	d008      	beq.n	8001320 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001326:	2b00      	cmp	r3, #0
 8001328:	d008      	beq.n	800133c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001342:	2b00      	cmp	r3, #0
 8001344:	d03d      	beq.n	80013c2 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800134c:	2b00      	cmp	r3, #0
 800134e:	d038      	beq.n	80013c2 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001356:	2b30      	cmp	r3, #48	; 0x30
 8001358:	d017      	beq.n	800138a <HAL_CAN_IRQHandler+0x302>
 800135a:	2b30      	cmp	r3, #48	; 0x30
 800135c:	d804      	bhi.n	8001368 <HAL_CAN_IRQHandler+0x2e0>
 800135e:	2b10      	cmp	r3, #16
 8001360:	d009      	beq.n	8001376 <HAL_CAN_IRQHandler+0x2ee>
 8001362:	2b20      	cmp	r3, #32
 8001364:	d00c      	beq.n	8001380 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001366:	e024      	b.n	80013b2 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001368:	2b50      	cmp	r3, #80	; 0x50
 800136a:	d018      	beq.n	800139e <HAL_CAN_IRQHandler+0x316>
 800136c:	2b60      	cmp	r3, #96	; 0x60
 800136e:	d01b      	beq.n	80013a8 <HAL_CAN_IRQHandler+0x320>
 8001370:	2b40      	cmp	r3, #64	; 0x40
 8001372:	d00f      	beq.n	8001394 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001374:	e01d      	b.n	80013b2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800137e:	e018      	b.n	80013b2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	f043 0310 	orr.w	r3, r3, #16
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001388:	e013      	b.n	80013b2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	f043 0320 	orr.w	r3, r3, #32
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001392:	e00e      	b.n	80013b2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800139c:	e009      	b.n	80013b2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013a6:	e004      	b.n	80013b2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013b0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	6992      	ldr	r2, [r2, #24]
 80013bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013c0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2204      	movs	r2, #4
 80013c8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d008      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f870 	bl	80014c2 <HAL_CAN_ErrorCallback>
  }
}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	; 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <NVIC_SetPriorityGrouping+0x44>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f0:	4013      	ands	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <NVIC_SetPriorityGrouping+0x44>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <NVIC_GetPriorityGrouping+0x18>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	f003 0307 	and.w	r3, r3, #7
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001542:	4908      	ldr	r1, [pc, #32]	; (8001564 <NVIC_EnableIRQ+0x2c>)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	095b      	lsrs	r3, r3, #5
 800154a:	79fa      	ldrb	r2, [r7, #7]
 800154c:	f002 021f 	and.w	r2, r2, #31
 8001550:	2001      	movs	r0, #1
 8001552:	fa00 f202 	lsl.w	r2, r0, r2
 8001556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100

08001568 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	2b00      	cmp	r3, #0
 800157a:	da0b      	bge.n	8001594 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157c:	490d      	ldr	r1, [pc, #52]	; (80015b4 <NVIC_SetPriority+0x4c>)
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	3b04      	subs	r3, #4
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	440b      	add	r3, r1
 8001590:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001592:	e009      	b.n	80015a8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	4908      	ldr	r1, [pc, #32]	; (80015b8 <NVIC_SetPriority+0x50>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00
 80015b8:	e000e100 	.word	0xe000e100

080015bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f1c3 0307 	rsb	r3, r3, #7
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	bf28      	it	cs
 80015da:	2304      	movcs	r3, #4
 80015dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3304      	adds	r3, #4
 80015e2:	2b06      	cmp	r3, #6
 80015e4:	d902      	bls.n	80015ec <NVIC_EncodePriority+0x30>
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3b03      	subs	r3, #3
 80015ea:	e000      	b.n	80015ee <NVIC_EncodePriority+0x32>
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	2201      	movs	r2, #1
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	1e5a      	subs	r2, r3, #1
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	401a      	ands	r2, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001602:	2101      	movs	r1, #1
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	1e59      	subs	r1, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	4313      	orrs	r3, r2
         );
}
 8001612:	4618      	mov	r0, r3
 8001614:	3724      	adds	r7, #36	; 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800162c:	d301      	bcc.n	8001632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162e:	2301      	movs	r3, #1
 8001630:	e00f      	b.n	8001652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <SysTick_Config+0x40>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163a:	210f      	movs	r1, #15
 800163c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001640:	f7ff ff92 	bl	8001568 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <SysTick_Config+0x40>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <SysTick_Config+0x40>)
 800164c:	2207      	movs	r2, #7
 800164e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	e000e010 	.word	0xe000e010

08001660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ff33 	bl	80014d4 <NVIC_SetPriorityGrouping>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001688:	f7ff ff48 	bl	800151c <NVIC_GetPriorityGrouping>
 800168c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	f7ff ff92 	bl	80015bc <NVIC_EncodePriority>
 8001698:	4602      	mov	r2, r0
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff61 	bl	8001568 <NVIC_SetPriority>
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff3b 	bl	8001538 <NVIC_EnableIRQ>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ffa2 	bl	800161c <SysTick_Config>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b08b      	sub	sp, #44	; 0x2c
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
 8001706:	e127      	b.n	8001958 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8001708:	2201      	movs	r2, #1
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	429a      	cmp	r2, r3
 8001722:	f040 8116 	bne.w	8001952 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b12      	cmp	r3, #18
 800172c:	d034      	beq.n	8001798 <HAL_GPIO_Init+0xb4>
 800172e:	2b12      	cmp	r3, #18
 8001730:	d80d      	bhi.n	800174e <HAL_GPIO_Init+0x6a>
 8001732:	2b02      	cmp	r3, #2
 8001734:	d02b      	beq.n	800178e <HAL_GPIO_Init+0xaa>
 8001736:	2b02      	cmp	r3, #2
 8001738:	d804      	bhi.n	8001744 <HAL_GPIO_Init+0x60>
 800173a:	2b00      	cmp	r3, #0
 800173c:	d031      	beq.n	80017a2 <HAL_GPIO_Init+0xbe>
 800173e:	2b01      	cmp	r3, #1
 8001740:	d01c      	beq.n	800177c <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001742:	e048      	b.n	80017d6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001744:	2b03      	cmp	r3, #3
 8001746:	d043      	beq.n	80017d0 <HAL_GPIO_Init+0xec>
 8001748:	2b11      	cmp	r3, #17
 800174a:	d01b      	beq.n	8001784 <HAL_GPIO_Init+0xa0>
          break;
 800174c:	e043      	b.n	80017d6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800174e:	4a87      	ldr	r2, [pc, #540]	; (800196c <HAL_GPIO_Init+0x288>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d026      	beq.n	80017a2 <HAL_GPIO_Init+0xbe>
 8001754:	4a85      	ldr	r2, [pc, #532]	; (800196c <HAL_GPIO_Init+0x288>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d806      	bhi.n	8001768 <HAL_GPIO_Init+0x84>
 800175a:	4a85      	ldr	r2, [pc, #532]	; (8001970 <HAL_GPIO_Init+0x28c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d020      	beq.n	80017a2 <HAL_GPIO_Init+0xbe>
 8001760:	4a84      	ldr	r2, [pc, #528]	; (8001974 <HAL_GPIO_Init+0x290>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d01d      	beq.n	80017a2 <HAL_GPIO_Init+0xbe>
          break;
 8001766:	e036      	b.n	80017d6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001768:	4a83      	ldr	r2, [pc, #524]	; (8001978 <HAL_GPIO_Init+0x294>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d019      	beq.n	80017a2 <HAL_GPIO_Init+0xbe>
 800176e:	4a83      	ldr	r2, [pc, #524]	; (800197c <HAL_GPIO_Init+0x298>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d016      	beq.n	80017a2 <HAL_GPIO_Init+0xbe>
 8001774:	4a82      	ldr	r2, [pc, #520]	; (8001980 <HAL_GPIO_Init+0x29c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d013      	beq.n	80017a2 <HAL_GPIO_Init+0xbe>
          break;
 800177a:	e02c      	b.n	80017d6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	623b      	str	r3, [r7, #32]
          break;
 8001782:	e028      	b.n	80017d6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	3304      	adds	r3, #4
 800178a:	623b      	str	r3, [r7, #32]
          break;
 800178c:	e023      	b.n	80017d6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	3308      	adds	r3, #8
 8001794:	623b      	str	r3, [r7, #32]
          break;
 8001796:	e01e      	b.n	80017d6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	330c      	adds	r3, #12
 800179e:	623b      	str	r3, [r7, #32]
          break;
 80017a0:	e019      	b.n	80017d6 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017aa:	2304      	movs	r3, #4
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e012      	b.n	80017d6 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d105      	bne.n	80017c4 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b8:	2308      	movs	r3, #8
 80017ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	611a      	str	r2, [r3, #16]
          break;
 80017c2:	e008      	b.n	80017d6 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c4:	2308      	movs	r3, #8
 80017c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	615a      	str	r2, [r3, #20]
          break;
 80017ce:	e002      	b.n	80017d6 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
          break;
 80017d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	2bff      	cmp	r3, #255	; 0xff
 80017da:	d801      	bhi.n	80017e0 <HAL_GPIO_Init+0xfc>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	e001      	b.n	80017e4 <HAL_GPIO_Init+0x100>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3304      	adds	r3, #4
 80017e4:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	2bff      	cmp	r3, #255	; 0xff
 80017ea:	d802      	bhi.n	80017f2 <HAL_GPIO_Init+0x10e>
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	e002      	b.n	80017f8 <HAL_GPIO_Init+0x114>
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	3b08      	subs	r3, #8
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	210f      	movs	r1, #15
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	401a      	ands	r2, r3
 800180a:	6a39      	ldr	r1, [r7, #32]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	431a      	orrs	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 8096 	beq.w	8001952 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001826:	4a57      	ldr	r2, [pc, #348]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 8001828:	4b56      	ldr	r3, [pc, #344]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6193      	str	r3, [r2, #24]
 8001832:	4b54      	ldr	r3, [pc, #336]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800183e:	4a52      	ldr	r2, [pc, #328]	; (8001988 <HAL_GPIO_Init+0x2a4>)
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	4013      	ands	r3, r2
 8001860:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a49      	ldr	r2, [pc, #292]	; (800198c <HAL_GPIO_Init+0x2a8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0x1ae>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a48      	ldr	r2, [pc, #288]	; (8001990 <HAL_GPIO_Init+0x2ac>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00d      	beq.n	800188e <HAL_GPIO_Init+0x1aa>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a47      	ldr	r2, [pc, #284]	; (8001994 <HAL_GPIO_Init+0x2b0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d007      	beq.n	800188a <HAL_GPIO_Init+0x1a6>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a46      	ldr	r2, [pc, #280]	; (8001998 <HAL_GPIO_Init+0x2b4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d101      	bne.n	8001886 <HAL_GPIO_Init+0x1a2>
 8001882:	2303      	movs	r3, #3
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x1b0>
 8001886:	2304      	movs	r3, #4
 8001888:	e004      	b.n	8001894 <HAL_GPIO_Init+0x1b0>
 800188a:	2302      	movs	r3, #2
 800188c:	e002      	b.n	8001894 <HAL_GPIO_Init+0x1b0>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <HAL_GPIO_Init+0x1b0>
 8001892:	2300      	movs	r3, #0
 8001894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001896:	f002 0203 	and.w	r2, r2, #3
 800189a:	0092      	lsls	r2, r2, #2
 800189c:	4093      	lsls	r3, r2
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80018a4:	4938      	ldr	r1, [pc, #224]	; (8001988 <HAL_GPIO_Init+0x2a4>)
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3302      	adds	r3, #2
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018be:	4937      	ldr	r1, [pc, #220]	; (800199c <HAL_GPIO_Init+0x2b8>)
 80018c0:	4b36      	ldr	r3, [pc, #216]	; (800199c <HAL_GPIO_Init+0x2b8>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]
 80018ca:	e006      	b.n	80018da <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018cc:	4933      	ldr	r1, [pc, #204]	; (800199c <HAL_GPIO_Init+0x2b8>)
 80018ce:	4b33      	ldr	r3, [pc, #204]	; (800199c <HAL_GPIO_Init+0x2b8>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	4013      	ands	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d006      	beq.n	80018f4 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018e6:	492d      	ldr	r1, [pc, #180]	; (800199c <HAL_GPIO_Init+0x2b8>)
 80018e8:	4b2c      	ldr	r3, [pc, #176]	; (800199c <HAL_GPIO_Init+0x2b8>)
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
 80018f2:	e006      	b.n	8001902 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018f4:	4929      	ldr	r1, [pc, #164]	; (800199c <HAL_GPIO_Init+0x2b8>)
 80018f6:	4b29      	ldr	r3, [pc, #164]	; (800199c <HAL_GPIO_Init+0x2b8>)
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	4013      	ands	r3, r2
 8001900:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d006      	beq.n	800191c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800190e:	4923      	ldr	r1, [pc, #140]	; (800199c <HAL_GPIO_Init+0x2b8>)
 8001910:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_GPIO_Init+0x2b8>)
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
 800191a:	e006      	b.n	800192a <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800191c:	491f      	ldr	r1, [pc, #124]	; (800199c <HAL_GPIO_Init+0x2b8>)
 800191e:	4b1f      	ldr	r3, [pc, #124]	; (800199c <HAL_GPIO_Init+0x2b8>)
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	43db      	mvns	r3, r3
 8001926:	4013      	ands	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d006      	beq.n	8001944 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001936:	4919      	ldr	r1, [pc, #100]	; (800199c <HAL_GPIO_Init+0x2b8>)
 8001938:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_GPIO_Init+0x2b8>)
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	60cb      	str	r3, [r1, #12]
 8001942:	e006      	b.n	8001952 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001944:	4915      	ldr	r1, [pc, #84]	; (800199c <HAL_GPIO_Init+0x2b8>)
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_GPIO_Init+0x2b8>)
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	43db      	mvns	r3, r3
 800194e:	4013      	ands	r3, r2
 8001950:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	3301      	adds	r3, #1
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	2b0f      	cmp	r3, #15
 800195c:	f67f aed4 	bls.w	8001708 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001960:	bf00      	nop
 8001962:	372c      	adds	r7, #44	; 0x2c
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	10210000 	.word	0x10210000
 8001970:	10110000 	.word	0x10110000
 8001974:	10120000 	.word	0x10120000
 8001978:	10310000 	.word	0x10310000
 800197c:	10320000 	.word	0x10320000
 8001980:	10220000 	.word	0x10220000
 8001984:	40021000 	.word	0x40021000
 8001988:	40010000 	.word	0x40010000
 800198c:	40010800 	.word	0x40010800
 8001990:	40010c00 	.word	0x40010c00
 8001994:	40011000 	.word	0x40011000
 8001998:	40011400 	.word	0x40011400
 800199c:	40010400 	.word	0x40010400

080019a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	887b      	ldrh	r3, [r7, #2]
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	e001      	b.n	80019c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	460b      	mov	r3, r1
 80019d8:	807b      	strh	r3, [r7, #2]
 80019da:	4613      	mov	r3, r2
 80019dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019de:	787b      	ldrb	r3, [r7, #1]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e4:	887a      	ldrh	r2, [r7, #2]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019ea:	e003      	b.n	80019f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ec:	887b      	ldrh	r3, [r7, #2]
 80019ee:	041a      	lsls	r2, r3, #16
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	611a      	str	r2, [r3, #16]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	460b      	mov	r3, r1
 8001a08:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	887b      	ldrh	r3, [r7, #2]
 8001a10:	405a      	eors	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60da      	str	r2, [r3, #12]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8087 	beq.w	8001b48 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a3a:	4b92      	ldr	r3, [pc, #584]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d00c      	beq.n	8001a60 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a46:	4b8f      	ldr	r3, [pc, #572]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d112      	bne.n	8001a78 <HAL_RCC_OscConfig+0x58>
 8001a52:	4b8c      	ldr	r3, [pc, #560]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5e:	d10b      	bne.n	8001a78 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a60:	4b88      	ldr	r3, [pc, #544]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d06c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x126>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d168      	bne.n	8001b46 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e22d      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a80:	d106      	bne.n	8001a90 <HAL_RCC_OscConfig+0x70>
 8001a82:	4a80      	ldr	r2, [pc, #512]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001a84:	4b7f      	ldr	r3, [pc, #508]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e02e      	b.n	8001aee <HAL_RCC_OscConfig+0xce>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10c      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x92>
 8001a98:	4a7a      	ldr	r2, [pc, #488]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001a9a:	4b7a      	ldr	r3, [pc, #488]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4a77      	ldr	r2, [pc, #476]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001aa6:	4b77      	ldr	r3, [pc, #476]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	e01d      	b.n	8001aee <HAL_RCC_OscConfig+0xce>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aba:	d10c      	bne.n	8001ad6 <HAL_RCC_OscConfig+0xb6>
 8001abc:	4a71      	ldr	r2, [pc, #452]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001abe:	4b71      	ldr	r3, [pc, #452]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4a6e      	ldr	r2, [pc, #440]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001aca:	4b6e      	ldr	r3, [pc, #440]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	e00b      	b.n	8001aee <HAL_RCC_OscConfig+0xce>
 8001ad6:	4a6b      	ldr	r2, [pc, #428]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001ad8:	4b6a      	ldr	r3, [pc, #424]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4a68      	ldr	r2, [pc, #416]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001ae4:	4b67      	ldr	r3, [pc, #412]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aec:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d013      	beq.n	8001b1e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7fe fb89 	bl	800020c <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001afe:	f7fe fb85 	bl	800020c <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b64      	cmp	r3, #100	; 0x64
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e1e1      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b10:	4b5c      	ldr	r3, [pc, #368]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0xde>
 8001b1c:	e014      	b.n	8001b48 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7fe fb75 	bl	800020c <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b26:	f7fe fb71 	bl	800020c <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b64      	cmp	r3, #100	; 0x64
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e1cd      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b38:	4b52      	ldr	r3, [pc, #328]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f0      	bne.n	8001b26 <HAL_RCC_OscConfig+0x106>
 8001b44:	e000      	b.n	8001b48 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b46:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d063      	beq.n	8001c1c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b54:	4b4b      	ldr	r3, [pc, #300]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00b      	beq.n	8001b78 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b60:	4b48      	ldr	r3, [pc, #288]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d11c      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x186>
 8001b6c:	4b45      	ldr	r3, [pc, #276]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d116      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b78:	4b42      	ldr	r3, [pc, #264]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_OscConfig+0x170>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e1a1      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b90:	493c      	ldr	r1, [pc, #240]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001b92:	4b3c      	ldr	r3, [pc, #240]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba4:	e03a      	b.n	8001c1c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d020      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bae:	4b36      	ldr	r3, [pc, #216]	; (8001c88 <HAL_RCC_OscConfig+0x268>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7fe fb2a 	bl	800020c <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bbc:	f7fe fb26 	bl	800020c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e182      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bce:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bda:	492a      	ldr	r1, [pc, #168]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001bdc:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
 8001bee:	e015      	b.n	8001c1c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <HAL_RCC_OscConfig+0x268>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7fe fb09 	bl	800020c <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfe:	f7fe fb05 	bl	800020c <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e161      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c10:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f0      	bne.n	8001bfe <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d039      	beq.n	8001c9c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d019      	beq.n	8001c64 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c30:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c36:	f7fe fae9 	bl	800020c <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c3e:	f7fe fae5 	bl	800020c <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e141      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f000 fae3 	bl	8002228 <RCC_Delay>
 8001c62:	e01b      	b.n	8001c9c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6a:	f7fe facf 	bl	800020c <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c70:	e00e      	b.n	8001c90 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c72:	f7fe facb 	bl	800020c <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d907      	bls.n	8001c90 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e127      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4b4>
 8001c84:	40021000 	.word	0x40021000
 8001c88:	42420000 	.word	0x42420000
 8001c8c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c90:	4b92      	ldr	r3, [pc, #584]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1ea      	bne.n	8001c72 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80a6 	beq.w	8001df6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cae:	4b8b      	ldr	r3, [pc, #556]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10d      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4a88      	ldr	r2, [pc, #544]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001cbc:	4b87      	ldr	r3, [pc, #540]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	61d3      	str	r3, [r2, #28]
 8001cc6:	4b85      	ldr	r3, [pc, #532]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd6:	4b82      	ldr	r3, [pc, #520]	; (8001ee0 <HAL_RCC_OscConfig+0x4c0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d118      	bne.n	8001d14 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce2:	4a7f      	ldr	r2, [pc, #508]	; (8001ee0 <HAL_RCC_OscConfig+0x4c0>)
 8001ce4:	4b7e      	ldr	r3, [pc, #504]	; (8001ee0 <HAL_RCC_OscConfig+0x4c0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cee:	f7fe fa8d 	bl	800020c <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf6:	f7fe fa89 	bl	800020c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b64      	cmp	r3, #100	; 0x64
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e0e5      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d08:	4b75      	ldr	r3, [pc, #468]	; (8001ee0 <HAL_RCC_OscConfig+0x4c0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d106      	bne.n	8001d2a <HAL_RCC_OscConfig+0x30a>
 8001d1c:	4a6f      	ldr	r2, [pc, #444]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001d1e:	4b6f      	ldr	r3, [pc, #444]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6213      	str	r3, [r2, #32]
 8001d28:	e02d      	b.n	8001d86 <HAL_RCC_OscConfig+0x366>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x32c>
 8001d32:	4a6a      	ldr	r2, [pc, #424]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001d34:	4b69      	ldr	r3, [pc, #420]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	6213      	str	r3, [r2, #32]
 8001d3e:	4a67      	ldr	r2, [pc, #412]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001d40:	4b66      	ldr	r3, [pc, #408]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f023 0304 	bic.w	r3, r3, #4
 8001d48:	6213      	str	r3, [r2, #32]
 8001d4a:	e01c      	b.n	8001d86 <HAL_RCC_OscConfig+0x366>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	d10c      	bne.n	8001d6e <HAL_RCC_OscConfig+0x34e>
 8001d54:	4a61      	ldr	r2, [pc, #388]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001d56:	4b61      	ldr	r3, [pc, #388]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	6213      	str	r3, [r2, #32]
 8001d60:	4a5e      	ldr	r2, [pc, #376]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001d62:	4b5e      	ldr	r3, [pc, #376]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6213      	str	r3, [r2, #32]
 8001d6c:	e00b      	b.n	8001d86 <HAL_RCC_OscConfig+0x366>
 8001d6e:	4a5b      	ldr	r2, [pc, #364]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001d70:	4b5a      	ldr	r3, [pc, #360]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	6213      	str	r3, [r2, #32]
 8001d7a:	4a58      	ldr	r2, [pc, #352]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001d7c:	4b57      	ldr	r3, [pc, #348]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f023 0304 	bic.w	r3, r3, #4
 8001d84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d015      	beq.n	8001dba <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8e:	f7fe fa3d 	bl	800020c <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d96:	f7fe fa39 	bl	800020c <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e093      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dac:	4b4b      	ldr	r3, [pc, #300]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ee      	beq.n	8001d96 <HAL_RCC_OscConfig+0x376>
 8001db8:	e014      	b.n	8001de4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dba:	f7fe fa27 	bl	800020c <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7fe fa23 	bl	800020c <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e07d      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd8:	4b40      	ldr	r3, [pc, #256]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1ee      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d105      	bne.n	8001df6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dea:	4a3c      	ldr	r2, [pc, #240]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001dec:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d069      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dfe:	4b37      	ldr	r3, [pc, #220]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d061      	beq.n	8001ece <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d146      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b34      	ldr	r3, [pc, #208]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7fe f9f8 	bl	800020c <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e20:	f7fe f9f4 	bl	800020c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e050      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	4b2a      	ldr	r3, [pc, #168]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e46:	d108      	bne.n	8001e5a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e48:	4924      	ldr	r1, [pc, #144]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5a:	4820      	ldr	r0, [pc, #128]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a19      	ldr	r1, [r3, #32]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7fe f9c8 	bl	800020c <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e80:	f7fe f9c4 	bl	800020c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e020      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x460>
 8001e9e:	e018      	b.n	8001ed2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7fe f9b1 	bl	800020c <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eae:	f7fe f9ad 	bl	800020c <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e009      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f0      	bne.n	8001eae <HAL_RCC_OscConfig+0x48e>
 8001ecc:	e001      	b.n	8001ed2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	42420060 	.word	0x42420060

08001ee8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ef6:	4b7e      	ldr	r3, [pc, #504]	; (80020f0 <HAL_RCC_ClockConfig+0x208>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0207 	and.w	r2, r3, #7
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d210      	bcs.n	8001f26 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f04:	497a      	ldr	r1, [pc, #488]	; (80020f0 <HAL_RCC_ClockConfig+0x208>)
 8001f06:	4b7a      	ldr	r3, [pc, #488]	; (80020f0 <HAL_RCC_ClockConfig+0x208>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 0207 	bic.w	r2, r3, #7
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f14:	4b76      	ldr	r3, [pc, #472]	; (80020f0 <HAL_RCC_ClockConfig+0x208>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0207 	and.w	r2, r3, #7
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d001      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e0e0      	b.n	80020e8 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d020      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f3e:	4a6d      	ldr	r2, [pc, #436]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 8001f40:	4b6c      	ldr	r3, [pc, #432]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f48:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f56:	4a67      	ldr	r2, [pc, #412]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 8001f58:	4b66      	ldr	r3, [pc, #408]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f60:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f62:	4964      	ldr	r1, [pc, #400]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 8001f64:	4b63      	ldr	r3, [pc, #396]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d06a      	beq.n	8002056 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f88:	4b5a      	ldr	r3, [pc, #360]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d115      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0a7      	b.n	80020e8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d107      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa0:	4b54      	ldr	r3, [pc, #336]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e09b      	b.n	80020e8 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	4b50      	ldr	r3, [pc, #320]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e093      	b.n	80020e8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc0:	494c      	ldr	r1, [pc, #304]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 8001fc2:	4b4c      	ldr	r3, [pc, #304]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f023 0203 	bic.w	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd2:	f7fe f91b 	bl	800020c <HAL_GetTick>
 8001fd6:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d112      	bne.n	8002006 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe2:	f7fe f913 	bl	800020c <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e077      	b.n	80020e8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff8:	4b3e      	ldr	r3, [pc, #248]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b04      	cmp	r3, #4
 8002002:	d1ee      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xfa>
 8002004:	e027      	b.n	8002056 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d11d      	bne.n	800204a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800200e:	e00a      	b.n	8002026 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002010:	f7fe f8fc 	bl	800020c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e060      	b.n	80020e8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002026:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b08      	cmp	r3, #8
 8002030:	d1ee      	bne.n	8002010 <HAL_RCC_ClockConfig+0x128>
 8002032:	e010      	b.n	8002056 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002034:	f7fe f8ea 	bl	800020c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e04e      	b.n	80020e8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1ee      	bne.n	8002034 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <HAL_RCC_ClockConfig+0x208>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0207 	and.w	r2, r3, #7
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d910      	bls.n	8002086 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002064:	4922      	ldr	r1, [pc, #136]	; (80020f0 <HAL_RCC_ClockConfig+0x208>)
 8002066:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <HAL_RCC_ClockConfig+0x208>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 0207 	bic.w	r2, r3, #7
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	4313      	orrs	r3, r2
 8002072:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002074:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <HAL_RCC_ClockConfig+0x208>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0207 	and.w	r2, r3, #7
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d001      	beq.n	8002086 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e030      	b.n	80020e8 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002092:	4918      	ldr	r1, [pc, #96]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 8002094:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d009      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020b0:	4910      	ldr	r1, [pc, #64]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020c4:	f000 f81c 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 80020c8:	4601      	mov	r1, r0
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_RCC_ClockConfig+0x20c>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <HAL_RCC_ClockConfig+0x210>)
 80020d6:	5cd3      	ldrb	r3, [r2, r3]
 80020d8:	fa21 f303 	lsr.w	r3, r1, r3
 80020dc:	4a07      	ldr	r2, [pc, #28]	; (80020fc <HAL_RCC_ClockConfig+0x214>)
 80020de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80020e0:	2000      	movs	r0, #0
 80020e2:	f7fe f851 	bl	8000188 <HAL_InitTick>
  
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40022000 	.word	0x40022000
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08006664 	.word	0x08006664
 80020fc:	20000010 	.word	0x20000010

08002100 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002100:	b490      	push	{r4, r7}
 8002102:	b08a      	sub	sp, #40	; 0x28
 8002104:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002106:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002108:	1d3c      	adds	r4, r7, #4
 800210a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800210c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002110:	4b28      	ldr	r3, [pc, #160]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800212a:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b04      	cmp	r3, #4
 8002138:	d002      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x40>
 800213a:	2b08      	cmp	r3, #8
 800213c:	d003      	beq.n	8002146 <HAL_RCC_GetSysClockFreq+0x46>
 800213e:	e02d      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002140:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002142:	623b      	str	r3, [r7, #32]
      break;
 8002144:	e02d      	b.n	80021a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	0c9b      	lsrs	r3, r3, #18
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002152:	4413      	add	r3, r2
 8002154:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002158:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	0c5b      	lsrs	r3, r3, #17
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002172:	4413      	add	r3, r2
 8002174:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002178:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800217e:	fb02 f203 	mul.w	r2, r2, r3
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	fbb2 f3f3 	udiv	r3, r2, r3
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
 800218a:	e004      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	4a0c      	ldr	r2, [pc, #48]	; (80021c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002190:	fb02 f303 	mul.w	r3, r2, r3
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	623b      	str	r3, [r7, #32]
      break;
 800219a:	e002      	b.n	80021a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800219c:	4b07      	ldr	r3, [pc, #28]	; (80021bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800219e:	623b      	str	r3, [r7, #32]
      break;
 80021a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021a2:	6a3b      	ldr	r3, [r7, #32]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3728      	adds	r7, #40	; 0x28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc90      	pop	{r4, r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	080060f0 	.word	0x080060f0
 80021b4:	08006100 	.word	0x08006100
 80021b8:	40021000 	.word	0x40021000
 80021bc:	007a1200 	.word	0x007a1200
 80021c0:	003d0900 	.word	0x003d0900

080021c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c8:	4b02      	ldr	r3, [pc, #8]	; (80021d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	20000010 	.word	0x20000010

080021d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021dc:	f7ff fff2 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 80021e0:	4601      	mov	r1, r0
 80021e2:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	4a03      	ldr	r2, [pc, #12]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ee:	5cd3      	ldrb	r3, [r2, r3]
 80021f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021f4:	4618      	mov	r0, r3
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	08006674 	.word	0x08006674

08002200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002204:	f7ff ffde 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 8002208:	4601      	mov	r1, r0
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	0adb      	lsrs	r3, r3, #11
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	4a03      	ldr	r2, [pc, #12]	; (8002224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002216:	5cd3      	ldrb	r3, [r2, r3]
 8002218:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800221c:	4618      	mov	r0, r3
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	08006674 	.word	0x08006674

08002228 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <RCC_Delay+0x34>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <RCC_Delay+0x38>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0a5b      	lsrs	r3, r3, #9
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002244:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1e5a      	subs	r2, r3, #1
 800224a:	60fa      	str	r2, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f9      	bne.n	8002244 <RCC_Delay+0x1c>
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000010 	.word	0x20000010
 8002260:	10624dd3 	.word	0x10624dd3

08002264 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	d07d      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002280:	2300      	movs	r3, #0
 8002282:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002284:	4b4f      	ldr	r3, [pc, #316]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10d      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002290:	4a4c      	ldr	r2, [pc, #304]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002292:	4b4c      	ldr	r3, [pc, #304]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229a:	61d3      	str	r3, [r2, #28]
 800229c:	4b49      	ldr	r3, [pc, #292]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a8:	2301      	movs	r3, #1
 80022aa:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ac:	4b46      	ldr	r3, [pc, #280]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d118      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b8:	4a43      	ldr	r2, [pc, #268]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ba:	4b43      	ldr	r3, [pc, #268]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c4:	f7fd ffa2 	bl	800020c <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ca:	e008      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022cc:	f7fd ff9e 	bl	800020c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e06d      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022de:	4b3a      	ldr	r3, [pc, #232]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022ea:	4b36      	ldr	r3, [pc, #216]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d02e      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d027      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002308:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002310:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002312:	4b2e      	ldr	r3, [pc, #184]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002314:	2201      	movs	r2, #1
 8002316:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002318:	4b2c      	ldr	r3, [pc, #176]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800231e:	4a29      	ldr	r2, [pc, #164]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d014      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232e:	f7fd ff6d 	bl	800020c <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002334:	e00a      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002336:	f7fd ff69 	bl	800020c <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f241 3288 	movw	r2, #5000	; 0x1388
 8002344:	4293      	cmp	r3, r2
 8002346:	d901      	bls.n	800234c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e036      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234c:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0ee      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002358:	491a      	ldr	r1, [pc, #104]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235a:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4313      	orrs	r3, r2
 8002368:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800236a:	7dfb      	ldrb	r3, [r7, #23]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d105      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002370:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800237a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002388:	490e      	ldr	r1, [pc, #56]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	4313      	orrs	r3, r2
 8002398:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023a6:	4907      	ldr	r1, [pc, #28]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40007000 	.word	0x40007000
 80023cc:	42420440 	.word	0x42420440

080023d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023d0:	b590      	push	{r4, r7, lr}
 80023d2:	b08d      	sub	sp, #52	; 0x34
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023d8:	4b57      	ldr	r3, [pc, #348]	; (8002538 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023da:	f107 040c 	add.w	r4, r7, #12
 80023de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023e4:	4b55      	ldr	r3, [pc, #340]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
 80023ee:	2300      	movs	r3, #0
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	2300      	movs	r3, #0
 80023fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b02      	cmp	r3, #2
 8002402:	f000 8084 	beq.w	800250e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002406:	2b10      	cmp	r3, #16
 8002408:	d002      	beq.n	8002410 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800240a:	2b01      	cmp	r3, #1
 800240c:	d049      	beq.n	80024a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
  default: 
    {
      break;
 800240e:	e08d      	b.n	800252c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->CFGR;
 8002410:	4b4b      	ldr	r3, [pc, #300]	; (8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8002416:	4b4a      	ldr	r3, [pc, #296]	; (8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 8083 	beq.w	800252a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	0c9b      	lsrs	r3, r3, #18
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002430:	4413      	add	r3, r2
 8002432:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002436:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d018      	beq.n	8002474 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002442:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	0c5b      	lsrs	r3, r3, #17
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002450:	4413      	add	r3, r2
 8002452:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00d      	beq.n	800247e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002462:	4a38      	ldr	r2, [pc, #224]	; (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	fbb2 f3f3 	udiv	r3, r2, r3
 800246a:	6a3a      	ldr	r2, [r7, #32]
 800246c:	fb02 f303 	mul.w	r3, r2, r3
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002472:	e004      	b.n	800247e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	4a34      	ldr	r2, [pc, #208]	; (8002548 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002478:	fb02 f303 	mul.w	r3, r2, r3
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800247e:	4b30      	ldr	r3, [pc, #192]	; (8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800248a:	d102      	bne.n	8002492 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
          frequency = pllclk;
 800248c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002490:	e04b      	b.n	800252a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          frequency = (pllclk * 2) / 3;
 8002492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4a2d      	ldr	r2, [pc, #180]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002498:	fba2 2303 	umull	r2, r3, r2, r3
 800249c:	085b      	lsrs	r3, r3, #1
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80024a0:	e043      	b.n	800252a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      temp_reg = RCC->BDCR;
 80024a2:	4b27      	ldr	r3, [pc, #156]	; (8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024b2:	d108      	bne.n	80024c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
        frequency = LSE_VALUE;
 80024be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024c4:	e022      	b.n	800250c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d0:	d109      	bne.n	80024e6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        frequency = LSI_VALUE;
 80024de:	f649 4340 	movw	r3, #40000	; 0x9c40
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e4:	e012      	b.n	800250c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024f0:	d109      	bne.n	8002506 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 80024f2:	4b13      	ldr	r3, [pc, #76]	; (8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
        frequency = HSE_VALUE / 128U;
 80024fe:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
 8002504:	e002      	b.n	800250c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800250a:	e00f      	b.n	800252c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 800250c:	e00e      	b.n	800252c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800250e:	f7ff fe77 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 8002512:	4602      	mov	r2, r0
 8002514:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	0b9b      	lsrs	r3, r3, #14
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	3301      	adds	r3, #1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	fbb2 f3f3 	udiv	r3, r2, r3
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002528:	e000      	b.n	800252c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      break;
 800252a:	bf00      	nop
    }
  }
  return(frequency);
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800252e:	4618      	mov	r0, r3
 8002530:	3734      	adds	r7, #52	; 0x34
 8002532:	46bd      	mov	sp, r7
 8002534:	bd90      	pop	{r4, r7, pc}
 8002536:	bf00      	nop
 8002538:	08006104 	.word	0x08006104
 800253c:	08006114 	.word	0x08006114
 8002540:	40021000 	.word	0x40021000
 8002544:	007a1200 	.word	0x007a1200
 8002548:	003d0900 	.word	0x003d0900
 800254c:	aaaaaaab 	.word	0xaaaaaaab

08002550 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	; 0x28
 8002554:	af02      	add	r7, sp, #8
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	4613      	mov	r3, r2
 800255e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_SPI_Transmit+0x26>
 8002572:	2302      	movs	r3, #2
 8002574:	e123      	b.n	80027be <HAL_SPI_Transmit+0x26e>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800257e:	f7fd fe45 	bl	800020c <HAL_GetTick>
 8002582:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d002      	beq.n	8002596 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002590:	2302      	movs	r3, #2
 8002592:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002594:	e10a      	b.n	80027ac <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0U))
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <HAL_SPI_Transmit+0x52>
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d102      	bne.n	80025a8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025a6:	e101      	b.n	80027ac <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2203      	movs	r2, #3
 80025ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	88fa      	ldrh	r2, [r7, #6]
 80025c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	88fa      	ldrh	r2, [r7, #6]
 80025c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ee:	d107      	bne.n	8002600 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	d007      	beq.n	800261e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800261c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002626:	d147      	bne.n	80026b8 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <HAL_SPI_Transmit+0xea>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b01      	cmp	r3, #1
 8002638:	d138      	bne.n	80026ac <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	8812      	ldrh	r2, [r2, #0]
 8002642:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	3302      	adds	r3, #2
 8002648:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002658:	e028      	b.n	80026ac <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b02      	cmp	r3, #2
 8002666:	d10f      	bne.n	8002688 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	8812      	ldrh	r2, [r2, #0]
 8002670:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	3302      	adds	r3, #2
 8002676:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	86da      	strh	r2, [r3, #54]	; 0x36
 8002686:	e011      	b.n	80026ac <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00b      	beq.n	80026a6 <HAL_SPI_Transmit+0x156>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002694:	d00a      	beq.n	80026ac <HAL_SPI_Transmit+0x15c>
 8002696:	f7fd fdb9 	bl	800020c <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	1ad2      	subs	r2, r2, r3
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d302      	bcc.n	80026ac <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026aa:	e07f      	b.n	80027ac <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1d1      	bne.n	800265a <HAL_SPI_Transmit+0x10a>
 80026b6:	e048      	b.n	800274a <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d004      	beq.n	80026ca <HAL_SPI_Transmit+0x17a>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d13a      	bne.n	8002740 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	330c      	adds	r3, #12
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	7812      	ldrb	r2, [r2, #0]
 80026d4:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	3301      	adds	r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026ea:	e029      	b.n	8002740 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d110      	bne.n	800271c <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	330c      	adds	r3, #12
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	7812      	ldrb	r2, [r2, #0]
 8002704:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	3301      	adds	r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	86da      	strh	r2, [r3, #54]	; 0x36
 800271a:	e011      	b.n	8002740 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <HAL_SPI_Transmit+0x1ea>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002728:	d00a      	beq.n	8002740 <HAL_SPI_Transmit+0x1f0>
 800272a:	f7fd fd6f 	bl	800020c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1ad2      	subs	r2, r2, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d302      	bcc.n	8002740 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800273e:	e035      	b.n	80027ac <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1d0      	bne.n	80026ec <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2201      	movs	r2, #1
 8002752:	2102      	movs	r1, #2
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fae3 	bl	8002d20 <SPI_WaitFlagStateUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002764:	e022      	b.n	80027ac <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	6839      	ldr	r1, [r7, #0]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 fb41 	bl	8002df2 <SPI_CheckFlag_BSY>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002780:	e014      	b.n	80027ac <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3720      	adds	r7, #32
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_SPI_Receive>:
  * @param  Size: amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b088      	sub	sp, #32
 80027ca:	af02      	add	r7, sp, #8
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	4613      	mov	r3, r2
 80027d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	75fb      	strb	r3, [r7, #23]

  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027e6:	d112      	bne.n	800280e <HAL_SPI_Receive+0x48>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10e      	bne.n	800280e <HAL_SPI_Receive+0x48>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2204      	movs	r2, #4
 80027f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	4613      	mov	r3, r2
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f8ec 	bl	80029e2 <HAL_SPI_TransmitReceive>
 800280a:	4603      	mov	r3, r0
 800280c:	e0e5      	b.n	80029da <HAL_SPI_Receive+0x214>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_SPI_Receive+0x56>
 8002818:	2302      	movs	r3, #2
 800281a:	e0de      	b.n	80029da <HAL_SPI_Receive+0x214>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002824:	f7fd fcf2 	bl	800020c <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

  if(hspi->State != HAL_SPI_STATE_READY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d002      	beq.n	800283c <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8002836:	2302      	movs	r3, #2
 8002838:	75fb      	strb	r3, [r7, #23]
    goto error;
 800283a:	e0c5      	b.n	80029c8 <HAL_SPI_Receive+0x202>
  }

  if((pData == NULL ) || (Size == 0U))
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_SPI_Receive+0x82>
 8002842:	88fb      	ldrh	r3, [r7, #6]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d102      	bne.n	800284e <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800284c:	e0bc      	b.n	80029c8 <HAL_SPI_Receive+0x202>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2204      	movs	r2, #4
 8002852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	88fa      	ldrh	r2, [r7, #6]
 8002866:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002894:	d107      	bne.n	80028a6 <HAL_SPI_Receive+0xe0>
  {
    SPI_1LINE_RX(hspi);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b0:	2b40      	cmp	r3, #64	; 0x40
 80028b2:	d007      	beq.n	80028c4 <HAL_SPI_Receive+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028c2:	601a      	str	r2, [r3, #0]
  }

    /* Receive data in 8 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d15b      	bne.n	8002984 <HAL_SPI_Receive+0x1be>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 80028cc:	e02a      	b.n	8002924 <HAL_SPI_Receive+0x15e>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d111      	bne.n	8002900 <HAL_SPI_Receive+0x13a>
      {
        /* read the received data */
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	330c      	adds	r3, #12
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	3301      	adds	r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028fe:	e011      	b.n	8002924 <HAL_SPI_Receive+0x15e>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <HAL_SPI_Receive+0x158>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800290c:	d00a      	beq.n	8002924 <HAL_SPI_Receive+0x15e>
 800290e:	f7fd fc7d 	bl	800020c <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad2      	subs	r2, r2, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d302      	bcc.n	8002924 <HAL_SPI_Receive+0x15e>
        {
          errorcode = HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002922:	e051      	b.n	80029c8 <HAL_SPI_Receive+0x202>
    while(hspi->RxXferCount > 0U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1cf      	bne.n	80028ce <HAL_SPI_Receive+0x108>
 800292e:	e02e      	b.n	800298e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d110      	bne.n	8002960 <HAL_SPI_Receive+0x19a>
      {
        *((uint16_t*)pData) = hspi->Instance->DR;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	b29a      	uxth	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	3302      	adds	r3, #2
 800294e:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800295e:	e011      	b.n	8002984 <HAL_SPI_Receive+0x1be>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00b      	beq.n	800297e <HAL_SPI_Receive+0x1b8>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800296c:	d00a      	beq.n	8002984 <HAL_SPI_Receive+0x1be>
 800296e:	f7fd fc4d 	bl	800020c <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad2      	subs	r2, r2, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d302      	bcc.n	8002984 <HAL_SPI_Receive+0x1be>
        {
          errorcode = HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002982:	e021      	b.n	80029c8 <HAL_SPI_Receive+0x202>
    while(hspi->RxXferCount > 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1d0      	bne.n	8002930 <HAL_SPI_Receive+0x16a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002996:	d111      	bne.n	80029bc <HAL_SPI_Receive+0x1f6>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029a0:	d004      	beq.n	80029ac <HAL_SPI_Receive+0x1e6>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029aa:	d107      	bne.n	80029bc <HAL_SPI_Receive+0x1f6>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ba:	601a      	str	r2, [r3, #0]
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_SPI_Receive+0x202>
  {
    errorcode = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b08c      	sub	sp, #48	; 0x30
 80029e6:	af02      	add	r7, sp, #8
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	2300      	movs	r3, #0
 80029f6:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80029fc:	2301      	movs	r3, #1
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_SPI_TransmitReceive+0x32>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e181      	b.n	8002d18 <HAL_SPI_TransmitReceive+0x336>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a1c:	f7fd fbf6 	bl	800020c <HAL_GetTick>
 8002a20:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d00e      	beq.n	8002a56 <HAL_SPI_TransmitReceive+0x74>
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a3e:	d106      	bne.n	8002a4e <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d102      	bne.n	8002a4e <HAL_SPI_TransmitReceive+0x6c>
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d003      	beq.n	8002a56 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002a54:	e156      	b.n	8002d04 <HAL_SPI_TransmitReceive+0x322>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_SPI_TransmitReceive+0x86>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_SPI_TransmitReceive+0x86>
 8002a62:	887b      	ldrh	r3, [r7, #2]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d103      	bne.n	8002a70 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002a6e:	e149      	b.n	8002d04 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d103      	bne.n	8002a84 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2205      	movs	r2, #5
 8002a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	887a      	ldrh	r2, [r7, #2]
 8002a9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	887a      	ldrh	r2, [r7, #2]
 8002aa6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	887a      	ldrh	r2, [r7, #2]
 8002aac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac4:	2b40      	cmp	r3, #64	; 0x40
 8002ac6:	d007      	beq.n	8002ad8 <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ad6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ae0:	d171      	bne.n	8002bc6 <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d004      	beq.n	8002af4 <HAL_SPI_TransmitReceive+0x112>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d15d      	bne.n	8002bb0 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	8812      	ldrh	r2, [r2, #0]
 8002afc:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3302      	adds	r3, #2
 8002b02:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b12:	e04d      	b.n	8002bb0 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d01c      	beq.n	8002b54 <HAL_SPI_TransmitReceive+0x172>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d017      	beq.n	8002b54 <HAL_SPI_TransmitReceive+0x172>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d110      	bne.n	8002b54 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	8812      	ldrh	r2, [r2, #0]
 8002b3a:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	3302      	adds	r3, #2
 8002b40:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d018      	beq.n	8002b90 <HAL_SPI_TransmitReceive+0x1ae>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d111      	bne.n	8002b90 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b96:	d00b      	beq.n	8002bb0 <HAL_SPI_TransmitReceive+0x1ce>
 8002b98:	f7fd fb38 	bl	800020c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	1ad2      	subs	r2, r2, r3
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d303      	bcc.n	8002bb0 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002bae:	e0a9      	b.n	8002d04 <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1ac      	bne.n	8002b14 <HAL_SPI_TransmitReceive+0x132>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1a7      	bne.n	8002b14 <HAL_SPI_TransmitReceive+0x132>
 8002bc4:	e071      	b.n	8002caa <HAL_SPI_TransmitReceive+0x2c8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d004      	beq.n	8002bd8 <HAL_SPI_TransmitReceive+0x1f6>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d15e      	bne.n	8002c96 <HAL_SPI_TransmitReceive+0x2b4>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	330c      	adds	r3, #12
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	7812      	ldrb	r2, [r2, #0]
 8002be2:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	3301      	adds	r3, #1
 8002be8:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bf8:	e04d      	b.n	8002c96 <HAL_SPI_TransmitReceive+0x2b4>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d01d      	beq.n	8002c3c <HAL_SPI_TransmitReceive+0x25a>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d018      	beq.n	8002c3c <HAL_SPI_TransmitReceive+0x25a>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d111      	bne.n	8002c3c <HAL_SPI_TransmitReceive+0x25a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f103 020c 	add.w	r2, r3, #12
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	1c59      	adds	r1, r3, #1
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d017      	beq.n	8002c76 <HAL_SPI_TransmitReceive+0x294>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d110      	bne.n	8002c76 <HAL_SPI_TransmitReceive+0x294>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	68d2      	ldr	r2, [r2, #12]
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8002c72:	2301      	movs	r3, #1
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c7c:	d00b      	beq.n	8002c96 <HAL_SPI_TransmitReceive+0x2b4>
 8002c7e:	f7fd fac5 	bl	800020c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	1ad2      	subs	r2, r2, r3
 8002c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d303      	bcc.n	8002c96 <HAL_SPI_TransmitReceive+0x2b4>
      {
        errorcode = HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002c94:	e036      	b.n	8002d04 <HAL_SPI_TransmitReceive+0x322>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1ac      	bne.n	8002bfa <HAL_SPI_TransmitReceive+0x218>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1a7      	bne.n	8002bfa <HAL_SPI_TransmitReceive+0x218>
    }
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	2102      	movs	r1, #2
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f833 	bl	8002d20 <SPI_WaitFlagStateUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_SPI_TransmitReceive+0x2e6>
  {
    errorcode = HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002cc6:	e01d      	b.n	8002d04 <HAL_SPI_TransmitReceive+0x322>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f890 	bl	8002df2 <SPI_CheckFlag_BSY>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <HAL_SPI_TransmitReceive+0x304>
  {
    errorcode = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ce4:	e00e      	b.n	8002d04 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3728      	adds	r7, #40	; 0x28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002d2e:	e04d      	b.n	8002dcc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d36:	d049      	beq.n	8002dcc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d007      	beq.n	8002d4e <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002d3e:	f7fd fa65 	bl	800020c <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	1ad2      	subs	r2, r2, r3
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d33e      	bcc.n	8002dcc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	6852      	ldr	r2, [r2, #4]
 8002d58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d5c:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d66:	d111      	bne.n	8002d8c <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d70:	d004      	beq.n	8002d7c <SPI_WaitFlagStateUntilTimeout+0x5c>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7a:	d107      	bne.n	8002d8c <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d94:	d110      	bne.n	8002db8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6819      	ldr	r1, [r3, #0]
 8002da0:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8002da4:	400b      	ands	r3, r1
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002db6:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e00e      	b.n	8002dea <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	401a      	ands	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d101      	bne.n	8002de0 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8002ddc:	2201      	movs	r2, #1
 8002dde:	e000      	b.n	8002de2 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8002de0:	2200      	movs	r2, #0
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d1a3      	bne.n	8002d30 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af02      	add	r7, sp, #8
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2180      	movs	r1, #128	; 0x80
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f7ff ff89 	bl	8002d20 <SPI_WaitFlagStateUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d007      	beq.n	8002e24 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e18:	f043 0220 	orr.w	r2, r3, #32
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e000      	b.n	8002e26 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e056      	b.n	8002eee <HAL_SPI_Init+0xc0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d102      	bne.n	8002e58 <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f002 fb64 	bl	8005520 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	6812      	ldr	r2, [r2, #0]
 8002e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6851      	ldr	r1, [r2, #4]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6892      	ldr	r2, [r2, #8]
 8002e7c:	4311      	orrs	r1, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68d2      	ldr	r2, [r2, #12]
 8002e82:	4311      	orrs	r1, r2
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6912      	ldr	r2, [r2, #16]
 8002e88:	4311      	orrs	r1, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6952      	ldr	r2, [r2, #20]
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6992      	ldr	r2, [r2, #24]
 8002e94:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002e98:	4311      	orrs	r1, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	69d2      	ldr	r2, [r2, #28]
 8002e9e:	4311      	orrs	r1, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6a12      	ldr	r2, [r2, #32]
 8002ea4:	4311      	orrs	r1, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6992      	ldr	r2, [r2, #24]
 8002eb6:	0c12      	lsrs	r2, r2, #16
 8002eb8:	f002 0104 	and.w	r1, r2, #4
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ecc:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	69d2      	ldr	r2, [r2, #28]
 8002ed8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002edc:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e01d      	b.n	8002f44 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d106      	bne.n	8002f22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f002 fb49 	bl	80055b4 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2202      	movs	r2, #2
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3304      	adds	r3, #4
 8002f32:	4619      	mov	r1, r3
 8002f34:	4610      	mov	r0, r2
 8002f36:	f000 fa2b 	bl	8003390 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	68d2      	ldr	r2, [r2, #12]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d122      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d11b      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0202 	mvn.w	r2, #2
 8002fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f9c8 	bl	8003358 <HAL_TIM_IC_CaptureCallback>
 8002fc8:	e005      	b.n	8002fd6 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f9bb 	bl	8003346 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f9ca 	bl	800336a <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d122      	bne.n	8003030 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d11b      	bne.n	8003030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0204 	mvn.w	r2, #4
 8003000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2202      	movs	r2, #2
 8003006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f99e 	bl	8003358 <HAL_TIM_IC_CaptureCallback>
 800301c:	e005      	b.n	800302a <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f991 	bl	8003346 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f9a0 	bl	800336a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b08      	cmp	r3, #8
 800303c:	d122      	bne.n	8003084 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b08      	cmp	r3, #8
 800304a:	d11b      	bne.n	8003084 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0208 	mvn.w	r2, #8
 8003054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2204      	movs	r2, #4
 800305a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f974 	bl	8003358 <HAL_TIM_IC_CaptureCallback>
 8003070:	e005      	b.n	800307e <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f967 	bl	8003346 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f976 	bl	800336a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b10      	cmp	r3, #16
 8003090:	d122      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b10      	cmp	r3, #16
 800309e:	d11b      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0210 	mvn.w	r2, #16
 80030a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2208      	movs	r2, #8
 80030ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f94a 	bl	8003358 <HAL_TIM_IC_CaptureCallback>
 80030c4:	e005      	b.n	80030d2 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f93d 	bl	8003346 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f94c 	bl	800336a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d10e      	bne.n	8003104 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d107      	bne.n	8003104 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0201 	mvn.w	r2, #1
 80030fc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f002 f90e 	bl	8005320 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310e:	2b80      	cmp	r3, #128	; 0x80
 8003110:	d10e      	bne.n	8003130 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311c:	2b80      	cmp	r3, #128	; 0x80
 800311e:	d107      	bne.n	8003130 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003128:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fa88 	bl	8003640 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	d10e      	bne.n	800315c <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003148:	2b40      	cmp	r3, #64	; 0x40
 800314a:	d107      	bne.n	800315c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003154:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f910 	bl	800337c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b20      	cmp	r3, #32
 8003168:	d10e      	bne.n	8003188 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b20      	cmp	r3, #32
 8003176:	d107      	bne.n	8003188 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0220 	mvn.w	r2, #32
 8003180:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fa53 	bl	800362e <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_TIM_ConfigClockSource+0x1c>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e0c8      	b.n	800333e <HAL_TIM_ConfigClockSource+0x1ae>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b40      	cmp	r3, #64	; 0x40
 80031e2:	d077      	beq.n	80032d4 <HAL_TIM_ConfigClockSource+0x144>
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d80e      	bhi.n	8003206 <HAL_TIM_ConfigClockSource+0x76>
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	f000 808a 	beq.w	8003302 <HAL_TIM_ConfigClockSource+0x172>
 80031ee:	2b10      	cmp	r3, #16
 80031f0:	d802      	bhi.n	80031f8 <HAL_TIM_ConfigClockSource+0x68>
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d07e      	beq.n	80032f4 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80031f6:	e099      	b.n	800332c <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	f000 8089 	beq.w	8003310 <HAL_TIM_ConfigClockSource+0x180>
 80031fe:	2b30      	cmp	r3, #48	; 0x30
 8003200:	f000 808d 	beq.w	800331e <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8003204:	e092      	b.n	800332c <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003206:	2b70      	cmp	r3, #112	; 0x70
 8003208:	d016      	beq.n	8003238 <HAL_TIM_ConfigClockSource+0xa8>
 800320a:	2b70      	cmp	r3, #112	; 0x70
 800320c:	d804      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x88>
 800320e:	2b50      	cmp	r3, #80	; 0x50
 8003210:	d040      	beq.n	8003294 <HAL_TIM_ConfigClockSource+0x104>
 8003212:	2b60      	cmp	r3, #96	; 0x60
 8003214:	d04e      	beq.n	80032b4 <HAL_TIM_ConfigClockSource+0x124>
    break;
 8003216:	e089      	b.n	800332c <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321c:	d003      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0x96>
 800321e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003222:	d024      	beq.n	800326e <HAL_TIM_ConfigClockSource+0xde>
    break;
 8003224:	e082      	b.n	800332c <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	6892      	ldr	r2, [r2, #8]
 8003230:	f022 0207 	bic.w	r2, r2, #7
 8003234:	609a      	str	r2, [r3, #8]
    break;
 8003236:	e079      	b.n	800332c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	6899      	ldr	r1, [r3, #8]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f000 f98c 	bl	8003564 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800325a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003262:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	609a      	str	r2, [r3, #8]
    break;
 800326c:	e05e      	b.n	800332c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6899      	ldr	r1, [r3, #8]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f000 f971 	bl	8003564 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	6892      	ldr	r2, [r2, #8]
 800328c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003290:	609a      	str	r2, [r3, #8]
    break;
 8003292:	e04b      	b.n	800332c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	461a      	mov	r2, r3
 80032a2:	f000 f8db 	bl	800345c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2150      	movs	r1, #80	; 0x50
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 f93a 	bl	8003526 <TIM_ITRx_SetConfig>
    break;
 80032b2:	e03b      	b.n	800332c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	461a      	mov	r2, r3
 80032c2:	f000 f8fd 	bl	80034c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2160      	movs	r1, #96	; 0x60
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 f92a 	bl	8003526 <TIM_ITRx_SetConfig>
    break;
 80032d2:	e02b      	b.n	800332c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	461a      	mov	r2, r3
 80032e2:	f000 f8bb 	bl	800345c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2140      	movs	r1, #64	; 0x40
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 f91a 	bl	8003526 <TIM_ITRx_SetConfig>
    break;
 80032f2:	e01b      	b.n	800332c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 f913 	bl	8003526 <TIM_ITRx_SetConfig>
    break;
 8003300:	e014      	b.n	800332c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2110      	movs	r1, #16
 8003308:	4618      	mov	r0, r3
 800330a:	f000 f90c 	bl	8003526 <TIM_ITRx_SetConfig>
    break;
 800330e:	e00d      	b.n	800332c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2120      	movs	r1, #32
 8003316:	4618      	mov	r0, r3
 8003318:	f000 f905 	bl	8003526 <TIM_ITRx_SetConfig>
    break;
 800331c:	e006      	b.n	800332c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2130      	movs	r1, #48	; 0x30
 8003324:	4618      	mov	r0, r3
 8003326:	f000 f8fe 	bl	8003526 <TIM_ITRx_SetConfig>
    break;
 800332a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr

0800336a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr
	...

08003390 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <TIM_Base_SetConfig+0xc0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00b      	beq.n	80033c4 <TIM_Base_SetConfig+0x34>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b2:	d007      	beq.n	80033c4 <TIM_Base_SetConfig+0x34>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a27      	ldr	r2, [pc, #156]	; (8003454 <TIM_Base_SetConfig+0xc4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d003      	beq.n	80033c4 <TIM_Base_SetConfig+0x34>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a26      	ldr	r2, [pc, #152]	; (8003458 <TIM_Base_SetConfig+0xc8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d108      	bne.n	80033d6 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <TIM_Base_SetConfig+0xc0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00b      	beq.n	80033f6 <TIM_Base_SetConfig+0x66>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e4:	d007      	beq.n	80033f6 <TIM_Base_SetConfig+0x66>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a1a      	ldr	r2, [pc, #104]	; (8003454 <TIM_Base_SetConfig+0xc4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d003      	beq.n	80033f6 <TIM_Base_SetConfig+0x66>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a19      	ldr	r2, [pc, #100]	; (8003458 <TIM_Base_SetConfig+0xc8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d108      	bne.n	8003408 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800340e:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a07      	ldr	r2, [pc, #28]	; (8003450 <TIM_Base_SetConfig+0xc0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d103      	bne.n	8003440 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	615a      	str	r2, [r3, #20]
}
 8003446:	bf00      	nop
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr
 8003450:	40012c00 	.word	0x40012c00
 8003454:	40000400 	.word	0x40000400
 8003458:	40000800 	.word	0x40000800

0800345c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	f023 0201 	bic.w	r2, r3, #1
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800348e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f023 030a 	bic.w	r3, r3, #10
 80034a0:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	621a      	str	r2, [r3, #32]
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f023 0210 	bic.w	r2, r3, #16
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	031b      	lsls	r3, r3, #12
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003504:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	621a      	str	r2, [r3, #32]
}
 800351c:	bf00      	nop
 800351e:	371c      	adds	r7, #28
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr

08003526 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8003526:	b480      	push	{r7}
 8003528:	b085      	sub	sp, #20
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	f043 0307 	orr.w	r3, r3, #7
 800354a:	b29b      	uxth	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	609a      	str	r2, [r3, #8]
}
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003582:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	021a      	lsls	r2, r3, #8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	431a      	orrs	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4313      	orrs	r3, r2
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	609a      	str	r2, [r3, #8]
}
 800359c:	bf00      	nop
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr

080035a6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e032      	b.n	8003624 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6812      	ldr	r2, [r2, #0]
 80035d6:	6852      	ldr	r2, [r2, #4]
 80035d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035dc:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	6851      	ldr	r1, [r2, #4]
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	6892      	ldr	r2, [r2, #8]
 80035fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035fe:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	6891      	ldr	r1, [r2, #8]
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	6852      	ldr	r2, [r2, #4]
 800360e:	430a      	orrs	r2, r1
 8003610:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr

08003652 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e03f      	b.n	80036e4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d106      	bne.n	800367e <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f001 ffbf 	bl	80055fc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2224      	movs	r2, #36	; 0x24
 8003682:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	68d2      	ldr	r2, [r2, #12]
 8003690:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003694:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f90a 	bl	80038b0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	6912      	ldr	r2, [r2, #16]
 80036a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	6952      	ldr	r2, [r2, #20]
 80036b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036ba:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	68d2      	ldr	r2, [r2, #12]
 80036c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036ca:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b20      	cmp	r3, #32
 800370a:	f040 8082 	bne.w	8003812 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL) || (Size == 0U))
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_UART_Transmit+0x2e>
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e07a      	b.n	8003814 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_UART_Transmit+0x40>
 8003728:	2302      	movs	r3, #2
 800372a:	e073      	b.n	8003814 <HAL_UART_Transmit+0x128>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2221      	movs	r2, #33	; 0x21
 800373e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003742:	f7fc fd63 	bl	800020c <HAL_GetTick>
 8003746:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	88fa      	ldrh	r2, [r7, #6]
 800374c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	88fa      	ldrh	r2, [r7, #6]
 8003752:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003754:	e041      	b.n	80037da <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376c:	d121      	bne.n	80037b2 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2200      	movs	r2, #0
 8003776:	2180      	movs	r1, #128	; 0x80
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f84f 	bl	800381c <UART_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e045      	b.n	8003814 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	8812      	ldrh	r2, [r2, #0]
 8003794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003798:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d103      	bne.n	80037aa <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	3302      	adds	r3, #2
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	e017      	b.n	80037da <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData +=1U;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	3301      	adds	r3, #1
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	e013      	b.n	80037da <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2200      	movs	r2, #0
 80037ba:	2180      	movs	r1, #128	; 0x80
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f82d 	bl	800381c <UART_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e023      	b.n	8003814 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	1c59      	adds	r1, r3, #1
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1b8      	bne.n	8003756 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2200      	movs	r2, #0
 80037ec:	2140      	movs	r1, #64	; 0x40
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f814 	bl	800381c <UART_WaitOnFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e00a      	b.n	8003814 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	e000      	b.n	8003814 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8003812:	2302      	movs	r3, #2
  }
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800382c:	e02c      	b.n	8003888 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003834:	d028      	beq.n	8003888 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d007      	beq.n	800384c <UART_WaitOnFlagUntilTimeout+0x30>
 800383c:	f7fc fce6 	bl	800020c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	1ad2      	subs	r2, r2, r3
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	429a      	cmp	r2, r3
 800384a:	d91d      	bls.n	8003888 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	68d2      	ldr	r2, [r2, #12]
 8003856:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800385a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	6952      	ldr	r2, [r2, #20]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e00f      	b.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	401a      	ands	r2, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	429a      	cmp	r2, r3
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	461a      	mov	r2, r3
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d0c3      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	6912      	ldr	r2, [r2, #16]
 80038c6:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68d2      	ldr	r2, [r2, #12]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038f6:	f023 030c 	bic.w	r3, r3, #12
 80038fa:	68f9      	ldr	r1, [r7, #12]
 80038fc:	430b      	orrs	r3, r1
 80038fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	6952      	ldr	r2, [r2, #20]
 800390a:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6992      	ldr	r2, [r2, #24]
 8003912:	430a      	orrs	r2, r1
 8003914:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a6f      	ldr	r2, [pc, #444]	; (8003ad8 <UART_SetConfig+0x228>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d16b      	bne.n	80039f8 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681c      	ldr	r4, [r3, #0]
 8003924:	f7fe fc6c 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 8003928:	4602      	mov	r2, r0
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	009a      	lsls	r2, r3, #2
 8003932:	441a      	add	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	fbb2 f3f3 	udiv	r3, r2, r3
 800393e:	4a67      	ldr	r2, [pc, #412]	; (8003adc <UART_SetConfig+0x22c>)
 8003940:	fba2 2303 	umull	r2, r3, r2, r3
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	011d      	lsls	r5, r3, #4
 8003948:	f7fe fc5a 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 800394c:	4602      	mov	r2, r0
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	009a      	lsls	r2, r3, #2
 8003956:	441a      	add	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003962:	f7fe fc4d 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 8003966:	4602      	mov	r2, r0
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	009a      	lsls	r2, r3, #2
 8003970:	441a      	add	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	4a57      	ldr	r2, [pc, #348]	; (8003adc <UART_SetConfig+0x22c>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	2264      	movs	r2, #100	; 0x64
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	1af3      	subs	r3, r6, r3
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	3332      	adds	r3, #50	; 0x32
 8003990:	4a52      	ldr	r2, [pc, #328]	; (8003adc <UART_SetConfig+0x22c>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800399c:	441d      	add	r5, r3
 800399e:	f7fe fc2f 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 80039a2:	4602      	mov	r2, r0
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	009a      	lsls	r2, r3, #2
 80039ac:	441a      	add	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80039b8:	f7fe fc22 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4613      	mov	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	009a      	lsls	r2, r3, #2
 80039c6:	441a      	add	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d2:	4a42      	ldr	r2, [pc, #264]	; (8003adc <UART_SetConfig+0x22c>)
 80039d4:	fba2 2303 	umull	r2, r3, r2, r3
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	2264      	movs	r2, #100	; 0x64
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	1af3      	subs	r3, r6, r3
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	3332      	adds	r3, #50	; 0x32
 80039e6:	4a3d      	ldr	r2, [pc, #244]	; (8003adc <UART_SetConfig+0x22c>)
 80039e8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	442b      	add	r3, r5
 80039f4:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80039f6:	e06a      	b.n	8003ace <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681c      	ldr	r4, [r3, #0]
 80039fc:	f7fe fbec 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	009a      	lsls	r2, r3, #2
 8003a0a:	441a      	add	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a16:	4a31      	ldr	r2, [pc, #196]	; (8003adc <UART_SetConfig+0x22c>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	011d      	lsls	r5, r3, #4
 8003a20:	f7fe fbda 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 8003a24:	4602      	mov	r2, r0
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009a      	lsls	r2, r3, #2
 8003a2e:	441a      	add	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a3a:	f7fe fbcd 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009a      	lsls	r2, r3, #2
 8003a48:	441a      	add	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a54:	4a21      	ldr	r2, [pc, #132]	; (8003adc <UART_SetConfig+0x22c>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	2264      	movs	r2, #100	; 0x64
 8003a5e:	fb02 f303 	mul.w	r3, r2, r3
 8003a62:	1af3      	subs	r3, r6, r3
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	3332      	adds	r3, #50	; 0x32
 8003a68:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <UART_SetConfig+0x22c>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a74:	441d      	add	r5, r3
 8003a76:	f7fe fbaf 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009a      	lsls	r2, r3, #2
 8003a84:	441a      	add	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a90:	f7fe fba2 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 8003a94:	4602      	mov	r2, r0
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009a      	lsls	r2, r3, #2
 8003a9e:	441a      	add	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aaa:	4a0c      	ldr	r2, [pc, #48]	; (8003adc <UART_SetConfig+0x22c>)
 8003aac:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	2264      	movs	r2, #100	; 0x64
 8003ab4:	fb02 f303 	mul.w	r3, r2, r3
 8003ab8:	1af3      	subs	r3, r6, r3
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	3332      	adds	r3, #50	; 0x32
 8003abe:	4a07      	ldr	r2, [pc, #28]	; (8003adc <UART_SetConfig+0x22c>)
 8003ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac4:	095b      	lsrs	r3, r3, #5
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	442b      	add	r3, r5
 8003acc:	60a3      	str	r3, [r4, #8]
}
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40013800 	.word	0x40013800
 8003adc:	51eb851f 	.word	0x51eb851f

08003ae0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8003aec:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <NRF24_DelayMicroSeconds+0x38>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <NRF24_DelayMicroSeconds+0x3c>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	0c9a      	lsrs	r2, r3, #18
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	fb02 f303 	mul.w	r3, r2, r3
 8003afe:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8003b00:	bf00      	nop
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1e5a      	subs	r2, r3, #1
 8003b06:	60fa      	str	r2, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1fa      	bne.n	8003b02 <NRF24_DelayMicroSeconds+0x22>
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000010 	.word	0x20000010
 8003b1c:	165e9f81 	.word	0x165e9f81

08003b20 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d008      	beq.n	8003b40 <NRF24_csn+0x20>
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <NRF24_csn+0x38>)
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <NRF24_csn+0x3c>)
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	2201      	movs	r2, #1
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f7fd ff48 	bl	80019ce <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8003b3e:	e007      	b.n	8003b50 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <NRF24_csn+0x38>)
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <NRF24_csn+0x3c>)
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	f7fd ff3f 	bl	80019ce <HAL_GPIO_WritePin>
}
 8003b50:	bf00      	nop
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	2000009c 	.word	0x2000009c
 8003b5c:	200000a0 	.word	0x200000a0

08003b60 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d008      	beq.n	8003b80 <NRF24_ce+0x20>
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <NRF24_ce+0x38>)
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <NRF24_ce+0x3c>)
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	2201      	movs	r2, #1
 8003b78:	4619      	mov	r1, r3
 8003b7a:	f7fd ff28 	bl	80019ce <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8003b7e:	e007      	b.n	8003b90 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <NRF24_ce+0x38>)
 8003b82:	6818      	ldr	r0, [r3, #0]
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <NRF24_ce+0x3c>)
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	f7fd ff1f 	bl	80019ce <HAL_GPIO_WritePin>
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	2000009c 	.word	0x2000009c
 8003b9c:	200000a2 	.word	0x200000a2

08003ba0 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8003baa:	2000      	movs	r0, #0
 8003bac:	f7ff ffb8 	bl	8003b20 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003bba:	f107 010c 	add.w	r1, r7, #12
 8003bbe:	2364      	movs	r3, #100	; 0x64
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	480a      	ldr	r0, [pc, #40]	; (8003bec <NRF24_read_register+0x4c>)
 8003bc4:	f7fe fcc4 	bl	8002550 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8003bc8:	f107 030c 	add.w	r3, r7, #12
 8003bcc:	1c59      	adds	r1, r3, #1
 8003bce:	2364      	movs	r3, #100	; 0x64
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4806      	ldr	r0, [pc, #24]	; (8003bec <NRF24_read_register+0x4c>)
 8003bd4:	f7fe fdf7 	bl	80027c6 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8003bd8:	7b7b      	ldrb	r3, [r7, #13]
 8003bda:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8003bdc:	2001      	movs	r0, #1
 8003bde:	f7ff ff9f 	bl	8003b20 <NRF24_csn>
	return retData;
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	200000a4 	.word	0x200000a4

08003bf0 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	6039      	str	r1, [r7, #0]
 8003bfa:	71fb      	strb	r3, [r7, #7]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003c00:	2000      	movs	r0, #0
 8003c02:	f7ff ff8d 	bl	8003b20 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	f003 031f 	and.w	r3, r3, #31
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003c10:	f107 010c 	add.w	r1, r7, #12
 8003c14:	2364      	movs	r3, #100	; 0x64
 8003c16:	2201      	movs	r2, #1
 8003c18:	4808      	ldr	r0, [pc, #32]	; (8003c3c <NRF24_read_registerN+0x4c>)
 8003c1a:	f7fe fc99 	bl	8002550 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8003c1e:	79bb      	ldrb	r3, [r7, #6]
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	2364      	movs	r3, #100	; 0x64
 8003c24:	6839      	ldr	r1, [r7, #0]
 8003c26:	4805      	ldr	r0, [pc, #20]	; (8003c3c <NRF24_read_registerN+0x4c>)
 8003c28:	f7fe fdcd 	bl	80027c6 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	f7ff ff77 	bl	8003b20 <NRF24_csn>
}
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	200000a4 	.word	0x200000a4

08003c40 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	460a      	mov	r2, r1
 8003c4a:	71fb      	strb	r3, [r7, #7]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003c50:	2000      	movs	r0, #0
 8003c52:	f7ff ff65 	bl	8003b20 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	f043 0320 	orr.w	r3, r3, #32
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8003c60:	79bb      	ldrb	r3, [r7, #6]
 8003c62:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8003c64:	f107 010c 	add.w	r1, r7, #12
 8003c68:	2364      	movs	r3, #100	; 0x64
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	4804      	ldr	r0, [pc, #16]	; (8003c80 <NRF24_write_register+0x40>)
 8003c6e:	f7fe fc6f 	bl	8002550 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8003c72:	2001      	movs	r0, #1
 8003c74:	f7ff ff54 	bl	8003b20 <NRF24_csn>
}
 8003c78:	bf00      	nop
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	200000a4 	.word	0x200000a4

08003c84 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	6039      	str	r1, [r7, #0]
 8003c8e:	71fb      	strb	r3, [r7, #7]
 8003c90:	4613      	mov	r3, r2
 8003c92:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003c94:	2000      	movs	r0, #0
 8003c96:	f7ff ff43 	bl	8003b20 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	f043 0320 	orr.w	r3, r3, #32
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003ca4:	f107 010c 	add.w	r1, r7, #12
 8003ca8:	2364      	movs	r3, #100	; 0x64
 8003caa:	2201      	movs	r2, #1
 8003cac:	4808      	ldr	r0, [pc, #32]	; (8003cd0 <NRF24_write_registerN+0x4c>)
 8003cae:	f7fe fc4f 	bl	8002550 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8003cb2:	79bb      	ldrb	r3, [r7, #6]
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	2364      	movs	r3, #100	; 0x64
 8003cb8:	6839      	ldr	r1, [r7, #0]
 8003cba:	4805      	ldr	r0, [pc, #20]	; (8003cd0 <NRF24_write_registerN+0x4c>)
 8003cbc:	f7fe fc48 	bl	8002550 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	f7ff ff2d 	bl	8003b20 <NRF24_csn>
}
 8003cc6:	bf00      	nop
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	200000a4 	.word	0x200000a4

08003cd4 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	f7ff ff1d 	bl	8003b20 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8003ce6:	23a0      	movs	r3, #160	; 0xa0
 8003ce8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8003cea:	f107 010f 	add.w	r1, r7, #15
 8003cee:	2364      	movs	r3, #100	; 0x64
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	4808      	ldr	r0, [pc, #32]	; (8003d14 <NRF24_write_payload+0x40>)
 8003cf4:	f7fe fc2c 	bl	8002550 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	2364      	movs	r3, #100	; 0x64
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4804      	ldr	r0, [pc, #16]	; (8003d14 <NRF24_write_payload+0x40>)
 8003d02:	f7fe fc25 	bl	8002550 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8003d06:	2001      	movs	r0, #1
 8003d08:	f7ff ff0a 	bl	8003b20 <NRF24_csn>
}
 8003d0c:	bf00      	nop
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	200000a4 	.word	0x200000a4

08003d18 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8003d1c:	21ff      	movs	r1, #255	; 0xff
 8003d1e:	20e1      	movs	r0, #225	; 0xe1
 8003d20:	f7ff ff8e 	bl	8003c40 <NRF24_write_register>
}
 8003d24:	bf00      	nop
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8003d2c:	21ff      	movs	r1, #255	; 0xff
 8003d2e:	20e2      	movs	r0, #226	; 0xe2
 8003d30:	f7ff ff86 	bl	8003c40 <NRF24_write_register>
}
 8003d34:	bf00      	nop
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8003d3e:	2007      	movs	r0, #7
 8003d40:	f7ff ff2e 	bl	8003ba0 <NRF24_read_register>
 8003d44:	4603      	mov	r3, r0
 8003d46:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8003d48:	79fb      	ldrb	r3, [r7, #7]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8003d54:	b082      	sub	sp, #8
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	61fb      	str	r3, [r7, #28]
 8003d60:	460b      	mov	r3, r1
 8003d62:	807b      	strh	r3, [r7, #2]
 8003d64:	4613      	mov	r3, r2
 8003d66:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8003d68:	4b66      	ldr	r3, [pc, #408]	; (8003f04 <NRF24_begin+0x1b0>)
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f107 031c 	add.w	r3, r7, #28
 8003d70:	2258      	movs	r2, #88	; 0x58
 8003d72:	4619      	mov	r1, r3
 8003d74:	f001 fd7c 	bl	8005870 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8003d78:	4a63      	ldr	r2, [pc, #396]	; (8003f08 <NRF24_begin+0x1b4>)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8003d7e:	4a63      	ldr	r2, [pc, #396]	; (8003f0c <NRF24_begin+0x1b8>)
 8003d80:	887b      	ldrh	r3, [r7, #2]
 8003d82:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8003d84:	4a62      	ldr	r2, [pc, #392]	; (8003f10 <NRF24_begin+0x1bc>)
 8003d86:	883b      	ldrh	r3, [r7, #0]
 8003d88:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8003d8a:	2001      	movs	r0, #1
 8003d8c:	f7ff fec8 	bl	8003b20 <NRF24_csn>
	NRF24_ce(0);
 8003d90:	2000      	movs	r0, #0
 8003d92:	f7ff fee5 	bl	8003b60 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8003d96:	2005      	movs	r0, #5
 8003d98:	f7fc fa42 	bl	8000220 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8003d9c:	2108      	movs	r1, #8
 8003d9e:	2000      	movs	r0, #0
 8003da0:	f7ff ff4e 	bl	8003c40 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8003da4:	213f      	movs	r1, #63	; 0x3f
 8003da6:	2001      	movs	r0, #1
 8003da8:	f7ff ff4a 	bl	8003c40 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8003dac:	2103      	movs	r1, #3
 8003dae:	2002      	movs	r0, #2
 8003db0:	f7ff ff46 	bl	8003c40 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8003db4:	2103      	movs	r1, #3
 8003db6:	2003      	movs	r0, #3
 8003db8:	f7ff ff42 	bl	8003c40 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8003dbc:	2103      	movs	r1, #3
 8003dbe:	2004      	movs	r0, #4
 8003dc0:	f7ff ff3e 	bl	8003c40 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	2005      	movs	r0, #5
 8003dc8:	f7ff ff3a 	bl	8003c40 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8003dcc:	210f      	movs	r1, #15
 8003dce:	2006      	movs	r0, #6
 8003dd0:	f7ff ff36 	bl	8003c40 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8003dd4:	210e      	movs	r1, #14
 8003dd6:	2007      	movs	r0, #7
 8003dd8:	f7ff ff32 	bl	8003c40 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8003ddc:	2100      	movs	r1, #0
 8003dde:	2008      	movs	r0, #8
 8003de0:	f7ff ff2e 	bl	8003c40 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8003de4:	2100      	movs	r1, #0
 8003de6:	2009      	movs	r0, #9
 8003de8:	f7ff ff2a 	bl	8003c40 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8003dec:	23e7      	movs	r3, #231	; 0xe7
 8003dee:	733b      	strb	r3, [r7, #12]
 8003df0:	23e7      	movs	r3, #231	; 0xe7
 8003df2:	72fb      	strb	r3, [r7, #11]
 8003df4:	23e7      	movs	r3, #231	; 0xe7
 8003df6:	72bb      	strb	r3, [r7, #10]
 8003df8:	23e7      	movs	r3, #231	; 0xe7
 8003dfa:	727b      	strb	r3, [r7, #9]
 8003dfc:	23e7      	movs	r3, #231	; 0xe7
 8003dfe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8003e00:	f107 0308 	add.w	r3, r7, #8
 8003e04:	2205      	movs	r2, #5
 8003e06:	4619      	mov	r1, r3
 8003e08:	200a      	movs	r0, #10
 8003e0a:	f7ff ff3b 	bl	8003c84 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8003e0e:	23c2      	movs	r3, #194	; 0xc2
 8003e10:	733b      	strb	r3, [r7, #12]
 8003e12:	23c2      	movs	r3, #194	; 0xc2
 8003e14:	72fb      	strb	r3, [r7, #11]
 8003e16:	23c2      	movs	r3, #194	; 0xc2
 8003e18:	72bb      	strb	r3, [r7, #10]
 8003e1a:	23c2      	movs	r3, #194	; 0xc2
 8003e1c:	727b      	strb	r3, [r7, #9]
 8003e1e:	23c2      	movs	r3, #194	; 0xc2
 8003e20:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8003e22:	f107 0308 	add.w	r3, r7, #8
 8003e26:	2205      	movs	r2, #5
 8003e28:	4619      	mov	r1, r3
 8003e2a:	200b      	movs	r0, #11
 8003e2c:	f7ff ff2a 	bl	8003c84 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8003e30:	21c3      	movs	r1, #195	; 0xc3
 8003e32:	200c      	movs	r0, #12
 8003e34:	f7ff ff04 	bl	8003c40 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8003e38:	21c4      	movs	r1, #196	; 0xc4
 8003e3a:	200d      	movs	r0, #13
 8003e3c:	f7ff ff00 	bl	8003c40 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8003e40:	21c5      	movs	r1, #197	; 0xc5
 8003e42:	200e      	movs	r0, #14
 8003e44:	f7ff fefc 	bl	8003c40 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8003e48:	21c6      	movs	r1, #198	; 0xc6
 8003e4a:	200f      	movs	r0, #15
 8003e4c:	f7ff fef8 	bl	8003c40 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8003e50:	23e7      	movs	r3, #231	; 0xe7
 8003e52:	733b      	strb	r3, [r7, #12]
 8003e54:	23e7      	movs	r3, #231	; 0xe7
 8003e56:	72fb      	strb	r3, [r7, #11]
 8003e58:	23e7      	movs	r3, #231	; 0xe7
 8003e5a:	72bb      	strb	r3, [r7, #10]
 8003e5c:	23e7      	movs	r3, #231	; 0xe7
 8003e5e:	727b      	strb	r3, [r7, #9]
 8003e60:	23e7      	movs	r3, #231	; 0xe7
 8003e62:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8003e64:	f107 0308 	add.w	r3, r7, #8
 8003e68:	2205      	movs	r2, #5
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	2010      	movs	r0, #16
 8003e6e:	f7ff ff09 	bl	8003c84 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8003e72:	2100      	movs	r1, #0
 8003e74:	2011      	movs	r0, #17
 8003e76:	f7ff fee3 	bl	8003c40 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	2012      	movs	r0, #18
 8003e7e:	f7ff fedf 	bl	8003c40 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8003e82:	2100      	movs	r1, #0
 8003e84:	2013      	movs	r0, #19
 8003e86:	f7ff fedb 	bl	8003c40 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	2014      	movs	r0, #20
 8003e8e:	f7ff fed7 	bl	8003c40 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8003e92:	2100      	movs	r1, #0
 8003e94:	2015      	movs	r0, #21
 8003e96:	f7ff fed3 	bl	8003c40 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	2016      	movs	r0, #22
 8003e9e:	f7ff fecf 	bl	8003c40 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8003ea2:	f000 fa6d 	bl	8004380 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	201c      	movs	r0, #28
 8003eaa:	f7ff fec9 	bl	8003c40 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8003eae:	2100      	movs	r1, #0
 8003eb0:	201d      	movs	r0, #29
 8003eb2:	f7ff fec5 	bl	8003c40 <NRF24_write_register>
	printRadioSettings();
 8003eb6:	f000 fa7d 	bl	80043b4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8003eba:	210f      	movs	r1, #15
 8003ebc:	200f      	movs	r0, #15
 8003ebe:	f000 f8ad 	bl	800401c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8003ec2:	2003      	movs	r0, #3
 8003ec4:	f000 f910 	bl	80040e8 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8003ec8:	2001      	movs	r0, #1
 8003eca:	f000 f947 	bl	800415c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8003ece:	2002      	movs	r0, #2
 8003ed0:	f000 f98a 	bl	80041e8 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8003ed4:	f000 f8f0 	bl	80040b8 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8003ed8:	2020      	movs	r0, #32
 8003eda:	f000 f8cf 	bl	800407c <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8003ede:	f000 fa46 	bl	800436e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8003ee2:	204c      	movs	r0, #76	; 0x4c
 8003ee4:	f000 f8b5 	bl	8004052 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8003ee8:	f7ff ff16 	bl	8003d18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8003eec:	f7ff ff1c 	bl	8003d28 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8003ef0:	f000 f9a2 	bl	8004238 <NRF24_powerDown>
	
}
 8003ef4:	bf00      	nop
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003efe:	b002      	add	sp, #8
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	200000a4 	.word	0x200000a4
 8003f08:	2000009c 	.word	0x2000009c
 8003f0c:	200000a0 	.word	0x200000a0
 8003f10:	200000a2 	.word	0x200000a2

08003f14 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f7ff fe21 	bl	8003b60 <NRF24_ce>
	NRF24_flush_tx();
 8003f1e:	f7ff fefb 	bl	8003d18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8003f22:	f7ff ff01 	bl	8003d28 <NRF24_flush_rx>
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8003f38:	f000 fa19 	bl	800436e <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f9b8 	bl	80042b6 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8003f46:	f7fc f961 	bl	800020c <HAL_GetTick>
 8003f4a:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8003f4c:	230a      	movs	r3, #10
 8003f4e:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8003f50:	f107 030d 	add.w	r3, r7, #13
 8003f54:	2201      	movs	r2, #1
 8003f56:	4619      	mov	r1, r3
 8003f58:	2008      	movs	r0, #8
 8003f5a:	f7ff fe49 	bl	8003bf0 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8003f5e:	f7ff feeb 	bl	8003d38 <NRF24_get_status>
 8003f62:	4603      	mov	r3, r0
 8003f64:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d107      	bne.n	8003f80 <NRF24_write+0x54>
 8003f70:	f7fc f94c 	bl	800020c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	1ad2      	subs	r2, r2, r3
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d3e7      	bcc.n	8003f50 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8003f80:	f107 010b 	add.w	r1, r7, #11
 8003f84:	f107 030c 	add.w	r3, r7, #12
 8003f88:	4a0c      	ldr	r2, [pc, #48]	; (8003fbc <NRF24_write+0x90>)
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f9bc 	bl	8004308 <NRF24_whatHappened>
	retStatus = tx_ok;
 8003f90:	7b3b      	ldrb	r3, [r7, #12]
 8003f92:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8003f94:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <NRF24_write+0x90>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8003f9c:	f000 f884 	bl	80040a8 <NRF24_getDynamicPayloadSize>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <NRF24_write+0x94>)
 8003fa6:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8003fa8:	f000 f80c 	bl	8003fc4 <NRF24_available>
	NRF24_flush_tx();
 8003fac:	f7ff feb4 	bl	8003d18 <NRF24_flush_tx>
	return retStatus;
 8003fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000094 	.word	0x20000094
 8003fc0:	20000095 	.word	0x20000095

08003fc4 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8003fc8:	2000      	movs	r0, #0
 8003fca:	f000 f944 	bl	8004256 <NRF24_availablePipe>
 8003fce:	4603      	mov	r3, r0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8003fde:	463b      	mov	r3, r7
 8003fe0:	2205      	movs	r2, #5
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	200a      	movs	r0, #10
 8003fe6:	f7ff fe4d 	bl	8003c84 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8003fea:	463b      	mov	r3, r7
 8003fec:	2205      	movs	r2, #5
 8003fee:	4619      	mov	r1, r3
 8003ff0:	2010      	movs	r0, #16
 8003ff2:	f7ff fe47 	bl	8003c84 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <NRF24_openWritingPipe+0x44>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	7bfa      	ldrb	r2, [r7, #15]
 8004000:	4293      	cmp	r3, r2
 8004002:	bf28      	it	cs
 8004004:	4613      	movcs	r3, r2
 8004006:	b2db      	uxtb	r3, r3
 8004008:	4619      	mov	r1, r3
 800400a:	2011      	movs	r0, #17
 800400c:	f7ff fe18 	bl	8003c40 <NRF24_write_register>
}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20000096 	.word	0x20000096

0800401c <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	460a      	mov	r2, r1
 8004026:	71fb      	strb	r3, [r7, #7]
 8004028:	4613      	mov	r3, r2
 800402a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	b25a      	sxtb	r2, r3
 8004032:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	b25b      	sxtb	r3, r3
 800403c:	4313      	orrs	r3, r2
 800403e:	b25b      	sxtb	r3, r3
 8004040:	b2db      	uxtb	r3, r3
 8004042:	4619      	mov	r1, r3
 8004044:	2004      	movs	r0, #4
 8004046:	f7ff fdfb 	bl	8003c40 <NRF24_write_register>
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	4603      	mov	r3, r0
 800405a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 800405c:	237f      	movs	r3, #127	; 0x7f
 800405e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8004060:	7bfa      	ldrb	r2, [r7, #15]
 8004062:	79fb      	ldrb	r3, [r7, #7]
 8004064:	4293      	cmp	r3, r2
 8004066:	bf28      	it	cs
 8004068:	4613      	movcs	r3, r2
 800406a:	b2db      	uxtb	r3, r3
 800406c:	4619      	mov	r1, r3
 800406e:	2005      	movs	r0, #5
 8004070:	f7ff fde6 	bl	8003c40 <NRF24_write_register>
}
 8004074:	bf00      	nop
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	4603      	mov	r3, r0
 8004084:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8004086:	2320      	movs	r3, #32
 8004088:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800408a:	7bfa      	ldrb	r2, [r7, #15]
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	4293      	cmp	r3, r2
 8004090:	bf28      	it	cs
 8004092:	4613      	movcs	r3, r2
 8004094:	b2da      	uxtb	r2, r3
 8004096:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <NRF24_setPayloadSize+0x28>)
 8004098:	701a      	strb	r2, [r3, #0]
}
 800409a:	bf00      	nop
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr
 80040a4:	20000096 	.word	0x20000096

080040a8 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80040ac:	2060      	movs	r0, #96	; 0x60
 80040ae:	f7ff fd77 	bl	8003ba0 <NRF24_read_register>
 80040b2:	4603      	mov	r3, r0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80040bc:	201d      	movs	r0, #29
 80040be:	f7ff fd6f 	bl	8003ba0 <NRF24_read_register>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f023 0304 	bic.w	r3, r3, #4
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	4619      	mov	r1, r3
 80040cc:	201d      	movs	r0, #29
 80040ce:	f7ff fdb7 	bl	8003c40 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80040d2:	2100      	movs	r1, #0
 80040d4:	201c      	movs	r0, #28
 80040d6:	f7ff fdb3 	bl	8003c40 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80040da:	4b02      	ldr	r3, [pc, #8]	; (80040e4 <NRF24_disableDynamicPayloads+0x2c>)
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
}
 80040e0:	bf00      	nop
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20000097 	.word	0x20000097

080040e8 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80040f2:	2006      	movs	r0, #6
 80040f4:	f7ff fd54 	bl	8003ba0 <NRF24_read_register>
 80040f8:	4603      	mov	r3, r0
 80040fa:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	f023 0306 	bic.w	r3, r3, #6
 8004102:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	2b03      	cmp	r3, #3
 8004108:	d104      	bne.n	8004114 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	f043 0306 	orr.w	r3, r3, #6
 8004110:	73fb      	strb	r3, [r7, #15]
 8004112:	e019      	b.n	8004148 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d104      	bne.n	8004124 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	f043 0304 	orr.w	r3, r3, #4
 8004120:	73fb      	strb	r3, [r7, #15]
 8004122:	e011      	b.n	8004148 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8004124:	79fb      	ldrb	r3, [r7, #7]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d104      	bne.n	8004134 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	f043 0302 	orr.w	r3, r3, #2
 8004130:	73fb      	strb	r3, [r7, #15]
 8004132:	e009      	b.n	8004148 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d006      	beq.n	8004148 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	2b04      	cmp	r3, #4
 800413e:	d103      	bne.n	8004148 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	f043 0306 	orr.w	r3, r3, #6
 8004146:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	4619      	mov	r1, r3
 800414c:	2006      	movs	r0, #6
 800414e:	f7ff fd77 	bl	8003c40 <NRF24_write_register>
}
 8004152:	bf00      	nop
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8004166:	2300      	movs	r3, #0
 8004168:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800416a:	2006      	movs	r0, #6
 800416c:	f7ff fd18 	bl	8003ba0 <NRF24_read_register>
 8004170:	4603      	mov	r3, r0
 8004172:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8004174:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <NRF24_setDataRate+0x88>)
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800417a:	7bbb      	ldrb	r3, [r7, #14]
 800417c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004180:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d107      	bne.n	8004198 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8004188:	4b16      	ldr	r3, [pc, #88]	; (80041e4 <NRF24_setDataRate+0x88>)
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800418e:	7bbb      	ldrb	r3, [r7, #14]
 8004190:	f043 0320 	orr.w	r3, r3, #32
 8004194:	73bb      	strb	r3, [r7, #14]
 8004196:	e00d      	b.n	80041b4 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d107      	bne.n	80041ae <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800419e:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <NRF24_setDataRate+0x88>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80041a4:	7bbb      	ldrb	r3, [r7, #14]
 80041a6:	f043 0308 	orr.w	r3, r3, #8
 80041aa:	73bb      	strb	r3, [r7, #14]
 80041ac:	e002      	b.n	80041b4 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80041ae:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <NRF24_setDataRate+0x88>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80041b4:	7bbb      	ldrb	r3, [r7, #14]
 80041b6:	4619      	mov	r1, r3
 80041b8:	2006      	movs	r0, #6
 80041ba:	f7ff fd41 	bl	8003c40 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80041be:	2006      	movs	r0, #6
 80041c0:	f7ff fcee 	bl	8003ba0 <NRF24_read_register>
 80041c4:	4603      	mov	r3, r0
 80041c6:	461a      	mov	r2, r3
 80041c8:	7bbb      	ldrb	r3, [r7, #14]
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d102      	bne.n	80041d4 <NRF24_setDataRate+0x78>
  {
    result = true;
 80041ce:	2301      	movs	r3, #1
 80041d0:	73fb      	strb	r3, [r7, #15]
 80041d2:	e002      	b.n	80041da <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <NRF24_setDataRate+0x88>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20000098 	.word	0x20000098

080041e8 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80041f2:	2000      	movs	r0, #0
 80041f4:	f7ff fcd4 	bl	8003ba0 <NRF24_read_register>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f023 030c 	bic.w	r3, r3, #12
 80041fe:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00f      	beq.n	8004226 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8004206:	79fb      	ldrb	r3, [r7, #7]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d104      	bne.n	8004216 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	f043 0308 	orr.w	r3, r3, #8
 8004212:	73fb      	strb	r3, [r7, #15]
 8004214:	e007      	b.n	8004226 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	f043 0308 	orr.w	r3, r3, #8
 800421c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	f043 0304 	orr.w	r3, r3, #4
 8004224:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	4619      	mov	r1, r3
 800422a:	2000      	movs	r0, #0
 800422c:	f7ff fd08 	bl	8003c40 <NRF24_write_register>
}
 8004230:	bf00      	nop
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800423c:	2000      	movs	r0, #0
 800423e:	f7ff fcaf 	bl	8003ba0 <NRF24_read_register>
 8004242:	4603      	mov	r3, r0
 8004244:	f023 0302 	bic.w	r3, r3, #2
 8004248:	b2db      	uxtb	r3, r3
 800424a:	4619      	mov	r1, r3
 800424c:	2000      	movs	r0, #0
 800424e:	f7ff fcf7 	bl	8003c40 <NRF24_write_register>
}
 8004252:	bf00      	nop
 8004254:	bd80      	pop	{r7, pc}

08004256 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800425e:	f7ff fd6b 	bl	8003d38 <NRF24_get_status>
 8004262:	4603      	mov	r3, r0
 8004264:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf14      	ite	ne
 8004270:	2301      	movne	r3, #1
 8004272:	2300      	moveq	r3, #0
 8004274:	73bb      	strb	r3, [r7, #14]

  if (result)
 8004276:	7bbb      	ldrb	r3, [r7, #14]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d017      	beq.n	80042ac <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d007      	beq.n	8004292 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8004282:	7bfb      	ldrb	r3, [r7, #15]
 8004284:	085b      	lsrs	r3, r3, #1
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	b2da      	uxtb	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8004292:	2140      	movs	r1, #64	; 0x40
 8004294:	2007      	movs	r0, #7
 8004296:	f7ff fcd3 	bl	8003c40 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80042a4:	2120      	movs	r1, #32
 80042a6:	2007      	movs	r0, #7
 80042a8:	f7ff fcca 	bl	8003c40 <NRF24_write_register>
    }
  }
  return result;
 80042ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	460b      	mov	r3, r1
 80042c0:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 80042c2:	2000      	movs	r0, #0
 80042c4:	f7ff fc6c 	bl	8003ba0 <NRF24_read_register>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f043 0302 	orr.w	r3, r3, #2
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	4619      	mov	r1, r3
 80042d8:	2000      	movs	r0, #0
 80042da:	f7ff fcb1 	bl	8003c40 <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 80042de:	2096      	movs	r0, #150	; 0x96
 80042e0:	f7ff fbfe 	bl	8003ae0 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	4619      	mov	r1, r3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff fcf3 	bl	8003cd4 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 80042ee:	2001      	movs	r0, #1
 80042f0:	f7ff fc36 	bl	8003b60 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 80042f4:	200f      	movs	r0, #15
 80042f6:	f7ff fbf3 	bl	8003ae0 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 80042fa:	2000      	movs	r0, #0
 80042fc:	f7ff fc30 	bl	8003b60 <NRF24_ce>
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8004314:	f7ff fd10 	bl	8003d38 <NRF24_get_status>
 8004318:	4603      	mov	r3, r0
 800431a:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8004322:	2170      	movs	r1, #112	; 0x70
 8004324:	2007      	movs	r0, #7
 8004326:	f7ff fc8b 	bl	8003c40 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 800432a:	7dfb      	ldrb	r3, [r7, #23]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	bf14      	ite	ne
 8004334:	2301      	movne	r3, #1
 8004336:	2300      	moveq	r3, #0
 8004338:	b2da      	uxtb	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 800433e:	7dfb      	ldrb	r3, [r7, #23]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	bf14      	ite	ne
 8004348:	2301      	movne	r3, #1
 800434a:	2300      	moveq	r3, #0
 800434c:	b2da      	uxtb	r2, r3
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8004352:	7dfb      	ldrb	r3, [r7, #23]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	bf14      	ite	ne
 800435c:	2301      	movne	r3, #1
 800435e:	2300      	moveq	r3, #0
 8004360:	b2da      	uxtb	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	701a      	strb	r2, [r3, #0]
}
 8004366:	bf00      	nop
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8004372:	2170      	movs	r1, #112	; 0x70
 8004374:	2007      	movs	r0, #7
 8004376:	f7ff fc63 	bl	8003c40 <NRF24_write_register>
}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8004386:	2000      	movs	r0, #0
 8004388:	f7ff fbca 	bl	8003b20 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800438c:	2350      	movs	r3, #80	; 0x50
 800438e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8004390:	2373      	movs	r3, #115	; 0x73
 8004392:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8004394:	1d39      	adds	r1, r7, #4
 8004396:	2364      	movs	r3, #100	; 0x64
 8004398:	2202      	movs	r2, #2
 800439a:	4805      	ldr	r0, [pc, #20]	; (80043b0 <NRF24_ACTIVATE_cmd+0x30>)
 800439c:	f7fe f8d8 	bl	8002550 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80043a0:	2001      	movs	r0, #1
 80043a2:	f7ff fbbd 	bl	8003b20 <NRF24_csn>
}
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	200000a4 	.word	0x200000a4

080043b4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80043b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043b6:	b0a1      	sub	sp, #132	; 0x84
 80043b8:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80043ba:	f107 0308 	add.w	r3, r7, #8
 80043be:	4ab6      	ldr	r2, [pc, #728]	; (8004698 <printRadioSettings+0x2e4>)
 80043c0:	461c      	mov	r4, r3
 80043c2:	4615      	mov	r5, r2
 80043c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	8022      	strh	r2, [r4, #0]
 80043d6:	3402      	adds	r4, #2
 80043d8:	0c1b      	lsrs	r3, r3, #16
 80043da:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80043dc:	f107 0308 	add.w	r3, r7, #8
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fb feb3 	bl	800014c <strlen>
 80043e6:	4603      	mov	r3, r0
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	f107 0108 	add.w	r1, r7, #8
 80043ee:	230a      	movs	r3, #10
 80043f0:	48aa      	ldr	r0, [pc, #680]	; (800469c <printRadioSettings+0x2e8>)
 80043f2:	f7ff f97b 	bl	80036ec <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80043f6:	2000      	movs	r0, #0
 80043f8:	f7ff fbd2 	bl	8003ba0 <NRF24_read_register>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8004402:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d020      	beq.n	8004450 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800440e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00b      	beq.n	8004432 <printRadioSettings+0x7e>
 800441a:	f107 0308 	add.w	r3, r7, #8
 800441e:	4aa0      	ldr	r2, [pc, #640]	; (80046a0 <printRadioSettings+0x2ec>)
 8004420:	461c      	mov	r4, r3
 8004422:	4615      	mov	r5, r2
 8004424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004428:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800442c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004430:	e017      	b.n	8004462 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8004432:	f107 0308 	add.w	r3, r7, #8
 8004436:	4a9b      	ldr	r2, [pc, #620]	; (80046a4 <printRadioSettings+0x2f0>)
 8004438:	461c      	mov	r4, r3
 800443a:	4615      	mov	r5, r2
 800443c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800443e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004440:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004444:	c403      	stmia	r4!, {r0, r1}
 8004446:	8022      	strh	r2, [r4, #0]
 8004448:	3402      	adds	r4, #2
 800444a:	0c13      	lsrs	r3, r2, #16
 800444c:	7023      	strb	r3, [r4, #0]
 800444e:	e008      	b.n	8004462 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8004450:	f107 0308 	add.w	r3, r7, #8
 8004454:	4a94      	ldr	r2, [pc, #592]	; (80046a8 <printRadioSettings+0x2f4>)
 8004456:	461c      	mov	r4, r3
 8004458:	4615      	mov	r5, r2
 800445a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800445c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800445e:	682b      	ldr	r3, [r5, #0]
 8004460:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004462:	f107 0308 	add.w	r3, r7, #8
 8004466:	4618      	mov	r0, r3
 8004468:	f7fb fe70 	bl	800014c <strlen>
 800446c:	4603      	mov	r3, r0
 800446e:	b29a      	uxth	r2, r3
 8004470:	f107 0108 	add.w	r1, r7, #8
 8004474:	230a      	movs	r3, #10
 8004476:	4889      	ldr	r0, [pc, #548]	; (800469c <printRadioSettings+0x2e8>)
 8004478:	f7ff f938 	bl	80036ec <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800447c:	2001      	movs	r0, #1
 800447e:	f7ff fb8f 	bl	8003ba0 <NRF24_read_register>
 8004482:	4603      	mov	r3, r0
 8004484:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004488:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800448c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004490:	2b00      	cmp	r3, #0
 8004492:	bfcc      	ite	gt
 8004494:	2301      	movgt	r3, #1
 8004496:	2300      	movle	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800449c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80044a0:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bfcc      	ite	gt
 80044a8:	2301      	movgt	r3, #1
 80044aa:	2300      	movle	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80044b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80044b4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bfcc      	ite	gt
 80044bc:	2301      	movgt	r3, #1
 80044be:	2300      	movle	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80044c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80044c8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	bfcc      	ite	gt
 80044d0:	2301      	movgt	r3, #1
 80044d2:	2300      	movle	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80044d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80044dc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bfcc      	ite	gt
 80044e4:	2301      	movgt	r3, #1
 80044e6:	2300      	movle	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80044ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80044f0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bfcc      	ite	gt
 80044f8:	2301      	movgt	r3, #1
 80044fa:	2300      	movle	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	f107 0008 	add.w	r0, r7, #8
 8004502:	9303      	str	r3, [sp, #12]
 8004504:	9402      	str	r4, [sp, #8]
 8004506:	9101      	str	r1, [sp, #4]
 8004508:	9200      	str	r2, [sp, #0]
 800450a:	4633      	mov	r3, r6
 800450c:	462a      	mov	r2, r5
 800450e:	4967      	ldr	r1, [pc, #412]	; (80046ac <printRadioSettings+0x2f8>)
 8004510:	f001 f9c2 	bl	8005898 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004514:	f107 0308 	add.w	r3, r7, #8
 8004518:	4618      	mov	r0, r3
 800451a:	f7fb fe17 	bl	800014c <strlen>
 800451e:	4603      	mov	r3, r0
 8004520:	b29a      	uxth	r2, r3
 8004522:	f107 0108 	add.w	r1, r7, #8
 8004526:	230a      	movs	r3, #10
 8004528:	485c      	ldr	r0, [pc, #368]	; (800469c <printRadioSettings+0x2e8>)
 800452a:	f7ff f8df 	bl	80036ec <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800452e:	2002      	movs	r0, #2
 8004530:	f7ff fb36 	bl	8003ba0 <NRF24_read_register>
 8004534:	4603      	mov	r3, r0
 8004536:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800453a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800453e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004542:	2b00      	cmp	r3, #0
 8004544:	bfcc      	ite	gt
 8004546:	2301      	movgt	r3, #1
 8004548:	2300      	movle	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800454e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004552:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004556:	2b00      	cmp	r3, #0
 8004558:	bfcc      	ite	gt
 800455a:	2301      	movgt	r3, #1
 800455c:	2300      	movle	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004562:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004566:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800456a:	2b00      	cmp	r3, #0
 800456c:	bfcc      	ite	gt
 800456e:	2301      	movgt	r3, #1
 8004570:	2300      	movle	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004576:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800457a:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800457e:	2b00      	cmp	r3, #0
 8004580:	bfcc      	ite	gt
 8004582:	2301      	movgt	r3, #1
 8004584:	2300      	movle	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800458a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800458e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004592:	2b00      	cmp	r3, #0
 8004594:	bfcc      	ite	gt
 8004596:	2301      	movgt	r3, #1
 8004598:	2300      	movle	r3, #0
 800459a:	b2db      	uxtb	r3, r3
 800459c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800459e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045a2:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bfcc      	ite	gt
 80045aa:	2301      	movgt	r3, #1
 80045ac:	2300      	movle	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f107 0008 	add.w	r0, r7, #8
 80045b4:	9303      	str	r3, [sp, #12]
 80045b6:	9402      	str	r4, [sp, #8]
 80045b8:	9101      	str	r1, [sp, #4]
 80045ba:	9200      	str	r2, [sp, #0]
 80045bc:	4633      	mov	r3, r6
 80045be:	462a      	mov	r2, r5
 80045c0:	493b      	ldr	r1, [pc, #236]	; (80046b0 <printRadioSettings+0x2fc>)
 80045c2:	f001 f969 	bl	8005898 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80045c6:	f107 0308 	add.w	r3, r7, #8
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fb fdbe 	bl	800014c <strlen>
 80045d0:	4603      	mov	r3, r0
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	f107 0108 	add.w	r1, r7, #8
 80045d8:	230a      	movs	r3, #10
 80045da:	4830      	ldr	r0, [pc, #192]	; (800469c <printRadioSettings+0x2e8>)
 80045dc:	f7ff f886 	bl	80036ec <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80045e0:	2003      	movs	r0, #3
 80045e2:	f7ff fadd 	bl	8003ba0 <NRF24_read_register>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80045f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045f4:	3302      	adds	r3, #2
 80045f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80045fa:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80045fe:	f107 0308 	add.w	r3, r7, #8
 8004602:	492c      	ldr	r1, [pc, #176]	; (80046b4 <printRadioSettings+0x300>)
 8004604:	4618      	mov	r0, r3
 8004606:	f001 f947 	bl	8005898 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800460a:	f107 0308 	add.w	r3, r7, #8
 800460e:	4618      	mov	r0, r3
 8004610:	f7fb fd9c 	bl	800014c <strlen>
 8004614:	4603      	mov	r3, r0
 8004616:	b29a      	uxth	r2, r3
 8004618:	f107 0108 	add.w	r1, r7, #8
 800461c:	230a      	movs	r3, #10
 800461e:	481f      	ldr	r0, [pc, #124]	; (800469c <printRadioSettings+0x2e8>)
 8004620:	f7ff f864 	bl	80036ec <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8004624:	2005      	movs	r0, #5
 8004626:	f7ff fabb 	bl	8003ba0 <NRF24_read_register>
 800462a:	4603      	mov	r3, r0
 800462c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8004630:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004634:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004638:	f107 0308 	add.w	r3, r7, #8
 800463c:	491e      	ldr	r1, [pc, #120]	; (80046b8 <printRadioSettings+0x304>)
 800463e:	4618      	mov	r0, r3
 8004640:	f001 f92a 	bl	8005898 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004644:	f107 0308 	add.w	r3, r7, #8
 8004648:	4618      	mov	r0, r3
 800464a:	f7fb fd7f 	bl	800014c <strlen>
 800464e:	4603      	mov	r3, r0
 8004650:	b29a      	uxth	r2, r3
 8004652:	f107 0108 	add.w	r1, r7, #8
 8004656:	230a      	movs	r3, #10
 8004658:	4810      	ldr	r0, [pc, #64]	; (800469c <printRadioSettings+0x2e8>)
 800465a:	f7ff f847 	bl	80036ec <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 800465e:	2006      	movs	r0, #6
 8004660:	f7ff fa9e 	bl	8003ba0 <NRF24_read_register>
 8004664:	4603      	mov	r3, r0
 8004666:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800466a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d024      	beq.n	80046c0 <printRadioSettings+0x30c>
 8004676:	f107 0308 	add.w	r3, r7, #8
 800467a:	4a10      	ldr	r2, [pc, #64]	; (80046bc <printRadioSettings+0x308>)
 800467c:	461c      	mov	r4, r3
 800467e:	4615      	mov	r5, r2
 8004680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004684:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004688:	6020      	str	r0, [r4, #0]
 800468a:	3404      	adds	r4, #4
 800468c:	8021      	strh	r1, [r4, #0]
 800468e:	3402      	adds	r4, #2
 8004690:	0c0b      	lsrs	r3, r1, #16
 8004692:	7023      	strb	r3, [r4, #0]
 8004694:	e023      	b.n	80046de <printRadioSettings+0x32a>
 8004696:	bf00      	nop
 8004698:	08006118 	.word	0x08006118
 800469c:	200000fc 	.word	0x200000fc
 80046a0:	0800614c 	.word	0x0800614c
 80046a4:	08006168 	.word	0x08006168
 80046a8:	08006184 	.word	0x08006184
 80046ac:	08006198 	.word	0x08006198
 80046b0:	080061dc 	.word	0x080061dc
 80046b4:	08006228 	.word	0x08006228
 80046b8:	08006244 	.word	0x08006244
 80046bc:	08006258 	.word	0x08006258
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80046c0:	f107 0308 	add.w	r3, r7, #8
 80046c4:	4a29      	ldr	r2, [pc, #164]	; (800476c <printRadioSettings+0x3b8>)
 80046c6:	461c      	mov	r4, r3
 80046c8:	4615      	mov	r5, r2
 80046ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80046d2:	6020      	str	r0, [r4, #0]
 80046d4:	3404      	adds	r4, #4
 80046d6:	8021      	strh	r1, [r4, #0]
 80046d8:	3402      	adds	r4, #2
 80046da:	0c0b      	lsrs	r3, r1, #16
 80046dc:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80046de:	f107 0308 	add.w	r3, r7, #8
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fb fd32 	bl	800014c <strlen>
 80046e8:	4603      	mov	r3, r0
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	f107 0108 	add.w	r1, r7, #8
 80046f0:	230a      	movs	r3, #10
 80046f2:	481f      	ldr	r0, [pc, #124]	; (8004770 <printRadioSettings+0x3bc>)
 80046f4:	f7fe fffa 	bl	80036ec <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80046f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80046fc:	f003 0306 	and.w	r3, r3, #6
 8004700:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8004704:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800470e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <printRadioSettings+0x376>
 8004716:	f107 0308 	add.w	r3, r7, #8
 800471a:	4a16      	ldr	r2, [pc, #88]	; (8004774 <printRadioSettings+0x3c0>)
 800471c:	461c      	mov	r4, r3
 800471e:	4615      	mov	r5, r2
 8004720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	6023      	str	r3, [r4, #0]
 8004728:	e037      	b.n	800479a <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800472a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800472e:	2b01      	cmp	r3, #1
 8004730:	d109      	bne.n	8004746 <printRadioSettings+0x392>
 8004732:	f107 0308 	add.w	r3, r7, #8
 8004736:	4a10      	ldr	r2, [pc, #64]	; (8004778 <printRadioSettings+0x3c4>)
 8004738:	461c      	mov	r4, r3
 800473a:	4615      	mov	r5, r2
 800473c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800473e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	6023      	str	r3, [r4, #0]
 8004744:	e029      	b.n	800479a <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8004746:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800474a:	2b02      	cmp	r3, #2
 800474c:	d118      	bne.n	8004780 <printRadioSettings+0x3cc>
 800474e:	f107 0308 	add.w	r3, r7, #8
 8004752:	4a0a      	ldr	r2, [pc, #40]	; (800477c <printRadioSettings+0x3c8>)
 8004754:	461c      	mov	r4, r3
 8004756:	4615      	mov	r5, r2
 8004758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800475a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	8022      	strh	r2, [r4, #0]
 8004762:	3402      	adds	r4, #2
 8004764:	0c1b      	lsrs	r3, r3, #16
 8004766:	7023      	strb	r3, [r4, #0]
 8004768:	e017      	b.n	800479a <printRadioSettings+0x3e6>
 800476a:	bf00      	nop
 800476c:	08006270 	.word	0x08006270
 8004770:	200000fc 	.word	0x200000fc
 8004774:	08006288 	.word	0x08006288
 8004778:	0800629c 	.word	0x0800629c
 800477c:	080062b0 	.word	0x080062b0
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8004780:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004784:	2b03      	cmp	r3, #3
 8004786:	d108      	bne.n	800479a <printRadioSettings+0x3e6>
 8004788:	f107 0308 	add.w	r3, r7, #8
 800478c:	4ad7      	ldr	r2, [pc, #860]	; (8004aec <printRadioSettings+0x738>)
 800478e:	461c      	mov	r4, r3
 8004790:	4615      	mov	r5, r2
 8004792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004796:	682b      	ldr	r3, [r5, #0]
 8004798:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800479a:	f107 0308 	add.w	r3, r7, #8
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fb fcd4 	bl	800014c <strlen>
 80047a4:	4603      	mov	r3, r0
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	f107 0108 	add.w	r1, r7, #8
 80047ac:	230a      	movs	r3, #10
 80047ae:	48d0      	ldr	r0, [pc, #832]	; (8004af0 <printRadioSettings+0x73c>)
 80047b0:	f7fe ff9c 	bl	80036ec <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80047b4:	463b      	mov	r3, r7
 80047b6:	2205      	movs	r2, #5
 80047b8:	4619      	mov	r1, r3
 80047ba:	200a      	movs	r0, #10
 80047bc:	f7ff fa18 	bl	8003bf0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80047c0:	793b      	ldrb	r3, [r7, #4]
 80047c2:	461c      	mov	r4, r3
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	461d      	mov	r5, r3
 80047c8:	78bb      	ldrb	r3, [r7, #2]
 80047ca:	787a      	ldrb	r2, [r7, #1]
 80047cc:	7839      	ldrb	r1, [r7, #0]
 80047ce:	f107 0008 	add.w	r0, r7, #8
 80047d2:	9102      	str	r1, [sp, #8]
 80047d4:	9201      	str	r2, [sp, #4]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	462b      	mov	r3, r5
 80047da:	4622      	mov	r2, r4
 80047dc:	49c5      	ldr	r1, [pc, #788]	; (8004af4 <printRadioSettings+0x740>)
 80047de:	f001 f85b 	bl	8005898 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80047e2:	f107 0308 	add.w	r3, r7, #8
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fb fcb0 	bl	800014c <strlen>
 80047ec:	4603      	mov	r3, r0
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	f107 0108 	add.w	r1, r7, #8
 80047f4:	230a      	movs	r3, #10
 80047f6:	48be      	ldr	r0, [pc, #760]	; (8004af0 <printRadioSettings+0x73c>)
 80047f8:	f7fe ff78 	bl	80036ec <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80047fc:	463b      	mov	r3, r7
 80047fe:	2205      	movs	r2, #5
 8004800:	4619      	mov	r1, r3
 8004802:	200b      	movs	r0, #11
 8004804:	f7ff f9f4 	bl	8003bf0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8004808:	793b      	ldrb	r3, [r7, #4]
 800480a:	461c      	mov	r4, r3
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	461d      	mov	r5, r3
 8004810:	78bb      	ldrb	r3, [r7, #2]
 8004812:	787a      	ldrb	r2, [r7, #1]
 8004814:	7839      	ldrb	r1, [r7, #0]
 8004816:	f107 0008 	add.w	r0, r7, #8
 800481a:	9102      	str	r1, [sp, #8]
 800481c:	9201      	str	r2, [sp, #4]
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	462b      	mov	r3, r5
 8004822:	4622      	mov	r2, r4
 8004824:	49b4      	ldr	r1, [pc, #720]	; (8004af8 <printRadioSettings+0x744>)
 8004826:	f001 f837 	bl	8005898 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800482a:	f107 0308 	add.w	r3, r7, #8
 800482e:	4618      	mov	r0, r3
 8004830:	f7fb fc8c 	bl	800014c <strlen>
 8004834:	4603      	mov	r3, r0
 8004836:	b29a      	uxth	r2, r3
 8004838:	f107 0108 	add.w	r1, r7, #8
 800483c:	230a      	movs	r3, #10
 800483e:	48ac      	ldr	r0, [pc, #688]	; (8004af0 <printRadioSettings+0x73c>)
 8004840:	f7fe ff54 	bl	80036ec <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8004844:	463b      	mov	r3, r7
 8004846:	2201      	movs	r2, #1
 8004848:	4619      	mov	r1, r3
 800484a:	200c      	movs	r0, #12
 800484c:	f7ff f9d0 	bl	8003bf0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004850:	783b      	ldrb	r3, [r7, #0]
 8004852:	461a      	mov	r2, r3
 8004854:	f107 0308 	add.w	r3, r7, #8
 8004858:	49a8      	ldr	r1, [pc, #672]	; (8004afc <printRadioSettings+0x748>)
 800485a:	4618      	mov	r0, r3
 800485c:	f001 f81c 	bl	8005898 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004860:	f107 0308 	add.w	r3, r7, #8
 8004864:	4618      	mov	r0, r3
 8004866:	f7fb fc71 	bl	800014c <strlen>
 800486a:	4603      	mov	r3, r0
 800486c:	b29a      	uxth	r2, r3
 800486e:	f107 0108 	add.w	r1, r7, #8
 8004872:	230a      	movs	r3, #10
 8004874:	489e      	ldr	r0, [pc, #632]	; (8004af0 <printRadioSettings+0x73c>)
 8004876:	f7fe ff39 	bl	80036ec <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800487a:	463b      	mov	r3, r7
 800487c:	2201      	movs	r2, #1
 800487e:	4619      	mov	r1, r3
 8004880:	200d      	movs	r0, #13
 8004882:	f7ff f9b5 	bl	8003bf0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004886:	783b      	ldrb	r3, [r7, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	f107 0308 	add.w	r3, r7, #8
 800488e:	499c      	ldr	r1, [pc, #624]	; (8004b00 <printRadioSettings+0x74c>)
 8004890:	4618      	mov	r0, r3
 8004892:	f001 f801 	bl	8005898 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004896:	f107 0308 	add.w	r3, r7, #8
 800489a:	4618      	mov	r0, r3
 800489c:	f7fb fc56 	bl	800014c <strlen>
 80048a0:	4603      	mov	r3, r0
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	f107 0108 	add.w	r1, r7, #8
 80048a8:	230a      	movs	r3, #10
 80048aa:	4891      	ldr	r0, [pc, #580]	; (8004af0 <printRadioSettings+0x73c>)
 80048ac:	f7fe ff1e 	bl	80036ec <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80048b0:	463b      	mov	r3, r7
 80048b2:	2201      	movs	r2, #1
 80048b4:	4619      	mov	r1, r3
 80048b6:	200e      	movs	r0, #14
 80048b8:	f7ff f99a 	bl	8003bf0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80048bc:	783b      	ldrb	r3, [r7, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	f107 0308 	add.w	r3, r7, #8
 80048c4:	498f      	ldr	r1, [pc, #572]	; (8004b04 <printRadioSettings+0x750>)
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 ffe6 	bl	8005898 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80048cc:	f107 0308 	add.w	r3, r7, #8
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fb fc3b 	bl	800014c <strlen>
 80048d6:	4603      	mov	r3, r0
 80048d8:	b29a      	uxth	r2, r3
 80048da:	f107 0108 	add.w	r1, r7, #8
 80048de:	230a      	movs	r3, #10
 80048e0:	4883      	ldr	r0, [pc, #524]	; (8004af0 <printRadioSettings+0x73c>)
 80048e2:	f7fe ff03 	bl	80036ec <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80048e6:	463b      	mov	r3, r7
 80048e8:	2201      	movs	r2, #1
 80048ea:	4619      	mov	r1, r3
 80048ec:	200f      	movs	r0, #15
 80048ee:	f7ff f97f 	bl	8003bf0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80048f2:	783b      	ldrb	r3, [r7, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	f107 0308 	add.w	r3, r7, #8
 80048fa:	4983      	ldr	r1, [pc, #524]	; (8004b08 <printRadioSettings+0x754>)
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 ffcb 	bl	8005898 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004902:	f107 0308 	add.w	r3, r7, #8
 8004906:	4618      	mov	r0, r3
 8004908:	f7fb fc20 	bl	800014c <strlen>
 800490c:	4603      	mov	r3, r0
 800490e:	b29a      	uxth	r2, r3
 8004910:	f107 0108 	add.w	r1, r7, #8
 8004914:	230a      	movs	r3, #10
 8004916:	4876      	ldr	r0, [pc, #472]	; (8004af0 <printRadioSettings+0x73c>)
 8004918:	f7fe fee8 	bl	80036ec <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800491c:	463b      	mov	r3, r7
 800491e:	2205      	movs	r2, #5
 8004920:	4619      	mov	r1, r3
 8004922:	2010      	movs	r0, #16
 8004924:	f7ff f964 	bl	8003bf0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8004928:	793b      	ldrb	r3, [r7, #4]
 800492a:	461c      	mov	r4, r3
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	461d      	mov	r5, r3
 8004930:	78bb      	ldrb	r3, [r7, #2]
 8004932:	787a      	ldrb	r2, [r7, #1]
 8004934:	7839      	ldrb	r1, [r7, #0]
 8004936:	f107 0008 	add.w	r0, r7, #8
 800493a:	9102      	str	r1, [sp, #8]
 800493c:	9201      	str	r2, [sp, #4]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	462b      	mov	r3, r5
 8004942:	4622      	mov	r2, r4
 8004944:	4971      	ldr	r1, [pc, #452]	; (8004b0c <printRadioSettings+0x758>)
 8004946:	f000 ffa7 	bl	8005898 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800494a:	f107 0308 	add.w	r3, r7, #8
 800494e:	4618      	mov	r0, r3
 8004950:	f7fb fbfc 	bl	800014c <strlen>
 8004954:	4603      	mov	r3, r0
 8004956:	b29a      	uxth	r2, r3
 8004958:	f107 0108 	add.w	r1, r7, #8
 800495c:	230a      	movs	r3, #10
 800495e:	4864      	ldr	r0, [pc, #400]	; (8004af0 <printRadioSettings+0x73c>)
 8004960:	f7fe fec4 	bl	80036ec <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8004964:	2011      	movs	r0, #17
 8004966:	f7ff f91b 	bl	8003ba0 <NRF24_read_register>
 800496a:	4603      	mov	r3, r0
 800496c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004970:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004974:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004978:	f107 0308 	add.w	r3, r7, #8
 800497c:	4964      	ldr	r1, [pc, #400]	; (8004b10 <printRadioSettings+0x75c>)
 800497e:	4618      	mov	r0, r3
 8004980:	f000 ff8a 	bl	8005898 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004984:	f107 0308 	add.w	r3, r7, #8
 8004988:	4618      	mov	r0, r3
 800498a:	f7fb fbdf 	bl	800014c <strlen>
 800498e:	4603      	mov	r3, r0
 8004990:	b29a      	uxth	r2, r3
 8004992:	f107 0108 	add.w	r1, r7, #8
 8004996:	230a      	movs	r3, #10
 8004998:	4855      	ldr	r0, [pc, #340]	; (8004af0 <printRadioSettings+0x73c>)
 800499a:	f7fe fea7 	bl	80036ec <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 800499e:	2012      	movs	r0, #18
 80049a0:	f7ff f8fe 	bl	8003ba0 <NRF24_read_register>
 80049a4:	4603      	mov	r3, r0
 80049a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80049aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80049ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049b2:	f107 0308 	add.w	r3, r7, #8
 80049b6:	4957      	ldr	r1, [pc, #348]	; (8004b14 <printRadioSettings+0x760>)
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 ff6d 	bl	8005898 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80049be:	f107 0308 	add.w	r3, r7, #8
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fb fbc2 	bl	800014c <strlen>
 80049c8:	4603      	mov	r3, r0
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	f107 0108 	add.w	r1, r7, #8
 80049d0:	230a      	movs	r3, #10
 80049d2:	4847      	ldr	r0, [pc, #284]	; (8004af0 <printRadioSettings+0x73c>)
 80049d4:	f7fe fe8a 	bl	80036ec <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80049d8:	2013      	movs	r0, #19
 80049da:	f7ff f8e1 	bl	8003ba0 <NRF24_read_register>
 80049de:	4603      	mov	r3, r0
 80049e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80049e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80049e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049ec:	f107 0308 	add.w	r3, r7, #8
 80049f0:	4949      	ldr	r1, [pc, #292]	; (8004b18 <printRadioSettings+0x764>)
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 ff50 	bl	8005898 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80049f8:	f107 0308 	add.w	r3, r7, #8
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fb fba5 	bl	800014c <strlen>
 8004a02:	4603      	mov	r3, r0
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	f107 0108 	add.w	r1, r7, #8
 8004a0a:	230a      	movs	r3, #10
 8004a0c:	4838      	ldr	r0, [pc, #224]	; (8004af0 <printRadioSettings+0x73c>)
 8004a0e:	f7fe fe6d 	bl	80036ec <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8004a12:	2014      	movs	r0, #20
 8004a14:	f7ff f8c4 	bl	8003ba0 <NRF24_read_register>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004a1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a26:	f107 0308 	add.w	r3, r7, #8
 8004a2a:	493c      	ldr	r1, [pc, #240]	; (8004b1c <printRadioSettings+0x768>)
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 ff33 	bl	8005898 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a32:	f107 0308 	add.w	r3, r7, #8
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fb fb88 	bl	800014c <strlen>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	f107 0108 	add.w	r1, r7, #8
 8004a44:	230a      	movs	r3, #10
 8004a46:	482a      	ldr	r0, [pc, #168]	; (8004af0 <printRadioSettings+0x73c>)
 8004a48:	f7fe fe50 	bl	80036ec <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8004a4c:	2015      	movs	r0, #21
 8004a4e:	f7ff f8a7 	bl	8003ba0 <NRF24_read_register>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004a58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a60:	f107 0308 	add.w	r3, r7, #8
 8004a64:	492e      	ldr	r1, [pc, #184]	; (8004b20 <printRadioSettings+0x76c>)
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 ff16 	bl	8005898 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a6c:	f107 0308 	add.w	r3, r7, #8
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fb fb6b 	bl	800014c <strlen>
 8004a76:	4603      	mov	r3, r0
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	f107 0108 	add.w	r1, r7, #8
 8004a7e:	230a      	movs	r3, #10
 8004a80:	481b      	ldr	r0, [pc, #108]	; (8004af0 <printRadioSettings+0x73c>)
 8004a82:	f7fe fe33 	bl	80036ec <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8004a86:	2016      	movs	r0, #22
 8004a88:	f7ff f88a 	bl	8003ba0 <NRF24_read_register>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004a92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a9a:	f107 0308 	add.w	r3, r7, #8
 8004a9e:	4921      	ldr	r1, [pc, #132]	; (8004b24 <printRadioSettings+0x770>)
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 fef9 	bl	8005898 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004aa6:	f107 0308 	add.w	r3, r7, #8
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fb fb4e 	bl	800014c <strlen>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	f107 0108 	add.w	r1, r7, #8
 8004ab8:	230a      	movs	r3, #10
 8004aba:	480d      	ldr	r0, [pc, #52]	; (8004af0 <printRadioSettings+0x73c>)
 8004abc:	f7fe fe16 	bl	80036ec <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8004ac0:	201c      	movs	r0, #28
 8004ac2:	f7ff f86d 	bl	8003ba0 <NRF24_read_register>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004acc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ad0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bfcc      	ite	gt
 8004ad8:	2301      	movgt	r3, #1
 8004ada:	2300      	movle	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004ae0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	e01e      	b.n	8004b28 <printRadioSettings+0x774>
 8004aea:	bf00      	nop
 8004aec:	080062c4 	.word	0x080062c4
 8004af0:	200000fc 	.word	0x200000fc
 8004af4:	080062d8 	.word	0x080062d8
 8004af8:	08006308 	.word	0x08006308
 8004afc:	08006338 	.word	0x08006338
 8004b00:	08006360 	.word	0x08006360
 8004b04:	08006388 	.word	0x08006388
 8004b08:	080063b0 	.word	0x080063b0
 8004b0c:	080063d8 	.word	0x080063d8
 8004b10:	08006404 	.word	0x08006404
 8004b14:	08006420 	.word	0x08006420
 8004b18:	0800643c 	.word	0x0800643c
 8004b1c:	08006458 	.word	0x08006458
 8004b20:	08006474 	.word	0x08006474
 8004b24:	08006490 	.word	0x08006490
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bfcc      	ite	gt
 8004b2c:	2301      	movgt	r3, #1
 8004b2e:	2300      	movle	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004b34:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b38:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	bfcc      	ite	gt
 8004b40:	2301      	movgt	r3, #1
 8004b42:	2300      	movle	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004b48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b4c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	bfcc      	ite	gt
 8004b54:	2301      	movgt	r3, #1
 8004b56:	2300      	movle	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004b5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b60:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bfcc      	ite	gt
 8004b68:	2301      	movgt	r3, #1
 8004b6a:	2300      	movle	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004b70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b74:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bfcc      	ite	gt
 8004b7c:	2301      	movgt	r3, #1
 8004b7e:	2300      	movle	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	f107 0008 	add.w	r0, r7, #8
 8004b86:	9303      	str	r3, [sp, #12]
 8004b88:	9402      	str	r4, [sp, #8]
 8004b8a:	9101      	str	r1, [sp, #4]
 8004b8c:	9200      	str	r2, [sp, #0]
 8004b8e:	4633      	mov	r3, r6
 8004b90:	462a      	mov	r2, r5
 8004b92:	494a      	ldr	r1, [pc, #296]	; (8004cbc <printRadioSettings+0x908>)
 8004b94:	f000 fe80 	bl	8005898 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004b98:	f107 0308 	add.w	r3, r7, #8
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fb fad5 	bl	800014c <strlen>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	f107 0108 	add.w	r1, r7, #8
 8004baa:	230a      	movs	r3, #10
 8004bac:	4844      	ldr	r0, [pc, #272]	; (8004cc0 <printRadioSettings+0x90c>)
 8004bae:	f7fe fd9d 	bl	80036ec <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8004bb2:	201d      	movs	r0, #29
 8004bb4:	f7fe fff4 	bl	8003ba0 <NRF24_read_register>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8004bbe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00c      	beq.n	8004be4 <printRadioSettings+0x830>
 8004bca:	f107 0308 	add.w	r3, r7, #8
 8004bce:	4a3d      	ldr	r2, [pc, #244]	; (8004cc4 <printRadioSettings+0x910>)
 8004bd0:	461c      	mov	r4, r3
 8004bd2:	4615      	mov	r5, r2
 8004bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bd8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004bdc:	6020      	str	r0, [r4, #0]
 8004bde:	3404      	adds	r4, #4
 8004be0:	8021      	strh	r1, [r4, #0]
 8004be2:	e00e      	b.n	8004c02 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8004be4:	f107 0308 	add.w	r3, r7, #8
 8004be8:	4a37      	ldr	r2, [pc, #220]	; (8004cc8 <printRadioSettings+0x914>)
 8004bea:	461c      	mov	r4, r3
 8004bec:	4615      	mov	r5, r2
 8004bee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bf2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004bf6:	6020      	str	r0, [r4, #0]
 8004bf8:	3404      	adds	r4, #4
 8004bfa:	8021      	strh	r1, [r4, #0]
 8004bfc:	3402      	adds	r4, #2
 8004bfe:	0c0b      	lsrs	r3, r1, #16
 8004c00:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004c02:	f107 0308 	add.w	r3, r7, #8
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fb faa0 	bl	800014c <strlen>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	f107 0108 	add.w	r1, r7, #8
 8004c14:	230a      	movs	r3, #10
 8004c16:	482a      	ldr	r0, [pc, #168]	; (8004cc0 <printRadioSettings+0x90c>)
 8004c18:	f7fe fd68 	bl	80036ec <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8004c1c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00b      	beq.n	8004c40 <printRadioSettings+0x88c>
 8004c28:	f107 0308 	add.w	r3, r7, #8
 8004c2c:	4a27      	ldr	r2, [pc, #156]	; (8004ccc <printRadioSettings+0x918>)
 8004c2e:	461c      	mov	r4, r3
 8004c30:	4615      	mov	r5, r2
 8004c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c3a:	c403      	stmia	r4!, {r0, r1}
 8004c3c:	8022      	strh	r2, [r4, #0]
 8004c3e:	e00d      	b.n	8004c5c <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8004c40:	f107 0308 	add.w	r3, r7, #8
 8004c44:	4a22      	ldr	r2, [pc, #136]	; (8004cd0 <printRadioSettings+0x91c>)
 8004c46:	461c      	mov	r4, r3
 8004c48:	4615      	mov	r5, r2
 8004c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c52:	c403      	stmia	r4!, {r0, r1}
 8004c54:	8022      	strh	r2, [r4, #0]
 8004c56:	3402      	adds	r4, #2
 8004c58:	0c13      	lsrs	r3, r2, #16
 8004c5a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004c5c:	f107 0308 	add.w	r3, r7, #8
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fb fa73 	bl	800014c <strlen>
 8004c66:	4603      	mov	r3, r0
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	f107 0108 	add.w	r1, r7, #8
 8004c6e:	230a      	movs	r3, #10
 8004c70:	4813      	ldr	r0, [pc, #76]	; (8004cc0 <printRadioSettings+0x90c>)
 8004c72:	f7fe fd3b 	bl	80036ec <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8004c76:	f107 0308 	add.w	r3, r7, #8
 8004c7a:	4a16      	ldr	r2, [pc, #88]	; (8004cd4 <printRadioSettings+0x920>)
 8004c7c:	461c      	mov	r4, r3
 8004c7e:	4615      	mov	r5, r2
 8004c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	8022      	strh	r2, [r4, #0]
 8004c92:	3402      	adds	r4, #2
 8004c94:	0c1b      	lsrs	r3, r3, #16
 8004c96:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004c98:	f107 0308 	add.w	r3, r7, #8
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fb fa55 	bl	800014c <strlen>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	f107 0108 	add.w	r1, r7, #8
 8004caa:	230a      	movs	r3, #10
 8004cac:	4804      	ldr	r0, [pc, #16]	; (8004cc0 <printRadioSettings+0x90c>)
 8004cae:	f7fe fd1d 	bl	80036ec <HAL_UART_Transmit>
}
 8004cb2:	bf00      	nop
 8004cb4:	3774      	adds	r7, #116	; 0x74
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	080064ac 	.word	0x080064ac
 8004cc0:	200000fc 	.word	0x200000fc
 8004cc4:	080064f8 	.word	0x080064f8
 8004cc8:	08006510 	.word	0x08006510
 8004ccc:	08006528 	.word	0x08006528
 8004cd0:	08006544 	.word	0x08006544
 8004cd4:	08006118 	.word	0x08006118

08004cd8 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8004cd8:	b084      	sub	sp, #16
 8004cda:	b4b0      	push	{r4, r5, r7}
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	f107 040c 	add.w	r4, r7, #12
 8004ce2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8004ce6:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <nrf24_DebugUART_Init+0x34>)
 8004ce8:	461c      	mov	r4, r3
 8004cea:	f107 050c 	add.w	r5, r7, #12
 8004cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cfa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004cfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004d02:	bf00      	nop
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bcb0      	pop	{r4, r5, r7}
 8004d08:	b004      	add	sp, #16
 8004d0a:	4770      	bx	lr
 8004d0c:	200000fc 	.word	0x200000fc

08004d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d12:	b097      	sub	sp, #92	; 0x5c
 8004d14:	af16      	add	r7, sp, #88	; 0x58
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d16:	f7fb fa21 	bl	800015c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d1a:	f000 f8b3 	bl	8004e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d1e:	f000 fa77 	bl	8005210 <MX_GPIO_Init>
  MX_TIM2_Init();
 8004d22:	f000 f9fd 	bl	8005120 <MX_TIM2_Init>
  MX_SPI1_Init();
 8004d26:	f000 f9c5 	bl	80050b4 <MX_SPI1_Init>
  MX_CAN_Init();
 8004d2a:	f000 f945 	bl	8004fb8 <MX_CAN_Init>
  MX_ADC1_Init();
 8004d2e:	f000 f905 	bl	8004f3c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8004d32:	f000 fa43 	bl	80051bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  NRF24_begin(GPIOA,GPIO_PIN_3,GPIO_PIN_4, hspi1);
 8004d36:	4c42      	ldr	r4, [pc, #264]	; (8004e40 <main+0x130>)
 8004d38:	4668      	mov	r0, sp
 8004d3a:	1d23      	adds	r3, r4, #4
 8004d3c:	2254      	movs	r2, #84	; 0x54
 8004d3e:	4619      	mov	r1, r3
 8004d40:	f000 fd96 	bl	8005870 <memcpy>
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	2210      	movs	r2, #16
 8004d48:	2108      	movs	r1, #8
 8004d4a:	483e      	ldr	r0, [pc, #248]	; (8004e44 <main+0x134>)
 8004d4c:	f7ff f802 	bl	8003d54 <NRF24_begin>
  nrf24_DebugUART_Init(huart1);
 8004d50:	4e3d      	ldr	r6, [pc, #244]	; (8004e48 <main+0x138>)
 8004d52:	466d      	mov	r5, sp
 8004d54:	f106 0410 	add.w	r4, r6, #16
 8004d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d64:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004d68:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004d6c:	f7ff ffb4 	bl	8004cd8 <nrf24_DebugUART_Init>

  // printRadioSettings();

  //*** TRANSMIT - NO ACK ***//
  NRF24_stopListening();
 8004d70:	f7ff f8d0 	bl	8003f14 <NRF24_stopListening>
  NRF24_openWritingPipe(TxpipeAddrs);
 8004d74:	4b35      	ldr	r3, [pc, #212]	; (8004e4c <main+0x13c>)
 8004d76:	cb18      	ldmia	r3, {r3, r4}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	f7ff f92a 	bl	8003fd4 <NRF24_openWritingPipe>
  NRF24_setChannel(3);
 8004d80:	2003      	movs	r0, #3
 8004d82:	f7ff f966 	bl	8004052 <NRF24_setChannel>
  NRF24_setDataRate(RF24_250KBPS);
 8004d86:	2002      	movs	r0, #2
 8004d88:	f7ff f9e8 	bl	800415c <NRF24_setDataRate>
  NRF24_setPALevel(RF24_PA_0dB); // máximo RF24_PA_0dB
 8004d8c:	2003      	movs	r0, #3
 8004d8e:	f7ff f9ab 	bl	80040e8 <NRF24_setPALevel>
  NRF24_setPayloadSize(32);
 8004d92:	2020      	movs	r0, #32
 8004d94:	f7ff f972 	bl	800407c <NRF24_setPayloadSize>
  /* USER CODE END 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8004d98:	482d      	ldr	r0, [pc, #180]	; (8004e50 <main+0x140>)
 8004d9a:	f7fe f8d7 	bl	8002f4c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start (&hadc1);
 8004d9e:	482d      	ldr	r0, [pc, #180]	; (8004e54 <main+0x144>)
 8004da0:	f7fb fb38 	bl	8000414 <HAL_ADC_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    /* USER CODE END WHILE */
		    /* USER CODE END WHILE */
		    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8004da4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004da8:	482b      	ldr	r0, [pc, #172]	; (8004e58 <main+0x148>)
 8004daa:	f7fc fe28 	bl	80019fe <HAL_GPIO_TogglePin>

		    //HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "%d \n\r", value), 500);

		    if (NRF24_write(myTxData,32)){
 8004dae:	2120      	movs	r1, #32
 8004db0:	482a      	ldr	r0, [pc, #168]	; (8004e5c <main+0x14c>)
 8004db2:	f7ff f8bb 	bl	8003f2c <NRF24_write>

		    }
		    //printRadioSettings();

			HAL_ADC_PollForConversion (&hadc1, 1000);
 8004db6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004dba:	4826      	ldr	r0, [pc, #152]	; (8004e54 <main+0x144>)
 8004dbc:	f7fb fbd8 	bl	8000570 <HAL_ADC_PollForConversion>
			corrente = HAL_ADC_GetValue (&hadc1);
 8004dc0:	4824      	ldr	r0, [pc, #144]	; (8004e54 <main+0x144>)
 8004dc2:	f7fb fccf 	bl	8000764 <HAL_ADC_GetValue>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	4b25      	ldr	r3, [pc, #148]	; (8004e60 <main+0x150>)
 8004dca:	601a      	str	r2, [r3, #0]
			corrente = corrente/23;
 8004dcc:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <main+0x150>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a24      	ldr	r2, [pc, #144]	; (8004e64 <main+0x154>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	091b      	lsrs	r3, r3, #4
 8004dd8:	4a21      	ldr	r2, [pc, #132]	; (8004e60 <main+0x150>)
 8004dda:	6013      	str	r3, [r2, #0]
			u.var32 = corrente;
 8004ddc:	4b20      	ldr	r3, [pc, #128]	; (8004e60 <main+0x150>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a21      	ldr	r2, [pc, #132]	; (8004e68 <main+0x158>)
 8004de2:	6013      	str	r3, [r2, #0]
			sprintf(myTxData, "%d\n\r", corrente);
 8004de4:	4b1e      	ldr	r3, [pc, #120]	; (8004e60 <main+0x150>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	4920      	ldr	r1, [pc, #128]	; (8004e6c <main+0x15c>)
 8004dec:	481b      	ldr	r0, [pc, #108]	; (8004e5c <main+0x14c>)
 8004dee:	f000 fd53 	bl	8005898 <siprintf>
		        Error_Handler();
		      }

*/

			  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8004df2:	2180      	movs	r1, #128	; 0x80
 8004df4:	481e      	ldr	r0, [pc, #120]	; (8004e70 <main+0x160>)
 8004df6:	f7fc fe02 	bl	80019fe <HAL_GPIO_TogglePin>





			  TxHeader.StdId = 0x00C; // responde com id 0x00B
 8004dfa:	4b1e      	ldr	r3, [pc, #120]	; (8004e74 <main+0x164>)
 8004dfc:	220c      	movs	r2, #12
 8004dfe:	601a      	str	r2, [r3, #0]
			  TxData[0] = u.var8[0];
 8004e00:	4b19      	ldr	r3, [pc, #100]	; (8004e68 <main+0x158>)
 8004e02:	781a      	ldrb	r2, [r3, #0]
 8004e04:	4b1c      	ldr	r3, [pc, #112]	; (8004e78 <main+0x168>)
 8004e06:	701a      	strb	r2, [r3, #0]
			  TxData[1] = u.var8[1];
 8004e08:	4b17      	ldr	r3, [pc, #92]	; (8004e68 <main+0x158>)
 8004e0a:	785a      	ldrb	r2, [r3, #1]
 8004e0c:	4b1a      	ldr	r3, [pc, #104]	; (8004e78 <main+0x168>)
 8004e0e:	705a      	strb	r2, [r3, #1]
			  TxData[2] = u.var8[2];
 8004e10:	4b15      	ldr	r3, [pc, #84]	; (8004e68 <main+0x158>)
 8004e12:	789a      	ldrb	r2, [r3, #2]
 8004e14:	4b18      	ldr	r3, [pc, #96]	; (8004e78 <main+0x168>)
 8004e16:	709a      	strb	r2, [r3, #2]
			  TxData[3] = u.var8[3];
 8004e18:	4b13      	ldr	r3, [pc, #76]	; (8004e68 <main+0x158>)
 8004e1a:	78da      	ldrb	r2, [r3, #3]
 8004e1c:	4b16      	ldr	r3, [pc, #88]	; (8004e78 <main+0x168>)
 8004e1e:	70da      	strb	r2, [r3, #3]

		      if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8004e20:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <main+0x16c>)
 8004e22:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <main+0x168>)
 8004e24:	4913      	ldr	r1, [pc, #76]	; (8004e74 <main+0x164>)
 8004e26:	4816      	ldr	r0, [pc, #88]	; (8004e80 <main+0x170>)
 8004e28:	f7fc f833 	bl	8000e92 <HAL_CAN_AddTxMessage>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <main+0x126>
		      {
		        Error_Handler();
 8004e32:	f000 faa9 	bl	8005388 <Error_Handler>
		      }
		      HAL_Delay(200);
 8004e36:	20c8      	movs	r0, #200	; 0xc8
 8004e38:	f7fb f9f2 	bl	8000220 <HAL_Delay>
		    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8004e3c:	e7b2      	b.n	8004da4 <main+0x94>
 8004e3e:	bf00      	nop
 8004e40:	20000230 	.word	0x20000230
 8004e44:	40010800 	.word	0x40010800
 8004e48:	200001e0 	.word	0x200001e0
 8004e4c:	20000008 	.word	0x20000008
 8004e50:	20000290 	.word	0x20000290
 8004e54:	200001b0 	.word	0x200001b0
 8004e58:	40011000 	.word	0x40011000
 8004e5c:	20000168 	.word	0x20000168
 8004e60:	20000220 	.word	0x20000220
 8004e64:	b21642c9 	.word	0xb21642c9
 8004e68:	200002d0 	.word	0x200002d0
 8004e6c:	0800665c 	.word	0x0800665c
 8004e70:	40010c00 	.word	0x40010c00
 8004e74:	2000013c 	.word	0x2000013c
 8004e78:	20000224 	.word	0x20000224
 8004e7c:	2000022c 	.word	0x2000022c
 8004e80:	20000188 	.word	0x20000188

08004e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b094      	sub	sp, #80	; 0x50
 8004e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e8e:	2228      	movs	r2, #40	; 0x28
 8004e90:	2100      	movs	r1, #0
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fcf7 	bl	8005886 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e98:	f107 0314 	add.w	r3, r7, #20
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	605a      	str	r2, [r3, #4]
 8004ea2:	609a      	str	r2, [r3, #8]
 8004ea4:	60da      	str	r2, [r3, #12]
 8004ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ea8:	1d3b      	adds	r3, r7, #4
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	605a      	str	r2, [r3, #4]
 8004eb0:	609a      	str	r2, [r3, #8]
 8004eb2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004eb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ece:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004ed0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fc fda0 	bl	8001a20 <HAL_RCC_OscConfig>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004ee6:	f000 fa4f 	bl	8005388 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004eea:	230f      	movs	r3, #15
 8004eec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004eee:	2302      	movs	r3, #2
 8004ef0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004efa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004efc:	2300      	movs	r3, #0
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f00:	f107 0314 	add.w	r3, r7, #20
 8004f04:	2102      	movs	r1, #2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fc ffee 	bl	8001ee8 <HAL_RCC_ClockConfig>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8004f12:	f000 fa39 	bl	8005388 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004f16:	2302      	movs	r3, #2
 8004f18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f1e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f20:	1d3b      	adds	r3, r7, #4
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fd f99e 	bl	8002264 <HAL_RCCEx_PeriphCLKConfig>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004f2e:	f000 fa2b 	bl	8005388 <Error_Handler>
  }
}
 8004f32:	bf00      	nop
 8004f34:	3750      	adds	r7, #80	; 0x50
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004f42:	1d3b      	adds	r3, r7, #4
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	605a      	str	r2, [r3, #4]
 8004f4a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8004f4c:	4b18      	ldr	r3, [pc, #96]	; (8004fb0 <MX_ADC1_Init+0x74>)
 8004f4e:	4a19      	ldr	r2, [pc, #100]	; (8004fb4 <MX_ADC1_Init+0x78>)
 8004f50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004f52:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <MX_ADC1_Init+0x74>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004f58:	4b15      	ldr	r3, [pc, #84]	; (8004fb0 <MX_ADC1_Init+0x74>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004f5e:	4b14      	ldr	r3, [pc, #80]	; (8004fb0 <MX_ADC1_Init+0x74>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f64:	4b12      	ldr	r3, [pc, #72]	; (8004fb0 <MX_ADC1_Init+0x74>)
 8004f66:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8004f6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f6c:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <MX_ADC1_Init+0x74>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8004f72:	4b0f      	ldr	r3, [pc, #60]	; (8004fb0 <MX_ADC1_Init+0x74>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004f78:	480d      	ldr	r0, [pc, #52]	; (8004fb0 <MX_ADC1_Init+0x74>)
 8004f7a:	f7fb f973 	bl	8000264 <HAL_ADC_Init>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8004f84:	f000 fa00 	bl	8005388 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004f90:	2300      	movs	r3, #0
 8004f92:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f94:	1d3b      	adds	r3, r7, #4
 8004f96:	4619      	mov	r1, r3
 8004f98:	4805      	ldr	r0, [pc, #20]	; (8004fb0 <MX_ADC1_Init+0x74>)
 8004f9a:	f7fb fbef 	bl	800077c <HAL_ADC_ConfigChannel>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8004fa4:	f000 f9f0 	bl	8005388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004fa8:	bf00      	nop
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	200001b0 	.word	0x200001b0
 8004fb4:	40012400 	.word	0x40012400

08004fb8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08a      	sub	sp, #40	; 0x28
 8004fbc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8004fbe:	4b3a      	ldr	r3, [pc, #232]	; (80050a8 <MX_CAN_Init+0xf0>)
 8004fc0:	4a3a      	ldr	r2, [pc, #232]	; (80050ac <MX_CAN_Init+0xf4>)
 8004fc2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8004fc4:	4b38      	ldr	r3, [pc, #224]	; (80050a8 <MX_CAN_Init+0xf0>)
 8004fc6:	2209      	movs	r2, #9
 8004fc8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8004fca:	4b37      	ldr	r3, [pc, #220]	; (80050a8 <MX_CAN_Init+0xf0>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004fd0:	4b35      	ldr	r3, [pc, #212]	; (80050a8 <MX_CAN_Init+0xf0>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8004fd6:	4b34      	ldr	r3, [pc, #208]	; (80050a8 <MX_CAN_Init+0xf0>)
 8004fd8:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8004fdc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8004fde:	4b32      	ldr	r3, [pc, #200]	; (80050a8 <MX_CAN_Init+0xf0>)
 8004fe0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004fe4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8004fe6:	4b30      	ldr	r3, [pc, #192]	; (80050a8 <MX_CAN_Init+0xf0>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8004fec:	4b2e      	ldr	r3, [pc, #184]	; (80050a8 <MX_CAN_Init+0xf0>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8004ff2:	4b2d      	ldr	r3, [pc, #180]	; (80050a8 <MX_CAN_Init+0xf0>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8004ff8:	4b2b      	ldr	r3, [pc, #172]	; (80050a8 <MX_CAN_Init+0xf0>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8004ffe:	4b2a      	ldr	r3, [pc, #168]	; (80050a8 <MX_CAN_Init+0xf0>)
 8005000:	2200      	movs	r2, #0
 8005002:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8005004:	4b28      	ldr	r3, [pc, #160]	; (80050a8 <MX_CAN_Init+0xf0>)
 8005006:	2200      	movs	r2, #0
 8005008:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800500a:	4827      	ldr	r0, [pc, #156]	; (80050a8 <MX_CAN_Init+0xf0>)
 800500c:	f7fb fd3a 	bl	8000a84 <HAL_CAN_Init>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8005016:	f000 f9b7 	bl	8005388 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800501a:	2102      	movs	r1, #2
 800501c:	4822      	ldr	r0, [pc, #136]	; (80050a8 <MX_CAN_Init+0xf0>)
 800501e:	f7fc f80e 	bl	800103e <HAL_CAN_ActivateNotification>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <MX_CAN_Init+0x74>
  {
	Error_Handler();
 8005028:	f000 f9ae 	bl	8005388 <Error_Handler>
  }

  /* Configure the CAN Filter */
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8005030:	2300      	movs	r3, #0
 8005032:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8005034:	2301      	movs	r3, #1
 8005036:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh     = 0x000<<5; //0x000
 8005038:	2300      	movs	r3, #0
 800503a:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow      = 0x0000;
 800503c:	2300      	movs	r3, #0
 800503e:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x700<<5; // mascara que filtra
 8005040:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005044:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow  = 0x0000;
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800504a:	2300      	movs	r3, #0
 800504c:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800504e:	2301      	movs	r3, #1
 8005050:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8005052:	230e      	movs	r3, #14
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8005056:	463b      	mov	r3, r7
 8005058:	4619      	mov	r1, r3
 800505a:	4813      	ldr	r0, [pc, #76]	; (80050a8 <MX_CAN_Init+0xf0>)
 800505c:	f7fb fe0c 	bl	8000c78 <HAL_CAN_ConfigFilter>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <MX_CAN_Init+0xb2>
  {
    /* Filter configuration Error */
    Error_Handler();
 8005066:	f000 f98f 	bl	8005388 <Error_Handler>
  }

  /* Configure Transmission process */
  TxHeader.StdId = 0x001;
 800506a:	4b11      	ldr	r3, [pc, #68]	; (80050b0 <MX_CAN_Init+0xf8>)
 800506c:	2201      	movs	r2, #1
 800506e:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x001;
 8005070:	4b0f      	ldr	r3, [pc, #60]	; (80050b0 <MX_CAN_Init+0xf8>)
 8005072:	2201      	movs	r2, #1
 8005074:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8005076:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <MX_CAN_Init+0xf8>)
 8005078:	2200      	movs	r2, #0
 800507a:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 800507c:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <MX_CAN_Init+0xf8>)
 800507e:	2200      	movs	r2, #0
 8005080:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 8005082:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <MX_CAN_Init+0xf8>)
 8005084:	2208      	movs	r2, #8
 8005086:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8005088:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <MX_CAN_Init+0xf8>)
 800508a:	2200      	movs	r2, #0
 800508c:	751a      	strb	r2, [r3, #20]


  /* Start the CAN peripheral */
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 800508e:	4806      	ldr	r0, [pc, #24]	; (80050a8 <MX_CAN_Init+0xf0>)
 8005090:	f7fb febb 	bl	8000e0a <HAL_CAN_Start>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <MX_CAN_Init+0xe6>
  {
    /* Start Error */
    Error_Handler();
 800509a:	f000 f975 	bl	8005388 <Error_Handler>
  }

  /* USER CODE END CAN_Init 2 */

}
 800509e:	bf00      	nop
 80050a0:	3728      	adds	r7, #40	; 0x28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20000188 	.word	0x20000188
 80050ac:	40006400 	.word	0x40006400
 80050b0:	2000013c 	.word	0x2000013c

080050b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80050b8:	4b17      	ldr	r3, [pc, #92]	; (8005118 <MX_SPI1_Init+0x64>)
 80050ba:	4a18      	ldr	r2, [pc, #96]	; (800511c <MX_SPI1_Init+0x68>)
 80050bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80050be:	4b16      	ldr	r3, [pc, #88]	; (8005118 <MX_SPI1_Init+0x64>)
 80050c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80050c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80050c6:	4b14      	ldr	r3, [pc, #80]	; (8005118 <MX_SPI1_Init+0x64>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80050cc:	4b12      	ldr	r3, [pc, #72]	; (8005118 <MX_SPI1_Init+0x64>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80050d2:	4b11      	ldr	r3, [pc, #68]	; (8005118 <MX_SPI1_Init+0x64>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <MX_SPI1_Init+0x64>)
 80050da:	2200      	movs	r2, #0
 80050dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80050de:	4b0e      	ldr	r3, [pc, #56]	; (8005118 <MX_SPI1_Init+0x64>)
 80050e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80050e6:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <MX_SPI1_Init+0x64>)
 80050e8:	2228      	movs	r2, #40	; 0x28
 80050ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80050ec:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <MX_SPI1_Init+0x64>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80050f2:	4b09      	ldr	r3, [pc, #36]	; (8005118 <MX_SPI1_Init+0x64>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050f8:	4b07      	ldr	r3, [pc, #28]	; (8005118 <MX_SPI1_Init+0x64>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80050fe:	4b06      	ldr	r3, [pc, #24]	; (8005118 <MX_SPI1_Init+0x64>)
 8005100:	220a      	movs	r2, #10
 8005102:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005104:	4804      	ldr	r0, [pc, #16]	; (8005118 <MX_SPI1_Init+0x64>)
 8005106:	f7fd fe92 	bl	8002e2e <HAL_SPI_Init>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005110:	f000 f93a 	bl	8005388 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005114:	bf00      	nop
 8005116:	bd80      	pop	{r7, pc}
 8005118:	20000230 	.word	0x20000230
 800511c:	40013000 	.word	0x40013000

08005120 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005126:	f107 0308 	add.w	r3, r7, #8
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	605a      	str	r2, [r3, #4]
 8005130:	609a      	str	r2, [r3, #8]
 8005132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005134:	463b      	mov	r3, r7
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800513c:	4b1e      	ldr	r3, [pc, #120]	; (80051b8 <MX_TIM2_Init+0x98>)
 800513e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005142:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8005144:	4b1c      	ldr	r3, [pc, #112]	; (80051b8 <MX_TIM2_Init+0x98>)
 8005146:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800514a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800514c:	4b1a      	ldr	r3, [pc, #104]	; (80051b8 <MX_TIM2_Init+0x98>)
 800514e:	2200      	movs	r2, #0
 8005150:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8005152:	4b19      	ldr	r3, [pc, #100]	; (80051b8 <MX_TIM2_Init+0x98>)
 8005154:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005158:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800515a:	4b17      	ldr	r3, [pc, #92]	; (80051b8 <MX_TIM2_Init+0x98>)
 800515c:	2200      	movs	r2, #0
 800515e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005160:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <MX_TIM2_Init+0x98>)
 8005162:	2200      	movs	r2, #0
 8005164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005166:	4814      	ldr	r0, [pc, #80]	; (80051b8 <MX_TIM2_Init+0x98>)
 8005168:	f7fd fec5 	bl	8002ef6 <HAL_TIM_Base_Init>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005172:	f000 f909 	bl	8005388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800517a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800517c:	f107 0308 	add.w	r3, r7, #8
 8005180:	4619      	mov	r1, r3
 8005182:	480d      	ldr	r0, [pc, #52]	; (80051b8 <MX_TIM2_Init+0x98>)
 8005184:	f7fe f804 	bl	8003190 <HAL_TIM_ConfigClockSource>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800518e:	f000 f8fb 	bl	8005388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005192:	2300      	movs	r3, #0
 8005194:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005196:	2300      	movs	r3, #0
 8005198:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800519a:	463b      	mov	r3, r7
 800519c:	4619      	mov	r1, r3
 800519e:	4806      	ldr	r0, [pc, #24]	; (80051b8 <MX_TIM2_Init+0x98>)
 80051a0:	f7fe fa01 	bl	80035a6 <HAL_TIMEx_MasterConfigSynchronization>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80051aa:	f000 f8ed 	bl	8005388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80051ae:	bf00      	nop
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20000290 	.word	0x20000290

080051bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80051c0:	4b11      	ldr	r3, [pc, #68]	; (8005208 <MX_USART1_UART_Init+0x4c>)
 80051c2:	4a12      	ldr	r2, [pc, #72]	; (800520c <MX_USART1_UART_Init+0x50>)
 80051c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80051c6:	4b10      	ldr	r3, [pc, #64]	; (8005208 <MX_USART1_UART_Init+0x4c>)
 80051c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80051cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80051ce:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <MX_USART1_UART_Init+0x4c>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80051d4:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <MX_USART1_UART_Init+0x4c>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80051da:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <MX_USART1_UART_Init+0x4c>)
 80051dc:	2200      	movs	r2, #0
 80051de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80051e0:	4b09      	ldr	r3, [pc, #36]	; (8005208 <MX_USART1_UART_Init+0x4c>)
 80051e2:	220c      	movs	r2, #12
 80051e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051e6:	4b08      	ldr	r3, [pc, #32]	; (8005208 <MX_USART1_UART_Init+0x4c>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80051ec:	4b06      	ldr	r3, [pc, #24]	; (8005208 <MX_USART1_UART_Init+0x4c>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80051f2:	4805      	ldr	r0, [pc, #20]	; (8005208 <MX_USART1_UART_Init+0x4c>)
 80051f4:	f7fe fa2d 	bl	8003652 <HAL_UART_Init>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80051fe:	f000 f8c3 	bl	8005388 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005202:	bf00      	nop
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	200001e0 	.word	0x200001e0
 800520c:	40013800 	.word	0x40013800

08005210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005216:	f107 0310 	add.w	r3, r7, #16
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	605a      	str	r2, [r3, #4]
 8005220:	609a      	str	r2, [r3, #8]
 8005222:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005224:	4a3a      	ldr	r2, [pc, #232]	; (8005310 <MX_GPIO_Init+0x100>)
 8005226:	4b3a      	ldr	r3, [pc, #232]	; (8005310 <MX_GPIO_Init+0x100>)
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	f043 0310 	orr.w	r3, r3, #16
 800522e:	6193      	str	r3, [r2, #24]
 8005230:	4b37      	ldr	r3, [pc, #220]	; (8005310 <MX_GPIO_Init+0x100>)
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800523c:	4a34      	ldr	r2, [pc, #208]	; (8005310 <MX_GPIO_Init+0x100>)
 800523e:	4b34      	ldr	r3, [pc, #208]	; (8005310 <MX_GPIO_Init+0x100>)
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f043 0320 	orr.w	r3, r3, #32
 8005246:	6193      	str	r3, [r2, #24]
 8005248:	4b31      	ldr	r3, [pc, #196]	; (8005310 <MX_GPIO_Init+0x100>)
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	60bb      	str	r3, [r7, #8]
 8005252:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005254:	4a2e      	ldr	r2, [pc, #184]	; (8005310 <MX_GPIO_Init+0x100>)
 8005256:	4b2e      	ldr	r3, [pc, #184]	; (8005310 <MX_GPIO_Init+0x100>)
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	f043 0304 	orr.w	r3, r3, #4
 800525e:	6193      	str	r3, [r2, #24]
 8005260:	4b2b      	ldr	r3, [pc, #172]	; (8005310 <MX_GPIO_Init+0x100>)
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	607b      	str	r3, [r7, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800526c:	4a28      	ldr	r2, [pc, #160]	; (8005310 <MX_GPIO_Init+0x100>)
 800526e:	4b28      	ldr	r3, [pc, #160]	; (8005310 <MX_GPIO_Init+0x100>)
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	f043 0308 	orr.w	r3, r3, #8
 8005276:	6193      	str	r3, [r2, #24]
 8005278:	4b25      	ldr	r3, [pc, #148]	; (8005310 <MX_GPIO_Init+0x100>)
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	603b      	str	r3, [r7, #0]
 8005282:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8005284:	2200      	movs	r2, #0
 8005286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800528a:	4822      	ldr	r0, [pc, #136]	; (8005314 <MX_GPIO_Init+0x104>)
 800528c:	f7fc fb9f 	bl	80019ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8005290:	2200      	movs	r2, #0
 8005292:	211a      	movs	r1, #26
 8005294:	4820      	ldr	r0, [pc, #128]	; (8005318 <MX_GPIO_Init+0x108>)
 8005296:	f7fc fb9a 	bl	80019ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800529a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800529e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052a0:	2301      	movs	r3, #1
 80052a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052a8:	2302      	movs	r3, #2
 80052aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052ac:	f107 0310 	add.w	r3, r7, #16
 80052b0:	4619      	mov	r1, r3
 80052b2:	4818      	ldr	r0, [pc, #96]	; (8005314 <MX_GPIO_Init+0x104>)
 80052b4:	f7fc fa16 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80052b8:	231a      	movs	r3, #26
 80052ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052bc:	2301      	movs	r3, #1
 80052be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c0:	2300      	movs	r3, #0
 80052c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052c4:	2302      	movs	r3, #2
 80052c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052c8:	f107 0310 	add.w	r3, r7, #16
 80052cc:	4619      	mov	r1, r3
 80052ce:	4812      	ldr	r0, [pc, #72]	; (8005318 <MX_GPIO_Init+0x108>)
 80052d0:	f7fc fa08 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80052d4:	2304      	movs	r3, #4
 80052d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052d8:	2300      	movs	r3, #0
 80052da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052e0:	f107 0310 	add.w	r3, r7, #16
 80052e4:	4619      	mov	r1, r3
 80052e6:	480c      	ldr	r0, [pc, #48]	; (8005318 <MX_GPIO_Init+0x108>)
 80052e8:	f7fc f9fc 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80052ec:	2380      	movs	r3, #128	; 0x80
 80052ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052f0:	2301      	movs	r3, #1
 80052f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f4:	2300      	movs	r3, #0
 80052f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052f8:	2302      	movs	r3, #2
 80052fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052fc:	f107 0310 	add.w	r3, r7, #16
 8005300:	4619      	mov	r1, r3
 8005302:	4806      	ldr	r0, [pc, #24]	; (800531c <MX_GPIO_Init+0x10c>)
 8005304:	f7fc f9ee 	bl	80016e4 <HAL_GPIO_Init>

}
 8005308:	bf00      	nop
 800530a:	3720      	adds	r7, #32
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40021000 	.word	0x40021000
 8005314:	40011000 	.word	0x40011000
 8005318:	40010800 	.word	0x40010800
 800531c:	40010c00 	.word	0x40010c00

08005320 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
	    if (htim->Instance==TIM2){
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005330:	d120      	bne.n	8005374 <HAL_TIM_PeriodElapsedCallback+0x54>


	    	if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_2)){
 8005332:	2104      	movs	r1, #4
 8005334:	4811      	ldr	r0, [pc, #68]	; (800537c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8005336:	f7fc fb33 	bl	80019a0 <HAL_GPIO_ReadPin>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d016      	beq.n	800536e <HAL_TIM_PeriodElapsedCallback+0x4e>
	    		cont++;
 8005340:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3301      	adds	r3, #1
 8005346:	4a0e      	ldr	r2, [pc, #56]	; (8005380 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005348:	6013      	str	r3, [r2, #0]
	    		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800534a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800534e:	480d      	ldr	r0, [pc, #52]	; (8005384 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8005350:	f7fc fb55 	bl	80019fe <HAL_GPIO_TogglePin>

		    	if(cont>= 4){
 8005354:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b03      	cmp	r3, #3
 800535a:	dd0b      	ble.n	8005374 <HAL_TIM_PeriodElapsedCallback+0x54>
		    		cont=0;
 800535c:	4b08      	ldr	r3, [pc, #32]	; (8005380 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
		    		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8005362:	2201      	movs	r2, #1
 8005364:	2102      	movs	r1, #2
 8005366:	4805      	ldr	r0, [pc, #20]	; (800537c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8005368:	f7fc fb31 	bl	80019ce <HAL_GPIO_WritePin>
	    	}
	    	else
	    	cont=0;

	    }
}
 800536c:	e002      	b.n	8005374 <HAL_TIM_PeriodElapsedCallback+0x54>
	    	cont=0;
 800536e:	4b04      	ldr	r3, [pc, #16]	; (8005380 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]
}
 8005374:	bf00      	nop
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40010800 	.word	0x40010800
 8005380:	20000154 	.word	0x20000154
 8005384:	40011000 	.word	0x40011000

08005388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800538c:	bf00      	nop
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr

08005394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800539a:	4a0e      	ldr	r2, [pc, #56]	; (80053d4 <HAL_MspInit+0x40>)
 800539c:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <HAL_MspInit+0x40>)
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f043 0301 	orr.w	r3, r3, #1
 80053a4:	6193      	str	r3, [r2, #24]
 80053a6:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <HAL_MspInit+0x40>)
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	607b      	str	r3, [r7, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053b2:	4a08      	ldr	r2, [pc, #32]	; (80053d4 <HAL_MspInit+0x40>)
 80053b4:	4b07      	ldr	r3, [pc, #28]	; (80053d4 <HAL_MspInit+0x40>)
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053bc:	61d3      	str	r3, [r2, #28]
 80053be:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <HAL_MspInit+0x40>)
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr
 80053d4:	40021000 	.word	0x40021000

080053d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053e0:	f107 0310 	add.w	r3, r7, #16
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	605a      	str	r2, [r3, #4]
 80053ea:	609a      	str	r2, [r3, #8]
 80053ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a14      	ldr	r2, [pc, #80]	; (8005444 <HAL_ADC_MspInit+0x6c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d121      	bne.n	800543c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80053f8:	4a13      	ldr	r2, [pc, #76]	; (8005448 <HAL_ADC_MspInit+0x70>)
 80053fa:	4b13      	ldr	r3, [pc, #76]	; (8005448 <HAL_ADC_MspInit+0x70>)
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005402:	6193      	str	r3, [r2, #24]
 8005404:	4b10      	ldr	r3, [pc, #64]	; (8005448 <HAL_ADC_MspInit+0x70>)
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005410:	4a0d      	ldr	r2, [pc, #52]	; (8005448 <HAL_ADC_MspInit+0x70>)
 8005412:	4b0d      	ldr	r3, [pc, #52]	; (8005448 <HAL_ADC_MspInit+0x70>)
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f043 0304 	orr.w	r3, r3, #4
 800541a:	6193      	str	r3, [r2, #24]
 800541c:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <HAL_ADC_MspInit+0x70>)
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005428:	2301      	movs	r3, #1
 800542a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800542c:	2303      	movs	r3, #3
 800542e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005430:	f107 0310 	add.w	r3, r7, #16
 8005434:	4619      	mov	r1, r3
 8005436:	4805      	ldr	r0, [pc, #20]	; (800544c <HAL_ADC_MspInit+0x74>)
 8005438:	f7fc f954 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800543c:	bf00      	nop
 800543e:	3720      	adds	r7, #32
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40012400 	.word	0x40012400
 8005448:	40021000 	.word	0x40021000
 800544c:	40010800 	.word	0x40010800

08005450 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08a      	sub	sp, #40	; 0x28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005458:	f107 0314 	add.w	r3, r7, #20
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	605a      	str	r2, [r3, #4]
 8005462:	609a      	str	r2, [r3, #8]
 8005464:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a29      	ldr	r2, [pc, #164]	; (8005510 <HAL_CAN_MspInit+0xc0>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d14b      	bne.n	8005508 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005470:	4a28      	ldr	r2, [pc, #160]	; (8005514 <HAL_CAN_MspInit+0xc4>)
 8005472:	4b28      	ldr	r3, [pc, #160]	; (8005514 <HAL_CAN_MspInit+0xc4>)
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800547a:	61d3      	str	r3, [r2, #28]
 800547c:	4b25      	ldr	r3, [pc, #148]	; (8005514 <HAL_CAN_MspInit+0xc4>)
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005488:	4a22      	ldr	r2, [pc, #136]	; (8005514 <HAL_CAN_MspInit+0xc4>)
 800548a:	4b22      	ldr	r3, [pc, #136]	; (8005514 <HAL_CAN_MspInit+0xc4>)
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	f043 0308 	orr.w	r3, r3, #8
 8005492:	6193      	str	r3, [r2, #24]
 8005494:	4b1f      	ldr	r3, [pc, #124]	; (8005514 <HAL_CAN_MspInit+0xc4>)
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80054a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054a6:	2300      	movs	r3, #0
 80054a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054ae:	f107 0314 	add.w	r3, r7, #20
 80054b2:	4619      	mov	r1, r3
 80054b4:	4818      	ldr	r0, [pc, #96]	; (8005518 <HAL_CAN_MspInit+0xc8>)
 80054b6:	f7fc f915 	bl	80016e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80054ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c0:	2302      	movs	r3, #2
 80054c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054c4:	2303      	movs	r3, #3
 80054c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054c8:	f107 0314 	add.w	r3, r7, #20
 80054cc:	4619      	mov	r1, r3
 80054ce:	4812      	ldr	r0, [pc, #72]	; (8005518 <HAL_CAN_MspInit+0xc8>)
 80054d0:	f7fc f908 	bl	80016e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80054d4:	4b11      	ldr	r3, [pc, #68]	; (800551c <HAL_CAN_MspInit+0xcc>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
 80054f2:	4a0a      	ldr	r2, [pc, #40]	; (800551c <HAL_CAN_MspInit+0xcc>)
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80054f8:	2200      	movs	r2, #0
 80054fa:	2100      	movs	r1, #0
 80054fc:	2014      	movs	r0, #20
 80054fe:	f7fc f8ba 	bl	8001676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005502:	2014      	movs	r0, #20
 8005504:	f7fc f8d3 	bl	80016ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8005508:	bf00      	nop
 800550a:	3728      	adds	r7, #40	; 0x28
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40006400 	.word	0x40006400
 8005514:	40021000 	.word	0x40021000
 8005518:	40010c00 	.word	0x40010c00
 800551c:	40010000 	.word	0x40010000

08005520 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005528:	f107 0310 	add.w	r3, r7, #16
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	605a      	str	r2, [r3, #4]
 8005532:	609a      	str	r2, [r3, #8]
 8005534:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1b      	ldr	r2, [pc, #108]	; (80055a8 <HAL_SPI_MspInit+0x88>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d12f      	bne.n	80055a0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005540:	4a1a      	ldr	r2, [pc, #104]	; (80055ac <HAL_SPI_MspInit+0x8c>)
 8005542:	4b1a      	ldr	r3, [pc, #104]	; (80055ac <HAL_SPI_MspInit+0x8c>)
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800554a:	6193      	str	r3, [r2, #24]
 800554c:	4b17      	ldr	r3, [pc, #92]	; (80055ac <HAL_SPI_MspInit+0x8c>)
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005558:	4a14      	ldr	r2, [pc, #80]	; (80055ac <HAL_SPI_MspInit+0x8c>)
 800555a:	4b14      	ldr	r3, [pc, #80]	; (80055ac <HAL_SPI_MspInit+0x8c>)
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	f043 0304 	orr.w	r3, r3, #4
 8005562:	6193      	str	r3, [r2, #24]
 8005564:	4b11      	ldr	r3, [pc, #68]	; (80055ac <HAL_SPI_MspInit+0x8c>)
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	60bb      	str	r3, [r7, #8]
 800556e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005570:	23a0      	movs	r3, #160	; 0xa0
 8005572:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005574:	2302      	movs	r3, #2
 8005576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005578:	2303      	movs	r3, #3
 800557a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800557c:	f107 0310 	add.w	r3, r7, #16
 8005580:	4619      	mov	r1, r3
 8005582:	480b      	ldr	r0, [pc, #44]	; (80055b0 <HAL_SPI_MspInit+0x90>)
 8005584:	f7fc f8ae 	bl	80016e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005588:	2340      	movs	r3, #64	; 0x40
 800558a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005590:	2300      	movs	r3, #0
 8005592:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005594:	f107 0310 	add.w	r3, r7, #16
 8005598:	4619      	mov	r1, r3
 800559a:	4805      	ldr	r0, [pc, #20]	; (80055b0 <HAL_SPI_MspInit+0x90>)
 800559c:	f7fc f8a2 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80055a0:	bf00      	nop
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40013000 	.word	0x40013000
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40010800 	.word	0x40010800

080055b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c4:	d113      	bne.n	80055ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80055c6:	4a0c      	ldr	r2, [pc, #48]	; (80055f8 <HAL_TIM_Base_MspInit+0x44>)
 80055c8:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <HAL_TIM_Base_MspInit+0x44>)
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	61d3      	str	r3, [r2, #28]
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <HAL_TIM_Base_MspInit+0x44>)
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80055de:	2200      	movs	r2, #0
 80055e0:	2100      	movs	r1, #0
 80055e2:	201c      	movs	r0, #28
 80055e4:	f7fc f847 	bl	8001676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80055e8:	201c      	movs	r0, #28
 80055ea:	f7fc f860 	bl	80016ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	40021000 	.word	0x40021000

080055fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005604:	f107 0310 	add.w	r3, r7, #16
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	609a      	str	r2, [r3, #8]
 8005610:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1c      	ldr	r2, [pc, #112]	; (8005688 <HAL_UART_MspInit+0x8c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d131      	bne.n	8005680 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800561c:	4a1b      	ldr	r2, [pc, #108]	; (800568c <HAL_UART_MspInit+0x90>)
 800561e:	4b1b      	ldr	r3, [pc, #108]	; (800568c <HAL_UART_MspInit+0x90>)
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005626:	6193      	str	r3, [r2, #24]
 8005628:	4b18      	ldr	r3, [pc, #96]	; (800568c <HAL_UART_MspInit+0x90>)
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005634:	4a15      	ldr	r2, [pc, #84]	; (800568c <HAL_UART_MspInit+0x90>)
 8005636:	4b15      	ldr	r3, [pc, #84]	; (800568c <HAL_UART_MspInit+0x90>)
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f043 0304 	orr.w	r3, r3, #4
 800563e:	6193      	str	r3, [r2, #24]
 8005640:	4b12      	ldr	r3, [pc, #72]	; (800568c <HAL_UART_MspInit+0x90>)
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	60bb      	str	r3, [r7, #8]
 800564a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800564c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005650:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005652:	2302      	movs	r3, #2
 8005654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005656:	2303      	movs	r3, #3
 8005658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800565a:	f107 0310 	add.w	r3, r7, #16
 800565e:	4619      	mov	r1, r3
 8005660:	480b      	ldr	r0, [pc, #44]	; (8005690 <HAL_UART_MspInit+0x94>)
 8005662:	f7fc f83f 	bl	80016e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800566a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005670:	2300      	movs	r3, #0
 8005672:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005674:	f107 0310 	add.w	r3, r7, #16
 8005678:	4619      	mov	r1, r3
 800567a:	4805      	ldr	r0, [pc, #20]	; (8005690 <HAL_UART_MspInit+0x94>)
 800567c:	f7fc f832 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005680:	bf00      	nop
 8005682:	3720      	adds	r7, #32
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	40013800 	.word	0x40013800
 800568c:	40021000 	.word	0x40021000
 8005690:	40010800 	.word	0x40010800

08005694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005698:	bf00      	nop
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr

080056a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056a4:	e7fe      	b.n	80056a4 <HardFault_Handler+0x4>

080056a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056a6:	b480      	push	{r7}
 80056a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056aa:	e7fe      	b.n	80056aa <MemManage_Handler+0x4>

080056ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056b0:	e7fe      	b.n	80056b0 <BusFault_Handler+0x4>

080056b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056b2:	b480      	push	{r7}
 80056b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056b6:	e7fe      	b.n	80056b6 <UsageFault_Handler+0x4>

080056b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056bc:	bf00      	nop
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr

080056c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056c8:	bf00      	nop
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr

080056d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056d4:	bf00      	nop
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056e0:	f7fa fd82 	bl	80001e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056e4:	bf00      	nop
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80056ec:	4802      	ldr	r0, [pc, #8]	; (80056f8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80056ee:	f7fb fccb 	bl	8001088 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80056f2:	bf00      	nop
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20000188 	.word	0x20000188

080056fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005700:	4802      	ldr	r0, [pc, #8]	; (800570c <TIM2_IRQHandler+0x10>)
 8005702:	f7fd fc3d 	bl	8002f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005706:	bf00      	nop
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000290 	.word	0x20000290

08005710 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005718:	4b11      	ldr	r3, [pc, #68]	; (8005760 <_sbrk+0x50>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d102      	bne.n	8005726 <_sbrk+0x16>
		heap_end = &end;
 8005720:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <_sbrk+0x50>)
 8005722:	4a10      	ldr	r2, [pc, #64]	; (8005764 <_sbrk+0x54>)
 8005724:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005726:	4b0e      	ldr	r3, [pc, #56]	; (8005760 <_sbrk+0x50>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800572c:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <_sbrk+0x50>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4413      	add	r3, r2
 8005734:	466a      	mov	r2, sp
 8005736:	4293      	cmp	r3, r2
 8005738:	d907      	bls.n	800574a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800573a:	f000 f86f 	bl	800581c <__errno>
 800573e:	4602      	mov	r2, r0
 8005740:	230c      	movs	r3, #12
 8005742:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005748:	e006      	b.n	8005758 <_sbrk+0x48>
	}

	heap_end += incr;
 800574a:	4b05      	ldr	r3, [pc, #20]	; (8005760 <_sbrk+0x50>)
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4413      	add	r3, r2
 8005752:	4a03      	ldr	r2, [pc, #12]	; (8005760 <_sbrk+0x50>)
 8005754:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005756:	68fb      	ldr	r3, [r7, #12]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	20000158 	.word	0x20000158
 8005764:	200002d8 	.word	0x200002d8

08005768 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800576c:	4a15      	ldr	r2, [pc, #84]	; (80057c4 <SystemInit+0x5c>)
 800576e:	4b15      	ldr	r3, [pc, #84]	; (80057c4 <SystemInit+0x5c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f043 0301 	orr.w	r3, r3, #1
 8005776:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005778:	4912      	ldr	r1, [pc, #72]	; (80057c4 <SystemInit+0x5c>)
 800577a:	4b12      	ldr	r3, [pc, #72]	; (80057c4 <SystemInit+0x5c>)
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	4b12      	ldr	r3, [pc, #72]	; (80057c8 <SystemInit+0x60>)
 8005780:	4013      	ands	r3, r2
 8005782:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005784:	4a0f      	ldr	r2, [pc, #60]	; (80057c4 <SystemInit+0x5c>)
 8005786:	4b0f      	ldr	r3, [pc, #60]	; (80057c4 <SystemInit+0x5c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800578e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005792:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005794:	4a0b      	ldr	r2, [pc, #44]	; (80057c4 <SystemInit+0x5c>)
 8005796:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <SystemInit+0x5c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800579e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80057a0:	4a08      	ldr	r2, [pc, #32]	; (80057c4 <SystemInit+0x5c>)
 80057a2:	4b08      	ldr	r3, [pc, #32]	; (80057c4 <SystemInit+0x5c>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80057aa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80057ac:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <SystemInit+0x5c>)
 80057ae:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80057b2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <SystemInit+0x64>)
 80057b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057ba:	609a      	str	r2, [r3, #8]
#endif 
}
 80057bc:	bf00      	nop
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr
 80057c4:	40021000 	.word	0x40021000
 80057c8:	f8ff0000 	.word	0xf8ff0000
 80057cc:	e000ed00 	.word	0xe000ed00

080057d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80057d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80057d2:	e003      	b.n	80057dc <LoopCopyDataInit>

080057d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80057d4:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80057d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80057d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80057da:	3104      	adds	r1, #4

080057dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80057dc:	480a      	ldr	r0, [pc, #40]	; (8005808 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80057de:	4b0b      	ldr	r3, [pc, #44]	; (800580c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80057e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80057e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80057e4:	d3f6      	bcc.n	80057d4 <CopyDataInit>
  ldr r2, =_sbss
 80057e6:	4a0a      	ldr	r2, [pc, #40]	; (8005810 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80057e8:	e002      	b.n	80057f0 <LoopFillZerobss>

080057ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80057ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80057ec:	f842 3b04 	str.w	r3, [r2], #4

080057f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80057f0:	4b08      	ldr	r3, [pc, #32]	; (8005814 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80057f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80057f4:	d3f9      	bcc.n	80057ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80057f6:	f7ff ffb7 	bl	8005768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057fa:	f000 f815 	bl	8005828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80057fe:	f7ff fa87 	bl	8004d10 <main>
  bx lr
 8005802:	4770      	bx	lr
  ldr r3, =_sidata
 8005804:	080066b8 	.word	0x080066b8
  ldr r0, =_sdata
 8005808:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800580c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8005810:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8005814:	200002d8 	.word	0x200002d8

08005818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005818:	e7fe      	b.n	8005818 <ADC1_2_IRQHandler>
	...

0800581c <__errno>:
 800581c:	4b01      	ldr	r3, [pc, #4]	; (8005824 <__errno+0x8>)
 800581e:	6818      	ldr	r0, [r3, #0]
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	20000014 	.word	0x20000014

08005828 <__libc_init_array>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	2500      	movs	r5, #0
 800582c:	4e0c      	ldr	r6, [pc, #48]	; (8005860 <__libc_init_array+0x38>)
 800582e:	4c0d      	ldr	r4, [pc, #52]	; (8005864 <__libc_init_array+0x3c>)
 8005830:	1ba4      	subs	r4, r4, r6
 8005832:	10a4      	asrs	r4, r4, #2
 8005834:	42a5      	cmp	r5, r4
 8005836:	d109      	bne.n	800584c <__libc_init_array+0x24>
 8005838:	f000 fc4e 	bl	80060d8 <_init>
 800583c:	2500      	movs	r5, #0
 800583e:	4e0a      	ldr	r6, [pc, #40]	; (8005868 <__libc_init_array+0x40>)
 8005840:	4c0a      	ldr	r4, [pc, #40]	; (800586c <__libc_init_array+0x44>)
 8005842:	1ba4      	subs	r4, r4, r6
 8005844:	10a4      	asrs	r4, r4, #2
 8005846:	42a5      	cmp	r5, r4
 8005848:	d105      	bne.n	8005856 <__libc_init_array+0x2e>
 800584a:	bd70      	pop	{r4, r5, r6, pc}
 800584c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005850:	4798      	blx	r3
 8005852:	3501      	adds	r5, #1
 8005854:	e7ee      	b.n	8005834 <__libc_init_array+0xc>
 8005856:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800585a:	4798      	blx	r3
 800585c:	3501      	adds	r5, #1
 800585e:	e7f2      	b.n	8005846 <__libc_init_array+0x1e>
 8005860:	080066b0 	.word	0x080066b0
 8005864:	080066b0 	.word	0x080066b0
 8005868:	080066b0 	.word	0x080066b0
 800586c:	080066b4 	.word	0x080066b4

08005870 <memcpy>:
 8005870:	b510      	push	{r4, lr}
 8005872:	1e43      	subs	r3, r0, #1
 8005874:	440a      	add	r2, r1
 8005876:	4291      	cmp	r1, r2
 8005878:	d100      	bne.n	800587c <memcpy+0xc>
 800587a:	bd10      	pop	{r4, pc}
 800587c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005880:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005884:	e7f7      	b.n	8005876 <memcpy+0x6>

08005886 <memset>:
 8005886:	4603      	mov	r3, r0
 8005888:	4402      	add	r2, r0
 800588a:	4293      	cmp	r3, r2
 800588c:	d100      	bne.n	8005890 <memset+0xa>
 800588e:	4770      	bx	lr
 8005890:	f803 1b01 	strb.w	r1, [r3], #1
 8005894:	e7f9      	b.n	800588a <memset+0x4>
	...

08005898 <siprintf>:
 8005898:	b40e      	push	{r1, r2, r3}
 800589a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800589e:	b500      	push	{lr}
 80058a0:	b09c      	sub	sp, #112	; 0x70
 80058a2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80058a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058aa:	9104      	str	r1, [sp, #16]
 80058ac:	9107      	str	r1, [sp, #28]
 80058ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80058b2:	ab1d      	add	r3, sp, #116	; 0x74
 80058b4:	9002      	str	r0, [sp, #8]
 80058b6:	9006      	str	r0, [sp, #24]
 80058b8:	4808      	ldr	r0, [pc, #32]	; (80058dc <siprintf+0x44>)
 80058ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80058be:	f8ad 1016 	strh.w	r1, [sp, #22]
 80058c2:	6800      	ldr	r0, [r0, #0]
 80058c4:	a902      	add	r1, sp, #8
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	f000 f866 	bl	8005998 <_svfiprintf_r>
 80058cc:	2200      	movs	r2, #0
 80058ce:	9b02      	ldr	r3, [sp, #8]
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	b01c      	add	sp, #112	; 0x70
 80058d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058d8:	b003      	add	sp, #12
 80058da:	4770      	bx	lr
 80058dc:	20000014 	.word	0x20000014

080058e0 <__ssputs_r>:
 80058e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e4:	688e      	ldr	r6, [r1, #8]
 80058e6:	4682      	mov	sl, r0
 80058e8:	429e      	cmp	r6, r3
 80058ea:	460c      	mov	r4, r1
 80058ec:	4691      	mov	r9, r2
 80058ee:	4698      	mov	r8, r3
 80058f0:	d835      	bhi.n	800595e <__ssputs_r+0x7e>
 80058f2:	898a      	ldrh	r2, [r1, #12]
 80058f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058f8:	d031      	beq.n	800595e <__ssputs_r+0x7e>
 80058fa:	2302      	movs	r3, #2
 80058fc:	6825      	ldr	r5, [r4, #0]
 80058fe:	6909      	ldr	r1, [r1, #16]
 8005900:	1a6f      	subs	r7, r5, r1
 8005902:	6965      	ldr	r5, [r4, #20]
 8005904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005908:	fb95 f5f3 	sdiv	r5, r5, r3
 800590c:	f108 0301 	add.w	r3, r8, #1
 8005910:	443b      	add	r3, r7
 8005912:	429d      	cmp	r5, r3
 8005914:	bf38      	it	cc
 8005916:	461d      	movcc	r5, r3
 8005918:	0553      	lsls	r3, r2, #21
 800591a:	d531      	bpl.n	8005980 <__ssputs_r+0xa0>
 800591c:	4629      	mov	r1, r5
 800591e:	f000 fb3b 	bl	8005f98 <_malloc_r>
 8005922:	4606      	mov	r6, r0
 8005924:	b950      	cbnz	r0, 800593c <__ssputs_r+0x5c>
 8005926:	230c      	movs	r3, #12
 8005928:	f8ca 3000 	str.w	r3, [sl]
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005936:	81a3      	strh	r3, [r4, #12]
 8005938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800593c:	463a      	mov	r2, r7
 800593e:	6921      	ldr	r1, [r4, #16]
 8005940:	f7ff ff96 	bl	8005870 <memcpy>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800594a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800594e:	81a3      	strh	r3, [r4, #12]
 8005950:	6126      	str	r6, [r4, #16]
 8005952:	443e      	add	r6, r7
 8005954:	6026      	str	r6, [r4, #0]
 8005956:	4646      	mov	r6, r8
 8005958:	6165      	str	r5, [r4, #20]
 800595a:	1bed      	subs	r5, r5, r7
 800595c:	60a5      	str	r5, [r4, #8]
 800595e:	4546      	cmp	r6, r8
 8005960:	bf28      	it	cs
 8005962:	4646      	movcs	r6, r8
 8005964:	4649      	mov	r1, r9
 8005966:	4632      	mov	r2, r6
 8005968:	6820      	ldr	r0, [r4, #0]
 800596a:	f000 faaf 	bl	8005ecc <memmove>
 800596e:	68a3      	ldr	r3, [r4, #8]
 8005970:	2000      	movs	r0, #0
 8005972:	1b9b      	subs	r3, r3, r6
 8005974:	60a3      	str	r3, [r4, #8]
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	441e      	add	r6, r3
 800597a:	6026      	str	r6, [r4, #0]
 800597c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005980:	462a      	mov	r2, r5
 8005982:	f000 fb67 	bl	8006054 <_realloc_r>
 8005986:	4606      	mov	r6, r0
 8005988:	2800      	cmp	r0, #0
 800598a:	d1e1      	bne.n	8005950 <__ssputs_r+0x70>
 800598c:	6921      	ldr	r1, [r4, #16]
 800598e:	4650      	mov	r0, sl
 8005990:	f000 fab6 	bl	8005f00 <_free_r>
 8005994:	e7c7      	b.n	8005926 <__ssputs_r+0x46>
	...

08005998 <_svfiprintf_r>:
 8005998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599c:	b09d      	sub	sp, #116	; 0x74
 800599e:	9303      	str	r3, [sp, #12]
 80059a0:	898b      	ldrh	r3, [r1, #12]
 80059a2:	4680      	mov	r8, r0
 80059a4:	061c      	lsls	r4, r3, #24
 80059a6:	460d      	mov	r5, r1
 80059a8:	4616      	mov	r6, r2
 80059aa:	d50f      	bpl.n	80059cc <_svfiprintf_r+0x34>
 80059ac:	690b      	ldr	r3, [r1, #16]
 80059ae:	b96b      	cbnz	r3, 80059cc <_svfiprintf_r+0x34>
 80059b0:	2140      	movs	r1, #64	; 0x40
 80059b2:	f000 faf1 	bl	8005f98 <_malloc_r>
 80059b6:	6028      	str	r0, [r5, #0]
 80059b8:	6128      	str	r0, [r5, #16]
 80059ba:	b928      	cbnz	r0, 80059c8 <_svfiprintf_r+0x30>
 80059bc:	230c      	movs	r3, #12
 80059be:	f8c8 3000 	str.w	r3, [r8]
 80059c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059c6:	e0c4      	b.n	8005b52 <_svfiprintf_r+0x1ba>
 80059c8:	2340      	movs	r3, #64	; 0x40
 80059ca:	616b      	str	r3, [r5, #20]
 80059cc:	2300      	movs	r3, #0
 80059ce:	9309      	str	r3, [sp, #36]	; 0x24
 80059d0:	2320      	movs	r3, #32
 80059d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059d6:	2330      	movs	r3, #48	; 0x30
 80059d8:	f04f 0b01 	mov.w	fp, #1
 80059dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059e0:	4637      	mov	r7, r6
 80059e2:	463c      	mov	r4, r7
 80059e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d13c      	bne.n	8005a66 <_svfiprintf_r+0xce>
 80059ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80059f0:	d00b      	beq.n	8005a0a <_svfiprintf_r+0x72>
 80059f2:	4653      	mov	r3, sl
 80059f4:	4632      	mov	r2, r6
 80059f6:	4629      	mov	r1, r5
 80059f8:	4640      	mov	r0, r8
 80059fa:	f7ff ff71 	bl	80058e0 <__ssputs_r>
 80059fe:	3001      	adds	r0, #1
 8005a00:	f000 80a2 	beq.w	8005b48 <_svfiprintf_r+0x1b0>
 8005a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a06:	4453      	add	r3, sl
 8005a08:	9309      	str	r3, [sp, #36]	; 0x24
 8005a0a:	783b      	ldrb	r3, [r7, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 809b 	beq.w	8005b48 <_svfiprintf_r+0x1b0>
 8005a12:	2300      	movs	r3, #0
 8005a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a18:	9304      	str	r3, [sp, #16]
 8005a1a:	9307      	str	r3, [sp, #28]
 8005a1c:	9205      	str	r2, [sp, #20]
 8005a1e:	9306      	str	r3, [sp, #24]
 8005a20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a24:	931a      	str	r3, [sp, #104]	; 0x68
 8005a26:	2205      	movs	r2, #5
 8005a28:	7821      	ldrb	r1, [r4, #0]
 8005a2a:	4850      	ldr	r0, [pc, #320]	; (8005b6c <_svfiprintf_r+0x1d4>)
 8005a2c:	f000 fa40 	bl	8005eb0 <memchr>
 8005a30:	1c67      	adds	r7, r4, #1
 8005a32:	9b04      	ldr	r3, [sp, #16]
 8005a34:	b9d8      	cbnz	r0, 8005a6e <_svfiprintf_r+0xd6>
 8005a36:	06d9      	lsls	r1, r3, #27
 8005a38:	bf44      	itt	mi
 8005a3a:	2220      	movmi	r2, #32
 8005a3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a40:	071a      	lsls	r2, r3, #28
 8005a42:	bf44      	itt	mi
 8005a44:	222b      	movmi	r2, #43	; 0x2b
 8005a46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a4a:	7822      	ldrb	r2, [r4, #0]
 8005a4c:	2a2a      	cmp	r2, #42	; 0x2a
 8005a4e:	d016      	beq.n	8005a7e <_svfiprintf_r+0xe6>
 8005a50:	2100      	movs	r1, #0
 8005a52:	200a      	movs	r0, #10
 8005a54:	9a07      	ldr	r2, [sp, #28]
 8005a56:	4627      	mov	r7, r4
 8005a58:	783b      	ldrb	r3, [r7, #0]
 8005a5a:	3401      	adds	r4, #1
 8005a5c:	3b30      	subs	r3, #48	; 0x30
 8005a5e:	2b09      	cmp	r3, #9
 8005a60:	d950      	bls.n	8005b04 <_svfiprintf_r+0x16c>
 8005a62:	b1c9      	cbz	r1, 8005a98 <_svfiprintf_r+0x100>
 8005a64:	e011      	b.n	8005a8a <_svfiprintf_r+0xf2>
 8005a66:	2b25      	cmp	r3, #37	; 0x25
 8005a68:	d0c0      	beq.n	80059ec <_svfiprintf_r+0x54>
 8005a6a:	4627      	mov	r7, r4
 8005a6c:	e7b9      	b.n	80059e2 <_svfiprintf_r+0x4a>
 8005a6e:	4a3f      	ldr	r2, [pc, #252]	; (8005b6c <_svfiprintf_r+0x1d4>)
 8005a70:	463c      	mov	r4, r7
 8005a72:	1a80      	subs	r0, r0, r2
 8005a74:	fa0b f000 	lsl.w	r0, fp, r0
 8005a78:	4318      	orrs	r0, r3
 8005a7a:	9004      	str	r0, [sp, #16]
 8005a7c:	e7d3      	b.n	8005a26 <_svfiprintf_r+0x8e>
 8005a7e:	9a03      	ldr	r2, [sp, #12]
 8005a80:	1d11      	adds	r1, r2, #4
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	9103      	str	r1, [sp, #12]
 8005a86:	2a00      	cmp	r2, #0
 8005a88:	db01      	blt.n	8005a8e <_svfiprintf_r+0xf6>
 8005a8a:	9207      	str	r2, [sp, #28]
 8005a8c:	e004      	b.n	8005a98 <_svfiprintf_r+0x100>
 8005a8e:	4252      	negs	r2, r2
 8005a90:	f043 0302 	orr.w	r3, r3, #2
 8005a94:	9207      	str	r2, [sp, #28]
 8005a96:	9304      	str	r3, [sp, #16]
 8005a98:	783b      	ldrb	r3, [r7, #0]
 8005a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a9c:	d10d      	bne.n	8005aba <_svfiprintf_r+0x122>
 8005a9e:	787b      	ldrb	r3, [r7, #1]
 8005aa0:	1c79      	adds	r1, r7, #1
 8005aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8005aa4:	d132      	bne.n	8005b0c <_svfiprintf_r+0x174>
 8005aa6:	9b03      	ldr	r3, [sp, #12]
 8005aa8:	3702      	adds	r7, #2
 8005aaa:	1d1a      	adds	r2, r3, #4
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	9203      	str	r2, [sp, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	bfb8      	it	lt
 8005ab4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005ab8:	9305      	str	r3, [sp, #20]
 8005aba:	4c2d      	ldr	r4, [pc, #180]	; (8005b70 <_svfiprintf_r+0x1d8>)
 8005abc:	2203      	movs	r2, #3
 8005abe:	7839      	ldrb	r1, [r7, #0]
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f000 f9f5 	bl	8005eb0 <memchr>
 8005ac6:	b138      	cbz	r0, 8005ad8 <_svfiprintf_r+0x140>
 8005ac8:	2340      	movs	r3, #64	; 0x40
 8005aca:	1b00      	subs	r0, r0, r4
 8005acc:	fa03 f000 	lsl.w	r0, r3, r0
 8005ad0:	9b04      	ldr	r3, [sp, #16]
 8005ad2:	3701      	adds	r7, #1
 8005ad4:	4303      	orrs	r3, r0
 8005ad6:	9304      	str	r3, [sp, #16]
 8005ad8:	7839      	ldrb	r1, [r7, #0]
 8005ada:	2206      	movs	r2, #6
 8005adc:	4825      	ldr	r0, [pc, #148]	; (8005b74 <_svfiprintf_r+0x1dc>)
 8005ade:	1c7e      	adds	r6, r7, #1
 8005ae0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ae4:	f000 f9e4 	bl	8005eb0 <memchr>
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	d035      	beq.n	8005b58 <_svfiprintf_r+0x1c0>
 8005aec:	4b22      	ldr	r3, [pc, #136]	; (8005b78 <_svfiprintf_r+0x1e0>)
 8005aee:	b9fb      	cbnz	r3, 8005b30 <_svfiprintf_r+0x198>
 8005af0:	9b03      	ldr	r3, [sp, #12]
 8005af2:	3307      	adds	r3, #7
 8005af4:	f023 0307 	bic.w	r3, r3, #7
 8005af8:	3308      	adds	r3, #8
 8005afa:	9303      	str	r3, [sp, #12]
 8005afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005afe:	444b      	add	r3, r9
 8005b00:	9309      	str	r3, [sp, #36]	; 0x24
 8005b02:	e76d      	b.n	80059e0 <_svfiprintf_r+0x48>
 8005b04:	fb00 3202 	mla	r2, r0, r2, r3
 8005b08:	2101      	movs	r1, #1
 8005b0a:	e7a4      	b.n	8005a56 <_svfiprintf_r+0xbe>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	240a      	movs	r4, #10
 8005b10:	4618      	mov	r0, r3
 8005b12:	9305      	str	r3, [sp, #20]
 8005b14:	460f      	mov	r7, r1
 8005b16:	783a      	ldrb	r2, [r7, #0]
 8005b18:	3101      	adds	r1, #1
 8005b1a:	3a30      	subs	r2, #48	; 0x30
 8005b1c:	2a09      	cmp	r2, #9
 8005b1e:	d903      	bls.n	8005b28 <_svfiprintf_r+0x190>
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d0ca      	beq.n	8005aba <_svfiprintf_r+0x122>
 8005b24:	9005      	str	r0, [sp, #20]
 8005b26:	e7c8      	b.n	8005aba <_svfiprintf_r+0x122>
 8005b28:	fb04 2000 	mla	r0, r4, r0, r2
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e7f1      	b.n	8005b14 <_svfiprintf_r+0x17c>
 8005b30:	ab03      	add	r3, sp, #12
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	462a      	mov	r2, r5
 8005b36:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <_svfiprintf_r+0x1e4>)
 8005b38:	a904      	add	r1, sp, #16
 8005b3a:	4640      	mov	r0, r8
 8005b3c:	f3af 8000 	nop.w
 8005b40:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005b44:	4681      	mov	r9, r0
 8005b46:	d1d9      	bne.n	8005afc <_svfiprintf_r+0x164>
 8005b48:	89ab      	ldrh	r3, [r5, #12]
 8005b4a:	065b      	lsls	r3, r3, #25
 8005b4c:	f53f af39 	bmi.w	80059c2 <_svfiprintf_r+0x2a>
 8005b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b52:	b01d      	add	sp, #116	; 0x74
 8005b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b58:	ab03      	add	r3, sp, #12
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	462a      	mov	r2, r5
 8005b5e:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <_svfiprintf_r+0x1e4>)
 8005b60:	a904      	add	r1, sp, #16
 8005b62:	4640      	mov	r0, r8
 8005b64:	f000 f884 	bl	8005c70 <_printf_i>
 8005b68:	e7ea      	b.n	8005b40 <_svfiprintf_r+0x1a8>
 8005b6a:	bf00      	nop
 8005b6c:	0800667c 	.word	0x0800667c
 8005b70:	08006682 	.word	0x08006682
 8005b74:	08006686 	.word	0x08006686
 8005b78:	00000000 	.word	0x00000000
 8005b7c:	080058e1 	.word	0x080058e1

08005b80 <_printf_common>:
 8005b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b84:	4691      	mov	r9, r2
 8005b86:	461f      	mov	r7, r3
 8005b88:	688a      	ldr	r2, [r1, #8]
 8005b8a:	690b      	ldr	r3, [r1, #16]
 8005b8c:	4606      	mov	r6, r0
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	bfb8      	it	lt
 8005b92:	4613      	movlt	r3, r2
 8005b94:	f8c9 3000 	str.w	r3, [r9]
 8005b98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b9c:	460c      	mov	r4, r1
 8005b9e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ba2:	b112      	cbz	r2, 8005baa <_printf_common+0x2a>
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	f8c9 3000 	str.w	r3, [r9]
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	0699      	lsls	r1, r3, #26
 8005bae:	bf42      	ittt	mi
 8005bb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005bb4:	3302      	addmi	r3, #2
 8005bb6:	f8c9 3000 	strmi.w	r3, [r9]
 8005bba:	6825      	ldr	r5, [r4, #0]
 8005bbc:	f015 0506 	ands.w	r5, r5, #6
 8005bc0:	d107      	bne.n	8005bd2 <_printf_common+0x52>
 8005bc2:	f104 0a19 	add.w	sl, r4, #25
 8005bc6:	68e3      	ldr	r3, [r4, #12]
 8005bc8:	f8d9 2000 	ldr.w	r2, [r9]
 8005bcc:	1a9b      	subs	r3, r3, r2
 8005bce:	429d      	cmp	r5, r3
 8005bd0:	db2a      	blt.n	8005c28 <_printf_common+0xa8>
 8005bd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005bd6:	6822      	ldr	r2, [r4, #0]
 8005bd8:	3300      	adds	r3, #0
 8005bda:	bf18      	it	ne
 8005bdc:	2301      	movne	r3, #1
 8005bde:	0692      	lsls	r2, r2, #26
 8005be0:	d42f      	bmi.n	8005c42 <_printf_common+0xc2>
 8005be2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005be6:	4639      	mov	r1, r7
 8005be8:	4630      	mov	r0, r6
 8005bea:	47c0      	blx	r8
 8005bec:	3001      	adds	r0, #1
 8005bee:	d022      	beq.n	8005c36 <_printf_common+0xb6>
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	68e5      	ldr	r5, [r4, #12]
 8005bf4:	f003 0306 	and.w	r3, r3, #6
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	bf18      	it	ne
 8005bfc:	2500      	movne	r5, #0
 8005bfe:	f8d9 2000 	ldr.w	r2, [r9]
 8005c02:	f04f 0900 	mov.w	r9, #0
 8005c06:	bf08      	it	eq
 8005c08:	1aad      	subeq	r5, r5, r2
 8005c0a:	68a3      	ldr	r3, [r4, #8]
 8005c0c:	6922      	ldr	r2, [r4, #16]
 8005c0e:	bf08      	it	eq
 8005c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c14:	4293      	cmp	r3, r2
 8005c16:	bfc4      	itt	gt
 8005c18:	1a9b      	subgt	r3, r3, r2
 8005c1a:	18ed      	addgt	r5, r5, r3
 8005c1c:	341a      	adds	r4, #26
 8005c1e:	454d      	cmp	r5, r9
 8005c20:	d11b      	bne.n	8005c5a <_printf_common+0xda>
 8005c22:	2000      	movs	r0, #0
 8005c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c28:	2301      	movs	r3, #1
 8005c2a:	4652      	mov	r2, sl
 8005c2c:	4639      	mov	r1, r7
 8005c2e:	4630      	mov	r0, r6
 8005c30:	47c0      	blx	r8
 8005c32:	3001      	adds	r0, #1
 8005c34:	d103      	bne.n	8005c3e <_printf_common+0xbe>
 8005c36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3e:	3501      	adds	r5, #1
 8005c40:	e7c1      	b.n	8005bc6 <_printf_common+0x46>
 8005c42:	2030      	movs	r0, #48	; 0x30
 8005c44:	18e1      	adds	r1, r4, r3
 8005c46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c50:	4422      	add	r2, r4
 8005c52:	3302      	adds	r3, #2
 8005c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c58:	e7c3      	b.n	8005be2 <_printf_common+0x62>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	4622      	mov	r2, r4
 8005c5e:	4639      	mov	r1, r7
 8005c60:	4630      	mov	r0, r6
 8005c62:	47c0      	blx	r8
 8005c64:	3001      	adds	r0, #1
 8005c66:	d0e6      	beq.n	8005c36 <_printf_common+0xb6>
 8005c68:	f109 0901 	add.w	r9, r9, #1
 8005c6c:	e7d7      	b.n	8005c1e <_printf_common+0x9e>
	...

08005c70 <_printf_i>:
 8005c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c74:	4617      	mov	r7, r2
 8005c76:	7e0a      	ldrb	r2, [r1, #24]
 8005c78:	b085      	sub	sp, #20
 8005c7a:	2a6e      	cmp	r2, #110	; 0x6e
 8005c7c:	4698      	mov	r8, r3
 8005c7e:	4606      	mov	r6, r0
 8005c80:	460c      	mov	r4, r1
 8005c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c84:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005c88:	f000 80bc 	beq.w	8005e04 <_printf_i+0x194>
 8005c8c:	d81a      	bhi.n	8005cc4 <_printf_i+0x54>
 8005c8e:	2a63      	cmp	r2, #99	; 0x63
 8005c90:	d02e      	beq.n	8005cf0 <_printf_i+0x80>
 8005c92:	d80a      	bhi.n	8005caa <_printf_i+0x3a>
 8005c94:	2a00      	cmp	r2, #0
 8005c96:	f000 80c8 	beq.w	8005e2a <_printf_i+0x1ba>
 8005c9a:	2a58      	cmp	r2, #88	; 0x58
 8005c9c:	f000 808a 	beq.w	8005db4 <_printf_i+0x144>
 8005ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ca4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005ca8:	e02a      	b.n	8005d00 <_printf_i+0x90>
 8005caa:	2a64      	cmp	r2, #100	; 0x64
 8005cac:	d001      	beq.n	8005cb2 <_printf_i+0x42>
 8005cae:	2a69      	cmp	r2, #105	; 0x69
 8005cb0:	d1f6      	bne.n	8005ca0 <_printf_i+0x30>
 8005cb2:	6821      	ldr	r1, [r4, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005cba:	d023      	beq.n	8005d04 <_printf_i+0x94>
 8005cbc:	1d11      	adds	r1, r2, #4
 8005cbe:	6019      	str	r1, [r3, #0]
 8005cc0:	6813      	ldr	r3, [r2, #0]
 8005cc2:	e027      	b.n	8005d14 <_printf_i+0xa4>
 8005cc4:	2a73      	cmp	r2, #115	; 0x73
 8005cc6:	f000 80b4 	beq.w	8005e32 <_printf_i+0x1c2>
 8005cca:	d808      	bhi.n	8005cde <_printf_i+0x6e>
 8005ccc:	2a6f      	cmp	r2, #111	; 0x6f
 8005cce:	d02a      	beq.n	8005d26 <_printf_i+0xb6>
 8005cd0:	2a70      	cmp	r2, #112	; 0x70
 8005cd2:	d1e5      	bne.n	8005ca0 <_printf_i+0x30>
 8005cd4:	680a      	ldr	r2, [r1, #0]
 8005cd6:	f042 0220 	orr.w	r2, r2, #32
 8005cda:	600a      	str	r2, [r1, #0]
 8005cdc:	e003      	b.n	8005ce6 <_printf_i+0x76>
 8005cde:	2a75      	cmp	r2, #117	; 0x75
 8005ce0:	d021      	beq.n	8005d26 <_printf_i+0xb6>
 8005ce2:	2a78      	cmp	r2, #120	; 0x78
 8005ce4:	d1dc      	bne.n	8005ca0 <_printf_i+0x30>
 8005ce6:	2278      	movs	r2, #120	; 0x78
 8005ce8:	496f      	ldr	r1, [pc, #444]	; (8005ea8 <_printf_i+0x238>)
 8005cea:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005cee:	e064      	b.n	8005dba <_printf_i+0x14a>
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005cf6:	1d11      	adds	r1, r2, #4
 8005cf8:	6019      	str	r1, [r3, #0]
 8005cfa:	6813      	ldr	r3, [r2, #0]
 8005cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0a3      	b.n	8005e4c <_printf_i+0x1dc>
 8005d04:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005d08:	f102 0104 	add.w	r1, r2, #4
 8005d0c:	6019      	str	r1, [r3, #0]
 8005d0e:	d0d7      	beq.n	8005cc0 <_printf_i+0x50>
 8005d10:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	da03      	bge.n	8005d20 <_printf_i+0xb0>
 8005d18:	222d      	movs	r2, #45	; 0x2d
 8005d1a:	425b      	negs	r3, r3
 8005d1c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005d20:	4962      	ldr	r1, [pc, #392]	; (8005eac <_printf_i+0x23c>)
 8005d22:	220a      	movs	r2, #10
 8005d24:	e017      	b.n	8005d56 <_printf_i+0xe6>
 8005d26:	6820      	ldr	r0, [r4, #0]
 8005d28:	6819      	ldr	r1, [r3, #0]
 8005d2a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005d2e:	d003      	beq.n	8005d38 <_printf_i+0xc8>
 8005d30:	1d08      	adds	r0, r1, #4
 8005d32:	6018      	str	r0, [r3, #0]
 8005d34:	680b      	ldr	r3, [r1, #0]
 8005d36:	e006      	b.n	8005d46 <_printf_i+0xd6>
 8005d38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d3c:	f101 0004 	add.w	r0, r1, #4
 8005d40:	6018      	str	r0, [r3, #0]
 8005d42:	d0f7      	beq.n	8005d34 <_printf_i+0xc4>
 8005d44:	880b      	ldrh	r3, [r1, #0]
 8005d46:	2a6f      	cmp	r2, #111	; 0x6f
 8005d48:	bf14      	ite	ne
 8005d4a:	220a      	movne	r2, #10
 8005d4c:	2208      	moveq	r2, #8
 8005d4e:	4957      	ldr	r1, [pc, #348]	; (8005eac <_printf_i+0x23c>)
 8005d50:	2000      	movs	r0, #0
 8005d52:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005d56:	6865      	ldr	r5, [r4, #4]
 8005d58:	2d00      	cmp	r5, #0
 8005d5a:	60a5      	str	r5, [r4, #8]
 8005d5c:	f2c0 809c 	blt.w	8005e98 <_printf_i+0x228>
 8005d60:	6820      	ldr	r0, [r4, #0]
 8005d62:	f020 0004 	bic.w	r0, r0, #4
 8005d66:	6020      	str	r0, [r4, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d13f      	bne.n	8005dec <_printf_i+0x17c>
 8005d6c:	2d00      	cmp	r5, #0
 8005d6e:	f040 8095 	bne.w	8005e9c <_printf_i+0x22c>
 8005d72:	4675      	mov	r5, lr
 8005d74:	2a08      	cmp	r2, #8
 8005d76:	d10b      	bne.n	8005d90 <_printf_i+0x120>
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	07da      	lsls	r2, r3, #31
 8005d7c:	d508      	bpl.n	8005d90 <_printf_i+0x120>
 8005d7e:	6923      	ldr	r3, [r4, #16]
 8005d80:	6862      	ldr	r2, [r4, #4]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	bfde      	ittt	le
 8005d86:	2330      	movle	r3, #48	; 0x30
 8005d88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005d90:	ebae 0305 	sub.w	r3, lr, r5
 8005d94:	6123      	str	r3, [r4, #16]
 8005d96:	f8cd 8000 	str.w	r8, [sp]
 8005d9a:	463b      	mov	r3, r7
 8005d9c:	aa03      	add	r2, sp, #12
 8005d9e:	4621      	mov	r1, r4
 8005da0:	4630      	mov	r0, r6
 8005da2:	f7ff feed 	bl	8005b80 <_printf_common>
 8005da6:	3001      	adds	r0, #1
 8005da8:	d155      	bne.n	8005e56 <_printf_i+0x1e6>
 8005daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dae:	b005      	add	sp, #20
 8005db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005db4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005db8:	493c      	ldr	r1, [pc, #240]	; (8005eac <_printf_i+0x23c>)
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005dc2:	f100 0504 	add.w	r5, r0, #4
 8005dc6:	601d      	str	r5, [r3, #0]
 8005dc8:	d001      	beq.n	8005dce <_printf_i+0x15e>
 8005dca:	6803      	ldr	r3, [r0, #0]
 8005dcc:	e002      	b.n	8005dd4 <_printf_i+0x164>
 8005dce:	0655      	lsls	r5, r2, #25
 8005dd0:	d5fb      	bpl.n	8005dca <_printf_i+0x15a>
 8005dd2:	8803      	ldrh	r3, [r0, #0]
 8005dd4:	07d0      	lsls	r0, r2, #31
 8005dd6:	bf44      	itt	mi
 8005dd8:	f042 0220 	orrmi.w	r2, r2, #32
 8005ddc:	6022      	strmi	r2, [r4, #0]
 8005dde:	b91b      	cbnz	r3, 8005de8 <_printf_i+0x178>
 8005de0:	6822      	ldr	r2, [r4, #0]
 8005de2:	f022 0220 	bic.w	r2, r2, #32
 8005de6:	6022      	str	r2, [r4, #0]
 8005de8:	2210      	movs	r2, #16
 8005dea:	e7b1      	b.n	8005d50 <_printf_i+0xe0>
 8005dec:	4675      	mov	r5, lr
 8005dee:	fbb3 f0f2 	udiv	r0, r3, r2
 8005df2:	fb02 3310 	mls	r3, r2, r0, r3
 8005df6:	5ccb      	ldrb	r3, [r1, r3]
 8005df8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d1f5      	bne.n	8005dee <_printf_i+0x17e>
 8005e02:	e7b7      	b.n	8005d74 <_printf_i+0x104>
 8005e04:	6808      	ldr	r0, [r1, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005e0c:	6949      	ldr	r1, [r1, #20]
 8005e0e:	d004      	beq.n	8005e1a <_printf_i+0x1aa>
 8005e10:	1d10      	adds	r0, r2, #4
 8005e12:	6018      	str	r0, [r3, #0]
 8005e14:	6813      	ldr	r3, [r2, #0]
 8005e16:	6019      	str	r1, [r3, #0]
 8005e18:	e007      	b.n	8005e2a <_printf_i+0x1ba>
 8005e1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e1e:	f102 0004 	add.w	r0, r2, #4
 8005e22:	6018      	str	r0, [r3, #0]
 8005e24:	6813      	ldr	r3, [r2, #0]
 8005e26:	d0f6      	beq.n	8005e16 <_printf_i+0x1a6>
 8005e28:	8019      	strh	r1, [r3, #0]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	4675      	mov	r5, lr
 8005e2e:	6123      	str	r3, [r4, #16]
 8005e30:	e7b1      	b.n	8005d96 <_printf_i+0x126>
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	1d11      	adds	r1, r2, #4
 8005e36:	6019      	str	r1, [r3, #0]
 8005e38:	6815      	ldr	r5, [r2, #0]
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	6862      	ldr	r2, [r4, #4]
 8005e3e:	4628      	mov	r0, r5
 8005e40:	f000 f836 	bl	8005eb0 <memchr>
 8005e44:	b108      	cbz	r0, 8005e4a <_printf_i+0x1da>
 8005e46:	1b40      	subs	r0, r0, r5
 8005e48:	6060      	str	r0, [r4, #4]
 8005e4a:	6863      	ldr	r3, [r4, #4]
 8005e4c:	6123      	str	r3, [r4, #16]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e54:	e79f      	b.n	8005d96 <_printf_i+0x126>
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	462a      	mov	r2, r5
 8005e5a:	4639      	mov	r1, r7
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	47c0      	blx	r8
 8005e60:	3001      	adds	r0, #1
 8005e62:	d0a2      	beq.n	8005daa <_printf_i+0x13a>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	079b      	lsls	r3, r3, #30
 8005e68:	d507      	bpl.n	8005e7a <_printf_i+0x20a>
 8005e6a:	2500      	movs	r5, #0
 8005e6c:	f104 0919 	add.w	r9, r4, #25
 8005e70:	68e3      	ldr	r3, [r4, #12]
 8005e72:	9a03      	ldr	r2, [sp, #12]
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	429d      	cmp	r5, r3
 8005e78:	db05      	blt.n	8005e86 <_printf_i+0x216>
 8005e7a:	68e0      	ldr	r0, [r4, #12]
 8005e7c:	9b03      	ldr	r3, [sp, #12]
 8005e7e:	4298      	cmp	r0, r3
 8005e80:	bfb8      	it	lt
 8005e82:	4618      	movlt	r0, r3
 8005e84:	e793      	b.n	8005dae <_printf_i+0x13e>
 8005e86:	2301      	movs	r3, #1
 8005e88:	464a      	mov	r2, r9
 8005e8a:	4639      	mov	r1, r7
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	47c0      	blx	r8
 8005e90:	3001      	adds	r0, #1
 8005e92:	d08a      	beq.n	8005daa <_printf_i+0x13a>
 8005e94:	3501      	adds	r5, #1
 8005e96:	e7eb      	b.n	8005e70 <_printf_i+0x200>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1a7      	bne.n	8005dec <_printf_i+0x17c>
 8005e9c:	780b      	ldrb	r3, [r1, #0]
 8005e9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ea2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ea6:	e765      	b.n	8005d74 <_printf_i+0x104>
 8005ea8:	0800669e 	.word	0x0800669e
 8005eac:	0800668d 	.word	0x0800668d

08005eb0 <memchr>:
 8005eb0:	b510      	push	{r4, lr}
 8005eb2:	b2c9      	uxtb	r1, r1
 8005eb4:	4402      	add	r2, r0
 8005eb6:	4290      	cmp	r0, r2
 8005eb8:	4603      	mov	r3, r0
 8005eba:	d101      	bne.n	8005ec0 <memchr+0x10>
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	bd10      	pop	{r4, pc}
 8005ec0:	781c      	ldrb	r4, [r3, #0]
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	428c      	cmp	r4, r1
 8005ec6:	d1f6      	bne.n	8005eb6 <memchr+0x6>
 8005ec8:	4618      	mov	r0, r3
 8005eca:	bd10      	pop	{r4, pc}

08005ecc <memmove>:
 8005ecc:	4288      	cmp	r0, r1
 8005ece:	b510      	push	{r4, lr}
 8005ed0:	eb01 0302 	add.w	r3, r1, r2
 8005ed4:	d803      	bhi.n	8005ede <memmove+0x12>
 8005ed6:	1e42      	subs	r2, r0, #1
 8005ed8:	4299      	cmp	r1, r3
 8005eda:	d10c      	bne.n	8005ef6 <memmove+0x2a>
 8005edc:	bd10      	pop	{r4, pc}
 8005ede:	4298      	cmp	r0, r3
 8005ee0:	d2f9      	bcs.n	8005ed6 <memmove+0xa>
 8005ee2:	1881      	adds	r1, r0, r2
 8005ee4:	1ad2      	subs	r2, r2, r3
 8005ee6:	42d3      	cmn	r3, r2
 8005ee8:	d100      	bne.n	8005eec <memmove+0x20>
 8005eea:	bd10      	pop	{r4, pc}
 8005eec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ef0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005ef4:	e7f7      	b.n	8005ee6 <memmove+0x1a>
 8005ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005efa:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005efe:	e7eb      	b.n	8005ed8 <memmove+0xc>

08005f00 <_free_r>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	4605      	mov	r5, r0
 8005f04:	2900      	cmp	r1, #0
 8005f06:	d043      	beq.n	8005f90 <_free_r+0x90>
 8005f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f0c:	1f0c      	subs	r4, r1, #4
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	bfb8      	it	lt
 8005f12:	18e4      	addlt	r4, r4, r3
 8005f14:	f000 f8d4 	bl	80060c0 <__malloc_lock>
 8005f18:	4a1e      	ldr	r2, [pc, #120]	; (8005f94 <_free_r+0x94>)
 8005f1a:	6813      	ldr	r3, [r2, #0]
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	b933      	cbnz	r3, 8005f2e <_free_r+0x2e>
 8005f20:	6063      	str	r3, [r4, #4]
 8005f22:	6014      	str	r4, [r2, #0]
 8005f24:	4628      	mov	r0, r5
 8005f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f2a:	f000 b8ca 	b.w	80060c2 <__malloc_unlock>
 8005f2e:	42a3      	cmp	r3, r4
 8005f30:	d90b      	bls.n	8005f4a <_free_r+0x4a>
 8005f32:	6821      	ldr	r1, [r4, #0]
 8005f34:	1862      	adds	r2, r4, r1
 8005f36:	4293      	cmp	r3, r2
 8005f38:	bf01      	itttt	eq
 8005f3a:	681a      	ldreq	r2, [r3, #0]
 8005f3c:	685b      	ldreq	r3, [r3, #4]
 8005f3e:	1852      	addeq	r2, r2, r1
 8005f40:	6022      	streq	r2, [r4, #0]
 8005f42:	6063      	str	r3, [r4, #4]
 8005f44:	6004      	str	r4, [r0, #0]
 8005f46:	e7ed      	b.n	8005f24 <_free_r+0x24>
 8005f48:	4613      	mov	r3, r2
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	b10a      	cbz	r2, 8005f52 <_free_r+0x52>
 8005f4e:	42a2      	cmp	r2, r4
 8005f50:	d9fa      	bls.n	8005f48 <_free_r+0x48>
 8005f52:	6819      	ldr	r1, [r3, #0]
 8005f54:	1858      	adds	r0, r3, r1
 8005f56:	42a0      	cmp	r0, r4
 8005f58:	d10b      	bne.n	8005f72 <_free_r+0x72>
 8005f5a:	6820      	ldr	r0, [r4, #0]
 8005f5c:	4401      	add	r1, r0
 8005f5e:	1858      	adds	r0, r3, r1
 8005f60:	4282      	cmp	r2, r0
 8005f62:	6019      	str	r1, [r3, #0]
 8005f64:	d1de      	bne.n	8005f24 <_free_r+0x24>
 8005f66:	6810      	ldr	r0, [r2, #0]
 8005f68:	6852      	ldr	r2, [r2, #4]
 8005f6a:	4401      	add	r1, r0
 8005f6c:	6019      	str	r1, [r3, #0]
 8005f6e:	605a      	str	r2, [r3, #4]
 8005f70:	e7d8      	b.n	8005f24 <_free_r+0x24>
 8005f72:	d902      	bls.n	8005f7a <_free_r+0x7a>
 8005f74:	230c      	movs	r3, #12
 8005f76:	602b      	str	r3, [r5, #0]
 8005f78:	e7d4      	b.n	8005f24 <_free_r+0x24>
 8005f7a:	6820      	ldr	r0, [r4, #0]
 8005f7c:	1821      	adds	r1, r4, r0
 8005f7e:	428a      	cmp	r2, r1
 8005f80:	bf01      	itttt	eq
 8005f82:	6811      	ldreq	r1, [r2, #0]
 8005f84:	6852      	ldreq	r2, [r2, #4]
 8005f86:	1809      	addeq	r1, r1, r0
 8005f88:	6021      	streq	r1, [r4, #0]
 8005f8a:	6062      	str	r2, [r4, #4]
 8005f8c:	605c      	str	r4, [r3, #4]
 8005f8e:	e7c9      	b.n	8005f24 <_free_r+0x24>
 8005f90:	bd38      	pop	{r3, r4, r5, pc}
 8005f92:	bf00      	nop
 8005f94:	2000015c 	.word	0x2000015c

08005f98 <_malloc_r>:
 8005f98:	b570      	push	{r4, r5, r6, lr}
 8005f9a:	1ccd      	adds	r5, r1, #3
 8005f9c:	f025 0503 	bic.w	r5, r5, #3
 8005fa0:	3508      	adds	r5, #8
 8005fa2:	2d0c      	cmp	r5, #12
 8005fa4:	bf38      	it	cc
 8005fa6:	250c      	movcc	r5, #12
 8005fa8:	2d00      	cmp	r5, #0
 8005faa:	4606      	mov	r6, r0
 8005fac:	db01      	blt.n	8005fb2 <_malloc_r+0x1a>
 8005fae:	42a9      	cmp	r1, r5
 8005fb0:	d903      	bls.n	8005fba <_malloc_r+0x22>
 8005fb2:	230c      	movs	r3, #12
 8005fb4:	6033      	str	r3, [r6, #0]
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	bd70      	pop	{r4, r5, r6, pc}
 8005fba:	f000 f881 	bl	80060c0 <__malloc_lock>
 8005fbe:	4a23      	ldr	r2, [pc, #140]	; (800604c <_malloc_r+0xb4>)
 8005fc0:	6814      	ldr	r4, [r2, #0]
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	b991      	cbnz	r1, 8005fec <_malloc_r+0x54>
 8005fc6:	4c22      	ldr	r4, [pc, #136]	; (8006050 <_malloc_r+0xb8>)
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	b91b      	cbnz	r3, 8005fd4 <_malloc_r+0x3c>
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f000 f867 	bl	80060a0 <_sbrk_r>
 8005fd2:	6020      	str	r0, [r4, #0]
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	f000 f862 	bl	80060a0 <_sbrk_r>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d126      	bne.n	800602e <_malloc_r+0x96>
 8005fe0:	230c      	movs	r3, #12
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	6033      	str	r3, [r6, #0]
 8005fe6:	f000 f86c 	bl	80060c2 <__malloc_unlock>
 8005fea:	e7e4      	b.n	8005fb6 <_malloc_r+0x1e>
 8005fec:	680b      	ldr	r3, [r1, #0]
 8005fee:	1b5b      	subs	r3, r3, r5
 8005ff0:	d41a      	bmi.n	8006028 <_malloc_r+0x90>
 8005ff2:	2b0b      	cmp	r3, #11
 8005ff4:	d90f      	bls.n	8006016 <_malloc_r+0x7e>
 8005ff6:	600b      	str	r3, [r1, #0]
 8005ff8:	18cc      	adds	r4, r1, r3
 8005ffa:	50cd      	str	r5, [r1, r3]
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	f000 f860 	bl	80060c2 <__malloc_unlock>
 8006002:	f104 000b 	add.w	r0, r4, #11
 8006006:	1d23      	adds	r3, r4, #4
 8006008:	f020 0007 	bic.w	r0, r0, #7
 800600c:	1ac3      	subs	r3, r0, r3
 800600e:	d01b      	beq.n	8006048 <_malloc_r+0xb0>
 8006010:	425a      	negs	r2, r3
 8006012:	50e2      	str	r2, [r4, r3]
 8006014:	bd70      	pop	{r4, r5, r6, pc}
 8006016:	428c      	cmp	r4, r1
 8006018:	bf0b      	itete	eq
 800601a:	6863      	ldreq	r3, [r4, #4]
 800601c:	684b      	ldrne	r3, [r1, #4]
 800601e:	6013      	streq	r3, [r2, #0]
 8006020:	6063      	strne	r3, [r4, #4]
 8006022:	bf18      	it	ne
 8006024:	460c      	movne	r4, r1
 8006026:	e7e9      	b.n	8005ffc <_malloc_r+0x64>
 8006028:	460c      	mov	r4, r1
 800602a:	6849      	ldr	r1, [r1, #4]
 800602c:	e7ca      	b.n	8005fc4 <_malloc_r+0x2c>
 800602e:	1cc4      	adds	r4, r0, #3
 8006030:	f024 0403 	bic.w	r4, r4, #3
 8006034:	42a0      	cmp	r0, r4
 8006036:	d005      	beq.n	8006044 <_malloc_r+0xac>
 8006038:	1a21      	subs	r1, r4, r0
 800603a:	4630      	mov	r0, r6
 800603c:	f000 f830 	bl	80060a0 <_sbrk_r>
 8006040:	3001      	adds	r0, #1
 8006042:	d0cd      	beq.n	8005fe0 <_malloc_r+0x48>
 8006044:	6025      	str	r5, [r4, #0]
 8006046:	e7d9      	b.n	8005ffc <_malloc_r+0x64>
 8006048:	bd70      	pop	{r4, r5, r6, pc}
 800604a:	bf00      	nop
 800604c:	2000015c 	.word	0x2000015c
 8006050:	20000160 	.word	0x20000160

08006054 <_realloc_r>:
 8006054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006056:	4607      	mov	r7, r0
 8006058:	4614      	mov	r4, r2
 800605a:	460e      	mov	r6, r1
 800605c:	b921      	cbnz	r1, 8006068 <_realloc_r+0x14>
 800605e:	4611      	mov	r1, r2
 8006060:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006064:	f7ff bf98 	b.w	8005f98 <_malloc_r>
 8006068:	b922      	cbnz	r2, 8006074 <_realloc_r+0x20>
 800606a:	f7ff ff49 	bl	8005f00 <_free_r>
 800606e:	4625      	mov	r5, r4
 8006070:	4628      	mov	r0, r5
 8006072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006074:	f000 f826 	bl	80060c4 <_malloc_usable_size_r>
 8006078:	4284      	cmp	r4, r0
 800607a:	d90f      	bls.n	800609c <_realloc_r+0x48>
 800607c:	4621      	mov	r1, r4
 800607e:	4638      	mov	r0, r7
 8006080:	f7ff ff8a 	bl	8005f98 <_malloc_r>
 8006084:	4605      	mov	r5, r0
 8006086:	2800      	cmp	r0, #0
 8006088:	d0f2      	beq.n	8006070 <_realloc_r+0x1c>
 800608a:	4631      	mov	r1, r6
 800608c:	4622      	mov	r2, r4
 800608e:	f7ff fbef 	bl	8005870 <memcpy>
 8006092:	4631      	mov	r1, r6
 8006094:	4638      	mov	r0, r7
 8006096:	f7ff ff33 	bl	8005f00 <_free_r>
 800609a:	e7e9      	b.n	8006070 <_realloc_r+0x1c>
 800609c:	4635      	mov	r5, r6
 800609e:	e7e7      	b.n	8006070 <_realloc_r+0x1c>

080060a0 <_sbrk_r>:
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	2300      	movs	r3, #0
 80060a4:	4c05      	ldr	r4, [pc, #20]	; (80060bc <_sbrk_r+0x1c>)
 80060a6:	4605      	mov	r5, r0
 80060a8:	4608      	mov	r0, r1
 80060aa:	6023      	str	r3, [r4, #0]
 80060ac:	f7ff fb30 	bl	8005710 <_sbrk>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d102      	bne.n	80060ba <_sbrk_r+0x1a>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	b103      	cbz	r3, 80060ba <_sbrk_r+0x1a>
 80060b8:	602b      	str	r3, [r5, #0]
 80060ba:	bd38      	pop	{r3, r4, r5, pc}
 80060bc:	200002d4 	.word	0x200002d4

080060c0 <__malloc_lock>:
 80060c0:	4770      	bx	lr

080060c2 <__malloc_unlock>:
 80060c2:	4770      	bx	lr

080060c4 <_malloc_usable_size_r>:
 80060c4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80060c8:	2800      	cmp	r0, #0
 80060ca:	f1a0 0004 	sub.w	r0, r0, #4
 80060ce:	bfbc      	itt	lt
 80060d0:	580b      	ldrlt	r3, [r1, r0]
 80060d2:	18c0      	addlt	r0, r0, r3
 80060d4:	4770      	bx	lr
	...

080060d8 <_init>:
 80060d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060da:	bf00      	nop
 80060dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060de:	bc08      	pop	{r3}
 80060e0:	469e      	mov	lr, r3
 80060e2:	4770      	bx	lr

080060e4 <_fini>:
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	bf00      	nop
 80060e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ea:	bc08      	pop	{r3}
 80060ec:	469e      	mov	lr, r3
 80060ee:	4770      	bx	lr

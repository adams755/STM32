
Modulo_Energia_V12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000633c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  08006448  08006448  00016448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006a08  08006a08  00016a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006a0c  08006a0c  00016a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08006a10  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000027c  20000078  08006a88  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002f4  08006a88  000202f4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001896f  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002d35  00000000  00000000  00038a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001190  00000000  00000000  0003b748  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001068  00000000  00000000  0003c8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000077f3  00000000  00000000  0003d940  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004ece  00000000  00000000  00045133  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004a001  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004d40  00000000  00000000  0004a080  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08006430 	.word	0x08006430

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08006430 	.word	0x08006430

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000160:	4a08      	ldr	r2, [pc, #32]	; (8000184 <HAL_Init+0x28>)
 8000162:	4b08      	ldr	r3, [pc, #32]	; (8000184 <HAL_Init+0x28>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800016c:	2003      	movs	r0, #3
 800016e:	f001 fb81 	bl	8001874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 f808 	bl	8000188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000178:	f005 fab8 	bl	80056ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800017c:	2300      	movs	r3, #0
}
 800017e:	4618      	mov	r0, r3
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40022000 	.word	0x40022000

08000188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000190:	4b12      	ldr	r3, [pc, #72]	; (80001dc <HAL_InitTick+0x54>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b12      	ldr	r3, [pc, #72]	; (80001e0 <HAL_InitTick+0x58>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	4619      	mov	r1, r3
 800019a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019e:	fbb3 f3f1 	udiv	r3, r3, r1
 80001a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80001a6:	4618      	mov	r0, r3
 80001a8:	f001 fb99 	bl	80018de <HAL_SYSTICK_Config>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001b2:	2301      	movs	r3, #1
 80001b4:	e00e      	b.n	80001d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2b0f      	cmp	r3, #15
 80001ba:	d80a      	bhi.n	80001d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001bc:	2200      	movs	r2, #0
 80001be:	6879      	ldr	r1, [r7, #4]
 80001c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001c4:	f001 fb61 	bl	800188a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <HAL_InitTick+0x5c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e000      	b.n	80001d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001d2:	2301      	movs	r3, #1
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	20000004 	.word	0x20000004
 80001e4:	20000000 	.word	0x20000000

080001e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <HAL_IncTick+0x1c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <HAL_IncTick+0x20>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4413      	add	r3, r2
 80001f8:	4a03      	ldr	r2, [pc, #12]	; (8000208 <HAL_IncTick+0x20>)
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	20000004 	.word	0x20000004
 8000208:	20000180 	.word	0x20000180

0800020c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  return uwTick;
 8000210:	4b02      	ldr	r3, [pc, #8]	; (800021c <HAL_GetTick+0x10>)
 8000212:	681b      	ldr	r3, [r3, #0]
}
 8000214:	4618      	mov	r0, r3
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	20000180 	.word	0x20000180

08000220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000228:	f7ff fff0 	bl	800020c <HAL_GetTick>
 800022c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000238:	d005      	beq.n	8000246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <HAL_Delay+0x40>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	461a      	mov	r2, r3
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4413      	add	r3, r2
 8000244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000246:	bf00      	nop
 8000248:	f7ff ffe0 	bl	800020c <HAL_GetTick>
 800024c:	4602      	mov	r2, r0
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	1ad2      	subs	r2, r2, r3
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d3f7      	bcc.n	8000248 <HAL_Delay+0x28>
  {
  }
}
 8000258:	bf00      	nop
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000004 	.word	0x20000004

08000264 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800026c:	2300      	movs	r3, #0
 800026e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000270:	2300      	movs	r3, #0
 8000272:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000274:	2300      	movs	r3, #0
 8000276:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d101      	bne.n	8000286 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000282:	2301      	movs	r3, #1
 8000284:	e0be      	b.n	8000404 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000290:	2b00      	cmp	r3, #0
 8000292:	d109      	bne.n	80002a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2200      	movs	r2, #0
 8000298:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2200      	movs	r2, #0
 800029e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f005 fa44 	bl	8005730 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80002a8:	6878      	ldr	r0, [r7, #4]
 80002aa:	f000 fbb1 	bl	8000a10 <ADC_ConversionStop_Disable>
 80002ae:	4603      	mov	r3, r0
 80002b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002b6:	f003 0310 	and.w	r3, r3, #16
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8099 	bne.w	80003f2 <HAL_ADC_Init+0x18e>
 80002c0:	7dfb      	ldrb	r3, [r7, #23]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	f040 8095 	bne.w	80003f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002d0:	f023 0302 	bic.w	r3, r3, #2
 80002d4:	f043 0202 	orr.w	r2, r3, #2
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80002e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80002ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80002ee:	68ba      	ldr	r2, [r7, #8]
 80002f0:	4313      	orrs	r3, r2
 80002f2:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002fc:	d003      	beq.n	8000306 <HAL_ADC_Init+0xa2>
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d102      	bne.n	800030c <HAL_ADC_Init+0xa8>
 8000306:	f44f 7380 	mov.w	r3, #256	; 0x100
 800030a:	e000      	b.n	800030e <HAL_ADC_Init+0xaa>
 800030c:	2300      	movs	r3, #0
 800030e:	693a      	ldr	r2, [r7, #16]
 8000310:	4313      	orrs	r3, r2
 8000312:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d119      	bne.n	8000350 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d109      	bne.n	8000338 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	3b01      	subs	r3, #1
 800032a:	035a      	lsls	r2, r3, #13
 800032c:	693b      	ldr	r3, [r7, #16]
 800032e:	4313      	orrs	r3, r2
 8000330:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000334:	613b      	str	r3, [r7, #16]
 8000336:	e00b      	b.n	8000350 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800033c:	f043 0220 	orr.w	r2, r3, #32
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000348:	f043 0201 	orr.w	r2, r3, #1
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	6812      	ldr	r2, [r2, #0]
 8000358:	6852      	ldr	r2, [r2, #4]
 800035a:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 800035e:	693a      	ldr	r2, [r7, #16]
 8000360:	430a      	orrs	r2, r1
 8000362:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	6899      	ldr	r1, [r3, #8]
 800036e:	4b27      	ldr	r3, [pc, #156]	; (800040c <HAL_ADC_Init+0x1a8>)
 8000370:	400b      	ands	r3, r1
 8000372:	68b9      	ldr	r1, [r7, #8]
 8000374:	430b      	orrs	r3, r1
 8000376:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000380:	d003      	beq.n	800038a <HAL_ADC_Init+0x126>
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d104      	bne.n	8000394 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	691b      	ldr	r3, [r3, #16]
 800038e:	3b01      	subs	r3, #1
 8000390:	051b      	lsls	r3, r3, #20
 8000392:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	6812      	ldr	r2, [r2, #0]
 800039c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800039e:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 80003a2:	68fa      	ldr	r2, [r7, #12]
 80003a4:	430a      	orrs	r2, r1
 80003a6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	689a      	ldr	r2, [r3, #8]
 80003ae:	4b18      	ldr	r3, [pc, #96]	; (8000410 <HAL_ADC_Init+0x1ac>)
 80003b0:	4013      	ands	r3, r2
 80003b2:	68ba      	ldr	r2, [r7, #8]
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d10b      	bne.n	80003d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2200      	movs	r2, #0
 80003bc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c2:	f023 0303 	bic.w	r3, r3, #3
 80003c6:	f043 0201 	orr.w	r2, r3, #1
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003ce:	e018      	b.n	8000402 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003d4:	f023 0312 	bic.w	r3, r3, #18
 80003d8:	f043 0210 	orr.w	r2, r3, #16
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003e4:	f043 0201 	orr.w	r2, r3, #1
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80003ec:	2301      	movs	r3, #1
 80003ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003f0:	e007      	b.n	8000402 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003f6:	f043 0210 	orr.w	r2, r3, #16
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003fe:	2301      	movs	r3, #1
 8000400:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000402:	7dfb      	ldrb	r3, [r7, #23]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	ffe1f7fd 	.word	0xffe1f7fd
 8000410:	ff1f0efe 	.word	0xff1f0efe

08000414 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800041c:	2300      	movs	r3, #0
 800041e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000426:	2b01      	cmp	r3, #1
 8000428:	d101      	bne.n	800042e <HAL_ADC_Start+0x1a>
 800042a:	2302      	movs	r3, #2
 800042c:	e098      	b.n	8000560 <HAL_ADC_Start+0x14c>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2201      	movs	r2, #1
 8000432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	f000 fa98 	bl	800096c <ADC_Enable>
 800043c:	4603      	mov	r3, r0
 800043e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	2b00      	cmp	r3, #0
 8000444:	f040 8087 	bne.w	8000556 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800044c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000450:	f023 0301 	bic.w	r3, r3, #1
 8000454:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a41      	ldr	r2, [pc, #260]	; (8000568 <HAL_ADC_Start+0x154>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d105      	bne.n	8000472 <HAL_ADC_Start+0x5e>
 8000466:	4b41      	ldr	r3, [pc, #260]	; (800056c <HAL_ADC_Start+0x158>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800046e:	2b00      	cmp	r3, #0
 8000470:	d115      	bne.n	800049e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000476:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000488:	2b00      	cmp	r3, #0
 800048a:	d026      	beq.n	80004da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000490:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000494:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800049c:	e01d      	b.n	80004da <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a2f      	ldr	r2, [pc, #188]	; (800056c <HAL_ADC_Start+0x158>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d004      	beq.n	80004be <HAL_ADC_Start+0xaa>
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a2b      	ldr	r2, [pc, #172]	; (8000568 <HAL_ADC_Start+0x154>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d10d      	bne.n	80004da <HAL_ADC_Start+0xc6>
 80004be:	4b2b      	ldr	r3, [pc, #172]	; (800056c <HAL_ADC_Start+0x158>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d007      	beq.n	80004da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d006      	beq.n	80004f4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ea:	f023 0206 	bic.w	r2, r3, #6
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80004f2:	e002      	b.n	80004fa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2200      	movs	r2, #0
 80004f8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f06f 0202 	mvn.w	r2, #2
 800050a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000516:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800051a:	d113      	bne.n	8000544 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000520:	4a11      	ldr	r2, [pc, #68]	; (8000568 <HAL_ADC_Start+0x154>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d105      	bne.n	8000532 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <HAL_ADC_Start+0x158>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800052e:	2b00      	cmp	r3, #0
 8000530:	d108      	bne.n	8000544 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	6812      	ldr	r2, [r2, #0]
 800053a:	6892      	ldr	r2, [r2, #8]
 800053c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	e00c      	b.n	800055e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	6812      	ldr	r2, [r2, #0]
 800054c:	6892      	ldr	r2, [r2, #8]
 800054e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	e003      	b.n	800055e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2200      	movs	r2, #0
 800055a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800055e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40012800 	.word	0x40012800
 800056c:	40012400 	.word	0x40012400

08000570 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000586:	f7ff fe41 	bl	800020c <HAL_GetTick>
 800058a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00b      	beq.n	80005b2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800059e:	f043 0220 	orr.w	r2, r3, #32
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2200      	movs	r2, #0
 80005aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
 80005b0:	e0c8      	b.n	8000744 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d12a      	bne.n	8000616 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d123      	bne.n	8000616 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80005ce:	e01a      	b.n	8000606 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005d6:	d016      	beq.n	8000606 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d007      	beq.n	80005ee <HAL_ADC_PollForConversion+0x7e>
 80005de:	f7ff fe15 	bl	800020c <HAL_GetTick>
 80005e2:	4602      	mov	r2, r0
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	1ad2      	subs	r2, r2, r3
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d90b      	bls.n	8000606 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005f2:	f043 0204 	orr.w	r2, r3, #4
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000602:	2303      	movs	r3, #3
 8000604:	e09e      	b.n	8000744 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f003 0302 	and.w	r3, r3, #2
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0dd      	beq.n	80005d0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000614:	e06c      	b.n	80006f0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000616:	4b4d      	ldr	r3, [pc, #308]	; (800074c <HAL_ADC_PollForConversion+0x1dc>)
 8000618:	681c      	ldr	r4, [r3, #0]
 800061a:	2002      	movs	r0, #2
 800061c:	f001 ffe2 	bl	80025e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8000620:	4603      	mov	r3, r0
 8000622:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6919      	ldr	r1, [r3, #16]
 800062c:	4b48      	ldr	r3, [pc, #288]	; (8000750 <HAL_ADC_PollForConversion+0x1e0>)
 800062e:	400b      	ands	r3, r1
 8000630:	2b00      	cmp	r3, #0
 8000632:	d118      	bne.n	8000666 <HAL_ADC_PollForConversion+0xf6>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	68d9      	ldr	r1, [r3, #12]
 800063a:	4b46      	ldr	r3, [pc, #280]	; (8000754 <HAL_ADC_PollForConversion+0x1e4>)
 800063c:	400b      	ands	r3, r1
 800063e:	2b00      	cmp	r3, #0
 8000640:	d111      	bne.n	8000666 <HAL_ADC_PollForConversion+0xf6>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	6919      	ldr	r1, [r3, #16]
 8000648:	4b43      	ldr	r3, [pc, #268]	; (8000758 <HAL_ADC_PollForConversion+0x1e8>)
 800064a:	400b      	ands	r3, r1
 800064c:	2b00      	cmp	r3, #0
 800064e:	d108      	bne.n	8000662 <HAL_ADC_PollForConversion+0xf2>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	68d9      	ldr	r1, [r3, #12]
 8000656:	4b41      	ldr	r3, [pc, #260]	; (800075c <HAL_ADC_PollForConversion+0x1ec>)
 8000658:	400b      	ands	r3, r1
 800065a:	2b00      	cmp	r3, #0
 800065c:	d101      	bne.n	8000662 <HAL_ADC_PollForConversion+0xf2>
 800065e:	2314      	movs	r3, #20
 8000660:	e020      	b.n	80006a4 <HAL_ADC_PollForConversion+0x134>
 8000662:	2329      	movs	r3, #41	; 0x29
 8000664:	e01e      	b.n	80006a4 <HAL_ADC_PollForConversion+0x134>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6919      	ldr	r1, [r3, #16]
 800066c:	4b3a      	ldr	r3, [pc, #232]	; (8000758 <HAL_ADC_PollForConversion+0x1e8>)
 800066e:	400b      	ands	r3, r1
 8000670:	2b00      	cmp	r3, #0
 8000672:	d106      	bne.n	8000682 <HAL_ADC_PollForConversion+0x112>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	68d9      	ldr	r1, [r3, #12]
 800067a:	4b38      	ldr	r3, [pc, #224]	; (800075c <HAL_ADC_PollForConversion+0x1ec>)
 800067c:	400b      	ands	r3, r1
 800067e:	2b00      	cmp	r3, #0
 8000680:	d00d      	beq.n	800069e <HAL_ADC_PollForConversion+0x12e>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	6919      	ldr	r1, [r3, #16]
 8000688:	4b35      	ldr	r3, [pc, #212]	; (8000760 <HAL_ADC_PollForConversion+0x1f0>)
 800068a:	400b      	ands	r3, r1
 800068c:	2b00      	cmp	r3, #0
 800068e:	d108      	bne.n	80006a2 <HAL_ADC_PollForConversion+0x132>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	68d9      	ldr	r1, [r3, #12]
 8000696:	4b32      	ldr	r3, [pc, #200]	; (8000760 <HAL_ADC_PollForConversion+0x1f0>)
 8000698:	400b      	ands	r3, r1
 800069a:	2b00      	cmp	r3, #0
 800069c:	d101      	bne.n	80006a2 <HAL_ADC_PollForConversion+0x132>
 800069e:	2354      	movs	r3, #84	; 0x54
 80006a0:	e000      	b.n	80006a4 <HAL_ADC_PollForConversion+0x134>
 80006a2:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80006a4:	fb03 f302 	mul.w	r3, r3, r2
 80006a8:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80006aa:	e01d      	b.n	80006e8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006b2:	d016      	beq.n	80006e2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d007      	beq.n	80006ca <HAL_ADC_PollForConversion+0x15a>
 80006ba:	f7ff fda7 	bl	800020c <HAL_GetTick>
 80006be:	4602      	mov	r2, r0
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	1ad2      	subs	r2, r2, r3
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d90b      	bls.n	80006e2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ce:	f043 0204 	orr.w	r2, r3, #4
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80006de:	2303      	movs	r3, #3
 80006e0:	e030      	b.n	8000744 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	3301      	adds	r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d3dd      	bcc.n	80006ac <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f06f 0212 	mvn.w	r2, #18
 80006f8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000710:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000714:	d115      	bne.n	8000742 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	68db      	ldr	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800071a:	2b00      	cmp	r3, #0
 800071c:	d111      	bne.n	8000742 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800072e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000732:	2b00      	cmp	r3, #0
 8000734:	d105      	bne.n	8000742 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800073a:	f043 0201 	orr.w	r2, r3, #1
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	371c      	adds	r7, #28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd90      	pop	{r4, r7, pc}
 800074c:	20000010 	.word	0x20000010
 8000750:	24924924 	.word	0x24924924
 8000754:	00924924 	.word	0x00924924
 8000758:	12492492 	.word	0x12492492
 800075c:	00492492 	.word	0x00492492
 8000760:	00249249 	.word	0x00249249

08000764 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000772:	4618      	mov	r0, r3
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800077c:	b490      	push	{r4, r7}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000786:	2300      	movs	r3, #0
 8000788:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000794:	2b01      	cmp	r3, #1
 8000796:	d101      	bne.n	800079c <HAL_ADC_ConfigChannel+0x20>
 8000798:	2302      	movs	r3, #2
 800079a:	e0dc      	b.n	8000956 <HAL_ADC_ConfigChannel+0x1da>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2201      	movs	r2, #1
 80007a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	2b06      	cmp	r3, #6
 80007aa:	d81c      	bhi.n	80007e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6819      	ldr	r1, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	3b05      	subs	r3, #5
 80007c2:	221f      	movs	r2, #31
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	43db      	mvns	r3, r3
 80007ca:	4018      	ands	r0, r3
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	681c      	ldr	r4, [r3, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	685a      	ldr	r2, [r3, #4]
 80007d4:	4613      	mov	r3, r2
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	4413      	add	r3, r2
 80007da:	3b05      	subs	r3, #5
 80007dc:	fa04 f303 	lsl.w	r3, r4, r3
 80007e0:	4303      	orrs	r3, r0
 80007e2:	634b      	str	r3, [r1, #52]	; 0x34
 80007e4:	e03c      	b.n	8000860 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	2b0c      	cmp	r3, #12
 80007ec:	d81c      	bhi.n	8000828 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6819      	ldr	r1, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	685a      	ldr	r2, [r3, #4]
 80007fc:	4613      	mov	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	3b23      	subs	r3, #35	; 0x23
 8000804:	221f      	movs	r2, #31
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	43db      	mvns	r3, r3
 800080c:	4018      	ands	r0, r3
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	681c      	ldr	r4, [r3, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	4613      	mov	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	3b23      	subs	r3, #35	; 0x23
 800081e:	fa04 f303 	lsl.w	r3, r4, r3
 8000822:	4303      	orrs	r3, r0
 8000824:	630b      	str	r3, [r1, #48]	; 0x30
 8000826:	e01b      	b.n	8000860 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6819      	ldr	r1, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685a      	ldr	r2, [r3, #4]
 8000836:	4613      	mov	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	4413      	add	r3, r2
 800083c:	3b41      	subs	r3, #65	; 0x41
 800083e:	221f      	movs	r2, #31
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	43db      	mvns	r3, r3
 8000846:	4018      	ands	r0, r3
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	681c      	ldr	r4, [r3, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	4613      	mov	r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4413      	add	r3, r2
 8000856:	3b41      	subs	r3, #65	; 0x41
 8000858:	fa04 f303 	lsl.w	r3, r4, r3
 800085c:	4303      	orrs	r3, r0
 800085e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b09      	cmp	r3, #9
 8000866:	d91c      	bls.n	80008a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6819      	ldr	r1, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	68d8      	ldr	r0, [r3, #12]
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	4613      	mov	r3, r2
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	4413      	add	r3, r2
 800087c:	3b1e      	subs	r3, #30
 800087e:	2207      	movs	r2, #7
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	4018      	ands	r0, r3
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	689c      	ldr	r4, [r3, #8]
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4613      	mov	r3, r2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	4413      	add	r3, r2
 8000896:	3b1e      	subs	r3, #30
 8000898:	fa04 f303 	lsl.w	r3, r4, r3
 800089c:	4303      	orrs	r3, r0
 800089e:	60cb      	str	r3, [r1, #12]
 80008a0:	e019      	b.n	80008d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6819      	ldr	r1, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	6918      	ldr	r0, [r3, #16]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4613      	mov	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	2207      	movs	r2, #7
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	4018      	ands	r0, r3
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	689c      	ldr	r4, [r3, #8]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4613      	mov	r3, r2
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	4413      	add	r3, r2
 80008ce:	fa04 f303 	lsl.w	r3, r4, r3
 80008d2:	4303      	orrs	r3, r0
 80008d4:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b10      	cmp	r3, #16
 80008dc:	d003      	beq.n	80008e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008e2:	2b11      	cmp	r3, #17
 80008e4:	d132      	bne.n	800094c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <HAL_ADC_ConfigChannel+0x1e4>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d125      	bne.n	800093c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d126      	bne.n	800094c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	6812      	ldr	r2, [r2, #0]
 8000906:	6892      	ldr	r2, [r2, #8]
 8000908:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800090c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b10      	cmp	r3, #16
 8000914:	d11a      	bne.n	800094c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <HAL_ADC_ConfigChannel+0x1e8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a13      	ldr	r2, [pc, #76]	; (8000968 <HAL_ADC_ConfigChannel+0x1ec>)
 800091c:	fba2 2303 	umull	r2, r3, r2, r3
 8000920:	0c9a      	lsrs	r2, r3, #18
 8000922:	4613      	mov	r3, r2
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	4413      	add	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800092c:	e002      	b.n	8000934 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	3b01      	subs	r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1f9      	bne.n	800092e <HAL_ADC_ConfigChannel+0x1b2>
 800093a:	e007      	b.n	800094c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000940:	f043 0220 	orr.w	r2, r3, #32
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000948:	2301      	movs	r3, #1
 800094a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000954:	7bfb      	ldrb	r3, [r7, #15]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bc90      	pop	{r4, r7}
 800095e:	4770      	bx	lr
 8000960:	40012400 	.word	0x40012400
 8000964:	20000010 	.word	0x20000010
 8000968:	431bde83 	.word	0x431bde83

0800096c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	2b01      	cmp	r3, #1
 8000988:	d039      	beq.n	80009fe <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	6812      	ldr	r2, [r2, #0]
 8000992:	6892      	ldr	r2, [r2, #8]
 8000994:	f042 0201 	orr.w	r2, r2, #1
 8000998:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <ADC_Enable+0x9c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <ADC_Enable+0xa0>)
 80009a0:	fba2 2303 	umull	r2, r3, r2, r3
 80009a4:	0c9b      	lsrs	r3, r3, #18
 80009a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80009a8:	e002      	b.n	80009b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1f9      	bne.n	80009aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80009b6:	f7ff fc29 	bl	800020c <HAL_GetTick>
 80009ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80009bc:	e018      	b.n	80009f0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80009be:	f7ff fc25 	bl	800020c <HAL_GetTick>
 80009c2:	4602      	mov	r2, r0
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d911      	bls.n	80009f0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d0:	f043 0210 	orr.w	r2, r3, #16
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009dc:	f043 0201 	orr.w	r2, r3, #1
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80009ec:	2301      	movs	r3, #1
 80009ee:	e007      	b.n	8000a00 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d1df      	bne.n	80009be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000010 	.word	0x20000010
 8000a0c:	431bde83 	.word	0x431bde83

08000a10 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d127      	bne.n	8000a7a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	6812      	ldr	r2, [r2, #0]
 8000a32:	6892      	ldr	r2, [r2, #8]
 8000a34:	f022 0201 	bic.w	r2, r2, #1
 8000a38:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000a3a:	f7ff fbe7 	bl	800020c <HAL_GetTick>
 8000a3e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a40:	e014      	b.n	8000a6c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000a42:	f7ff fbe3 	bl	800020c <HAL_GetTick>
 8000a46:	4602      	mov	r2, r0
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d90d      	bls.n	8000a6c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a54:	f043 0210 	orr.w	r2, r3, #16
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a60:	f043 0201 	orr.w	r2, r3, #1
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e007      	b.n	8000a7c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d0e3      	beq.n	8000a42 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d101      	bne.n	8000a96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e0ec      	b.n	8000c70 <HAL_CAN_Init+0x1ec>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d102      	bne.n	8000aa8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f004 fe80 	bl	80057a8 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	6812      	ldr	r2, [r2, #0]
 8000ab0:	6812      	ldr	r2, [r2, #0]
 8000ab2:	f022 0202 	bic.w	r2, r2, #2
 8000ab6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ab8:	f7ff fba8 	bl	800020c <HAL_GetTick>
 8000abc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000abe:	e012      	b.n	8000ae6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ac0:	f7ff fba4 	bl	800020c <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	2b0a      	cmp	r3, #10
 8000acc:	d90b      	bls.n	8000ae6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2205      	movs	r2, #5
 8000ade:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e0c4      	b.n	8000c70 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1e5      	bne.n	8000ac0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	6812      	ldr	r2, [r2, #0]
 8000afc:	6812      	ldr	r2, [r2, #0]
 8000afe:	f042 0201 	orr.w	r2, r2, #1
 8000b02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b04:	f7ff fb82 	bl	800020c <HAL_GetTick>
 8000b08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b0a:	e012      	b.n	8000b32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b0c:	f7ff fb7e 	bl	800020c <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	2b0a      	cmp	r3, #10
 8000b18:	d90b      	bls.n	8000b32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2205      	movs	r2, #5
 8000b2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e09e      	b.n	8000c70 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d0e5      	beq.n	8000b0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7e1b      	ldrb	r3, [r3, #24]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d108      	bne.n	8000b5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	6812      	ldr	r2, [r2, #0]
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	e007      	b.n	8000b6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	6812      	ldr	r2, [r2, #0]
 8000b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	7e5b      	ldrb	r3, [r3, #25]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d108      	bne.n	8000b84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	6812      	ldr	r2, [r2, #0]
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	e007      	b.n	8000b94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	6812      	ldr	r2, [r2, #0]
 8000b8c:	6812      	ldr	r2, [r2, #0]
 8000b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	7e9b      	ldrb	r3, [r3, #26]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d108      	bne.n	8000bae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	6812      	ldr	r2, [r2, #0]
 8000ba4:	6812      	ldr	r2, [r2, #0]
 8000ba6:	f042 0220 	orr.w	r2, r2, #32
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	e007      	b.n	8000bbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	6812      	ldr	r2, [r2, #0]
 8000bb8:	f022 0220 	bic.w	r2, r2, #32
 8000bbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	7edb      	ldrb	r3, [r3, #27]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d108      	bne.n	8000bd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	6812      	ldr	r2, [r2, #0]
 8000bd0:	f022 0210 	bic.w	r2, r2, #16
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	e007      	b.n	8000be8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	6812      	ldr	r2, [r2, #0]
 8000be0:	6812      	ldr	r2, [r2, #0]
 8000be2:	f042 0210 	orr.w	r2, r2, #16
 8000be6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	7f1b      	ldrb	r3, [r3, #28]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d108      	bne.n	8000c02 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	6812      	ldr	r2, [r2, #0]
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	f042 0208 	orr.w	r2, r2, #8
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	e007      	b.n	8000c12 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	6812      	ldr	r2, [r2, #0]
 8000c0a:	6812      	ldr	r2, [r2, #0]
 8000c0c:	f022 0208 	bic.w	r2, r2, #8
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	7f5b      	ldrb	r3, [r3, #29]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d108      	bne.n	8000c2c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	6812      	ldr	r2, [r2, #0]
 8000c22:	6812      	ldr	r2, [r2, #0]
 8000c24:	f042 0204 	orr.w	r2, r2, #4
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	e007      	b.n	8000c3c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	6812      	ldr	r2, [r2, #0]
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	f022 0204 	bic.w	r2, r2, #4
 8000c3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	6891      	ldr	r1, [r2, #8]
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	68d2      	ldr	r2, [r2, #12]
 8000c48:	4311      	orrs	r1, r2
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	6912      	ldr	r2, [r2, #16]
 8000c4e:	4311      	orrs	r1, r2
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	6952      	ldr	r2, [r2, #20]
 8000c54:	4311      	orrs	r1, r2
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	6852      	ldr	r2, [r2, #4]
 8000c5a:	3a01      	subs	r2, #1
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b087      	sub	sp, #28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c8e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c90:	7cfb      	ldrb	r3, [r7, #19]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d003      	beq.n	8000c9e <HAL_CAN_ConfigFilter+0x26>
 8000c96:	7cfb      	ldrb	r3, [r7, #19]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	f040 80aa 	bne.w	8000df2 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ca4:	f043 0201 	orr.w	r2, r3, #1
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	f003 031f 	and.w	r3, r3, #31
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	401a      	ands	r2, r3
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	69db      	ldr	r3, [r3, #28]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d123      	bne.n	8000d20 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cfa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3248      	adds	r2, #72	; 0x48
 8000d00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	6892      	ldr	r2, [r2, #8]
 8000d0c:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	6812      	ldr	r2, [r2, #0]
 8000d12:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d16:	6979      	ldr	r1, [r7, #20]
 8000d18:	3348      	adds	r3, #72	; 0x48
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	440b      	add	r3, r1
 8000d1e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	69db      	ldr	r3, [r3, #28]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d122      	bne.n	8000d6e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	431a      	orrs	r2, r3
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d48:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3248      	adds	r2, #72	; 0x48
 8000d4e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	6892      	ldr	r2, [r2, #8]
 8000d5a:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	68d2      	ldr	r2, [r2, #12]
 8000d60:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d62:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d64:	6979      	ldr	r1, [r7, #20]
 8000d66:	3348      	adds	r3, #72	; 0x48
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	440b      	add	r3, r1
 8000d6c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d109      	bne.n	8000d8a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	401a      	ands	r2, r3
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000d88:	e007      	b.n	8000d9a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	431a      	orrs	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	691b      	ldr	r3, [r3, #16]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d109      	bne.n	8000db6 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	401a      	ands	r2, r3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000db4:	e007      	b.n	8000dc6 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	6a1b      	ldr	r3, [r3, #32]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d107      	bne.n	8000dde <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000de4:	f023 0201 	bic.w	r2, r3, #1
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e006      	b.n	8000e00 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
  }
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	371c      	adds	r7, #28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b084      	sub	sp, #16
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d12e      	bne.n	8000e7c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2202      	movs	r2, #2
 8000e22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	6812      	ldr	r2, [r2, #0]
 8000e30:	f022 0201 	bic.w	r2, r2, #1
 8000e34:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e36:	f7ff f9e9 	bl	800020c <HAL_GetTick>
 8000e3a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e3c:	e012      	b.n	8000e64 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e3e:	f7ff f9e5 	bl	800020c <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	2b0a      	cmp	r3, #10
 8000e4a:	d90b      	bls.n	8000e64 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2205      	movs	r2, #5
 8000e5c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e012      	b.n	8000e8a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1e5      	bne.n	8000e3e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e006      	b.n	8000e8a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e80:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
  }
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b089      	sub	sp, #36	; 0x24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ea6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000eb0:	7ffb      	ldrb	r3, [r7, #31]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d003      	beq.n	8000ebe <HAL_CAN_AddTxMessage+0x2c>
 8000eb6:	7ffb      	ldrb	r3, [r7, #31]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	f040 80b4 	bne.w	8001026 <HAL_CAN_AddTxMessage+0x194>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10a      	bne.n	8000ede <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d105      	bne.n	8000ede <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 809c 	beq.w	8001016 <HAL_CAN_AddTxMessage+0x184>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	0e1b      	lsrs	r3, r3, #24
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d907      	bls.n	8000efe <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e09a      	b.n	8001034 <HAL_CAN_AddTxMessage+0x1a2>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000efe:	2201      	movs	r2, #1
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10d      	bne.n	8000f2c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6819      	ldr	r1, [r3, #0]
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	3318      	adds	r3, #24
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	440b      	add	r3, r1
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	e00f      	b.n	8000f4c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	6819      	ldr	r1, [r3, #0]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f3a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	68db      	ldr	r3, [r3, #12]
                                                           pHeader->IDE |
 8000f40:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3318      	adds	r3, #24
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	440b      	add	r3, r1
 8000f4a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6819      	ldr	r1, [r3, #0]
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3318      	adds	r3, #24
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	7d1b      	ldrb	r3, [r3, #20]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d111      	bne.n	8000f8c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6819      	ldr	r1, [r3, #0]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	3318      	adds	r3, #24
 8000f74:	011b      	lsls	r3, r3, #4
 8000f76:	4413      	add	r3, r2
 8000f78:	3304      	adds	r3, #4
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3318      	adds	r3, #24
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	440b      	add	r3, r1
 8000f88:	3304      	adds	r3, #4
 8000f8a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6819      	ldr	r1, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3307      	adds	r3, #7
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	061a      	lsls	r2, r3, #24
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3306      	adds	r3, #6
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	041b      	lsls	r3, r3, #16
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3305      	adds	r3, #5
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	4313      	orrs	r3, r2
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	3204      	adds	r2, #4
 8000fb0:	7812      	ldrb	r2, [r2, #0]
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	440b      	add	r3, r1
 8000fba:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000fbe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6819      	ldr	r1, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3303      	adds	r3, #3
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	061a      	lsls	r2, r3, #24
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3302      	adds	r3, #2
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	041b      	lsls	r3, r3, #16
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	7812      	ldrb	r2, [r2, #0]
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	011b      	lsls	r3, r3, #4
 8000fea:	440b      	add	r3, r1
 8000fec:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000ff0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6819      	ldr	r1, [r3, #0]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3318      	adds	r3, #24
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	4413      	add	r3, r2
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f043 0201 	orr.w	r2, r3, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3318      	adds	r3, #24
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	440b      	add	r3, r1
 8001010:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e00e      	b.n	8001034 <HAL_CAN_AddTxMessage+0x1a2>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e006      	b.n	8001034 <HAL_CAN_AddTxMessage+0x1a2>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
  }
}
 8001034:	4618      	mov	r0, r3
 8001036:	3724      	adds	r7, #36	; 0x24
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800103e:	b480      	push	{r7}
 8001040:	b087      	sub	sp, #28
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001052:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001054:	7dfb      	ldrb	r3, [r7, #23]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d003      	beq.n	8001062 <HAL_CAN_GetRxMessage+0x24>
 800105a:	7dfb      	ldrb	r3, [r7, #23]
 800105c:	2b02      	cmp	r3, #2
 800105e:	f040 80f4 	bne.w	800124a <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d10e      	bne.n	8001086 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d116      	bne.n	80010a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e0e8      	b.n	8001258 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d107      	bne.n	80010a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0d9      	b.n	8001258 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	331b      	adds	r3, #27
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	4413      	add	r3, r2
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0204 	and.w	r2, r3, #4
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10c      	bne.n	80010dc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	331b      	adds	r3, #27
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	4413      	add	r3, r2
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	0d5b      	lsrs	r3, r3, #21
 80010d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	e00b      	b.n	80010f4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	331b      	adds	r3, #27
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	4413      	add	r3, r2
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	08db      	lsrs	r3, r3, #3
 80010ec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	331b      	adds	r3, #27
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	4413      	add	r3, r2
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	085b      	lsrs	r3, r3, #1
 8001104:	f003 0201 	and.w	r2, r3, #1
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	331b      	adds	r3, #27
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	4413      	add	r3, r2
 8001118:	3304      	adds	r3, #4
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 020f 	and.w	r2, r3, #15
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	331b      	adds	r3, #27
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	4413      	add	r3, r2
 8001130:	3304      	adds	r3, #4
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	b2da      	uxtb	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	331b      	adds	r3, #27
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	4413      	add	r3, r2
 8001148:	3304      	adds	r3, #4
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	0c1b      	lsrs	r3, r3, #16
 800114e:	b29a      	uxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	4413      	add	r3, r2
 800115e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	6811      	ldr	r1, [r2, #0]
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	440a      	add	r2, r1
 8001178:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 800117c:	6812      	ldr	r2, [r2, #0]
 800117e:	0a12      	lsrs	r2, r2, #8
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	3302      	adds	r3, #2
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	6811      	ldr	r1, [r2, #0]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	440a      	add	r2, r1
 8001192:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8001196:	6812      	ldr	r2, [r2, #0]
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	3303      	adds	r3, #3
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	6811      	ldr	r1, [r2, #0]
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	440a      	add	r2, r1
 80011ac:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80011b0:	6812      	ldr	r2, [r2, #0]
 80011b2:	0e12      	lsrs	r2, r2, #24
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	3304      	adds	r3, #4
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	6811      	ldr	r1, [r2, #0]
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	0112      	lsls	r2, r2, #4
 80011c4:	440a      	add	r2, r1
 80011c6:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	3305      	adds	r3, #5
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	6811      	ldr	r1, [r2, #0]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	440a      	add	r2, r1
 80011de:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80011e2:	6812      	ldr	r2, [r2, #0]
 80011e4:	0a12      	lsrs	r2, r2, #8
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	3306      	adds	r3, #6
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	6811      	ldr	r1, [r2, #0]
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	440a      	add	r2, r1
 80011f8:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	0c12      	lsrs	r2, r2, #16
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	3307      	adds	r3, #7
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	6811      	ldr	r1, [r2, #0]
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	0112      	lsls	r2, r2, #4
 8001210:	440a      	add	r2, r1
 8001212:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	0e12      	lsrs	r2, r2, #24
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d108      	bne.n	8001236 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	68d2      	ldr	r2, [r2, #12]
 800122e:	f042 0220 	orr.w	r2, r2, #32
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	e007      	b.n	8001246 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	6912      	ldr	r2, [r2, #16]
 8001240:	f042 0220 	orr.w	r2, r2, #32
 8001244:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e006      	b.n	8001258 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
  }
}
 8001258:	4618      	mov	r0, r3
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001262:	b480      	push	{r7}
 8001264:	b085      	sub	sp, #20
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001272:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d002      	beq.n	8001280 <HAL_CAN_ActivateNotification+0x1e>
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d109      	bne.n	8001294 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	6951      	ldr	r1, [r2, #20]
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001290:	2300      	movs	r3, #0
 8001292:	e006      	b.n	80012a2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
  }
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d07c      	beq.n	80013ec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d023      	beq.n	8001344 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2201      	movs	r2, #1
 8001302:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f97d 	bl	800160e <HAL_CAN_TxMailbox0CompleteCallback>
 8001314:	e016      	b.n	8001344 <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d004      	beq.n	800132a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
 8001328:	e00c      	b.n	8001344 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
 800133c:	e002      	b.n	8001344 <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f980 	bl	8001644 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134a:	2b00      	cmp	r3, #0
 800134c:	d024      	beq.n	8001398 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001356:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f95c 	bl	8001620 <HAL_CAN_TxMailbox1CompleteCallback>
 8001368:	e016      	b.n	8001398 <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
 800137c:	e00c      	b.n	8001398 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
 8001390:	e002      	b.n	8001398 <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f95f 	bl	8001656 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d024      	beq.n	80013ec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 f93b 	bl	8001632 <HAL_CAN_TxMailbox2CompleteCallback>
 80013bc:	e016      	b.n	80013ec <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d004      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
 80013d0:	e00c      	b.n	80013ec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d004      	beq.n	80013e6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
 80013e4:	e002      	b.n	80013ec <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f93e 	bl	8001668 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00c      	beq.n	8001410 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d007      	beq.n	8001410 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001406:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2210      	movs	r2, #16
 800140e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2208      	movs	r2, #8
 800142a:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f924 	bl	800167a <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d009      	beq.n	8001450 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f004 f930 	bl	80056b0 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00c      	beq.n	8001474 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	2b00      	cmp	r3, #0
 8001462:	d007      	beq.n	8001474 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800146a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2210      	movs	r2, #16
 8001472:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00b      	beq.n	8001496 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2208      	movs	r2, #8
 800148e:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 f904 	bl	800169e <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	f003 0310 	and.w	r3, r3, #16
 800149c:	2b00      	cmp	r3, #0
 800149e:	d009      	beq.n	80014b4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f8ec 	bl	800168c <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	f003 0310 	and.w	r3, r3, #16
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d006      	beq.n	80014d6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2210      	movs	r2, #16
 80014ce:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 f8ed 	bl	80016b0 <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00b      	beq.n	80014f8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2208      	movs	r2, #8
 80014f0:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f8e5 	bl	80016c2 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d075      	beq.n	80015ee <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	d06c      	beq.n	80015e6 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800150c:	6a3b      	ldr	r3, [r7, #32]
 800150e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001512:	2b00      	cmp	r3, #0
 8001514:	d008      	beq.n	8001528 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800152e:	2b00      	cmp	r3, #0
 8001530:	d008      	beq.n	8001544 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	f043 0302 	orr.w	r3, r3, #2
 8001542:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001544:	6a3b      	ldr	r3, [r7, #32]
 8001546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154a:	2b00      	cmp	r3, #0
 800154c:	d008      	beq.n	8001560 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001566:	2b00      	cmp	r3, #0
 8001568:	d03d      	beq.n	80015e6 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001570:	2b00      	cmp	r3, #0
 8001572:	d038      	beq.n	80015e6 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800157a:	2b30      	cmp	r3, #48	; 0x30
 800157c:	d017      	beq.n	80015ae <HAL_CAN_IRQHandler+0x302>
 800157e:	2b30      	cmp	r3, #48	; 0x30
 8001580:	d804      	bhi.n	800158c <HAL_CAN_IRQHandler+0x2e0>
 8001582:	2b10      	cmp	r3, #16
 8001584:	d009      	beq.n	800159a <HAL_CAN_IRQHandler+0x2ee>
 8001586:	2b20      	cmp	r3, #32
 8001588:	d00c      	beq.n	80015a4 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800158a:	e024      	b.n	80015d6 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800158c:	2b50      	cmp	r3, #80	; 0x50
 800158e:	d018      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x316>
 8001590:	2b60      	cmp	r3, #96	; 0x60
 8001592:	d01b      	beq.n	80015cc <HAL_CAN_IRQHandler+0x320>
 8001594:	2b40      	cmp	r3, #64	; 0x40
 8001596:	d00f      	beq.n	80015b8 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001598:	e01d      	b.n	80015d6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	f043 0308 	orr.w	r3, r3, #8
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015a2:	e018      	b.n	80015d6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	f043 0310 	orr.w	r3, r3, #16
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015ac:	e013      	b.n	80015d6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	f043 0320 	orr.w	r3, r3, #32
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015b6:	e00e      	b.n	80015d6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015c0:	e009      	b.n	80015d6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015ca:	e004      	b.n	80015d6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015d4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	6992      	ldr	r2, [r2, #24]
 80015e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015e4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2204      	movs	r2, #4
 80015ec:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d008      	beq.n	8001606 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 f867 	bl	80016d4 <HAL_CAN_ErrorCallback>
  }
}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	; 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr

0800169e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
	...

080016e8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <NVIC_SetPriorityGrouping+0x44>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171a:	4a04      	ldr	r2, [pc, #16]	; (800172c <NVIC_SetPriorityGrouping+0x44>)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60d3      	str	r3, [r2, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <NVIC_GetPriorityGrouping+0x18>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	f003 0307 	and.w	r3, r3, #7
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001756:	4908      	ldr	r1, [pc, #32]	; (8001778 <NVIC_EnableIRQ+0x2c>)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	095b      	lsrs	r3, r3, #5
 800175e:	79fa      	ldrb	r2, [r7, #7]
 8001760:	f002 021f 	and.w	r2, r2, #31
 8001764:	2001      	movs	r0, #1
 8001766:	fa00 f202 	lsl.w	r2, r0, r2
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100

0800177c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	da0b      	bge.n	80017a8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	490d      	ldr	r1, [pc, #52]	; (80017c8 <NVIC_SetPriority+0x4c>)
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	3b04      	subs	r3, #4
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a6:	e009      	b.n	80017bc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	4908      	ldr	r1, [pc, #32]	; (80017cc <NVIC_SetPriority+0x50>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	0112      	lsls	r2, r2, #4
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	440b      	add	r3, r1
 80017b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	2201      	movs	r2, #1
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	1e5a      	subs	r2, r3, #1
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	401a      	ands	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001816:	2101      	movs	r1, #1
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	1e59      	subs	r1, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	4313      	orrs	r3, r2
         );
}
 8001826:	4618      	mov	r0, r3
 8001828:	3724      	adds	r7, #36	; 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001840:	d301      	bcc.n	8001846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001842:	2301      	movs	r3, #1
 8001844:	e00f      	b.n	8001866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <SysTick_Config+0x40>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184e:	210f      	movs	r1, #15
 8001850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001854:	f7ff ff92 	bl	800177c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <SysTick_Config+0x40>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185e:	4b04      	ldr	r3, [pc, #16]	; (8001870 <SysTick_Config+0x40>)
 8001860:	2207      	movs	r2, #7
 8001862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	e000e010 	.word	0xe000e010

08001874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ff33 	bl	80016e8 <NVIC_SetPriorityGrouping>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188a:	b580      	push	{r7, lr}
 800188c:	b086      	sub	sp, #24
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
 8001896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800189c:	f7ff ff48 	bl	8001730 <NVIC_GetPriorityGrouping>
 80018a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	6978      	ldr	r0, [r7, #20]
 80018a8:	f7ff ff92 	bl	80017d0 <NVIC_EncodePriority>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff61 	bl	800177c <NVIC_SetPriority>
}
 80018ba:	bf00      	nop
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff3b 	bl	800174c <NVIC_EnableIRQ>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ffa2 	bl	8001830 <SysTick_Config>
 80018ec:	4603      	mov	r3, r0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b08b      	sub	sp, #44	; 0x2c
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
 800191a:	e127      	b.n	8001b6c <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800191c:	2201      	movs	r2, #1
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	429a      	cmp	r2, r3
 8001936:	f040 8116 	bne.w	8001b66 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b12      	cmp	r3, #18
 8001940:	d034      	beq.n	80019ac <HAL_GPIO_Init+0xb4>
 8001942:	2b12      	cmp	r3, #18
 8001944:	d80d      	bhi.n	8001962 <HAL_GPIO_Init+0x6a>
 8001946:	2b02      	cmp	r3, #2
 8001948:	d02b      	beq.n	80019a2 <HAL_GPIO_Init+0xaa>
 800194a:	2b02      	cmp	r3, #2
 800194c:	d804      	bhi.n	8001958 <HAL_GPIO_Init+0x60>
 800194e:	2b00      	cmp	r3, #0
 8001950:	d031      	beq.n	80019b6 <HAL_GPIO_Init+0xbe>
 8001952:	2b01      	cmp	r3, #1
 8001954:	d01c      	beq.n	8001990 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001956:	e048      	b.n	80019ea <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001958:	2b03      	cmp	r3, #3
 800195a:	d043      	beq.n	80019e4 <HAL_GPIO_Init+0xec>
 800195c:	2b11      	cmp	r3, #17
 800195e:	d01b      	beq.n	8001998 <HAL_GPIO_Init+0xa0>
          break;
 8001960:	e043      	b.n	80019ea <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001962:	4a87      	ldr	r2, [pc, #540]	; (8001b80 <HAL_GPIO_Init+0x288>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d026      	beq.n	80019b6 <HAL_GPIO_Init+0xbe>
 8001968:	4a85      	ldr	r2, [pc, #532]	; (8001b80 <HAL_GPIO_Init+0x288>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d806      	bhi.n	800197c <HAL_GPIO_Init+0x84>
 800196e:	4a85      	ldr	r2, [pc, #532]	; (8001b84 <HAL_GPIO_Init+0x28c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d020      	beq.n	80019b6 <HAL_GPIO_Init+0xbe>
 8001974:	4a84      	ldr	r2, [pc, #528]	; (8001b88 <HAL_GPIO_Init+0x290>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d01d      	beq.n	80019b6 <HAL_GPIO_Init+0xbe>
          break;
 800197a:	e036      	b.n	80019ea <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800197c:	4a83      	ldr	r2, [pc, #524]	; (8001b8c <HAL_GPIO_Init+0x294>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d019      	beq.n	80019b6 <HAL_GPIO_Init+0xbe>
 8001982:	4a83      	ldr	r2, [pc, #524]	; (8001b90 <HAL_GPIO_Init+0x298>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d016      	beq.n	80019b6 <HAL_GPIO_Init+0xbe>
 8001988:	4a82      	ldr	r2, [pc, #520]	; (8001b94 <HAL_GPIO_Init+0x29c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0xbe>
          break;
 800198e:	e02c      	b.n	80019ea <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	623b      	str	r3, [r7, #32]
          break;
 8001996:	e028      	b.n	80019ea <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	3304      	adds	r3, #4
 800199e:	623b      	str	r3, [r7, #32]
          break;
 80019a0:	e023      	b.n	80019ea <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	3308      	adds	r3, #8
 80019a8:	623b      	str	r3, [r7, #32]
          break;
 80019aa:	e01e      	b.n	80019ea <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	330c      	adds	r3, #12
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	e019      	b.n	80019ea <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019be:	2304      	movs	r3, #4
 80019c0:	623b      	str	r3, [r7, #32]
          break;
 80019c2:	e012      	b.n	80019ea <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019cc:	2308      	movs	r3, #8
 80019ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	611a      	str	r2, [r3, #16]
          break;
 80019d6:	e008      	b.n	80019ea <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d8:	2308      	movs	r3, #8
 80019da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	615a      	str	r2, [r3, #20]
          break;
 80019e2:	e002      	b.n	80019ea <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
          break;
 80019e8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2bff      	cmp	r3, #255	; 0xff
 80019ee:	d801      	bhi.n	80019f4 <HAL_GPIO_Init+0xfc>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	e001      	b.n	80019f8 <HAL_GPIO_Init+0x100>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3304      	adds	r3, #4
 80019f8:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2bff      	cmp	r3, #255	; 0xff
 80019fe:	d802      	bhi.n	8001a06 <HAL_GPIO_Init+0x10e>
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	e002      	b.n	8001a0c <HAL_GPIO_Init+0x114>
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	3b08      	subs	r3, #8
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	210f      	movs	r1, #15
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	401a      	ands	r2, r3
 8001a1e:	6a39      	ldr	r1, [r7, #32]
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	431a      	orrs	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8096 	beq.w	8001b66 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a3a:	4a57      	ldr	r2, [pc, #348]	; (8001b98 <HAL_GPIO_Init+0x2a0>)
 8001a3c:	4b56      	ldr	r3, [pc, #344]	; (8001b98 <HAL_GPIO_Init+0x2a0>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6193      	str	r3, [r2, #24]
 8001a46:	4b54      	ldr	r3, [pc, #336]	; (8001b98 <HAL_GPIO_Init+0x2a0>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8001a52:	4a52      	ldr	r2, [pc, #328]	; (8001b9c <HAL_GPIO_Init+0x2a4>)
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	220f      	movs	r2, #15
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	4013      	ands	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a49      	ldr	r2, [pc, #292]	; (8001ba0 <HAL_GPIO_Init+0x2a8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_GPIO_Init+0x1ae>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a48      	ldr	r2, [pc, #288]	; (8001ba4 <HAL_GPIO_Init+0x2ac>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00d      	beq.n	8001aa2 <HAL_GPIO_Init+0x1aa>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a47      	ldr	r2, [pc, #284]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_Init+0x1a6>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a46      	ldr	r2, [pc, #280]	; (8001bac <HAL_GPIO_Init+0x2b4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d101      	bne.n	8001a9a <HAL_GPIO_Init+0x1a2>
 8001a96:	2303      	movs	r3, #3
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x1b0>
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	e004      	b.n	8001aa8 <HAL_GPIO_Init+0x1b0>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e002      	b.n	8001aa8 <HAL_GPIO_Init+0x1b0>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_GPIO_Init+0x1b0>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aaa:	f002 0203 	and.w	r2, r2, #3
 8001aae:	0092      	lsls	r2, r2, #2
 8001ab0:	4093      	lsls	r3, r2
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001ab8:	4938      	ldr	r1, [pc, #224]	; (8001b9c <HAL_GPIO_Init+0x2a4>)
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	3302      	adds	r3, #2
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d006      	beq.n	8001ae0 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ad2:	4937      	ldr	r1, [pc, #220]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001ad4:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]
 8001ade:	e006      	b.n	8001aee <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ae0:	4933      	ldr	r1, [pc, #204]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001ae2:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4013      	ands	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d006      	beq.n	8001b08 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001afa:	492d      	ldr	r1, [pc, #180]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001afc:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	604b      	str	r3, [r1, #4]
 8001b06:	e006      	b.n	8001b16 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b08:	4929      	ldr	r1, [pc, #164]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001b0a:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	4013      	ands	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b22:	4923      	ldr	r1, [pc, #140]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001b24:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
 8001b2e:	e006      	b.n	8001b3e <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b30:	491f      	ldr	r1, [pc, #124]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001b32:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b4a:	4919      	ldr	r1, [pc, #100]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	60cb      	str	r3, [r1, #12]
 8001b56:	e006      	b.n	8001b66 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b58:	4915      	ldr	r1, [pc, #84]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	4013      	ands	r3, r2
 8001b64:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	3301      	adds	r3, #1
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	2b0f      	cmp	r3, #15
 8001b70:	f67f aed4 	bls.w	800191c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001b74:	bf00      	nop
 8001b76:	372c      	adds	r7, #44	; 0x2c
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	10210000 	.word	0x10210000
 8001b84:	10110000 	.word	0x10110000
 8001b88:	10120000 	.word	0x10120000
 8001b8c:	10310000 	.word	0x10310000
 8001b90:	10320000 	.word	0x10320000
 8001b94:	10220000 	.word	0x10220000
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010000 	.word	0x40010000
 8001ba0:	40010800 	.word	0x40010800
 8001ba4:	40010c00 	.word	0x40010c00
 8001ba8:	40011000 	.word	0x40011000
 8001bac:	40011400 	.word	0x40011400
 8001bb0:	40010400 	.word	0x40010400

08001bb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
 8001bd0:	e001      	b.n	8001bd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	807b      	strh	r3, [r7, #2]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bf2:	787b      	ldrb	r3, [r7, #1]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf8:	887a      	ldrh	r2, [r7, #2]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bfe:	e003      	b.n	8001c08 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	041a      	lsls	r2, r3, #16
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	611a      	str	r2, [r3, #16]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	887b      	ldrh	r3, [r7, #2]
 8001c24:	405a      	eors	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	60da      	str	r2, [r3, #12]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 8087 	beq.w	8001d5c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c4e:	4b92      	ldr	r3, [pc, #584]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d00c      	beq.n	8001c74 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c5a:	4b8f      	ldr	r3, [pc, #572]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d112      	bne.n	8001c8c <HAL_RCC_OscConfig+0x58>
 8001c66:	4b8c      	ldr	r3, [pc, #560]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c72:	d10b      	bne.n	8001c8c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c74:	4b88      	ldr	r3, [pc, #544]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d06c      	beq.n	8001d5a <HAL_RCC_OscConfig+0x126>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d168      	bne.n	8001d5a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e22d      	b.n	80020e8 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c94:	d106      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x70>
 8001c96:	4a80      	ldr	r2, [pc, #512]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001c98:	4b7f      	ldr	r3, [pc, #508]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e02e      	b.n	8001d02 <HAL_RCC_OscConfig+0xce>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10c      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x92>
 8001cac:	4a7a      	ldr	r2, [pc, #488]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001cae:	4b7a      	ldr	r3, [pc, #488]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	4a77      	ldr	r2, [pc, #476]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001cba:	4b77      	ldr	r3, [pc, #476]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	e01d      	b.n	8001d02 <HAL_RCC_OscConfig+0xce>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cce:	d10c      	bne.n	8001cea <HAL_RCC_OscConfig+0xb6>
 8001cd0:	4a71      	ldr	r2, [pc, #452]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001cd2:	4b71      	ldr	r3, [pc, #452]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4a6e      	ldr	r2, [pc, #440]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001cde:	4b6e      	ldr	r3, [pc, #440]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	e00b      	b.n	8001d02 <HAL_RCC_OscConfig+0xce>
 8001cea:	4a6b      	ldr	r2, [pc, #428]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001cec:	4b6a      	ldr	r3, [pc, #424]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4a68      	ldr	r2, [pc, #416]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001cf8:	4b67      	ldr	r3, [pc, #412]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d00:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d013      	beq.n	8001d32 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0a:	f7fe fa7f 	bl	800020c <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d12:	f7fe fa7b 	bl	800020c <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b64      	cmp	r3, #100	; 0x64
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e1e1      	b.n	80020e8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d24:	4b5c      	ldr	r3, [pc, #368]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0xde>
 8001d30:	e014      	b.n	8001d5c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7fe fa6b 	bl	800020c <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d3a:	f7fe fa67 	bl	800020c <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b64      	cmp	r3, #100	; 0x64
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e1cd      	b.n	80020e8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4c:	4b52      	ldr	r3, [pc, #328]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f0      	bne.n	8001d3a <HAL_RCC_OscConfig+0x106>
 8001d58:	e000      	b.n	8001d5c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d063      	beq.n	8001e30 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d68:	4b4b      	ldr	r3, [pc, #300]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00b      	beq.n	8001d8c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d74:	4b48      	ldr	r3, [pc, #288]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d11c      	bne.n	8001dba <HAL_RCC_OscConfig+0x186>
 8001d80:	4b45      	ldr	r3, [pc, #276]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d116      	bne.n	8001dba <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8c:	4b42      	ldr	r3, [pc, #264]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_OscConfig+0x170>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e1a1      	b.n	80020e8 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	493c      	ldr	r1, [pc, #240]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001da6:	4b3c      	ldr	r3, [pc, #240]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db8:	e03a      	b.n	8001e30 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d020      	beq.n	8001e04 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc2:	4b36      	ldr	r3, [pc, #216]	; (8001e9c <HAL_RCC_OscConfig+0x268>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7fe fa20 	bl	800020c <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd0:	f7fe fa1c 	bl	800020c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e182      	b.n	80020e8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de2:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dee:	492a      	ldr	r1, [pc, #168]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001df0:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]
 8001e02:	e015      	b.n	8001e30 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e04:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <HAL_RCC_OscConfig+0x268>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7fe f9ff 	bl	800020c <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e12:	f7fe f9fb 	bl	800020c <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e161      	b.n	80020e8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e24:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f0      	bne.n	8001e12 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d039      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d019      	beq.n	8001e78 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e44:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7fe f9df 	bl	800020c <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e52:	f7fe f9db 	bl	800020c <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e141      	b.n	80020e8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <HAL_RCC_OscConfig+0x264>)
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001e70:	2001      	movs	r0, #1
 8001e72:	f000 fae3 	bl	800243c <RCC_Delay>
 8001e76:	e01b      	b.n	8001eb0 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7e:	f7fe f9c5 	bl	800020c <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e84:	e00e      	b.n	8001ea4 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e86:	f7fe f9c1 	bl	800020c <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d907      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e127      	b.n	80020e8 <HAL_RCC_OscConfig+0x4b4>
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	42420000 	.word	0x42420000
 8001ea0:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea4:	4b92      	ldr	r3, [pc, #584]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1ea      	bne.n	8001e86 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80a6 	beq.w	800200a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec2:	4b8b      	ldr	r3, [pc, #556]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10d      	bne.n	8001eea <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	4a88      	ldr	r2, [pc, #544]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001ed0:	4b87      	ldr	r3, [pc, #540]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	61d3      	str	r3, [r2, #28]
 8001eda:	4b85      	ldr	r3, [pc, #532]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eea:	4b82      	ldr	r3, [pc, #520]	; (80020f4 <HAL_RCC_OscConfig+0x4c0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d118      	bne.n	8001f28 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef6:	4a7f      	ldr	r2, [pc, #508]	; (80020f4 <HAL_RCC_OscConfig+0x4c0>)
 8001ef8:	4b7e      	ldr	r3, [pc, #504]	; (80020f4 <HAL_RCC_OscConfig+0x4c0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f02:	f7fe f983 	bl	800020c <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0a:	f7fe f97f 	bl	800020c <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b64      	cmp	r3, #100	; 0x64
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e0e5      	b.n	80020e8 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	4b75      	ldr	r3, [pc, #468]	; (80020f4 <HAL_RCC_OscConfig+0x4c0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x30a>
 8001f30:	4a6f      	ldr	r2, [pc, #444]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001f32:	4b6f      	ldr	r3, [pc, #444]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6213      	str	r3, [r2, #32]
 8001f3c:	e02d      	b.n	8001f9a <HAL_RCC_OscConfig+0x366>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x32c>
 8001f46:	4a6a      	ldr	r2, [pc, #424]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001f48:	4b69      	ldr	r3, [pc, #420]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	6213      	str	r3, [r2, #32]
 8001f52:	4a67      	ldr	r2, [pc, #412]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001f54:	4b66      	ldr	r3, [pc, #408]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f023 0304 	bic.w	r3, r3, #4
 8001f5c:	6213      	str	r3, [r2, #32]
 8001f5e:	e01c      	b.n	8001f9a <HAL_RCC_OscConfig+0x366>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d10c      	bne.n	8001f82 <HAL_RCC_OscConfig+0x34e>
 8001f68:	4a61      	ldr	r2, [pc, #388]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001f6a:	4b61      	ldr	r3, [pc, #388]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	f043 0304 	orr.w	r3, r3, #4
 8001f72:	6213      	str	r3, [r2, #32]
 8001f74:	4a5e      	ldr	r2, [pc, #376]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001f76:	4b5e      	ldr	r3, [pc, #376]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6213      	str	r3, [r2, #32]
 8001f80:	e00b      	b.n	8001f9a <HAL_RCC_OscConfig+0x366>
 8001f82:	4a5b      	ldr	r2, [pc, #364]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001f84:	4b5a      	ldr	r3, [pc, #360]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	6213      	str	r3, [r2, #32]
 8001f8e:	4a58      	ldr	r2, [pc, #352]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001f90:	4b57      	ldr	r3, [pc, #348]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d015      	beq.n	8001fce <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa2:	f7fe f933 	bl	800020c <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7fe f92f 	bl	800020c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e093      	b.n	80020e8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc0:	4b4b      	ldr	r3, [pc, #300]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0ee      	beq.n	8001faa <HAL_RCC_OscConfig+0x376>
 8001fcc:	e014      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fce:	f7fe f91d 	bl	800020c <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7fe f919 	bl	800020c <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e07d      	b.n	80020e8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fec:	4b40      	ldr	r3, [pc, #256]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1ee      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ff8:	7dfb      	ldrb	r3, [r7, #23]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d105      	bne.n	800200a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffe:	4a3c      	ldr	r2, [pc, #240]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8002000:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002008:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d069      	beq.n	80020e6 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002012:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b08      	cmp	r3, #8
 800201c:	d061      	beq.n	80020e2 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d146      	bne.n	80020b4 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7fe f8ee 	bl	800020c <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002034:	f7fe f8ea 	bl	800020c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e050      	b.n	80020e8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002046:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205a:	d108      	bne.n	800206e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800205c:	4924      	ldr	r1, [pc, #144]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 800205e:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800206e:	4820      	ldr	r0, [pc, #128]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8002070:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a19      	ldr	r1, [r3, #32]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	430b      	orrs	r3, r1
 8002082:	4313      	orrs	r3, r2
 8002084:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002086:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8002088:	2201      	movs	r2, #1
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7fe f8be 	bl	800020c <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002094:	f7fe f8ba 	bl	800020c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e020      	b.n	80020e8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a6:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0x460>
 80020b2:	e018      	b.n	80020e6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b4:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7fe f8a7 	bl	800020c <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c2:	f7fe f8a3 	bl	800020c <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e009      	b.n	80020e8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f0      	bne.n	80020c2 <HAL_RCC_OscConfig+0x48e>
 80020e0:	e001      	b.n	80020e6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40007000 	.word	0x40007000
 80020f8:	42420060 	.word	0x42420060

080020fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800210a:	4b7e      	ldr	r3, [pc, #504]	; (8002304 <HAL_RCC_ClockConfig+0x208>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0207 	and.w	r2, r3, #7
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d210      	bcs.n	800213a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002118:	497a      	ldr	r1, [pc, #488]	; (8002304 <HAL_RCC_ClockConfig+0x208>)
 800211a:	4b7a      	ldr	r3, [pc, #488]	; (8002304 <HAL_RCC_ClockConfig+0x208>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 0207 	bic.w	r2, r3, #7
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002128:	4b76      	ldr	r3, [pc, #472]	; (8002304 <HAL_RCC_ClockConfig+0x208>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0207 	and.w	r2, r3, #7
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d001      	beq.n	800213a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e0e0      	b.n	80022fc <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d020      	beq.n	8002188 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002152:	4a6d      	ldr	r2, [pc, #436]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 8002154:	4b6c      	ldr	r3, [pc, #432]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800215c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d005      	beq.n	8002176 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800216a:	4a67      	ldr	r2, [pc, #412]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 800216c:	4b66      	ldr	r3, [pc, #408]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002174:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002176:	4964      	ldr	r1, [pc, #400]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 8002178:	4b63      	ldr	r3, [pc, #396]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d06a      	beq.n	800226a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d107      	bne.n	80021ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219c:	4b5a      	ldr	r3, [pc, #360]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d115      	bne.n	80021d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0a7      	b.n	80022fc <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d107      	bne.n	80021c4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b4:	4b54      	ldr	r3, [pc, #336]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e09b      	b.n	80022fc <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c4:	4b50      	ldr	r3, [pc, #320]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e093      	b.n	80022fc <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d4:	494c      	ldr	r1, [pc, #304]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 80021d6:	4b4c      	ldr	r3, [pc, #304]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f023 0203 	bic.w	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e6:	f7fe f811 	bl	800020c <HAL_GetTick>
 80021ea:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d112      	bne.n	800221a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f4:	e00a      	b.n	800220c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f6:	f7fe f809 	bl	800020c <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	; 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e077      	b.n	80022fc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800220c:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b04      	cmp	r3, #4
 8002216:	d1ee      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xfa>
 8002218:	e027      	b.n	800226a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d11d      	bne.n	800225e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002222:	e00a      	b.n	800223a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002224:	f7fd fff2 	bl	800020c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e060      	b.n	80022fc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800223a:	4b33      	ldr	r3, [pc, #204]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b08      	cmp	r3, #8
 8002244:	d1ee      	bne.n	8002224 <HAL_RCC_ClockConfig+0x128>
 8002246:	e010      	b.n	800226a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002248:	f7fd ffe0 	bl	800020c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	; 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e04e      	b.n	80022fc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800225e:	4b2a      	ldr	r3, [pc, #168]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1ee      	bne.n	8002248 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <HAL_RCC_ClockConfig+0x208>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0207 	and.w	r2, r3, #7
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d910      	bls.n	800229a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002278:	4922      	ldr	r1, [pc, #136]	; (8002304 <HAL_RCC_ClockConfig+0x208>)
 800227a:	4b22      	ldr	r3, [pc, #136]	; (8002304 <HAL_RCC_ClockConfig+0x208>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 0207 	bic.w	r2, r3, #7
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	4313      	orrs	r3, r2
 8002286:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002288:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <HAL_RCC_ClockConfig+0x208>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0207 	and.w	r2, r3, #7
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d001      	beq.n	800229a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e030      	b.n	80022fc <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d008      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a6:	4918      	ldr	r1, [pc, #96]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d009      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022c4:	4910      	ldr	r1, [pc, #64]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022d8:	f000 f81c 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 80022dc:	4601      	mov	r1, r0
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_RCC_ClockConfig+0x20c>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	4a08      	ldr	r2, [pc, #32]	; (800230c <HAL_RCC_ClockConfig+0x210>)
 80022ea:	5cd3      	ldrb	r3, [r2, r3]
 80022ec:	fa21 f303 	lsr.w	r3, r1, r3
 80022f0:	4a07      	ldr	r2, [pc, #28]	; (8002310 <HAL_RCC_ClockConfig+0x214>)
 80022f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7fd ff47 	bl	8000188 <HAL_InitTick>
  
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40022000 	.word	0x40022000
 8002308:	40021000 	.word	0x40021000
 800230c:	080069bc 	.word	0x080069bc
 8002310:	20000010 	.word	0x20000010

08002314 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002314:	b490      	push	{r4, r7}
 8002316:	b08a      	sub	sp, #40	; 0x28
 8002318:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800231a:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800231c:	1d3c      	adds	r4, r7, #4
 800231e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002320:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002324:	4b28      	ldr	r3, [pc, #160]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	2300      	movs	r3, #0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800233e:	4b23      	ldr	r3, [pc, #140]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b04      	cmp	r3, #4
 800234c:	d002      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0x40>
 800234e:	2b08      	cmp	r3, #8
 8002350:	d003      	beq.n	800235a <HAL_RCC_GetSysClockFreq+0x46>
 8002352:	e02d      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002354:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002356:	623b      	str	r3, [r7, #32]
      break;
 8002358:	e02d      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	0c9b      	lsrs	r3, r3, #18
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002366:	4413      	add	r3, r2
 8002368:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800236c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002378:	4b14      	ldr	r3, [pc, #80]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	0c5b      	lsrs	r3, r3, #17
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002386:	4413      	add	r3, r2
 8002388:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800238c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	4a0f      	ldr	r2, [pc, #60]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002392:	fb02 f203 	mul.w	r2, r2, r3
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
 800239e:	e004      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	4a0c      	ldr	r2, [pc, #48]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023a4:	fb02 f303 	mul.w	r3, r2, r3
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	623b      	str	r3, [r7, #32]
      break;
 80023ae:	e002      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023b2:	623b      	str	r3, [r7, #32]
      break;
 80023b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b6:	6a3b      	ldr	r3, [r7, #32]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3728      	adds	r7, #40	; 0x28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc90      	pop	{r4, r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	08006448 	.word	0x08006448
 80023c8:	08006458 	.word	0x08006458
 80023cc:	40021000 	.word	0x40021000
 80023d0:	007a1200 	.word	0x007a1200
 80023d4:	003d0900 	.word	0x003d0900

080023d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023dc:	4b02      	ldr	r3, [pc, #8]	; (80023e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	20000010 	.word	0x20000010

080023ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023f0:	f7ff fff2 	bl	80023d8 <HAL_RCC_GetHCLKFreq>
 80023f4:	4601      	mov	r1, r0
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_RCC_GetPCLK1Freq+0x20>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	4a03      	ldr	r2, [pc, #12]	; (8002410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002402:	5cd3      	ldrb	r3, [r2, r3]
 8002404:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002408:	4618      	mov	r0, r3
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	080069cc 	.word	0x080069cc

08002414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002418:	f7ff ffde 	bl	80023d8 <HAL_RCC_GetHCLKFreq>
 800241c:	4601      	mov	r1, r0
 800241e:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	0adb      	lsrs	r3, r3, #11
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	4a03      	ldr	r2, [pc, #12]	; (8002438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800242a:	5cd3      	ldrb	r3, [r2, r3]
 800242c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002430:	4618      	mov	r0, r3
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	080069cc 	.word	0x080069cc

0800243c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <RCC_Delay+0x34>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <RCC_Delay+0x38>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	0a5b      	lsrs	r3, r3, #9
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002458:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1e5a      	subs	r2, r3, #1
 800245e:	60fa      	str	r2, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f9      	bne.n	8002458 <RCC_Delay+0x1c>
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20000010 	.word	0x20000010
 8002474:	10624dd3 	.word	0x10624dd3

08002478 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d07d      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002494:	2300      	movs	r3, #0
 8002496:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002498:	4b4f      	ldr	r3, [pc, #316]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10d      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024a4:	4a4c      	ldr	r2, [pc, #304]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a6:	4b4c      	ldr	r3, [pc, #304]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ae:	61d3      	str	r3, [r2, #28]
 80024b0:	4b49      	ldr	r3, [pc, #292]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024bc:	2301      	movs	r3, #1
 80024be:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c0:	4b46      	ldr	r3, [pc, #280]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d118      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024cc:	4a43      	ldr	r2, [pc, #268]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ce:	4b43      	ldr	r3, [pc, #268]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d8:	f7fd fe98 	bl	800020c <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	e008      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e0:	f7fd fe94 	bl	800020c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e06d      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f2:	4b3a      	ldr	r3, [pc, #232]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024fe:	4b36      	ldr	r3, [pc, #216]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002506:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d02e      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	429a      	cmp	r2, r3
 800251a:	d027      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800251c:	4b2e      	ldr	r3, [pc, #184]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002524:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002526:	4b2e      	ldr	r3, [pc, #184]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002528:	2201      	movs	r2, #1
 800252a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800252c:	4b2c      	ldr	r3, [pc, #176]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002532:	4a29      	ldr	r2, [pc, #164]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d014      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7fd fe63 	bl	800020c <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002548:	e00a      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254a:	f7fd fe5f 	bl	800020c <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	f241 3288 	movw	r2, #5000	; 0x1388
 8002558:	4293      	cmp	r3, r2
 800255a:	d901      	bls.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e036      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002560:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ee      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800256c:	491a      	ldr	r1, [pc, #104]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800256e:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4313      	orrs	r3, r2
 800257c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800257e:	7dfb      	ldrb	r3, [r7, #23]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002584:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002586:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800258e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800259c:	490e      	ldr	r1, [pc, #56]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025ba:	4907      	ldr	r1, [pc, #28]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40007000 	.word	0x40007000
 80025e0:	42420440 	.word	0x42420440

080025e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80025e4:	b590      	push	{r4, r7, lr}
 80025e6:	b08d      	sub	sp, #52	; 0x34
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025ec:	4b57      	ldr	r3, [pc, #348]	; (800274c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80025ee:	f107 040c 	add.w	r4, r7, #12
 80025f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025f8:	4b55      	ldr	r3, [pc, #340]	; (8002750 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
 8002602:	2300      	movs	r3, #0
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	2300      	movs	r3, #0
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b02      	cmp	r3, #2
 8002616:	f000 8084 	beq.w	8002722 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800261a:	2b10      	cmp	r3, #16
 800261c:	d002      	beq.n	8002624 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800261e:	2b01      	cmp	r3, #1
 8002620:	d049      	beq.n	80026b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
  default: 
    {
      break;
 8002622:	e08d      	b.n	8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->CFGR;
 8002624:	4b4b      	ldr	r3, [pc, #300]	; (8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 800262a:	4b4a      	ldr	r3, [pc, #296]	; (8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8083 	beq.w	800273e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	0c9b      	lsrs	r3, r3, #18
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002644:	4413      	add	r3, r2
 8002646:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800264a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d018      	beq.n	8002688 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002656:	4b3f      	ldr	r3, [pc, #252]	; (8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	0c5b      	lsrs	r3, r3, #17
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002664:	4413      	add	r3, r2
 8002666:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00d      	beq.n	8002692 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002676:	4a38      	ldr	r2, [pc, #224]	; (8002758 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	6a3a      	ldr	r2, [r7, #32]
 8002680:	fb02 f303 	mul.w	r3, r2, r3
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002686:	e004      	b.n	8002692 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	4a34      	ldr	r2, [pc, #208]	; (800275c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800268c:	fb02 f303 	mul.w	r3, r2, r3
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002692:	4b30      	ldr	r3, [pc, #192]	; (8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800269e:	d102      	bne.n	80026a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
          frequency = pllclk;
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80026a4:	e04b      	b.n	800273e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          frequency = (pllclk * 2) / 3;
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4a2d      	ldr	r2, [pc, #180]	; (8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	085b      	lsrs	r3, r3, #1
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80026b4:	e043      	b.n	800273e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      temp_reg = RCC->BDCR;
 80026b6:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c6:	d108      	bne.n	80026da <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
        frequency = LSE_VALUE;
 80026d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d8:	e022      	b.n	8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026e4:	d109      	bne.n	80026fa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 80026e6:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        frequency = LSI_VALUE;
 80026f2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f8:	e012      	b.n	8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002700:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002704:	d109      	bne.n	800271a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
        frequency = HSE_VALUE / 128U;
 8002712:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28
 8002718:	e002      	b.n	8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800271e:	e00f      	b.n	8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8002720:	e00e      	b.n	8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002722:	f7ff fe77 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 8002726:	4602      	mov	r2, r0
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	0b9b      	lsrs	r3, r3, #14
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	3301      	adds	r3, #1
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800273c:	e000      	b.n	8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      break;
 800273e:	bf00      	nop
    }
  }
  return(frequency);
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002742:	4618      	mov	r0, r3
 8002744:	3734      	adds	r7, #52	; 0x34
 8002746:	46bd      	mov	sp, r7
 8002748:	bd90      	pop	{r4, r7, pc}
 800274a:	bf00      	nop
 800274c:	0800645c 	.word	0x0800645c
 8002750:	0800646c 	.word	0x0800646c
 8002754:	40021000 	.word	0x40021000
 8002758:	007a1200 	.word	0x007a1200
 800275c:	003d0900 	.word	0x003d0900
 8002760:	aaaaaaab 	.word	0xaaaaaaab

08002764 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	; 0x28
 8002768:	af02      	add	r7, sp, #8
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_SPI_Transmit+0x26>
 8002786:	2302      	movs	r3, #2
 8002788:	e123      	b.n	80029d2 <HAL_SPI_Transmit+0x26e>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002792:	f7fd fd3b 	bl	800020c <HAL_GetTick>
 8002796:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d002      	beq.n	80027aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027a4:	2302      	movs	r3, #2
 80027a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027a8:	e10a      	b.n	80029c0 <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0U))
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_SPI_Transmit+0x52>
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d102      	bne.n	80027bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027ba:	e101      	b.n	80029c0 <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2203      	movs	r2, #3
 80027c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	88fa      	ldrh	r2, [r7, #6]
 80027d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	88fa      	ldrh	r2, [r7, #6]
 80027da:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002802:	d107      	bne.n	8002814 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002812:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281e:	2b40      	cmp	r3, #64	; 0x40
 8002820:	d007      	beq.n	8002832 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002830:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800283a:	d147      	bne.n	80028cc <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d004      	beq.n	800284e <HAL_SPI_Transmit+0xea>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b01      	cmp	r3, #1
 800284c:	d138      	bne.n	80028c0 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	8812      	ldrh	r2, [r2, #0]
 8002856:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	3302      	adds	r3, #2
 800285c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800286c:	e028      	b.n	80028c0 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b02      	cmp	r3, #2
 800287a:	d10f      	bne.n	800289c <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	8812      	ldrh	r2, [r2, #0]
 8002884:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3302      	adds	r3, #2
 800288a:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	86da      	strh	r2, [r3, #54]	; 0x36
 800289a:	e011      	b.n	80028c0 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00b      	beq.n	80028ba <HAL_SPI_Transmit+0x156>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028a8:	d00a      	beq.n	80028c0 <HAL_SPI_Transmit+0x15c>
 80028aa:	f7fd fcaf 	bl	800020c <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	1ad2      	subs	r2, r2, r3
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d302      	bcc.n	80028c0 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028be:	e07f      	b.n	80029c0 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1d1      	bne.n	800286e <HAL_SPI_Transmit+0x10a>
 80028ca:	e048      	b.n	800295e <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d004      	beq.n	80028de <HAL_SPI_Transmit+0x17a>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d13a      	bne.n	8002954 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	330c      	adds	r3, #12
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	7812      	ldrb	r2, [r2, #0]
 80028e8:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	3301      	adds	r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80028fe:	e029      	b.n	8002954 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b02      	cmp	r3, #2
 800290c:	d110      	bne.n	8002930 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	330c      	adds	r3, #12
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	7812      	ldrb	r2, [r2, #0]
 8002918:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	3301      	adds	r3, #1
 800291e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	86da      	strh	r2, [r3, #54]	; 0x36
 800292e:	e011      	b.n	8002954 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <HAL_SPI_Transmit+0x1ea>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800293c:	d00a      	beq.n	8002954 <HAL_SPI_Transmit+0x1f0>
 800293e:	f7fd fc65 	bl	800020c <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	1ad2      	subs	r2, r2, r3
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d302      	bcc.n	8002954 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002952:	e035      	b.n	80029c0 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1d0      	bne.n	8002900 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2201      	movs	r2, #1
 8002966:	2102      	movs	r1, #2
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fae3 	bl	8002f34 <SPI_WaitFlagStateUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002978:	e022      	b.n	80029c0 <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	6839      	ldr	r1, [r7, #0]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fb41 	bl	8003006 <SPI_CheckFlag_BSY>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2220      	movs	r2, #32
 8002992:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002994:	e014      	b.n	80029c0 <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_SPI_Receive>:
  * @param  Size: amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b088      	sub	sp, #32
 80029de:	af02      	add	r7, sp, #8
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	4613      	mov	r3, r2
 80029e8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	75fb      	strb	r3, [r7, #23]

  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029fa:	d112      	bne.n	8002a22 <HAL_SPI_Receive+0x48>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10e      	bne.n	8002a22 <HAL_SPI_Receive+0x48>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2204      	movs	r2, #4
 8002a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8002a0c:	88fa      	ldrh	r2, [r7, #6]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	4613      	mov	r3, r2
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	68b9      	ldr	r1, [r7, #8]
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f8ec 	bl	8002bf6 <HAL_SPI_TransmitReceive>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	e0e5      	b.n	8002bee <HAL_SPI_Receive+0x214>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_SPI_Receive+0x56>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e0de      	b.n	8002bee <HAL_SPI_Receive+0x214>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a38:	f7fd fbe8 	bl	800020c <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

  if(hspi->State != HAL_SPI_STATE_READY)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d002      	beq.n	8002a50 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a4e:	e0c5      	b.n	8002bdc <HAL_SPI_Receive+0x202>
  }

  if((pData == NULL ) || (Size == 0U))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <HAL_SPI_Receive+0x82>
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a60:	e0bc      	b.n	8002bdc <HAL_SPI_Receive+0x202>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2204      	movs	r2, #4
 8002a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	88fa      	ldrh	r2, [r7, #6]
 8002a7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	88fa      	ldrh	r2, [r7, #6]
 8002a80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa8:	d107      	bne.n	8002aba <HAL_SPI_Receive+0xe0>
  {
    SPI_1LINE_RX(hspi);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac4:	2b40      	cmp	r3, #64	; 0x40
 8002ac6:	d007      	beq.n	8002ad8 <HAL_SPI_Receive+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ad6:	601a      	str	r2, [r3, #0]
  }

    /* Receive data in 8 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d15b      	bne.n	8002b98 <HAL_SPI_Receive+0x1be>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 8002ae0:	e02a      	b.n	8002b38 <HAL_SPI_Receive+0x15e>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d111      	bne.n	8002b14 <HAL_SPI_Receive+0x13a>
      {
        /* read the received data */
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	330c      	adds	r3, #12
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3301      	adds	r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b12:	e011      	b.n	8002b38 <HAL_SPI_Receive+0x15e>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <HAL_SPI_Receive+0x158>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b20:	d00a      	beq.n	8002b38 <HAL_SPI_Receive+0x15e>
 8002b22:	f7fd fb73 	bl	800020c <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad2      	subs	r2, r2, r3
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d302      	bcc.n	8002b38 <HAL_SPI_Receive+0x15e>
        {
          errorcode = HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b36:	e051      	b.n	8002bdc <HAL_SPI_Receive+0x202>
    while(hspi->RxXferCount > 0U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1cf      	bne.n	8002ae2 <HAL_SPI_Receive+0x108>
 8002b42:	e02e      	b.n	8002ba2 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d110      	bne.n	8002b74 <HAL_SPI_Receive+0x19a>
      {
        *((uint16_t*)pData) = hspi->Instance->DR;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3302      	adds	r3, #2
 8002b62:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b72:	e011      	b.n	8002b98 <HAL_SPI_Receive+0x1be>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HAL_SPI_Receive+0x1b8>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b80:	d00a      	beq.n	8002b98 <HAL_SPI_Receive+0x1be>
 8002b82:	f7fd fb43 	bl	800020c <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad2      	subs	r2, r2, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d302      	bcc.n	8002b98 <HAL_SPI_Receive+0x1be>
        {
          errorcode = HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b96:	e021      	b.n	8002bdc <HAL_SPI_Receive+0x202>
    while(hspi->RxXferCount > 0U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1d0      	bne.n	8002b44 <HAL_SPI_Receive+0x16a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002baa:	d111      	bne.n	8002bd0 <HAL_SPI_Receive+0x1f6>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb4:	d004      	beq.n	8002bc0 <HAL_SPI_Receive+0x1e6>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbe:	d107      	bne.n	8002bd0 <HAL_SPI_Receive+0x1f6>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bce:	601a      	str	r2, [r3, #0]
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_SPI_Receive+0x202>
  {
    errorcode = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b08c      	sub	sp, #48	; 0x30
 8002bfa:	af02      	add	r7, sp, #8
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61fb      	str	r3, [r7, #28]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8002c10:	2301      	movs	r3, #1
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_SPI_TransmitReceive+0x32>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e181      	b.n	8002f2c <HAL_SPI_TransmitReceive+0x336>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c30:	f7fd faec 	bl	800020c <HAL_GetTick>
 8002c34:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d00e      	beq.n	8002c6a <HAL_SPI_TransmitReceive+0x74>
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c52:	d106      	bne.n	8002c62 <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <HAL_SPI_TransmitReceive+0x6c>
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d003      	beq.n	8002c6a <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
 8002c64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c68:	e156      	b.n	8002f18 <HAL_SPI_TransmitReceive+0x322>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_SPI_TransmitReceive+0x86>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_SPI_TransmitReceive+0x86>
 8002c76:	887b      	ldrh	r3, [r7, #2]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d103      	bne.n	8002c84 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c82:	e149      	b.n	8002f18 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d103      	bne.n	8002c98 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2205      	movs	r2, #5
 8002c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	887a      	ldrh	r2, [r7, #2]
 8002ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	887a      	ldrh	r2, [r7, #2]
 8002cae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	887a      	ldrh	r2, [r7, #2]
 8002cba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d007      	beq.n	8002cec <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cf4:	d171      	bne.n	8002dda <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d004      	beq.n	8002d08 <HAL_SPI_TransmitReceive+0x112>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d15d      	bne.n	8002dc4 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	8812      	ldrh	r2, [r2, #0]
 8002d10:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	3302      	adds	r3, #2
 8002d16:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d26:	e04d      	b.n	8002dc4 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d01c      	beq.n	8002d68 <HAL_SPI_TransmitReceive+0x172>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d017      	beq.n	8002d68 <HAL_SPI_TransmitReceive+0x172>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d110      	bne.n	8002d68 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	8812      	ldrh	r2, [r2, #0]
 8002d4e:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	3302      	adds	r3, #2
 8002d54:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d018      	beq.n	8002da4 <HAL_SPI_TransmitReceive+0x1ae>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d111      	bne.n	8002da4 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3302      	adds	r3, #2
 8002d90:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8002da0:	2301      	movs	r3, #1
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002daa:	d00b      	beq.n	8002dc4 <HAL_SPI_TransmitReceive+0x1ce>
 8002dac:	f7fd fa2e 	bl	800020c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	1ad2      	subs	r2, r2, r3
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d303      	bcc.n	8002dc4 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002dc2:	e0a9      	b.n	8002f18 <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1ac      	bne.n	8002d28 <HAL_SPI_TransmitReceive+0x132>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1a7      	bne.n	8002d28 <HAL_SPI_TransmitReceive+0x132>
 8002dd8:	e071      	b.n	8002ebe <HAL_SPI_TransmitReceive+0x2c8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d004      	beq.n	8002dec <HAL_SPI_TransmitReceive+0x1f6>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d15e      	bne.n	8002eaa <HAL_SPI_TransmitReceive+0x2b4>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	7812      	ldrb	r2, [r2, #0]
 8002df6:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e0c:	e04d      	b.n	8002eaa <HAL_SPI_TransmitReceive+0x2b4>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01d      	beq.n	8002e50 <HAL_SPI_TransmitReceive+0x25a>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d018      	beq.n	8002e50 <HAL_SPI_TransmitReceive+0x25a>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d111      	bne.n	8002e50 <HAL_SPI_TransmitReceive+0x25a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f103 020c 	add.w	r2, r3, #12
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	1c59      	adds	r1, r3, #1
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d017      	beq.n	8002e8a <HAL_SPI_TransmitReceive+0x294>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d110      	bne.n	8002e8a <HAL_SPI_TransmitReceive+0x294>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	68d2      	ldr	r2, [r2, #12]
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8002e86:	2301      	movs	r3, #1
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e90:	d00b      	beq.n	8002eaa <HAL_SPI_TransmitReceive+0x2b4>
 8002e92:	f7fd f9bb 	bl	800020c <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	1ad2      	subs	r2, r2, r3
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d303      	bcc.n	8002eaa <HAL_SPI_TransmitReceive+0x2b4>
      {
        errorcode = HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002ea8:	e036      	b.n	8002f18 <HAL_SPI_TransmitReceive+0x322>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1ac      	bne.n	8002e0e <HAL_SPI_TransmitReceive+0x218>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1a7      	bne.n	8002e0e <HAL_SPI_TransmitReceive+0x218>
    }
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f833 	bl	8002f34 <SPI_WaitFlagStateUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_SPI_TransmitReceive+0x2e6>
  {
    errorcode = HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002eda:	e01d      	b.n	8002f18 <HAL_SPI_TransmitReceive+0x322>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f890 	bl	8003006 <SPI_CheckFlag_BSY>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d006      	beq.n	8002efa <HAL_SPI_TransmitReceive+0x304>
  {
    errorcode = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ef8:	e00e      	b.n	8002f18 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3728      	adds	r7, #40	; 0x28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002f42:	e04d      	b.n	8002fe0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f4a:	d049      	beq.n	8002fe0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002f52:	f7fd f95b 	bl	800020c <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	1ad2      	subs	r2, r2, r3
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d33e      	bcc.n	8002fe0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	6852      	ldr	r2, [r2, #4]
 8002f6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f70:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f7a:	d111      	bne.n	8002fa0 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f84:	d004      	beq.n	8002f90 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8e:	d107      	bne.n	8002fa0 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa8:	d110      	bne.n	8002fcc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8002fb8:	400b      	ands	r3, r1
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fca:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e00e      	b.n	8002ffe <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	401a      	ands	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d101      	bne.n	8002ff4 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	e000      	b.n	8002ff6 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d1a3      	bne.n	8002f44 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b086      	sub	sp, #24
 800300a:	af02      	add	r7, sp, #8
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2200      	movs	r2, #0
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f7ff ff89 	bl	8002f34 <SPI_WaitFlagStateUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d007      	beq.n	8003038 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e000      	b.n	800303a <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e056      	b.n	8003102 <HAL_SPI_Init+0xc0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d102      	bne.n	800306c <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f002 fc06 	bl	8005878 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003082:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6851      	ldr	r1, [r2, #4]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6892      	ldr	r2, [r2, #8]
 8003090:	4311      	orrs	r1, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68d2      	ldr	r2, [r2, #12]
 8003096:	4311      	orrs	r1, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6912      	ldr	r2, [r2, #16]
 800309c:	4311      	orrs	r1, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6952      	ldr	r2, [r2, #20]
 80030a2:	4311      	orrs	r1, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6992      	ldr	r2, [r2, #24]
 80030a8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80030ac:	4311      	orrs	r1, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	69d2      	ldr	r2, [r2, #28]
 80030b2:	4311      	orrs	r1, r2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6a12      	ldr	r2, [r2, #32]
 80030b8:	4311      	orrs	r1, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80030be:	430a      	orrs	r2, r1
 80030c0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6992      	ldr	r2, [r2, #24]
 80030ca:	0c12      	lsrs	r2, r2, #16
 80030cc:	f002 0104 	and.w	r1, r2, #4
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030d4:	430a      	orrs	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030e0:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	69d2      	ldr	r2, [r2, #28]
 80030ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f0:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e01d      	b.n	8003158 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d106      	bne.n	8003136 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f002 fbeb 	bl	800590c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2202      	movs	r2, #2
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3304      	adds	r3, #4
 8003146:	4619      	mov	r1, r3
 8003148:	4610      	mov	r0, r2
 800314a:	f000 fa2b 	bl	80035a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	68d2      	ldr	r2, [r2, #12]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d122      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d11b      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0202 	mvn.w	r2, #2
 80031c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f9c8 	bl	800356c <HAL_TIM_IC_CaptureCallback>
 80031dc:	e005      	b.n	80031ea <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f9bb 	bl	800355a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f9ca 	bl	800357e <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d122      	bne.n	8003244 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b04      	cmp	r3, #4
 800320a:	d11b      	bne.n	8003244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0204 	mvn.w	r2, #4
 8003214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2202      	movs	r2, #2
 800321a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f99e 	bl	800356c <HAL_TIM_IC_CaptureCallback>
 8003230:	e005      	b.n	800323e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f991 	bl	800355a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f9a0 	bl	800357e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b08      	cmp	r3, #8
 8003250:	d122      	bne.n	8003298 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b08      	cmp	r3, #8
 800325e:	d11b      	bne.n	8003298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0208 	mvn.w	r2, #8
 8003268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2204      	movs	r2, #4
 800326e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f974 	bl	800356c <HAL_TIM_IC_CaptureCallback>
 8003284:	e005      	b.n	8003292 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f967 	bl	800355a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f976 	bl	800357e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d122      	bne.n	80032ec <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b10      	cmp	r3, #16
 80032b2:	d11b      	bne.n	80032ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0210 	mvn.w	r2, #16
 80032bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2208      	movs	r2, #8
 80032c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f94a 	bl	800356c <HAL_TIM_IC_CaptureCallback>
 80032d8:	e005      	b.n	80032e6 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f93d 	bl	800355a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f94c 	bl	800357e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d10e      	bne.n	8003318 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d107      	bne.n	8003318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0201 	mvn.w	r2, #1
 8003310:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f002 f98a 	bl	800562c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003322:	2b80      	cmp	r3, #128	; 0x80
 8003324:	d10e      	bne.n	8003344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003330:	2b80      	cmp	r3, #128	; 0x80
 8003332:	d107      	bne.n	8003344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800333c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fa88 	bl	8003854 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b40      	cmp	r3, #64	; 0x40
 8003350:	d10e      	bne.n	8003370 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b40      	cmp	r3, #64	; 0x40
 800335e:	d107      	bne.n	8003370 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003368:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f910 	bl	8003590 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b20      	cmp	r3, #32
 800337c:	d10e      	bne.n	800339c <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b20      	cmp	r3, #32
 800338a:	d107      	bne.n	800339c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0220 	mvn.w	r2, #32
 8003394:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fa53 	bl	8003842 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_TIM_ConfigClockSource+0x1c>
 80033bc:	2302      	movs	r3, #2
 80033be:	e0c8      	b.n	8003552 <HAL_TIM_ConfigClockSource+0x1ae>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d077      	beq.n	80034e8 <HAL_TIM_ConfigClockSource+0x144>
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d80e      	bhi.n	800341a <HAL_TIM_ConfigClockSource+0x76>
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	f000 808a 	beq.w	8003516 <HAL_TIM_ConfigClockSource+0x172>
 8003402:	2b10      	cmp	r3, #16
 8003404:	d802      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x68>
 8003406:	2b00      	cmp	r3, #0
 8003408:	d07e      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800340a:	e099      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800340c:	2b20      	cmp	r3, #32
 800340e:	f000 8089 	beq.w	8003524 <HAL_TIM_ConfigClockSource+0x180>
 8003412:	2b30      	cmp	r3, #48	; 0x30
 8003414:	f000 808d 	beq.w	8003532 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8003418:	e092      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800341a:	2b70      	cmp	r3, #112	; 0x70
 800341c:	d016      	beq.n	800344c <HAL_TIM_ConfigClockSource+0xa8>
 800341e:	2b70      	cmp	r3, #112	; 0x70
 8003420:	d804      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x88>
 8003422:	2b50      	cmp	r3, #80	; 0x50
 8003424:	d040      	beq.n	80034a8 <HAL_TIM_ConfigClockSource+0x104>
 8003426:	2b60      	cmp	r3, #96	; 0x60
 8003428:	d04e      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0x124>
    break;
 800342a:	e089      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800342c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003430:	d003      	beq.n	800343a <HAL_TIM_ConfigClockSource+0x96>
 8003432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003436:	d024      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0xde>
    break;
 8003438:	e082      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	6892      	ldr	r2, [r2, #8]
 8003444:	f022 0207 	bic.w	r2, r2, #7
 8003448:	609a      	str	r2, [r3, #8]
    break;
 800344a:	e079      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	6899      	ldr	r1, [r3, #8]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f000 f98c 	bl	8003778 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800346e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003476:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	609a      	str	r2, [r3, #8]
    break;
 8003480:	e05e      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6899      	ldr	r1, [r3, #8]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f000 f971 	bl	8003778 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	6892      	ldr	r2, [r2, #8]
 80034a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034a4:	609a      	str	r2, [r3, #8]
    break;
 80034a6:	e04b      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	461a      	mov	r2, r3
 80034b6:	f000 f8db 	bl	8003670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2150      	movs	r1, #80	; 0x50
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f93a 	bl	800373a <TIM_ITRx_SetConfig>
    break;
 80034c6:	e03b      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	461a      	mov	r2, r3
 80034d6:	f000 f8fd 	bl	80036d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2160      	movs	r1, #96	; 0x60
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 f92a 	bl	800373a <TIM_ITRx_SetConfig>
    break;
 80034e6:	e02b      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6859      	ldr	r1, [r3, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	461a      	mov	r2, r3
 80034f6:	f000 f8bb 	bl	8003670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2140      	movs	r1, #64	; 0x40
 8003500:	4618      	mov	r0, r3
 8003502:	f000 f91a 	bl	800373a <TIM_ITRx_SetConfig>
    break;
 8003506:	e01b      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f000 f913 	bl	800373a <TIM_ITRx_SetConfig>
    break;
 8003514:	e014      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2110      	movs	r1, #16
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f90c 	bl	800373a <TIM_ITRx_SetConfig>
    break;
 8003522:	e00d      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2120      	movs	r1, #32
 800352a:	4618      	mov	r0, r3
 800352c:	f000 f905 	bl	800373a <TIM_ITRx_SetConfig>
    break;
 8003530:	e006      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2130      	movs	r1, #48	; 0x30
 8003538:	4618      	mov	r0, r3
 800353a:	f000 f8fe 	bl	800373a <TIM_ITRx_SetConfig>
    break;
 800353e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr

0800357e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr

08003590 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr
	...

080035a4 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a2a      	ldr	r2, [pc, #168]	; (8003664 <TIM_Base_SetConfig+0xc0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00b      	beq.n	80035d8 <TIM_Base_SetConfig+0x34>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c6:	d007      	beq.n	80035d8 <TIM_Base_SetConfig+0x34>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a27      	ldr	r2, [pc, #156]	; (8003668 <TIM_Base_SetConfig+0xc4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d003      	beq.n	80035d8 <TIM_Base_SetConfig+0x34>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a26      	ldr	r2, [pc, #152]	; (800366c <TIM_Base_SetConfig+0xc8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d108      	bne.n	80035ea <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a1d      	ldr	r2, [pc, #116]	; (8003664 <TIM_Base_SetConfig+0xc0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00b      	beq.n	800360a <TIM_Base_SetConfig+0x66>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f8:	d007      	beq.n	800360a <TIM_Base_SetConfig+0x66>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a1a      	ldr	r2, [pc, #104]	; (8003668 <TIM_Base_SetConfig+0xc4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d003      	beq.n	800360a <TIM_Base_SetConfig+0x66>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a19      	ldr	r2, [pc, #100]	; (800366c <TIM_Base_SetConfig+0xc8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d108      	bne.n	800361c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003622:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a07      	ldr	r2, [pc, #28]	; (8003664 <TIM_Base_SetConfig+0xc0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d103      	bne.n	8003654 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	615a      	str	r2, [r3, #20]
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40000400 	.word	0x40000400
 800366c:	40000800 	.word	0x40000800

08003670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	f023 0201 	bic.w	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f023 030a 	bic.w	r3, r3, #10
 80036b4:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	621a      	str	r2, [r3, #32]
}
 80036ca:	bf00      	nop
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr

080036d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f023 0210 	bic.w	r2, r3, #16
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003706:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	031b      	lsls	r3, r3, #12
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003718:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	621a      	str	r2, [r3, #32]
}
 8003730:	bf00      	nop
 8003732:	371c      	adds	r7, #28
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr

0800373a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	460b      	mov	r3, r1
 8003744:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003756:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003758:	887b      	ldrh	r3, [r7, #2]
 800375a:	f043 0307 	orr.w	r3, r3, #7
 800375e:	b29b      	uxth	r3, r3
 8003760:	461a      	mov	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	609a      	str	r2, [r3, #8]
}
 800376e:	bf00      	nop
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003796:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	021a      	lsls	r2, r3, #8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	431a      	orrs	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	609a      	str	r2, [r3, #8]
}
 80037b0:	bf00      	nop
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr

080037ba <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e032      	b.n	8003838 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6812      	ldr	r2, [r2, #0]
 80037ea:	6852      	ldr	r2, [r2, #4]
 80037ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037f0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	6851      	ldr	r1, [r2, #4]
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	6892      	ldr	r2, [r2, #8]
 800380e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003812:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	6891      	ldr	r1, [r2, #8]
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	6852      	ldr	r2, [r2, #4]
 8003822:	430a      	orrs	r2, r1
 8003824:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr

08003866 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e03f      	b.n	80038f8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d106      	bne.n	8003892 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f002 f861 	bl	8005954 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2224      	movs	r2, #36	; 0x24
 8003896:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	68d2      	ldr	r2, [r2, #12]
 80038a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038a8:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f90a 	bl	8003ac4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	6912      	ldr	r2, [r2, #16]
 80038ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	6952      	ldr	r2, [r2, #20]
 80038ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038ce:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	68d2      	ldr	r2, [r2, #12]
 80038da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038de:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	4613      	mov	r3, r2
 800390e:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b20      	cmp	r3, #32
 800391e:	f040 8082 	bne.w	8003a26 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL) || (Size == 0U))
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_UART_Transmit+0x2e>
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e07a      	b.n	8003a28 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_UART_Transmit+0x40>
 800393c:	2302      	movs	r3, #2
 800393e:	e073      	b.n	8003a28 <HAL_UART_Transmit+0x128>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2221      	movs	r2, #33	; 0x21
 8003952:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003956:	f7fc fc59 	bl	800020c <HAL_GetTick>
 800395a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	88fa      	ldrh	r2, [r7, #6]
 8003960:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	88fa      	ldrh	r2, [r7, #6]
 8003966:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003968:	e041      	b.n	80039ee <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003980:	d121      	bne.n	80039c6 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2200      	movs	r2, #0
 800398a:	2180      	movs	r1, #128	; 0x80
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f84f 	bl	8003a30 <UART_WaitOnFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e045      	b.n	8003a28 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	8812      	ldrh	r2, [r2, #0]
 80039a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039ac:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d103      	bne.n	80039be <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	3302      	adds	r3, #2
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	e017      	b.n	80039ee <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData +=1U;
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	3301      	adds	r3, #1
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	e013      	b.n	80039ee <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2200      	movs	r2, #0
 80039ce:	2180      	movs	r1, #128	; 0x80
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f82d 	bl	8003a30 <UART_WaitOnFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e023      	b.n	8003a28 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	1c59      	adds	r1, r3, #1
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1b8      	bne.n	800396a <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2200      	movs	r2, #0
 8003a00:	2140      	movs	r1, #64	; 0x40
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f814 	bl	8003a30 <UART_WaitOnFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e00a      	b.n	8003a28 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e000      	b.n	8003a28 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8003a26:	2302      	movs	r3, #2
  }
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003a40:	e02c      	b.n	8003a9c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a48:	d028      	beq.n	8003a9c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a50:	f7fc fbdc 	bl	800020c <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	1ad2      	subs	r2, r2, r3
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d91d      	bls.n	8003a9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	68d2      	ldr	r2, [r2, #12]
 8003a6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a6e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	6952      	ldr	r2, [r2, #20]
 8003a7a:	f022 0201 	bic.w	r2, r2, #1
 8003a7e:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e00f      	b.n	8003abc <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	401a      	ands	r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	bf0c      	ite	eq
 8003aac:	2301      	moveq	r3, #1
 8003aae:	2300      	movne	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d0c3      	beq.n	8003a42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	6912      	ldr	r2, [r2, #16]
 8003ada:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68d2      	ldr	r2, [r2, #12]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b0a:	f023 030c 	bic.w	r3, r3, #12
 8003b0e:	68f9      	ldr	r1, [r7, #12]
 8003b10:	430b      	orrs	r3, r1
 8003b12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	6952      	ldr	r2, [r2, #20]
 8003b1e:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6992      	ldr	r2, [r2, #24]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a6f      	ldr	r2, [pc, #444]	; (8003cec <UART_SetConfig+0x228>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d16b      	bne.n	8003c0c <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681c      	ldr	r4, [r3, #0]
 8003b38:	f7fe fc6c 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	009a      	lsls	r2, r3, #2
 8003b46:	441a      	add	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b52:	4a67      	ldr	r2, [pc, #412]	; (8003cf0 <UART_SetConfig+0x22c>)
 8003b54:	fba2 2303 	umull	r2, r3, r2, r3
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	011d      	lsls	r5, r3, #4
 8003b5c:	f7fe fc5a 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	009a      	lsls	r2, r3, #2
 8003b6a:	441a      	add	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b76:	f7fe fc4d 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	009a      	lsls	r2, r3, #2
 8003b84:	441a      	add	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b90:	4a57      	ldr	r2, [pc, #348]	; (8003cf0 <UART_SetConfig+0x22c>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	2264      	movs	r2, #100	; 0x64
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	1af3      	subs	r3, r6, r3
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	3332      	adds	r3, #50	; 0x32
 8003ba4:	4a52      	ldr	r2, [pc, #328]	; (8003cf0 <UART_SetConfig+0x22c>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb0:	441d      	add	r5, r3
 8003bb2:	f7fe fc2f 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009a      	lsls	r2, r3, #2
 8003bc0:	441a      	add	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8003bcc:	f7fe fc22 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009a      	lsls	r2, r3, #2
 8003bda:	441a      	add	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be6:	4a42      	ldr	r2, [pc, #264]	; (8003cf0 <UART_SetConfig+0x22c>)
 8003be8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	2264      	movs	r2, #100	; 0x64
 8003bf0:	fb02 f303 	mul.w	r3, r2, r3
 8003bf4:	1af3      	subs	r3, r6, r3
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	3332      	adds	r3, #50	; 0x32
 8003bfa:	4a3d      	ldr	r2, [pc, #244]	; (8003cf0 <UART_SetConfig+0x22c>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	442b      	add	r3, r5
 8003c08:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003c0a:	e06a      	b.n	8003ce2 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681c      	ldr	r4, [r3, #0]
 8003c10:	f7fe fbec 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4613      	mov	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	009a      	lsls	r2, r3, #2
 8003c1e:	441a      	add	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2a:	4a31      	ldr	r2, [pc, #196]	; (8003cf0 <UART_SetConfig+0x22c>)
 8003c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c30:	095b      	lsrs	r3, r3, #5
 8003c32:	011d      	lsls	r5, r3, #4
 8003c34:	f7fe fbda 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	009a      	lsls	r2, r3, #2
 8003c42:	441a      	add	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8003c4e:	f7fe fbcd 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 8003c52:	4602      	mov	r2, r0
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	009a      	lsls	r2, r3, #2
 8003c5c:	441a      	add	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c68:	4a21      	ldr	r2, [pc, #132]	; (8003cf0 <UART_SetConfig+0x22c>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2264      	movs	r2, #100	; 0x64
 8003c72:	fb02 f303 	mul.w	r3, r2, r3
 8003c76:	1af3      	subs	r3, r6, r3
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	3332      	adds	r3, #50	; 0x32
 8003c7c:	4a1c      	ldr	r2, [pc, #112]	; (8003cf0 <UART_SetConfig+0x22c>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c88:	441d      	add	r5, r3
 8003c8a:	f7fe fbaf 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	009a      	lsls	r2, r3, #2
 8003c98:	441a      	add	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ca4:	f7fe fba2 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	009a      	lsls	r2, r3, #2
 8003cb2:	441a      	add	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbe:	4a0c      	ldr	r2, [pc, #48]	; (8003cf0 <UART_SetConfig+0x22c>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	095b      	lsrs	r3, r3, #5
 8003cc6:	2264      	movs	r2, #100	; 0x64
 8003cc8:	fb02 f303 	mul.w	r3, r2, r3
 8003ccc:	1af3      	subs	r3, r6, r3
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	3332      	adds	r3, #50	; 0x32
 8003cd2:	4a07      	ldr	r2, [pc, #28]	; (8003cf0 <UART_SetConfig+0x22c>)
 8003cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	442b      	add	r3, r5
 8003ce0:	60a3      	str	r3, [r4, #8]
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40013800 	.word	0x40013800
 8003cf0:	51eb851f 	.word	0x51eb851f

08003cf4 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8003d00:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <NRF24_DelayMicroSeconds+0x38>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <NRF24_DelayMicroSeconds+0x3c>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	0c9a      	lsrs	r2, r3, #18
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8003d14:	bf00      	nop
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1e5a      	subs	r2, r3, #1
 8003d1a:	60fa      	str	r2, [r7, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1fa      	bne.n	8003d16 <NRF24_DelayMicroSeconds+0x22>
}
 8003d20:	bf00      	nop
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	20000010 	.word	0x20000010
 8003d30:	165e9f81 	.word	0x165e9f81

08003d34 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d008      	beq.n	8003d54 <NRF24_csn+0x20>
 8003d42:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <NRF24_csn+0x38>)
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <NRF24_csn+0x3c>)
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f7fd ff48 	bl	8001be2 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8003d52:	e007      	b.n	8003d64 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <NRF24_csn+0x38>)
 8003d56:	6818      	ldr	r0, [r3, #0]
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <NRF24_csn+0x3c>)
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f7fd ff3f 	bl	8001be2 <HAL_GPIO_WritePin>
}
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	2000009c 	.word	0x2000009c
 8003d70:	200000a0 	.word	0x200000a0

08003d74 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d008      	beq.n	8003d94 <NRF24_ce+0x20>
 8003d82:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <NRF24_ce+0x38>)
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <NRF24_ce+0x3c>)
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f7fd ff28 	bl	8001be2 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8003d92:	e007      	b.n	8003da4 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <NRF24_ce+0x38>)
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <NRF24_ce+0x3c>)
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	4619      	mov	r1, r3
 8003da0:	f7fd ff1f 	bl	8001be2 <HAL_GPIO_WritePin>
}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	2000009c 	.word	0x2000009c
 8003db0:	200000a2 	.word	0x200000a2

08003db4 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f7ff ffb8 	bl	8003d34 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	f003 031f 	and.w	r3, r3, #31
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003dce:	f107 010c 	add.w	r1, r7, #12
 8003dd2:	2364      	movs	r3, #100	; 0x64
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	480a      	ldr	r0, [pc, #40]	; (8003e00 <NRF24_read_register+0x4c>)
 8003dd8:	f7fe fcc4 	bl	8002764 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8003ddc:	f107 030c 	add.w	r3, r7, #12
 8003de0:	1c59      	adds	r1, r3, #1
 8003de2:	2364      	movs	r3, #100	; 0x64
 8003de4:	2201      	movs	r2, #1
 8003de6:	4806      	ldr	r0, [pc, #24]	; (8003e00 <NRF24_read_register+0x4c>)
 8003de8:	f7fe fdf7 	bl	80029da <HAL_SPI_Receive>
	retData = spiBuf[1];
 8003dec:	7b7b      	ldrb	r3, [r7, #13]
 8003dee:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8003df0:	2001      	movs	r0, #1
 8003df2:	f7ff ff9f 	bl	8003d34 <NRF24_csn>
	return retData;
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	200000a4 	.word	0x200000a4

08003e04 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	6039      	str	r1, [r7, #0]
 8003e0e:	71fb      	strb	r3, [r7, #7]
 8003e10:	4613      	mov	r3, r2
 8003e12:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003e14:	2000      	movs	r0, #0
 8003e16:	f7ff ff8d 	bl	8003d34 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	f003 031f 	and.w	r3, r3, #31
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003e24:	f107 010c 	add.w	r1, r7, #12
 8003e28:	2364      	movs	r3, #100	; 0x64
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	4808      	ldr	r0, [pc, #32]	; (8003e50 <NRF24_read_registerN+0x4c>)
 8003e2e:	f7fe fc99 	bl	8002764 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8003e32:	79bb      	ldrb	r3, [r7, #6]
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	2364      	movs	r3, #100	; 0x64
 8003e38:	6839      	ldr	r1, [r7, #0]
 8003e3a:	4805      	ldr	r0, [pc, #20]	; (8003e50 <NRF24_read_registerN+0x4c>)
 8003e3c:	f7fe fdcd 	bl	80029da <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8003e40:	2001      	movs	r0, #1
 8003e42:	f7ff ff77 	bl	8003d34 <NRF24_csn>
}
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	200000a4 	.word	0x200000a4

08003e54 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	460a      	mov	r2, r1
 8003e5e:	71fb      	strb	r3, [r7, #7]
 8003e60:	4613      	mov	r3, r2
 8003e62:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003e64:	2000      	movs	r0, #0
 8003e66:	f7ff ff65 	bl	8003d34 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	f043 0320 	orr.w	r3, r3, #32
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8003e74:	79bb      	ldrb	r3, [r7, #6]
 8003e76:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8003e78:	f107 010c 	add.w	r1, r7, #12
 8003e7c:	2364      	movs	r3, #100	; 0x64
 8003e7e:	2202      	movs	r2, #2
 8003e80:	4804      	ldr	r0, [pc, #16]	; (8003e94 <NRF24_write_register+0x40>)
 8003e82:	f7fe fc6f 	bl	8002764 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8003e86:	2001      	movs	r0, #1
 8003e88:	f7ff ff54 	bl	8003d34 <NRF24_csn>
}
 8003e8c:	bf00      	nop
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	200000a4 	.word	0x200000a4

08003e98 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	6039      	str	r1, [r7, #0]
 8003ea2:	71fb      	strb	r3, [r7, #7]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	f7ff ff43 	bl	8003d34 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	f043 0320 	orr.w	r3, r3, #32
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003eb8:	f107 010c 	add.w	r1, r7, #12
 8003ebc:	2364      	movs	r3, #100	; 0x64
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	4808      	ldr	r0, [pc, #32]	; (8003ee4 <NRF24_write_registerN+0x4c>)
 8003ec2:	f7fe fc4f 	bl	8002764 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8003ec6:	79bb      	ldrb	r3, [r7, #6]
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	2364      	movs	r3, #100	; 0x64
 8003ecc:	6839      	ldr	r1, [r7, #0]
 8003ece:	4805      	ldr	r0, [pc, #20]	; (8003ee4 <NRF24_write_registerN+0x4c>)
 8003ed0:	f7fe fc48 	bl	8002764 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	f7ff ff2d 	bl	8003d34 <NRF24_csn>
}
 8003eda:	bf00      	nop
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	200000a4 	.word	0x200000a4

08003ee8 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	f7ff ff1d 	bl	8003d34 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8003efa:	23a0      	movs	r3, #160	; 0xa0
 8003efc:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8003efe:	f107 010f 	add.w	r1, r7, #15
 8003f02:	2364      	movs	r3, #100	; 0x64
 8003f04:	2201      	movs	r2, #1
 8003f06:	4808      	ldr	r0, [pc, #32]	; (8003f28 <NRF24_write_payload+0x40>)
 8003f08:	f7fe fc2c 	bl	8002764 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	2364      	movs	r3, #100	; 0x64
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4804      	ldr	r0, [pc, #16]	; (8003f28 <NRF24_write_payload+0x40>)
 8003f16:	f7fe fc25 	bl	8002764 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	f7ff ff0a 	bl	8003d34 <NRF24_csn>
}
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	200000a4 	.word	0x200000a4

08003f2c <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8003f30:	21ff      	movs	r1, #255	; 0xff
 8003f32:	20e1      	movs	r0, #225	; 0xe1
 8003f34:	f7ff ff8e 	bl	8003e54 <NRF24_write_register>
}
 8003f38:	bf00      	nop
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8003f40:	21ff      	movs	r1, #255	; 0xff
 8003f42:	20e2      	movs	r0, #226	; 0xe2
 8003f44:	f7ff ff86 	bl	8003e54 <NRF24_write_register>
}
 8003f48:	bf00      	nop
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8003f52:	2007      	movs	r0, #7
 8003f54:	f7ff ff2e 	bl	8003db4 <NRF24_read_register>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8003f68:	b082      	sub	sp, #8
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	460b      	mov	r3, r1
 8003f76:	807b      	strh	r3, [r7, #2]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8003f7c:	4b66      	ldr	r3, [pc, #408]	; (8004118 <NRF24_begin+0x1b0>)
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f107 031c 	add.w	r3, r7, #28
 8003f84:	2258      	movs	r2, #88	; 0x58
 8003f86:	4619      	mov	r1, r3
 8003f88:	f001 fe1e 	bl	8005bc8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8003f8c:	4a63      	ldr	r2, [pc, #396]	; (800411c <NRF24_begin+0x1b4>)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8003f92:	4a63      	ldr	r2, [pc, #396]	; (8004120 <NRF24_begin+0x1b8>)
 8003f94:	887b      	ldrh	r3, [r7, #2]
 8003f96:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8003f98:	4a62      	ldr	r2, [pc, #392]	; (8004124 <NRF24_begin+0x1bc>)
 8003f9a:	883b      	ldrh	r3, [r7, #0]
 8003f9c:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8003f9e:	2001      	movs	r0, #1
 8003fa0:	f7ff fec8 	bl	8003d34 <NRF24_csn>
	NRF24_ce(0);
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	f7ff fee5 	bl	8003d74 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8003faa:	2005      	movs	r0, #5
 8003fac:	f7fc f938 	bl	8000220 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8003fb0:	2108      	movs	r1, #8
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	f7ff ff4e 	bl	8003e54 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8003fb8:	213f      	movs	r1, #63	; 0x3f
 8003fba:	2001      	movs	r0, #1
 8003fbc:	f7ff ff4a 	bl	8003e54 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8003fc0:	2103      	movs	r1, #3
 8003fc2:	2002      	movs	r0, #2
 8003fc4:	f7ff ff46 	bl	8003e54 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8003fc8:	2103      	movs	r1, #3
 8003fca:	2003      	movs	r0, #3
 8003fcc:	f7ff ff42 	bl	8003e54 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8003fd0:	2103      	movs	r1, #3
 8003fd2:	2004      	movs	r0, #4
 8003fd4:	f7ff ff3e 	bl	8003e54 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8003fd8:	2102      	movs	r1, #2
 8003fda:	2005      	movs	r0, #5
 8003fdc:	f7ff ff3a 	bl	8003e54 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8003fe0:	210f      	movs	r1, #15
 8003fe2:	2006      	movs	r0, #6
 8003fe4:	f7ff ff36 	bl	8003e54 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8003fe8:	210e      	movs	r1, #14
 8003fea:	2007      	movs	r0, #7
 8003fec:	f7ff ff32 	bl	8003e54 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	2008      	movs	r0, #8
 8003ff4:	f7ff ff2e 	bl	8003e54 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	2009      	movs	r0, #9
 8003ffc:	f7ff ff2a 	bl	8003e54 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8004000:	23e7      	movs	r3, #231	; 0xe7
 8004002:	733b      	strb	r3, [r7, #12]
 8004004:	23e7      	movs	r3, #231	; 0xe7
 8004006:	72fb      	strb	r3, [r7, #11]
 8004008:	23e7      	movs	r3, #231	; 0xe7
 800400a:	72bb      	strb	r3, [r7, #10]
 800400c:	23e7      	movs	r3, #231	; 0xe7
 800400e:	727b      	strb	r3, [r7, #9]
 8004010:	23e7      	movs	r3, #231	; 0xe7
 8004012:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8004014:	f107 0308 	add.w	r3, r7, #8
 8004018:	2205      	movs	r2, #5
 800401a:	4619      	mov	r1, r3
 800401c:	200a      	movs	r0, #10
 800401e:	f7ff ff3b 	bl	8003e98 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8004022:	23c2      	movs	r3, #194	; 0xc2
 8004024:	733b      	strb	r3, [r7, #12]
 8004026:	23c2      	movs	r3, #194	; 0xc2
 8004028:	72fb      	strb	r3, [r7, #11]
 800402a:	23c2      	movs	r3, #194	; 0xc2
 800402c:	72bb      	strb	r3, [r7, #10]
 800402e:	23c2      	movs	r3, #194	; 0xc2
 8004030:	727b      	strb	r3, [r7, #9]
 8004032:	23c2      	movs	r3, #194	; 0xc2
 8004034:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8004036:	f107 0308 	add.w	r3, r7, #8
 800403a:	2205      	movs	r2, #5
 800403c:	4619      	mov	r1, r3
 800403e:	200b      	movs	r0, #11
 8004040:	f7ff ff2a 	bl	8003e98 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8004044:	21c3      	movs	r1, #195	; 0xc3
 8004046:	200c      	movs	r0, #12
 8004048:	f7ff ff04 	bl	8003e54 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 800404c:	21c4      	movs	r1, #196	; 0xc4
 800404e:	200d      	movs	r0, #13
 8004050:	f7ff ff00 	bl	8003e54 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8004054:	21c5      	movs	r1, #197	; 0xc5
 8004056:	200e      	movs	r0, #14
 8004058:	f7ff fefc 	bl	8003e54 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 800405c:	21c6      	movs	r1, #198	; 0xc6
 800405e:	200f      	movs	r0, #15
 8004060:	f7ff fef8 	bl	8003e54 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8004064:	23e7      	movs	r3, #231	; 0xe7
 8004066:	733b      	strb	r3, [r7, #12]
 8004068:	23e7      	movs	r3, #231	; 0xe7
 800406a:	72fb      	strb	r3, [r7, #11]
 800406c:	23e7      	movs	r3, #231	; 0xe7
 800406e:	72bb      	strb	r3, [r7, #10]
 8004070:	23e7      	movs	r3, #231	; 0xe7
 8004072:	727b      	strb	r3, [r7, #9]
 8004074:	23e7      	movs	r3, #231	; 0xe7
 8004076:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8004078:	f107 0308 	add.w	r3, r7, #8
 800407c:	2205      	movs	r2, #5
 800407e:	4619      	mov	r1, r3
 8004080:	2010      	movs	r0, #16
 8004082:	f7ff ff09 	bl	8003e98 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8004086:	2100      	movs	r1, #0
 8004088:	2011      	movs	r0, #17
 800408a:	f7ff fee3 	bl	8003e54 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800408e:	2100      	movs	r1, #0
 8004090:	2012      	movs	r0, #18
 8004092:	f7ff fedf 	bl	8003e54 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8004096:	2100      	movs	r1, #0
 8004098:	2013      	movs	r0, #19
 800409a:	f7ff fedb 	bl	8003e54 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800409e:	2100      	movs	r1, #0
 80040a0:	2014      	movs	r0, #20
 80040a2:	f7ff fed7 	bl	8003e54 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80040a6:	2100      	movs	r1, #0
 80040a8:	2015      	movs	r0, #21
 80040aa:	f7ff fed3 	bl	8003e54 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80040ae:	2100      	movs	r1, #0
 80040b0:	2016      	movs	r0, #22
 80040b2:	f7ff fecf 	bl	8003e54 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 80040b6:	f000 fa6d 	bl	8004594 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80040ba:	2100      	movs	r1, #0
 80040bc:	201c      	movs	r0, #28
 80040be:	f7ff fec9 	bl	8003e54 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80040c2:	2100      	movs	r1, #0
 80040c4:	201d      	movs	r0, #29
 80040c6:	f7ff fec5 	bl	8003e54 <NRF24_write_register>
	printRadioSettings();
 80040ca:	f000 fa7d 	bl	80045c8 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80040ce:	210f      	movs	r1, #15
 80040d0:	200f      	movs	r0, #15
 80040d2:	f000 f8ad 	bl	8004230 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80040d6:	2003      	movs	r0, #3
 80040d8:	f000 f910 	bl	80042fc <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80040dc:	2001      	movs	r0, #1
 80040de:	f000 f947 	bl	8004370 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80040e2:	2002      	movs	r0, #2
 80040e4:	f000 f98a 	bl	80043fc <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80040e8:	f000 f8f0 	bl	80042cc <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80040ec:	2020      	movs	r0, #32
 80040ee:	f000 f8cf 	bl	8004290 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80040f2:	f000 fa46 	bl	8004582 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80040f6:	204c      	movs	r0, #76	; 0x4c
 80040f8:	f000 f8b5 	bl	8004266 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80040fc:	f7ff ff16 	bl	8003f2c <NRF24_flush_tx>
	NRF24_flush_rx();
 8004100:	f7ff ff1c 	bl	8003f3c <NRF24_flush_rx>
	
	NRF24_powerDown();
 8004104:	f000 f9a2 	bl	800444c <NRF24_powerDown>
	
}
 8004108:	bf00      	nop
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004112:	b002      	add	sp, #8
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	200000a4 	.word	0x200000a4
 800411c:	2000009c 	.word	0x2000009c
 8004120:	200000a0 	.word	0x200000a0
 8004124:	200000a2 	.word	0x200000a2

08004128 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 800412c:	2000      	movs	r0, #0
 800412e:	f7ff fe21 	bl	8003d74 <NRF24_ce>
	NRF24_flush_tx();
 8004132:	f7ff fefb 	bl	8003f2c <NRF24_flush_tx>
	NRF24_flush_rx();
 8004136:	f7ff ff01 	bl	8003f3c <NRF24_flush_rx>
}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 800414c:	f000 fa19 	bl	8004582 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	4619      	mov	r1, r3
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f9b8 	bl	80044ca <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 800415a:	f7fc f857 	bl	800020c <HAL_GetTick>
 800415e:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8004160:	230a      	movs	r3, #10
 8004162:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8004164:	f107 030d 	add.w	r3, r7, #13
 8004168:	2201      	movs	r2, #1
 800416a:	4619      	mov	r1, r3
 800416c:	2008      	movs	r0, #8
 800416e:	f7ff fe49 	bl	8003e04 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8004172:	f7ff feeb 	bl	8003f4c <NRF24_get_status>
 8004176:	4603      	mov	r3, r0
 8004178:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004180:	2b00      	cmp	r3, #0
 8004182:	d107      	bne.n	8004194 <NRF24_write+0x54>
 8004184:	f7fc f842 	bl	800020c <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	1ad2      	subs	r2, r2, r3
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	429a      	cmp	r2, r3
 8004192:	d3e7      	bcc.n	8004164 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8004194:	f107 010b 	add.w	r1, r7, #11
 8004198:	f107 030c 	add.w	r3, r7, #12
 800419c:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <NRF24_write+0x90>)
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f9bc 	bl	800451c <NRF24_whatHappened>
	retStatus = tx_ok;
 80041a4:	7b3b      	ldrb	r3, [r7, #12]
 80041a6:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <NRF24_write+0x90>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 80041b0:	f000 f884 	bl	80042bc <NRF24_getDynamicPayloadSize>
 80041b4:	4603      	mov	r3, r0
 80041b6:	461a      	mov	r2, r3
 80041b8:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <NRF24_write+0x94>)
 80041ba:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 80041bc:	f000 f80c 	bl	80041d8 <NRF24_available>
	NRF24_flush_tx();
 80041c0:	f7ff feb4 	bl	8003f2c <NRF24_flush_tx>
	return retStatus;
 80041c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000094 	.word	0x20000094
 80041d4:	20000095 	.word	0x20000095

080041d8 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80041dc:	2000      	movs	r0, #0
 80041de:	f000 f944 	bl	800446a <NRF24_availablePipe>
 80041e2:	4603      	mov	r3, r0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80041f2:	463b      	mov	r3, r7
 80041f4:	2205      	movs	r2, #5
 80041f6:	4619      	mov	r1, r3
 80041f8:	200a      	movs	r0, #10
 80041fa:	f7ff fe4d 	bl	8003e98 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80041fe:	463b      	mov	r3, r7
 8004200:	2205      	movs	r2, #5
 8004202:	4619      	mov	r1, r3
 8004204:	2010      	movs	r0, #16
 8004206:	f7ff fe47 	bl	8003e98 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 800420a:	2320      	movs	r3, #32
 800420c:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 800420e:	4b07      	ldr	r3, [pc, #28]	; (800422c <NRF24_openWritingPipe+0x44>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	7bfa      	ldrb	r2, [r7, #15]
 8004214:	4293      	cmp	r3, r2
 8004216:	bf28      	it	cs
 8004218:	4613      	movcs	r3, r2
 800421a:	b2db      	uxtb	r3, r3
 800421c:	4619      	mov	r1, r3
 800421e:	2011      	movs	r0, #17
 8004220:	f7ff fe18 	bl	8003e54 <NRF24_write_register>
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000096 	.word	0x20000096

08004230 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	460a      	mov	r2, r1
 800423a:	71fb      	strb	r3, [r7, #7]
 800423c:	4613      	mov	r3, r2
 800423e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	b25a      	sxtb	r2, r3
 8004246:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	b25b      	sxtb	r3, r3
 8004250:	4313      	orrs	r3, r2
 8004252:	b25b      	sxtb	r3, r3
 8004254:	b2db      	uxtb	r3, r3
 8004256:	4619      	mov	r1, r3
 8004258:	2004      	movs	r0, #4
 800425a:	f7ff fdfb 	bl	8003e54 <NRF24_write_register>
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	4603      	mov	r3, r0
 800426e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8004270:	237f      	movs	r3, #127	; 0x7f
 8004272:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8004274:	7bfa      	ldrb	r2, [r7, #15]
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	4293      	cmp	r3, r2
 800427a:	bf28      	it	cs
 800427c:	4613      	movcs	r3, r2
 800427e:	b2db      	uxtb	r3, r3
 8004280:	4619      	mov	r1, r3
 8004282:	2005      	movs	r0, #5
 8004284:	f7ff fde6 	bl	8003e54 <NRF24_write_register>
}
 8004288:	bf00      	nop
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800429a:	2320      	movs	r3, #32
 800429c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800429e:	7bfa      	ldrb	r2, [r7, #15]
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	4293      	cmp	r3, r2
 80042a4:	bf28      	it	cs
 80042a6:	4613      	movcs	r3, r2
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	4b03      	ldr	r3, [pc, #12]	; (80042b8 <NRF24_setPayloadSize+0x28>)
 80042ac:	701a      	strb	r2, [r3, #0]
}
 80042ae:	bf00      	nop
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	20000096 	.word	0x20000096

080042bc <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80042c0:	2060      	movs	r0, #96	; 0x60
 80042c2:	f7ff fd77 	bl	8003db4 <NRF24_read_register>
 80042c6:	4603      	mov	r3, r0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	bd80      	pop	{r7, pc}

080042cc <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80042d0:	201d      	movs	r0, #29
 80042d2:	f7ff fd6f 	bl	8003db4 <NRF24_read_register>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f023 0304 	bic.w	r3, r3, #4
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	4619      	mov	r1, r3
 80042e0:	201d      	movs	r0, #29
 80042e2:	f7ff fdb7 	bl	8003e54 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80042e6:	2100      	movs	r1, #0
 80042e8:	201c      	movs	r0, #28
 80042ea:	f7ff fdb3 	bl	8003e54 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80042ee:	4b02      	ldr	r3, [pc, #8]	; (80042f8 <NRF24_disableDynamicPayloads+0x2c>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	701a      	strb	r2, [r3, #0]
}
 80042f4:	bf00      	nop
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000097 	.word	0x20000097

080042fc <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8004306:	2006      	movs	r0, #6
 8004308:	f7ff fd54 	bl	8003db4 <NRF24_read_register>
 800430c:	4603      	mov	r3, r0
 800430e:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	f023 0306 	bic.w	r3, r3, #6
 8004316:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	2b03      	cmp	r3, #3
 800431c:	d104      	bne.n	8004328 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	f043 0306 	orr.w	r3, r3, #6
 8004324:	73fb      	strb	r3, [r7, #15]
 8004326:	e019      	b.n	800435c <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d104      	bne.n	8004338 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 800432e:	7bfb      	ldrb	r3, [r7, #15]
 8004330:	f043 0304 	orr.w	r3, r3, #4
 8004334:	73fb      	strb	r3, [r7, #15]
 8004336:	e011      	b.n	800435c <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d104      	bne.n	8004348 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	f043 0302 	orr.w	r3, r3, #2
 8004344:	73fb      	strb	r3, [r7, #15]
 8004346:	e009      	b.n	800435c <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d006      	beq.n	800435c <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	2b04      	cmp	r3, #4
 8004352:	d103      	bne.n	800435c <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	f043 0306 	orr.w	r3, r3, #6
 800435a:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	4619      	mov	r1, r3
 8004360:	2006      	movs	r0, #6
 8004362:	f7ff fd77 	bl	8003e54 <NRF24_write_register>
}
 8004366:	bf00      	nop
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 800437a:	2300      	movs	r3, #0
 800437c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800437e:	2006      	movs	r0, #6
 8004380:	f7ff fd18 	bl	8003db4 <NRF24_read_register>
 8004384:	4603      	mov	r3, r0
 8004386:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8004388:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <NRF24_setDataRate+0x88>)
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800438e:	7bbb      	ldrb	r3, [r7, #14]
 8004390:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004394:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	2b02      	cmp	r3, #2
 800439a:	d107      	bne.n	80043ac <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 800439c:	4b16      	ldr	r3, [pc, #88]	; (80043f8 <NRF24_setDataRate+0x88>)
 800439e:	2200      	movs	r2, #0
 80043a0:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 80043a2:	7bbb      	ldrb	r3, [r7, #14]
 80043a4:	f043 0320 	orr.w	r3, r3, #32
 80043a8:	73bb      	strb	r3, [r7, #14]
 80043aa:	e00d      	b.n	80043c8 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80043ac:	79fb      	ldrb	r3, [r7, #7]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d107      	bne.n	80043c2 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80043b2:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <NRF24_setDataRate+0x88>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80043b8:	7bbb      	ldrb	r3, [r7, #14]
 80043ba:	f043 0308 	orr.w	r3, r3, #8
 80043be:	73bb      	strb	r3, [r7, #14]
 80043c0:	e002      	b.n	80043c8 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80043c2:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <NRF24_setDataRate+0x88>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80043c8:	7bbb      	ldrb	r3, [r7, #14]
 80043ca:	4619      	mov	r1, r3
 80043cc:	2006      	movs	r0, #6
 80043ce:	f7ff fd41 	bl	8003e54 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80043d2:	2006      	movs	r0, #6
 80043d4:	f7ff fcee 	bl	8003db4 <NRF24_read_register>
 80043d8:	4603      	mov	r3, r0
 80043da:	461a      	mov	r2, r3
 80043dc:	7bbb      	ldrb	r3, [r7, #14]
 80043de:	4293      	cmp	r3, r2
 80043e0:	d102      	bne.n	80043e8 <NRF24_setDataRate+0x78>
  {
    result = true;
 80043e2:	2301      	movs	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
 80043e6:	e002      	b.n	80043ee <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80043e8:	4b03      	ldr	r3, [pc, #12]	; (80043f8 <NRF24_setDataRate+0x88>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20000098 	.word	0x20000098

080043fc <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8004406:	2000      	movs	r0, #0
 8004408:	f7ff fcd4 	bl	8003db4 <NRF24_read_register>
 800440c:	4603      	mov	r3, r0
 800440e:	f023 030c 	bic.w	r3, r3, #12
 8004412:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00f      	beq.n	800443a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d104      	bne.n	800442a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	f043 0308 	orr.w	r3, r3, #8
 8004426:	73fb      	strb	r3, [r7, #15]
 8004428:	e007      	b.n	800443a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	f043 0308 	orr.w	r3, r3, #8
 8004430:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	f043 0304 	orr.w	r3, r3, #4
 8004438:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	4619      	mov	r1, r3
 800443e:	2000      	movs	r0, #0
 8004440:	f7ff fd08 	bl	8003e54 <NRF24_write_register>
}
 8004444:	bf00      	nop
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8004450:	2000      	movs	r0, #0
 8004452:	f7ff fcaf 	bl	8003db4 <NRF24_read_register>
 8004456:	4603      	mov	r3, r0
 8004458:	f023 0302 	bic.w	r3, r3, #2
 800445c:	b2db      	uxtb	r3, r3
 800445e:	4619      	mov	r1, r3
 8004460:	2000      	movs	r0, #0
 8004462:	f7ff fcf7 	bl	8003e54 <NRF24_write_register>
}
 8004466:	bf00      	nop
 8004468:	bd80      	pop	{r7, pc}

0800446a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8004472:	f7ff fd6b 	bl	8003f4c <NRF24_get_status>
 8004476:	4603      	mov	r3, r0
 8004478:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf14      	ite	ne
 8004484:	2301      	movne	r3, #1
 8004486:	2300      	moveq	r3, #0
 8004488:	73bb      	strb	r3, [r7, #14]

  if (result)
 800448a:	7bbb      	ldrb	r3, [r7, #14]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d017      	beq.n	80044c0 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	085b      	lsrs	r3, r3, #1
 800449a:	b2db      	uxtb	r3, r3
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80044a6:	2140      	movs	r1, #64	; 0x40
 80044a8:	2007      	movs	r0, #7
 80044aa:	f7ff fcd3 	bl	8003e54 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80044b8:	2120      	movs	r1, #32
 80044ba:	2007      	movs	r0, #7
 80044bc:	f7ff fcca 	bl	8003e54 <NRF24_write_register>
    }
  }
  return result;
 80044c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	460b      	mov	r3, r1
 80044d4:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 80044d6:	2000      	movs	r0, #0
 80044d8:	f7ff fc6c 	bl	8003db4 <NRF24_read_register>
 80044dc:	4603      	mov	r3, r0
 80044de:	f043 0302 	orr.w	r3, r3, #2
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	f023 0301 	bic.w	r3, r3, #1
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	4619      	mov	r1, r3
 80044ec:	2000      	movs	r0, #0
 80044ee:	f7ff fcb1 	bl	8003e54 <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 80044f2:	2096      	movs	r0, #150	; 0x96
 80044f4:	f7ff fbfe 	bl	8003cf4 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	4619      	mov	r1, r3
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff fcf3 	bl	8003ee8 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8004502:	2001      	movs	r0, #1
 8004504:	f7ff fc36 	bl	8003d74 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8004508:	200f      	movs	r0, #15
 800450a:	f7ff fbf3 	bl	8003cf4 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 800450e:	2000      	movs	r0, #0
 8004510:	f7ff fc30 	bl	8003d74 <NRF24_ce>
}
 8004514:	bf00      	nop
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8004528:	f7ff fd10 	bl	8003f4c <NRF24_get_status>
 800452c:	4603      	mov	r3, r0
 800452e:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8004536:	2170      	movs	r1, #112	; 0x70
 8004538:	2007      	movs	r0, #7
 800453a:	f7ff fc8b 	bl	8003e54 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 800453e:	7dfb      	ldrb	r3, [r7, #23]
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	bf14      	ite	ne
 8004548:	2301      	movne	r3, #1
 800454a:	2300      	moveq	r3, #0
 800454c:	b2da      	uxtb	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8004552:	7dfb      	ldrb	r3, [r7, #23]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b00      	cmp	r3, #0
 800455a:	bf14      	ite	ne
 800455c:	2301      	movne	r3, #1
 800455e:	2300      	moveq	r3, #0
 8004560:	b2da      	uxtb	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8004566:	7dfb      	ldrb	r3, [r7, #23]
 8004568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	bf14      	ite	ne
 8004570:	2301      	movne	r3, #1
 8004572:	2300      	moveq	r3, #0
 8004574:	b2da      	uxtb	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	701a      	strb	r2, [r3, #0]
}
 800457a:	bf00      	nop
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8004586:	2170      	movs	r1, #112	; 0x70
 8004588:	2007      	movs	r0, #7
 800458a:	f7ff fc63 	bl	8003e54 <NRF24_write_register>
}
 800458e:	bf00      	nop
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800459a:	2000      	movs	r0, #0
 800459c:	f7ff fbca 	bl	8003d34 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80045a0:	2350      	movs	r3, #80	; 0x50
 80045a2:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80045a4:	2373      	movs	r3, #115	; 0x73
 80045a6:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80045a8:	1d39      	adds	r1, r7, #4
 80045aa:	2364      	movs	r3, #100	; 0x64
 80045ac:	2202      	movs	r2, #2
 80045ae:	4805      	ldr	r0, [pc, #20]	; (80045c4 <NRF24_ACTIVATE_cmd+0x30>)
 80045b0:	f7fe f8d8 	bl	8002764 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80045b4:	2001      	movs	r0, #1
 80045b6:	f7ff fbbd 	bl	8003d34 <NRF24_csn>
}
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	200000a4 	.word	0x200000a4

080045c8 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80045c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ca:	b0a1      	sub	sp, #132	; 0x84
 80045cc:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80045ce:	f107 0308 	add.w	r3, r7, #8
 80045d2:	4ab6      	ldr	r2, [pc, #728]	; (80048ac <printRadioSettings+0x2e4>)
 80045d4:	461c      	mov	r4, r3
 80045d6:	4615      	mov	r5, r2
 80045d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045e4:	682b      	ldr	r3, [r5, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	8022      	strh	r2, [r4, #0]
 80045ea:	3402      	adds	r4, #2
 80045ec:	0c1b      	lsrs	r3, r3, #16
 80045ee:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80045f0:	f107 0308 	add.w	r3, r7, #8
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fb fda9 	bl	800014c <strlen>
 80045fa:	4603      	mov	r3, r0
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	f107 0108 	add.w	r1, r7, #8
 8004602:	230a      	movs	r3, #10
 8004604:	48aa      	ldr	r0, [pc, #680]	; (80048b0 <printRadioSettings+0x2e8>)
 8004606:	f7ff f97b 	bl	8003900 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800460a:	2000      	movs	r0, #0
 800460c:	f7ff fbd2 	bl	8003db4 <NRF24_read_register>
 8004610:	4603      	mov	r3, r0
 8004612:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8004616:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d020      	beq.n	8004664 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8004622:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <printRadioSettings+0x7e>
 800462e:	f107 0308 	add.w	r3, r7, #8
 8004632:	4aa0      	ldr	r2, [pc, #640]	; (80048b4 <printRadioSettings+0x2ec>)
 8004634:	461c      	mov	r4, r3
 8004636:	4615      	mov	r5, r2
 8004638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800463a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800463c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004644:	e017      	b.n	8004676 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8004646:	f107 0308 	add.w	r3, r7, #8
 800464a:	4a9b      	ldr	r2, [pc, #620]	; (80048b8 <printRadioSettings+0x2f0>)
 800464c:	461c      	mov	r4, r3
 800464e:	4615      	mov	r5, r2
 8004650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004654:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004658:	c403      	stmia	r4!, {r0, r1}
 800465a:	8022      	strh	r2, [r4, #0]
 800465c:	3402      	adds	r4, #2
 800465e:	0c13      	lsrs	r3, r2, #16
 8004660:	7023      	strb	r3, [r4, #0]
 8004662:	e008      	b.n	8004676 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8004664:	f107 0308 	add.w	r3, r7, #8
 8004668:	4a94      	ldr	r2, [pc, #592]	; (80048bc <printRadioSettings+0x2f4>)
 800466a:	461c      	mov	r4, r3
 800466c:	4615      	mov	r5, r2
 800466e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004672:	682b      	ldr	r3, [r5, #0]
 8004674:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004676:	f107 0308 	add.w	r3, r7, #8
 800467a:	4618      	mov	r0, r3
 800467c:	f7fb fd66 	bl	800014c <strlen>
 8004680:	4603      	mov	r3, r0
 8004682:	b29a      	uxth	r2, r3
 8004684:	f107 0108 	add.w	r1, r7, #8
 8004688:	230a      	movs	r3, #10
 800468a:	4889      	ldr	r0, [pc, #548]	; (80048b0 <printRadioSettings+0x2e8>)
 800468c:	f7ff f938 	bl	8003900 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8004690:	2001      	movs	r0, #1
 8004692:	f7ff fb8f 	bl	8003db4 <NRF24_read_register>
 8004696:	4603      	mov	r3, r0
 8004698:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800469c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80046a0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bfcc      	ite	gt
 80046a8:	2301      	movgt	r3, #1
 80046aa:	2300      	movle	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80046b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80046b4:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bfcc      	ite	gt
 80046bc:	2301      	movgt	r3, #1
 80046be:	2300      	movle	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80046c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80046c8:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	bfcc      	ite	gt
 80046d0:	2301      	movgt	r3, #1
 80046d2:	2300      	movle	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80046d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80046dc:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	bfcc      	ite	gt
 80046e4:	2301      	movgt	r3, #1
 80046e6:	2300      	movle	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80046ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80046f0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bfcc      	ite	gt
 80046f8:	2301      	movgt	r3, #1
 80046fa:	2300      	movle	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004700:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004704:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004708:	2b00      	cmp	r3, #0
 800470a:	bfcc      	ite	gt
 800470c:	2301      	movgt	r3, #1
 800470e:	2300      	movle	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f107 0008 	add.w	r0, r7, #8
 8004716:	9303      	str	r3, [sp, #12]
 8004718:	9402      	str	r4, [sp, #8]
 800471a:	9101      	str	r1, [sp, #4]
 800471c:	9200      	str	r2, [sp, #0]
 800471e:	4633      	mov	r3, r6
 8004720:	462a      	mov	r2, r5
 8004722:	4967      	ldr	r1, [pc, #412]	; (80048c0 <printRadioSettings+0x2f8>)
 8004724:	f001 fa64 	bl	8005bf0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004728:	f107 0308 	add.w	r3, r7, #8
 800472c:	4618      	mov	r0, r3
 800472e:	f7fb fd0d 	bl	800014c <strlen>
 8004732:	4603      	mov	r3, r0
 8004734:	b29a      	uxth	r2, r3
 8004736:	f107 0108 	add.w	r1, r7, #8
 800473a:	230a      	movs	r3, #10
 800473c:	485c      	ldr	r0, [pc, #368]	; (80048b0 <printRadioSettings+0x2e8>)
 800473e:	f7ff f8df 	bl	8003900 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8004742:	2002      	movs	r0, #2
 8004744:	f7ff fb36 	bl	8003db4 <NRF24_read_register>
 8004748:	4603      	mov	r3, r0
 800474a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800474e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004752:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004756:	2b00      	cmp	r3, #0
 8004758:	bfcc      	ite	gt
 800475a:	2301      	movgt	r3, #1
 800475c:	2300      	movle	r3, #0
 800475e:	b2db      	uxtb	r3, r3
 8004760:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004762:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004766:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800476a:	2b00      	cmp	r3, #0
 800476c:	bfcc      	ite	gt
 800476e:	2301      	movgt	r3, #1
 8004770:	2300      	movle	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004776:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800477a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800477e:	2b00      	cmp	r3, #0
 8004780:	bfcc      	ite	gt
 8004782:	2301      	movgt	r3, #1
 8004784:	2300      	movle	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800478a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800478e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004792:	2b00      	cmp	r3, #0
 8004794:	bfcc      	ite	gt
 8004796:	2301      	movgt	r3, #1
 8004798:	2300      	movle	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800479e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80047a2:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bfcc      	ite	gt
 80047aa:	2301      	movgt	r3, #1
 80047ac:	2300      	movle	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80047b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80047b6:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bfcc      	ite	gt
 80047be:	2301      	movgt	r3, #1
 80047c0:	2300      	movle	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f107 0008 	add.w	r0, r7, #8
 80047c8:	9303      	str	r3, [sp, #12]
 80047ca:	9402      	str	r4, [sp, #8]
 80047cc:	9101      	str	r1, [sp, #4]
 80047ce:	9200      	str	r2, [sp, #0]
 80047d0:	4633      	mov	r3, r6
 80047d2:	462a      	mov	r2, r5
 80047d4:	493b      	ldr	r1, [pc, #236]	; (80048c4 <printRadioSettings+0x2fc>)
 80047d6:	f001 fa0b 	bl	8005bf0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80047da:	f107 0308 	add.w	r3, r7, #8
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fb fcb4 	bl	800014c <strlen>
 80047e4:	4603      	mov	r3, r0
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	f107 0108 	add.w	r1, r7, #8
 80047ec:	230a      	movs	r3, #10
 80047ee:	4830      	ldr	r0, [pc, #192]	; (80048b0 <printRadioSettings+0x2e8>)
 80047f0:	f7ff f886 	bl	8003900 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80047f4:	2003      	movs	r0, #3
 80047f6:	f7ff fadd 	bl	8003db4 <NRF24_read_register>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8004804:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004808:	3302      	adds	r3, #2
 800480a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800480e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8004812:	f107 0308 	add.w	r3, r7, #8
 8004816:	492c      	ldr	r1, [pc, #176]	; (80048c8 <printRadioSettings+0x300>)
 8004818:	4618      	mov	r0, r3
 800481a:	f001 f9e9 	bl	8005bf0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800481e:	f107 0308 	add.w	r3, r7, #8
 8004822:	4618      	mov	r0, r3
 8004824:	f7fb fc92 	bl	800014c <strlen>
 8004828:	4603      	mov	r3, r0
 800482a:	b29a      	uxth	r2, r3
 800482c:	f107 0108 	add.w	r1, r7, #8
 8004830:	230a      	movs	r3, #10
 8004832:	481f      	ldr	r0, [pc, #124]	; (80048b0 <printRadioSettings+0x2e8>)
 8004834:	f7ff f864 	bl	8003900 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8004838:	2005      	movs	r0, #5
 800483a:	f7ff fabb 	bl	8003db4 <NRF24_read_register>
 800483e:	4603      	mov	r3, r0
 8004840:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8004844:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004848:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800484c:	f107 0308 	add.w	r3, r7, #8
 8004850:	491e      	ldr	r1, [pc, #120]	; (80048cc <printRadioSettings+0x304>)
 8004852:	4618      	mov	r0, r3
 8004854:	f001 f9cc 	bl	8005bf0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004858:	f107 0308 	add.w	r3, r7, #8
 800485c:	4618      	mov	r0, r3
 800485e:	f7fb fc75 	bl	800014c <strlen>
 8004862:	4603      	mov	r3, r0
 8004864:	b29a      	uxth	r2, r3
 8004866:	f107 0108 	add.w	r1, r7, #8
 800486a:	230a      	movs	r3, #10
 800486c:	4810      	ldr	r0, [pc, #64]	; (80048b0 <printRadioSettings+0x2e8>)
 800486e:	f7ff f847 	bl	8003900 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8004872:	2006      	movs	r0, #6
 8004874:	f7ff fa9e 	bl	8003db4 <NRF24_read_register>
 8004878:	4603      	mov	r3, r0
 800487a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800487e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d024      	beq.n	80048d4 <printRadioSettings+0x30c>
 800488a:	f107 0308 	add.w	r3, r7, #8
 800488e:	4a10      	ldr	r2, [pc, #64]	; (80048d0 <printRadioSettings+0x308>)
 8004890:	461c      	mov	r4, r3
 8004892:	4615      	mov	r5, r2
 8004894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004898:	e895 0003 	ldmia.w	r5, {r0, r1}
 800489c:	6020      	str	r0, [r4, #0]
 800489e:	3404      	adds	r4, #4
 80048a0:	8021      	strh	r1, [r4, #0]
 80048a2:	3402      	adds	r4, #2
 80048a4:	0c0b      	lsrs	r3, r1, #16
 80048a6:	7023      	strb	r3, [r4, #0]
 80048a8:	e023      	b.n	80048f2 <printRadioSettings+0x32a>
 80048aa:	bf00      	nop
 80048ac:	08006470 	.word	0x08006470
 80048b0:	200000fc 	.word	0x200000fc
 80048b4:	080064a4 	.word	0x080064a4
 80048b8:	080064c0 	.word	0x080064c0
 80048bc:	080064dc 	.word	0x080064dc
 80048c0:	080064f0 	.word	0x080064f0
 80048c4:	08006534 	.word	0x08006534
 80048c8:	08006580 	.word	0x08006580
 80048cc:	0800659c 	.word	0x0800659c
 80048d0:	080065b0 	.word	0x080065b0
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80048d4:	f107 0308 	add.w	r3, r7, #8
 80048d8:	4a29      	ldr	r2, [pc, #164]	; (8004980 <printRadioSettings+0x3b8>)
 80048da:	461c      	mov	r4, r3
 80048dc:	4615      	mov	r5, r2
 80048de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80048e6:	6020      	str	r0, [r4, #0]
 80048e8:	3404      	adds	r4, #4
 80048ea:	8021      	strh	r1, [r4, #0]
 80048ec:	3402      	adds	r4, #2
 80048ee:	0c0b      	lsrs	r3, r1, #16
 80048f0:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80048f2:	f107 0308 	add.w	r3, r7, #8
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fb fc28 	bl	800014c <strlen>
 80048fc:	4603      	mov	r3, r0
 80048fe:	b29a      	uxth	r2, r3
 8004900:	f107 0108 	add.w	r1, r7, #8
 8004904:	230a      	movs	r3, #10
 8004906:	481f      	ldr	r0, [pc, #124]	; (8004984 <printRadioSettings+0x3bc>)
 8004908:	f7fe fffa 	bl	8003900 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 800490c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004910:	f003 0306 	and.w	r3, r3, #6
 8004914:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8004918:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800491c:	085b      	lsrs	r3, r3, #1
 800491e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8004922:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004926:	2b00      	cmp	r3, #0
 8004928:	d109      	bne.n	800493e <printRadioSettings+0x376>
 800492a:	f107 0308 	add.w	r3, r7, #8
 800492e:	4a16      	ldr	r2, [pc, #88]	; (8004988 <printRadioSettings+0x3c0>)
 8004930:	461c      	mov	r4, r3
 8004932:	4615      	mov	r5, r2
 8004934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	6023      	str	r3, [r4, #0]
 800493c:	e037      	b.n	80049ae <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800493e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004942:	2b01      	cmp	r3, #1
 8004944:	d109      	bne.n	800495a <printRadioSettings+0x392>
 8004946:	f107 0308 	add.w	r3, r7, #8
 800494a:	4a10      	ldr	r2, [pc, #64]	; (800498c <printRadioSettings+0x3c4>)
 800494c:	461c      	mov	r4, r3
 800494e:	4615      	mov	r5, r2
 8004950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	6023      	str	r3, [r4, #0]
 8004958:	e029      	b.n	80049ae <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800495a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800495e:	2b02      	cmp	r3, #2
 8004960:	d118      	bne.n	8004994 <printRadioSettings+0x3cc>
 8004962:	f107 0308 	add.w	r3, r7, #8
 8004966:	4a0a      	ldr	r2, [pc, #40]	; (8004990 <printRadioSettings+0x3c8>)
 8004968:	461c      	mov	r4, r3
 800496a:	4615      	mov	r5, r2
 800496c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800496e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	8022      	strh	r2, [r4, #0]
 8004976:	3402      	adds	r4, #2
 8004978:	0c1b      	lsrs	r3, r3, #16
 800497a:	7023      	strb	r3, [r4, #0]
 800497c:	e017      	b.n	80049ae <printRadioSettings+0x3e6>
 800497e:	bf00      	nop
 8004980:	080065c8 	.word	0x080065c8
 8004984:	200000fc 	.word	0x200000fc
 8004988:	080065e0 	.word	0x080065e0
 800498c:	080065f4 	.word	0x080065f4
 8004990:	08006608 	.word	0x08006608
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8004994:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004998:	2b03      	cmp	r3, #3
 800499a:	d108      	bne.n	80049ae <printRadioSettings+0x3e6>
 800499c:	f107 0308 	add.w	r3, r7, #8
 80049a0:	4ad7      	ldr	r2, [pc, #860]	; (8004d00 <printRadioSettings+0x738>)
 80049a2:	461c      	mov	r4, r3
 80049a4:	4615      	mov	r5, r2
 80049a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049aa:	682b      	ldr	r3, [r5, #0]
 80049ac:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80049ae:	f107 0308 	add.w	r3, r7, #8
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fb fbca 	bl	800014c <strlen>
 80049b8:	4603      	mov	r3, r0
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	f107 0108 	add.w	r1, r7, #8
 80049c0:	230a      	movs	r3, #10
 80049c2:	48d0      	ldr	r0, [pc, #832]	; (8004d04 <printRadioSettings+0x73c>)
 80049c4:	f7fe ff9c 	bl	8003900 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80049c8:	463b      	mov	r3, r7
 80049ca:	2205      	movs	r2, #5
 80049cc:	4619      	mov	r1, r3
 80049ce:	200a      	movs	r0, #10
 80049d0:	f7ff fa18 	bl	8003e04 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80049d4:	793b      	ldrb	r3, [r7, #4]
 80049d6:	461c      	mov	r4, r3
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	461d      	mov	r5, r3
 80049dc:	78bb      	ldrb	r3, [r7, #2]
 80049de:	787a      	ldrb	r2, [r7, #1]
 80049e0:	7839      	ldrb	r1, [r7, #0]
 80049e2:	f107 0008 	add.w	r0, r7, #8
 80049e6:	9102      	str	r1, [sp, #8]
 80049e8:	9201      	str	r2, [sp, #4]
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	462b      	mov	r3, r5
 80049ee:	4622      	mov	r2, r4
 80049f0:	49c5      	ldr	r1, [pc, #788]	; (8004d08 <printRadioSettings+0x740>)
 80049f2:	f001 f8fd 	bl	8005bf0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80049f6:	f107 0308 	add.w	r3, r7, #8
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fb fba6 	bl	800014c <strlen>
 8004a00:	4603      	mov	r3, r0
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	f107 0108 	add.w	r1, r7, #8
 8004a08:	230a      	movs	r3, #10
 8004a0a:	48be      	ldr	r0, [pc, #760]	; (8004d04 <printRadioSettings+0x73c>)
 8004a0c:	f7fe ff78 	bl	8003900 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8004a10:	463b      	mov	r3, r7
 8004a12:	2205      	movs	r2, #5
 8004a14:	4619      	mov	r1, r3
 8004a16:	200b      	movs	r0, #11
 8004a18:	f7ff f9f4 	bl	8003e04 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8004a1c:	793b      	ldrb	r3, [r7, #4]
 8004a1e:	461c      	mov	r4, r3
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	461d      	mov	r5, r3
 8004a24:	78bb      	ldrb	r3, [r7, #2]
 8004a26:	787a      	ldrb	r2, [r7, #1]
 8004a28:	7839      	ldrb	r1, [r7, #0]
 8004a2a:	f107 0008 	add.w	r0, r7, #8
 8004a2e:	9102      	str	r1, [sp, #8]
 8004a30:	9201      	str	r2, [sp, #4]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	462b      	mov	r3, r5
 8004a36:	4622      	mov	r2, r4
 8004a38:	49b4      	ldr	r1, [pc, #720]	; (8004d0c <printRadioSettings+0x744>)
 8004a3a:	f001 f8d9 	bl	8005bf0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a3e:	f107 0308 	add.w	r3, r7, #8
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fb fb82 	bl	800014c <strlen>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	f107 0108 	add.w	r1, r7, #8
 8004a50:	230a      	movs	r3, #10
 8004a52:	48ac      	ldr	r0, [pc, #688]	; (8004d04 <printRadioSettings+0x73c>)
 8004a54:	f7fe ff54 	bl	8003900 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8004a58:	463b      	mov	r3, r7
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	200c      	movs	r0, #12
 8004a60:	f7ff f9d0 	bl	8003e04 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004a64:	783b      	ldrb	r3, [r7, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	f107 0308 	add.w	r3, r7, #8
 8004a6c:	49a8      	ldr	r1, [pc, #672]	; (8004d10 <printRadioSettings+0x748>)
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 f8be 	bl	8005bf0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a74:	f107 0308 	add.w	r3, r7, #8
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fb fb67 	bl	800014c <strlen>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	f107 0108 	add.w	r1, r7, #8
 8004a86:	230a      	movs	r3, #10
 8004a88:	489e      	ldr	r0, [pc, #632]	; (8004d04 <printRadioSettings+0x73c>)
 8004a8a:	f7fe ff39 	bl	8003900 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8004a8e:	463b      	mov	r3, r7
 8004a90:	2201      	movs	r2, #1
 8004a92:	4619      	mov	r1, r3
 8004a94:	200d      	movs	r0, #13
 8004a96:	f7ff f9b5 	bl	8003e04 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004a9a:	783b      	ldrb	r3, [r7, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f107 0308 	add.w	r3, r7, #8
 8004aa2:	499c      	ldr	r1, [pc, #624]	; (8004d14 <printRadioSettings+0x74c>)
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f001 f8a3 	bl	8005bf0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004aaa:	f107 0308 	add.w	r3, r7, #8
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fb fb4c 	bl	800014c <strlen>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	f107 0108 	add.w	r1, r7, #8
 8004abc:	230a      	movs	r3, #10
 8004abe:	4891      	ldr	r0, [pc, #580]	; (8004d04 <printRadioSettings+0x73c>)
 8004ac0:	f7fe ff1e 	bl	8003900 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8004ac4:	463b      	mov	r3, r7
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	4619      	mov	r1, r3
 8004aca:	200e      	movs	r0, #14
 8004acc:	f7ff f99a 	bl	8003e04 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004ad0:	783b      	ldrb	r3, [r7, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f107 0308 	add.w	r3, r7, #8
 8004ad8:	498f      	ldr	r1, [pc, #572]	; (8004d18 <printRadioSettings+0x750>)
 8004ada:	4618      	mov	r0, r3
 8004adc:	f001 f888 	bl	8005bf0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004ae0:	f107 0308 	add.w	r3, r7, #8
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fb fb31 	bl	800014c <strlen>
 8004aea:	4603      	mov	r3, r0
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	f107 0108 	add.w	r1, r7, #8
 8004af2:	230a      	movs	r3, #10
 8004af4:	4883      	ldr	r0, [pc, #524]	; (8004d04 <printRadioSettings+0x73c>)
 8004af6:	f7fe ff03 	bl	8003900 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8004afa:	463b      	mov	r3, r7
 8004afc:	2201      	movs	r2, #1
 8004afe:	4619      	mov	r1, r3
 8004b00:	200f      	movs	r0, #15
 8004b02:	f7ff f97f 	bl	8003e04 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004b06:	783b      	ldrb	r3, [r7, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	f107 0308 	add.w	r3, r7, #8
 8004b0e:	4983      	ldr	r1, [pc, #524]	; (8004d1c <printRadioSettings+0x754>)
 8004b10:	4618      	mov	r0, r3
 8004b12:	f001 f86d 	bl	8005bf0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004b16:	f107 0308 	add.w	r3, r7, #8
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fb fb16 	bl	800014c <strlen>
 8004b20:	4603      	mov	r3, r0
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	f107 0108 	add.w	r1, r7, #8
 8004b28:	230a      	movs	r3, #10
 8004b2a:	4876      	ldr	r0, [pc, #472]	; (8004d04 <printRadioSettings+0x73c>)
 8004b2c:	f7fe fee8 	bl	8003900 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8004b30:	463b      	mov	r3, r7
 8004b32:	2205      	movs	r2, #5
 8004b34:	4619      	mov	r1, r3
 8004b36:	2010      	movs	r0, #16
 8004b38:	f7ff f964 	bl	8003e04 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8004b3c:	793b      	ldrb	r3, [r7, #4]
 8004b3e:	461c      	mov	r4, r3
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	461d      	mov	r5, r3
 8004b44:	78bb      	ldrb	r3, [r7, #2]
 8004b46:	787a      	ldrb	r2, [r7, #1]
 8004b48:	7839      	ldrb	r1, [r7, #0]
 8004b4a:	f107 0008 	add.w	r0, r7, #8
 8004b4e:	9102      	str	r1, [sp, #8]
 8004b50:	9201      	str	r2, [sp, #4]
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	462b      	mov	r3, r5
 8004b56:	4622      	mov	r2, r4
 8004b58:	4971      	ldr	r1, [pc, #452]	; (8004d20 <printRadioSettings+0x758>)
 8004b5a:	f001 f849 	bl	8005bf0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004b5e:	f107 0308 	add.w	r3, r7, #8
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fb faf2 	bl	800014c <strlen>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	f107 0108 	add.w	r1, r7, #8
 8004b70:	230a      	movs	r3, #10
 8004b72:	4864      	ldr	r0, [pc, #400]	; (8004d04 <printRadioSettings+0x73c>)
 8004b74:	f7fe fec4 	bl	8003900 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8004b78:	2011      	movs	r0, #17
 8004b7a:	f7ff f91b 	bl	8003db4 <NRF24_read_register>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004b84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b8c:	f107 0308 	add.w	r3, r7, #8
 8004b90:	4964      	ldr	r1, [pc, #400]	; (8004d24 <printRadioSettings+0x75c>)
 8004b92:	4618      	mov	r0, r3
 8004b94:	f001 f82c 	bl	8005bf0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004b98:	f107 0308 	add.w	r3, r7, #8
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fb fad5 	bl	800014c <strlen>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	f107 0108 	add.w	r1, r7, #8
 8004baa:	230a      	movs	r3, #10
 8004bac:	4855      	ldr	r0, [pc, #340]	; (8004d04 <printRadioSettings+0x73c>)
 8004bae:	f7fe fea7 	bl	8003900 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8004bb2:	2012      	movs	r0, #18
 8004bb4:	f7ff f8fe 	bl	8003db4 <NRF24_read_register>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004bbe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004bc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bc6:	f107 0308 	add.w	r3, r7, #8
 8004bca:	4957      	ldr	r1, [pc, #348]	; (8004d28 <printRadioSettings+0x760>)
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f001 f80f 	bl	8005bf0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004bd2:	f107 0308 	add.w	r3, r7, #8
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fb fab8 	bl	800014c <strlen>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	f107 0108 	add.w	r1, r7, #8
 8004be4:	230a      	movs	r3, #10
 8004be6:	4847      	ldr	r0, [pc, #284]	; (8004d04 <printRadioSettings+0x73c>)
 8004be8:	f7fe fe8a 	bl	8003900 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8004bec:	2013      	movs	r0, #19
 8004bee:	f7ff f8e1 	bl	8003db4 <NRF24_read_register>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004bf8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004bfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c00:	f107 0308 	add.w	r3, r7, #8
 8004c04:	4949      	ldr	r1, [pc, #292]	; (8004d2c <printRadioSettings+0x764>)
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fff2 	bl	8005bf0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004c0c:	f107 0308 	add.w	r3, r7, #8
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fb fa9b 	bl	800014c <strlen>
 8004c16:	4603      	mov	r3, r0
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	f107 0108 	add.w	r1, r7, #8
 8004c1e:	230a      	movs	r3, #10
 8004c20:	4838      	ldr	r0, [pc, #224]	; (8004d04 <printRadioSettings+0x73c>)
 8004c22:	f7fe fe6d 	bl	8003900 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8004c26:	2014      	movs	r0, #20
 8004c28:	f7ff f8c4 	bl	8003db4 <NRF24_read_register>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004c32:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c3a:	f107 0308 	add.w	r3, r7, #8
 8004c3e:	493c      	ldr	r1, [pc, #240]	; (8004d30 <printRadioSettings+0x768>)
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 ffd5 	bl	8005bf0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004c46:	f107 0308 	add.w	r3, r7, #8
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fb fa7e 	bl	800014c <strlen>
 8004c50:	4603      	mov	r3, r0
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	f107 0108 	add.w	r1, r7, #8
 8004c58:	230a      	movs	r3, #10
 8004c5a:	482a      	ldr	r0, [pc, #168]	; (8004d04 <printRadioSettings+0x73c>)
 8004c5c:	f7fe fe50 	bl	8003900 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8004c60:	2015      	movs	r0, #21
 8004c62:	f7ff f8a7 	bl	8003db4 <NRF24_read_register>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004c6c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c74:	f107 0308 	add.w	r3, r7, #8
 8004c78:	492e      	ldr	r1, [pc, #184]	; (8004d34 <printRadioSettings+0x76c>)
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 ffb8 	bl	8005bf0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004c80:	f107 0308 	add.w	r3, r7, #8
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fb fa61 	bl	800014c <strlen>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	f107 0108 	add.w	r1, r7, #8
 8004c92:	230a      	movs	r3, #10
 8004c94:	481b      	ldr	r0, [pc, #108]	; (8004d04 <printRadioSettings+0x73c>)
 8004c96:	f7fe fe33 	bl	8003900 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8004c9a:	2016      	movs	r0, #22
 8004c9c:	f7ff f88a 	bl	8003db4 <NRF24_read_register>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004ca6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004caa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cae:	f107 0308 	add.w	r3, r7, #8
 8004cb2:	4921      	ldr	r1, [pc, #132]	; (8004d38 <printRadioSettings+0x770>)
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 ff9b 	bl	8005bf0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004cba:	f107 0308 	add.w	r3, r7, #8
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fb fa44 	bl	800014c <strlen>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	f107 0108 	add.w	r1, r7, #8
 8004ccc:	230a      	movs	r3, #10
 8004cce:	480d      	ldr	r0, [pc, #52]	; (8004d04 <printRadioSettings+0x73c>)
 8004cd0:	f7fe fe16 	bl	8003900 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8004cd4:	201c      	movs	r0, #28
 8004cd6:	f7ff f86d 	bl	8003db4 <NRF24_read_register>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004ce0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ce4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bfcc      	ite	gt
 8004cec:	2301      	movgt	r3, #1
 8004cee:	2300      	movle	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004cf4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	e01e      	b.n	8004d3c <printRadioSettings+0x774>
 8004cfe:	bf00      	nop
 8004d00:	0800661c 	.word	0x0800661c
 8004d04:	200000fc 	.word	0x200000fc
 8004d08:	08006630 	.word	0x08006630
 8004d0c:	08006660 	.word	0x08006660
 8004d10:	08006690 	.word	0x08006690
 8004d14:	080066b8 	.word	0x080066b8
 8004d18:	080066e0 	.word	0x080066e0
 8004d1c:	08006708 	.word	0x08006708
 8004d20:	08006730 	.word	0x08006730
 8004d24:	0800675c 	.word	0x0800675c
 8004d28:	08006778 	.word	0x08006778
 8004d2c:	08006794 	.word	0x08006794
 8004d30:	080067b0 	.word	0x080067b0
 8004d34:	080067cc 	.word	0x080067cc
 8004d38:	080067e8 	.word	0x080067e8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	bfcc      	ite	gt
 8004d40:	2301      	movgt	r3, #1
 8004d42:	2300      	movle	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004d48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d4c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bfcc      	ite	gt
 8004d54:	2301      	movgt	r3, #1
 8004d56:	2300      	movle	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004d5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d60:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	bfcc      	ite	gt
 8004d68:	2301      	movgt	r3, #1
 8004d6a:	2300      	movle	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004d70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d74:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bfcc      	ite	gt
 8004d7c:	2301      	movgt	r3, #1
 8004d7e:	2300      	movle	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004d84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d88:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bfcc      	ite	gt
 8004d90:	2301      	movgt	r3, #1
 8004d92:	2300      	movle	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	f107 0008 	add.w	r0, r7, #8
 8004d9a:	9303      	str	r3, [sp, #12]
 8004d9c:	9402      	str	r4, [sp, #8]
 8004d9e:	9101      	str	r1, [sp, #4]
 8004da0:	9200      	str	r2, [sp, #0]
 8004da2:	4633      	mov	r3, r6
 8004da4:	462a      	mov	r2, r5
 8004da6:	494a      	ldr	r1, [pc, #296]	; (8004ed0 <printRadioSettings+0x908>)
 8004da8:	f000 ff22 	bl	8005bf0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004dac:	f107 0308 	add.w	r3, r7, #8
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fb f9cb 	bl	800014c <strlen>
 8004db6:	4603      	mov	r3, r0
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	f107 0108 	add.w	r1, r7, #8
 8004dbe:	230a      	movs	r3, #10
 8004dc0:	4844      	ldr	r0, [pc, #272]	; (8004ed4 <printRadioSettings+0x90c>)
 8004dc2:	f7fe fd9d 	bl	8003900 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8004dc6:	201d      	movs	r0, #29
 8004dc8:	f7fe fff4 	bl	8003db4 <NRF24_read_register>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8004dd2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00c      	beq.n	8004df8 <printRadioSettings+0x830>
 8004dde:	f107 0308 	add.w	r3, r7, #8
 8004de2:	4a3d      	ldr	r2, [pc, #244]	; (8004ed8 <printRadioSettings+0x910>)
 8004de4:	461c      	mov	r4, r3
 8004de6:	4615      	mov	r5, r2
 8004de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004df0:	6020      	str	r0, [r4, #0]
 8004df2:	3404      	adds	r4, #4
 8004df4:	8021      	strh	r1, [r4, #0]
 8004df6:	e00e      	b.n	8004e16 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8004df8:	f107 0308 	add.w	r3, r7, #8
 8004dfc:	4a37      	ldr	r2, [pc, #220]	; (8004edc <printRadioSettings+0x914>)
 8004dfe:	461c      	mov	r4, r3
 8004e00:	4615      	mov	r5, r2
 8004e02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e06:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004e0a:	6020      	str	r0, [r4, #0]
 8004e0c:	3404      	adds	r4, #4
 8004e0e:	8021      	strh	r1, [r4, #0]
 8004e10:	3402      	adds	r4, #2
 8004e12:	0c0b      	lsrs	r3, r1, #16
 8004e14:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004e16:	f107 0308 	add.w	r3, r7, #8
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fb f996 	bl	800014c <strlen>
 8004e20:	4603      	mov	r3, r0
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	f107 0108 	add.w	r1, r7, #8
 8004e28:	230a      	movs	r3, #10
 8004e2a:	482a      	ldr	r0, [pc, #168]	; (8004ed4 <printRadioSettings+0x90c>)
 8004e2c:	f7fe fd68 	bl	8003900 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8004e30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00b      	beq.n	8004e54 <printRadioSettings+0x88c>
 8004e3c:	f107 0308 	add.w	r3, r7, #8
 8004e40:	4a27      	ldr	r2, [pc, #156]	; (8004ee0 <printRadioSettings+0x918>)
 8004e42:	461c      	mov	r4, r3
 8004e44:	4615      	mov	r5, r2
 8004e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e4e:	c403      	stmia	r4!, {r0, r1}
 8004e50:	8022      	strh	r2, [r4, #0]
 8004e52:	e00d      	b.n	8004e70 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8004e54:	f107 0308 	add.w	r3, r7, #8
 8004e58:	4a22      	ldr	r2, [pc, #136]	; (8004ee4 <printRadioSettings+0x91c>)
 8004e5a:	461c      	mov	r4, r3
 8004e5c:	4615      	mov	r5, r2
 8004e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e66:	c403      	stmia	r4!, {r0, r1}
 8004e68:	8022      	strh	r2, [r4, #0]
 8004e6a:	3402      	adds	r4, #2
 8004e6c:	0c13      	lsrs	r3, r2, #16
 8004e6e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004e70:	f107 0308 	add.w	r3, r7, #8
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fb f969 	bl	800014c <strlen>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	f107 0108 	add.w	r1, r7, #8
 8004e82:	230a      	movs	r3, #10
 8004e84:	4813      	ldr	r0, [pc, #76]	; (8004ed4 <printRadioSettings+0x90c>)
 8004e86:	f7fe fd3b 	bl	8003900 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8004e8a:	f107 0308 	add.w	r3, r7, #8
 8004e8e:	4a16      	ldr	r2, [pc, #88]	; (8004ee8 <printRadioSettings+0x920>)
 8004e90:	461c      	mov	r4, r3
 8004e92:	4615      	mov	r5, r2
 8004e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ea0:	682b      	ldr	r3, [r5, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	8022      	strh	r2, [r4, #0]
 8004ea6:	3402      	adds	r4, #2
 8004ea8:	0c1b      	lsrs	r3, r3, #16
 8004eaa:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004eac:	f107 0308 	add.w	r3, r7, #8
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fb f94b 	bl	800014c <strlen>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	f107 0108 	add.w	r1, r7, #8
 8004ebe:	230a      	movs	r3, #10
 8004ec0:	4804      	ldr	r0, [pc, #16]	; (8004ed4 <printRadioSettings+0x90c>)
 8004ec2:	f7fe fd1d 	bl	8003900 <HAL_UART_Transmit>
}
 8004ec6:	bf00      	nop
 8004ec8:	3774      	adds	r7, #116	; 0x74
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	08006804 	.word	0x08006804
 8004ed4:	200000fc 	.word	0x200000fc
 8004ed8:	08006850 	.word	0x08006850
 8004edc:	08006868 	.word	0x08006868
 8004ee0:	08006880 	.word	0x08006880
 8004ee4:	0800689c 	.word	0x0800689c
 8004ee8:	08006470 	.word	0x08006470

08004eec <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8004eec:	b084      	sub	sp, #16
 8004eee:	b4b0      	push	{r4, r5, r7}
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	f107 040c 	add.w	r4, r7, #12
 8004ef6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8004efa:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <nrf24_DebugUART_Init+0x34>)
 8004efc:	461c      	mov	r4, r3
 8004efe:	f107 050c 	add.w	r5, r7, #12
 8004f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004f12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004f16:	bf00      	nop
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bcb0      	pop	{r4, r5, r7}
 8004f1c:	b004      	add	sp, #16
 8004f1e:	4770      	bx	lr
 8004f20:	200000fc 	.word	0x200000fc

08004f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f26:	b097      	sub	sp, #92	; 0x5c
 8004f28:	af16      	add	r7, sp, #88	; 0x58
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f2a:	f7fb f917 	bl	800015c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f2e:	f000 f915 	bl	800515c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f32:	f000 fad9 	bl	80054e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8004f36:	f000 fa5f 	bl	80053f8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8004f3a:	f000 fa27 	bl	800538c <MX_SPI1_Init>
  MX_CAN_Init();
 8004f3e:	f000 f9a7 	bl	8005290 <MX_CAN_Init>
  MX_ADC1_Init();
 8004f42:	f000 f967 	bl	8005214 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8004f46:	f000 faa5 	bl	8005494 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  NRF24_begin(GPIOA,GPIO_PIN_3,GPIO_PIN_4, hspi1);
 8004f4a:	4c74      	ldr	r4, [pc, #464]	; (800511c <main+0x1f8>)
 8004f4c:	4668      	mov	r0, sp
 8004f4e:	1d23      	adds	r3, r4, #4
 8004f50:	2254      	movs	r2, #84	; 0x54
 8004f52:	4619      	mov	r1, r3
 8004f54:	f000 fe38 	bl	8005bc8 <memcpy>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	2210      	movs	r2, #16
 8004f5c:	2108      	movs	r1, #8
 8004f5e:	4870      	ldr	r0, [pc, #448]	; (8005120 <main+0x1fc>)
 8004f60:	f7ff f802 	bl	8003f68 <NRF24_begin>
//NRF24_begin(     ,   CS  ,     CE ;
  nrf24_DebugUART_Init(huart1);
 8004f64:	4e6f      	ldr	r6, [pc, #444]	; (8005124 <main+0x200>)
 8004f66:	466d      	mov	r5, sp
 8004f68:	f106 0410 	add.w	r4, r6, #16
 8004f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f74:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f78:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004f7c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004f80:	f7ff ffb4 	bl	8004eec <nrf24_DebugUART_Init>

  // printRadioSettings();

  //*** TRANSMIT - NO ACK ***//
  NRF24_stopListening();
 8004f84:	f7ff f8d0 	bl	8004128 <NRF24_stopListening>
  NRF24_openWritingPipe(TxpipeAddrs);
 8004f88:	4b67      	ldr	r3, [pc, #412]	; (8005128 <main+0x204>)
 8004f8a:	cb18      	ldmia	r3, {r3, r4}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	4621      	mov	r1, r4
 8004f90:	f7ff f92a 	bl	80041e8 <NRF24_openWritingPipe>
  NRF24_setChannel(3);
 8004f94:	2003      	movs	r0, #3
 8004f96:	f7ff f966 	bl	8004266 <NRF24_setChannel>
  NRF24_setDataRate(RF24_250KBPS);
 8004f9a:	2002      	movs	r0, #2
 8004f9c:	f7ff f9e8 	bl	8004370 <NRF24_setDataRate>
  NRF24_setPALevel(RF24_PA_0dB); // máximo RF24_PA_0dB
 8004fa0:	2003      	movs	r0, #3
 8004fa2:	f7ff f9ab 	bl	80042fc <NRF24_setPALevel>
  NRF24_setPayloadSize(32);
 8004fa6:	2020      	movs	r0, #32
 8004fa8:	f7ff f972 	bl	8004290 <NRF24_setPayloadSize>
  /* USER CODE END 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8004fac:	485f      	ldr	r0, [pc, #380]	; (800512c <main+0x208>)
 8004fae:	f7fe f8d7 	bl	8003160 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start (&hadc1);
 8004fb2:	485f      	ldr	r0, [pc, #380]	; (8005130 <main+0x20c>)
 8004fb4:	f7fb fa2e 	bl	8000414 <HAL_ADC_Start>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); //liga a energia
 8004fb8:	2200      	movs	r2, #0
 8004fba:	2102      	movs	r1, #2
 8004fbc:	4858      	ldr	r0, [pc, #352]	; (8005120 <main+0x1fc>)
 8004fbe:	f7fc fe10 	bl	8001be2 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fc8:	485a      	ldr	r0, [pc, #360]	; (8005134 <main+0x210>)
 8004fca:	f7fc fe0a 	bl	8001be2 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8004fce:	20fa      	movs	r0, #250	; 0xfa
 8004fd0:	f7fb f926 	bl	8000220 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fda:	4856      	ldr	r0, [pc, #344]	; (8005134 <main+0x210>)
 8004fdc:	f7fc fe01 	bl	8001be2 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8004fe0:	2064      	movs	r0, #100	; 0x64
 8004fe2:	f7fb f91d 	bl	8000220 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fec:	4851      	ldr	r0, [pc, #324]	; (8005134 <main+0x210>)
 8004fee:	f7fc fdf8 	bl	8001be2 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8004ff2:	20fa      	movs	r0, #250	; 0xfa
 8004ff4:	f7fb f914 	bl	8000220 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ffe:	484d      	ldr	r0, [pc, #308]	; (8005134 <main+0x210>)
 8005000:	f7fc fdef 	bl	8001be2 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8005004:	2064      	movs	r0, #100	; 0x64
 8005006:	f7fb f90b 	bl	8000220 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800500a:	2201      	movs	r2, #1
 800500c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005010:	4848      	ldr	r0, [pc, #288]	; (8005134 <main+0x210>)
 8005012:	f7fc fde6 	bl	8001be2 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8005016:	20fa      	movs	r0, #250	; 0xfa
 8005018:	f7fb f902 	bl	8000220 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800501c:	2200      	movs	r2, #0
 800501e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005022:	4844      	ldr	r0, [pc, #272]	; (8005134 <main+0x210>)
 8005024:	f7fc fddd 	bl	8001be2 <HAL_GPIO_WritePin>
		    /* USER CODE END WHILE */
		    //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);

		    //HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "%d \n\r", value), 500);

		    if (NRF24_write(myTxData,32)){
 8005028:	2120      	movs	r1, #32
 800502a:	4843      	ldr	r0, [pc, #268]	; (8005138 <main+0x214>)
 800502c:	f7ff f888 	bl	8004140 <NRF24_write>

		    }
		    //printRadioSettings();

			HAL_ADC_PollForConversion (&hadc1, 1000);
 8005030:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005034:	483e      	ldr	r0, [pc, #248]	; (8005130 <main+0x20c>)
 8005036:	f7fb fa9b 	bl	8000570 <HAL_ADC_PollForConversion>
			corrente = HAL_ADC_GetValue (&hadc1);
 800503a:	483d      	ldr	r0, [pc, #244]	; (8005130 <main+0x20c>)
 800503c:	f7fb fb92 	bl	8000764 <HAL_ADC_GetValue>
 8005040:	4602      	mov	r2, r0
 8005042:	4b3e      	ldr	r3, [pc, #248]	; (800513c <main+0x218>)
 8005044:	601a      	str	r2, [r3, #0]
			corrente = corrente/23;
 8005046:	4b3d      	ldr	r3, [pc, #244]	; (800513c <main+0x218>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a3d      	ldr	r2, [pc, #244]	; (8005140 <main+0x21c>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	4a3a      	ldr	r2, [pc, #232]	; (800513c <main+0x218>)
 8005054:	6013      	str	r3, [r2, #0]
			u.var32 = corrente;
 8005056:	4b39      	ldr	r3, [pc, #228]	; (800513c <main+0x218>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a3a      	ldr	r2, [pc, #232]	; (8005144 <main+0x220>)
 800505c:	6013      	str	r3, [r2, #0]
			sprintf(myTxData, "%d\n\r", corrente);
 800505e:	4b37      	ldr	r3, [pc, #220]	; (800513c <main+0x218>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	4938      	ldr	r1, [pc, #224]	; (8005148 <main+0x224>)
 8005066:	4834      	ldr	r0, [pc, #208]	; (8005138 <main+0x214>)
 8005068:	f000 fdc2 	bl	8005bf0 <siprintf>




			  TxHeader.StdId = 0x003; // responde com id 0x00B
 800506c:	4b37      	ldr	r3, [pc, #220]	; (800514c <main+0x228>)
 800506e:	2203      	movs	r2, #3
 8005070:	601a      	str	r2, [r3, #0]
			  TxData[0] = TxData[0];
 8005072:	4b37      	ldr	r3, [pc, #220]	; (8005150 <main+0x22c>)
 8005074:	781a      	ldrb	r2, [r3, #0]
 8005076:	4b36      	ldr	r3, [pc, #216]	; (8005150 <main+0x22c>)
 8005078:	701a      	strb	r2, [r3, #0]
			  TxData[1] = TxData[1];
 800507a:	4b35      	ldr	r3, [pc, #212]	; (8005150 <main+0x22c>)
 800507c:	785a      	ldrb	r2, [r3, #1]
 800507e:	4b34      	ldr	r3, [pc, #208]	; (8005150 <main+0x22c>)
 8005080:	705a      	strb	r2, [r3, #1]
			  TxData[2] = TxData[2];
 8005082:	4b33      	ldr	r3, [pc, #204]	; (8005150 <main+0x22c>)
 8005084:	789a      	ldrb	r2, [r3, #2]
 8005086:	4b32      	ldr	r3, [pc, #200]	; (8005150 <main+0x22c>)
 8005088:	709a      	strb	r2, [r3, #2]
			  TxData[3] = 112;
 800508a:	4b31      	ldr	r3, [pc, #196]	; (8005150 <main+0x22c>)
 800508c:	2270      	movs	r2, #112	; 0x70
 800508e:	70da      	strb	r2, [r3, #3]
			  TxData[4] = TxData[4];
 8005090:	4b2f      	ldr	r3, [pc, #188]	; (8005150 <main+0x22c>)
 8005092:	791a      	ldrb	r2, [r3, #4]
 8005094:	4b2e      	ldr	r3, [pc, #184]	; (8005150 <main+0x22c>)
 8005096:	711a      	strb	r2, [r3, #4]
			  TxData[5] = TxData[5];
 8005098:	4b2d      	ldr	r3, [pc, #180]	; (8005150 <main+0x22c>)
 800509a:	795a      	ldrb	r2, [r3, #5]
 800509c:	4b2c      	ldr	r3, [pc, #176]	; (8005150 <main+0x22c>)
 800509e:	715a      	strb	r2, [r3, #5]
			  HAL_Delay(1000);
 80050a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050a4:	f7fb f8bc 	bl	8000220 <HAL_Delay>

			  		      if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80050a8:	4b2a      	ldr	r3, [pc, #168]	; (8005154 <main+0x230>)
 80050aa:	4a29      	ldr	r2, [pc, #164]	; (8005150 <main+0x22c>)
 80050ac:	4927      	ldr	r1, [pc, #156]	; (800514c <main+0x228>)
 80050ae:	482a      	ldr	r0, [pc, #168]	; (8005158 <main+0x234>)
 80050b0:	f7fb feef 	bl	8000e92 <HAL_CAN_AddTxMessage>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <main+0x19a>
		      {
		        Error_Handler();
 80050ba:	f000 fb11 	bl	80056e0 <Error_Handler>
		      }



			  TxHeader.StdId = 0x003; // responde com id 0x00B
 80050be:	4b23      	ldr	r3, [pc, #140]	; (800514c <main+0x228>)
 80050c0:	2203      	movs	r2, #3
 80050c2:	601a      	str	r2, [r3, #0]
			  TxData[0] = TxData[0];
 80050c4:	4b22      	ldr	r3, [pc, #136]	; (8005150 <main+0x22c>)
 80050c6:	781a      	ldrb	r2, [r3, #0]
 80050c8:	4b21      	ldr	r3, [pc, #132]	; (8005150 <main+0x22c>)
 80050ca:	701a      	strb	r2, [r3, #0]
			  TxData[1] = TxData[1];
 80050cc:	4b20      	ldr	r3, [pc, #128]	; (8005150 <main+0x22c>)
 80050ce:	785a      	ldrb	r2, [r3, #1]
 80050d0:	4b1f      	ldr	r3, [pc, #124]	; (8005150 <main+0x22c>)
 80050d2:	705a      	strb	r2, [r3, #1]
			  TxData[2] = TxData[2];
 80050d4:	4b1e      	ldr	r3, [pc, #120]	; (8005150 <main+0x22c>)
 80050d6:	789a      	ldrb	r2, [r3, #2]
 80050d8:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <main+0x22c>)
 80050da:	709a      	strb	r2, [r3, #2]
			  TxData[3] = 37;
 80050dc:	4b1c      	ldr	r3, [pc, #112]	; (8005150 <main+0x22c>)
 80050de:	2225      	movs	r2, #37	; 0x25
 80050e0:	70da      	strb	r2, [r3, #3]
			  TxData[4] = TxData[4];
 80050e2:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <main+0x22c>)
 80050e4:	791a      	ldrb	r2, [r3, #4]
 80050e6:	4b1a      	ldr	r3, [pc, #104]	; (8005150 <main+0x22c>)
 80050e8:	711a      	strb	r2, [r3, #4]
			  TxData[5] = TxData[5];
 80050ea:	4b19      	ldr	r3, [pc, #100]	; (8005150 <main+0x22c>)
 80050ec:	795a      	ldrb	r2, [r3, #5]
 80050ee:	4b18      	ldr	r3, [pc, #96]	; (8005150 <main+0x22c>)
 80050f0:	715a      	strb	r2, [r3, #5]
			  HAL_Delay(1000);
 80050f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050f6:	f7fb f893 	bl	8000220 <HAL_Delay>

			  	  	  	  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80050fa:	4b16      	ldr	r3, [pc, #88]	; (8005154 <main+0x230>)
 80050fc:	4a14      	ldr	r2, [pc, #80]	; (8005150 <main+0x22c>)
 80050fe:	4913      	ldr	r1, [pc, #76]	; (800514c <main+0x228>)
 8005100:	4815      	ldr	r0, [pc, #84]	; (8005158 <main+0x234>)
 8005102:	f7fb fec6 	bl	8000e92 <HAL_CAN_AddTxMessage>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <main+0x1ec>
		      {
		       Error_Handler();
 800510c:	f000 fae8 	bl	80056e0 <Error_Handler>
	          }


			  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8005110:	2180      	movs	r1, #128	; 0x80
 8005112:	4808      	ldr	r0, [pc, #32]	; (8005134 <main+0x210>)
 8005114:	f7fc fd7d 	bl	8001c12 <HAL_GPIO_TogglePin>
		    if (NRF24_write(myTxData,32)){
 8005118:	e786      	b.n	8005028 <main+0x104>
 800511a:	bf00      	nop
 800511c:	2000024c 	.word	0x2000024c
 8005120:	40010800 	.word	0x40010800
 8005124:	200001fc 	.word	0x200001fc
 8005128:	20000008 	.word	0x20000008
 800512c:	200002ac 	.word	0x200002ac
 8005130:	200001cc 	.word	0x200001cc
 8005134:	40010c00 	.word	0x40010c00
 8005138:	20000184 	.word	0x20000184
 800513c:	2000023c 	.word	0x2000023c
 8005140:	b21642c9 	.word	0xb21642c9
 8005144:	200002ec 	.word	0x200002ec
 8005148:	080069b4 	.word	0x080069b4
 800514c:	2000013c 	.word	0x2000013c
 8005150:	20000240 	.word	0x20000240
 8005154:	20000248 	.word	0x20000248
 8005158:	200001a4 	.word	0x200001a4

0800515c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b094      	sub	sp, #80	; 0x50
 8005160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005166:	2228      	movs	r2, #40	; 0x28
 8005168:	2100      	movs	r1, #0
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fd37 	bl	8005bde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005170:	f107 0314 	add.w	r3, r7, #20
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	605a      	str	r2, [r3, #4]
 800517a:	609a      	str	r2, [r3, #8]
 800517c:	60da      	str	r2, [r3, #12]
 800517e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005180:	1d3b      	adds	r3, r7, #4
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	605a      	str	r2, [r3, #4]
 8005188:	609a      	str	r2, [r3, #8]
 800518a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800518c:	2301      	movs	r3, #1
 800518e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005196:	2300      	movs	r3, #0
 8005198:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800519a:	2301      	movs	r3, #1
 800519c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800519e:	2302      	movs	r3, #2
 80051a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80051a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80051a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80051ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fc fd3e 	bl	8001c34 <HAL_RCC_OscConfig>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80051be:	f000 fa8f 	bl	80056e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051c2:	230f      	movs	r3, #15
 80051c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80051c6:	2302      	movs	r3, #2
 80051c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051ca:	2300      	movs	r3, #0
 80051cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80051ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80051d4:	2300      	movs	r3, #0
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80051d8:	f107 0314 	add.w	r3, r7, #20
 80051dc:	2102      	movs	r1, #2
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fc ff8c 	bl	80020fc <HAL_RCC_ClockConfig>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <SystemClock_Config+0x92>
  {
    Error_Handler();
 80051ea:	f000 fa79 	bl	80056e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80051ee:	2302      	movs	r3, #2
 80051f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80051f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051f6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051f8:	1d3b      	adds	r3, r7, #4
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fd f93c 	bl	8002478 <HAL_RCCEx_PeriphCLKConfig>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005206:	f000 fa6b 	bl	80056e0 <Error_Handler>
  }
}
 800520a:	bf00      	nop
 800520c:	3750      	adds	r7, #80	; 0x50
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800521a:	1d3b      	adds	r3, r7, #4
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	605a      	str	r2, [r3, #4]
 8005222:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8005224:	4b18      	ldr	r3, [pc, #96]	; (8005288 <MX_ADC1_Init+0x74>)
 8005226:	4a19      	ldr	r2, [pc, #100]	; (800528c <MX_ADC1_Init+0x78>)
 8005228:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800522a:	4b17      	ldr	r3, [pc, #92]	; (8005288 <MX_ADC1_Init+0x74>)
 800522c:	2200      	movs	r2, #0
 800522e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005230:	4b15      	ldr	r3, [pc, #84]	; (8005288 <MX_ADC1_Init+0x74>)
 8005232:	2201      	movs	r2, #1
 8005234:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005236:	4b14      	ldr	r3, [pc, #80]	; (8005288 <MX_ADC1_Init+0x74>)
 8005238:	2200      	movs	r2, #0
 800523a:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800523c:	4b12      	ldr	r3, [pc, #72]	; (8005288 <MX_ADC1_Init+0x74>)
 800523e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005242:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005244:	4b10      	ldr	r3, [pc, #64]	; (8005288 <MX_ADC1_Init+0x74>)
 8005246:	2200      	movs	r2, #0
 8005248:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800524a:	4b0f      	ldr	r3, [pc, #60]	; (8005288 <MX_ADC1_Init+0x74>)
 800524c:	2201      	movs	r2, #1
 800524e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005250:	480d      	ldr	r0, [pc, #52]	; (8005288 <MX_ADC1_Init+0x74>)
 8005252:	f7fb f807 	bl	8000264 <HAL_ADC_Init>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800525c:	f000 fa40 	bl	80056e0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005260:	2300      	movs	r3, #0
 8005262:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005264:	2301      	movs	r3, #1
 8005266:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800526c:	1d3b      	adds	r3, r7, #4
 800526e:	4619      	mov	r1, r3
 8005270:	4805      	ldr	r0, [pc, #20]	; (8005288 <MX_ADC1_Init+0x74>)
 8005272:	f7fb fa83 	bl	800077c <HAL_ADC_ConfigChannel>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800527c:	f000 fa30 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005280:	bf00      	nop
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	200001cc 	.word	0x200001cc
 800528c:	40012400 	.word	0x40012400

08005290 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08a      	sub	sp, #40	; 0x28
 8005294:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8005296:	4b3a      	ldr	r3, [pc, #232]	; (8005380 <MX_CAN_Init+0xf0>)
 8005298:	4a3a      	ldr	r2, [pc, #232]	; (8005384 <MX_CAN_Init+0xf4>)
 800529a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800529c:	4b38      	ldr	r3, [pc, #224]	; (8005380 <MX_CAN_Init+0xf0>)
 800529e:	2209      	movs	r2, #9
 80052a0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80052a2:	4b37      	ldr	r3, [pc, #220]	; (8005380 <MX_CAN_Init+0xf0>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80052a8:	4b35      	ldr	r3, [pc, #212]	; (8005380 <MX_CAN_Init+0xf0>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80052ae:	4b34      	ldr	r3, [pc, #208]	; (8005380 <MX_CAN_Init+0xf0>)
 80052b0:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80052b4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80052b6:	4b32      	ldr	r3, [pc, #200]	; (8005380 <MX_CAN_Init+0xf0>)
 80052b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80052bc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80052be:	4b30      	ldr	r3, [pc, #192]	; (8005380 <MX_CAN_Init+0xf0>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80052c4:	4b2e      	ldr	r3, [pc, #184]	; (8005380 <MX_CAN_Init+0xf0>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80052ca:	4b2d      	ldr	r3, [pc, #180]	; (8005380 <MX_CAN_Init+0xf0>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80052d0:	4b2b      	ldr	r3, [pc, #172]	; (8005380 <MX_CAN_Init+0xf0>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80052d6:	4b2a      	ldr	r3, [pc, #168]	; (8005380 <MX_CAN_Init+0xf0>)
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80052dc:	4b28      	ldr	r3, [pc, #160]	; (8005380 <MX_CAN_Init+0xf0>)
 80052de:	2200      	movs	r2, #0
 80052e0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80052e2:	4827      	ldr	r0, [pc, #156]	; (8005380 <MX_CAN_Init+0xf0>)
 80052e4:	f7fb fbce 	bl	8000a84 <HAL_CAN_Init>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80052ee:	f000 f9f7 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80052f2:	2102      	movs	r1, #2
 80052f4:	4822      	ldr	r0, [pc, #136]	; (8005380 <MX_CAN_Init+0xf0>)
 80052f6:	f7fb ffb4 	bl	8001262 <HAL_CAN_ActivateNotification>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <MX_CAN_Init+0x74>
  {
	Error_Handler();
 8005300:	f000 f9ee 	bl	80056e0 <Error_Handler>
  }

  /* Configure the CAN Filter */
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8005308:	2300      	movs	r3, #0
 800530a:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800530c:	2301      	movs	r3, #1
 800530e:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh     = 0x000<<5; //0x000
 8005310:	2300      	movs	r3, #0
 8005312:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow      = 0x0000;
 8005314:	2300      	movs	r3, #0
 8005316:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x700<<5; // mascara que filtra
 8005318:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800531c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow  = 0x0000;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8005322:	2300      	movs	r3, #0
 8005324:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8005326:	2301      	movs	r3, #1
 8005328:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800532a:	230e      	movs	r3, #14
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800532e:	463b      	mov	r3, r7
 8005330:	4619      	mov	r1, r3
 8005332:	4813      	ldr	r0, [pc, #76]	; (8005380 <MX_CAN_Init+0xf0>)
 8005334:	f7fb fca0 	bl	8000c78 <HAL_CAN_ConfigFilter>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <MX_CAN_Init+0xb2>
  {
    /* Filter configuration Error */
    Error_Handler();
 800533e:	f000 f9cf 	bl	80056e0 <Error_Handler>
  }

  /* Configure Transmission process */
  TxHeader.StdId = 0x001;
 8005342:	4b11      	ldr	r3, [pc, #68]	; (8005388 <MX_CAN_Init+0xf8>)
 8005344:	2201      	movs	r2, #1
 8005346:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x001;
 8005348:	4b0f      	ldr	r3, [pc, #60]	; (8005388 <MX_CAN_Init+0xf8>)
 800534a:	2201      	movs	r2, #1
 800534c:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 800534e:	4b0e      	ldr	r3, [pc, #56]	; (8005388 <MX_CAN_Init+0xf8>)
 8005350:	2200      	movs	r2, #0
 8005352:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8005354:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <MX_CAN_Init+0xf8>)
 8005356:	2200      	movs	r2, #0
 8005358:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 800535a:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <MX_CAN_Init+0xf8>)
 800535c:	2208      	movs	r2, #8
 800535e:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8005360:	4b09      	ldr	r3, [pc, #36]	; (8005388 <MX_CAN_Init+0xf8>)
 8005362:	2200      	movs	r2, #0
 8005364:	751a      	strb	r2, [r3, #20]


  /* Start the CAN peripheral */
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8005366:	4806      	ldr	r0, [pc, #24]	; (8005380 <MX_CAN_Init+0xf0>)
 8005368:	f7fb fd4f 	bl	8000e0a <HAL_CAN_Start>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <MX_CAN_Init+0xe6>
  {
    /* Start Error */
    Error_Handler();
 8005372:	f000 f9b5 	bl	80056e0 <Error_Handler>
  }

  /* USER CODE END CAN_Init 2 */

}
 8005376:	bf00      	nop
 8005378:	3728      	adds	r7, #40	; 0x28
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	200001a4 	.word	0x200001a4
 8005384:	40006400 	.word	0x40006400
 8005388:	2000013c 	.word	0x2000013c

0800538c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005390:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <MX_SPI1_Init+0x64>)
 8005392:	4a18      	ldr	r2, [pc, #96]	; (80053f4 <MX_SPI1_Init+0x68>)
 8005394:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005396:	4b16      	ldr	r3, [pc, #88]	; (80053f0 <MX_SPI1_Init+0x64>)
 8005398:	f44f 7282 	mov.w	r2, #260	; 0x104
 800539c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800539e:	4b14      	ldr	r3, [pc, #80]	; (80053f0 <MX_SPI1_Init+0x64>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80053a4:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <MX_SPI1_Init+0x64>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80053aa:	4b11      	ldr	r3, [pc, #68]	; (80053f0 <MX_SPI1_Init+0x64>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80053b0:	4b0f      	ldr	r3, [pc, #60]	; (80053f0 <MX_SPI1_Init+0x64>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80053b6:	4b0e      	ldr	r3, [pc, #56]	; (80053f0 <MX_SPI1_Init+0x64>)
 80053b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80053be:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <MX_SPI1_Init+0x64>)
 80053c0:	2228      	movs	r2, #40	; 0x28
 80053c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80053c4:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <MX_SPI1_Init+0x64>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80053ca:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <MX_SPI1_Init+0x64>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053d0:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <MX_SPI1_Init+0x64>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80053d6:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <MX_SPI1_Init+0x64>)
 80053d8:	220a      	movs	r2, #10
 80053da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80053dc:	4804      	ldr	r0, [pc, #16]	; (80053f0 <MX_SPI1_Init+0x64>)
 80053de:	f7fd fe30 	bl	8003042 <HAL_SPI_Init>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80053e8:	f000 f97a 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80053ec:	bf00      	nop
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	2000024c 	.word	0x2000024c
 80053f4:	40013000 	.word	0x40013000

080053f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053fe:	f107 0308 	add.w	r3, r7, #8
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	605a      	str	r2, [r3, #4]
 8005408:	609a      	str	r2, [r3, #8]
 800540a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800540c:	463b      	mov	r3, r7
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005414:	4b1e      	ldr	r3, [pc, #120]	; (8005490 <MX_TIM2_Init+0x98>)
 8005416:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800541a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 800541c:	4b1c      	ldr	r3, [pc, #112]	; (8005490 <MX_TIM2_Init+0x98>)
 800541e:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8005422:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005424:	4b1a      	ldr	r3, [pc, #104]	; (8005490 <MX_TIM2_Init+0x98>)
 8005426:	2200      	movs	r2, #0
 8005428:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800542a:	4b19      	ldr	r3, [pc, #100]	; (8005490 <MX_TIM2_Init+0x98>)
 800542c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005430:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005432:	4b17      	ldr	r3, [pc, #92]	; (8005490 <MX_TIM2_Init+0x98>)
 8005434:	2200      	movs	r2, #0
 8005436:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005438:	4b15      	ldr	r3, [pc, #84]	; (8005490 <MX_TIM2_Init+0x98>)
 800543a:	2200      	movs	r2, #0
 800543c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800543e:	4814      	ldr	r0, [pc, #80]	; (8005490 <MX_TIM2_Init+0x98>)
 8005440:	f7fd fe63 	bl	800310a <HAL_TIM_Base_Init>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800544a:	f000 f949 	bl	80056e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800544e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005452:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005454:	f107 0308 	add.w	r3, r7, #8
 8005458:	4619      	mov	r1, r3
 800545a:	480d      	ldr	r0, [pc, #52]	; (8005490 <MX_TIM2_Init+0x98>)
 800545c:	f7fd ffa2 	bl	80033a4 <HAL_TIM_ConfigClockSource>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005466:	f000 f93b 	bl	80056e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800546a:	2300      	movs	r3, #0
 800546c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800546e:	2300      	movs	r3, #0
 8005470:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005472:	463b      	mov	r3, r7
 8005474:	4619      	mov	r1, r3
 8005476:	4806      	ldr	r0, [pc, #24]	; (8005490 <MX_TIM2_Init+0x98>)
 8005478:	f7fe f99f 	bl	80037ba <HAL_TIMEx_MasterConfigSynchronization>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005482:	f000 f92d 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005486:	bf00      	nop
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	200002ac 	.word	0x200002ac

08005494 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005498:	4b11      	ldr	r3, [pc, #68]	; (80054e0 <MX_USART1_UART_Init+0x4c>)
 800549a:	4a12      	ldr	r2, [pc, #72]	; (80054e4 <MX_USART1_UART_Init+0x50>)
 800549c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800549e:	4b10      	ldr	r3, [pc, #64]	; (80054e0 <MX_USART1_UART_Init+0x4c>)
 80054a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80054a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80054a6:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <MX_USART1_UART_Init+0x4c>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80054ac:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <MX_USART1_UART_Init+0x4c>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80054b2:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <MX_USART1_UART_Init+0x4c>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80054b8:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <MX_USART1_UART_Init+0x4c>)
 80054ba:	220c      	movs	r2, #12
 80054bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054be:	4b08      	ldr	r3, [pc, #32]	; (80054e0 <MX_USART1_UART_Init+0x4c>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80054c4:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <MX_USART1_UART_Init+0x4c>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80054ca:	4805      	ldr	r0, [pc, #20]	; (80054e0 <MX_USART1_UART_Init+0x4c>)
 80054cc:	f7fe f9cb 	bl	8003866 <HAL_UART_Init>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80054d6:	f000 f903 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80054da:	bf00      	nop
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	200001fc 	.word	0x200001fc
 80054e4:	40013800 	.word	0x40013800

080054e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b088      	sub	sp, #32
 80054ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054ee:	f107 0310 	add.w	r3, r7, #16
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	605a      	str	r2, [r3, #4]
 80054f8:	609a      	str	r2, [r3, #8]
 80054fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054fc:	4a47      	ldr	r2, [pc, #284]	; (800561c <MX_GPIO_Init+0x134>)
 80054fe:	4b47      	ldr	r3, [pc, #284]	; (800561c <MX_GPIO_Init+0x134>)
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f043 0310 	orr.w	r3, r3, #16
 8005506:	6193      	str	r3, [r2, #24]
 8005508:	4b44      	ldr	r3, [pc, #272]	; (800561c <MX_GPIO_Init+0x134>)
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005514:	4a41      	ldr	r2, [pc, #260]	; (800561c <MX_GPIO_Init+0x134>)
 8005516:	4b41      	ldr	r3, [pc, #260]	; (800561c <MX_GPIO_Init+0x134>)
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	f043 0320 	orr.w	r3, r3, #32
 800551e:	6193      	str	r3, [r2, #24]
 8005520:	4b3e      	ldr	r3, [pc, #248]	; (800561c <MX_GPIO_Init+0x134>)
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800552c:	4a3b      	ldr	r2, [pc, #236]	; (800561c <MX_GPIO_Init+0x134>)
 800552e:	4b3b      	ldr	r3, [pc, #236]	; (800561c <MX_GPIO_Init+0x134>)
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f043 0304 	orr.w	r3, r3, #4
 8005536:	6193      	str	r3, [r2, #24]
 8005538:	4b38      	ldr	r3, [pc, #224]	; (800561c <MX_GPIO_Init+0x134>)
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	607b      	str	r3, [r7, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005544:	4a35      	ldr	r2, [pc, #212]	; (800561c <MX_GPIO_Init+0x134>)
 8005546:	4b35      	ldr	r3, [pc, #212]	; (800561c <MX_GPIO_Init+0x134>)
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f043 0308 	orr.w	r3, r3, #8
 800554e:	6193      	str	r3, [r2, #24]
 8005550:	4b32      	ldr	r3, [pc, #200]	; (800561c <MX_GPIO_Init+0x134>)
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	f003 0308 	and.w	r3, r3, #8
 8005558:	603b      	str	r3, [r7, #0]
 800555a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800555c:	2200      	movs	r2, #0
 800555e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005562:	482f      	ldr	r0, [pc, #188]	; (8005620 <MX_GPIO_Init+0x138>)
 8005564:	f7fc fb3d 	bl	8001be2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8005568:	2200      	movs	r2, #0
 800556a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800556e:	482d      	ldr	r0, [pc, #180]	; (8005624 <MX_GPIO_Init+0x13c>)
 8005570:	f7fc fb37 	bl	8001be2 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8005574:	2200      	movs	r2, #0
 8005576:	2118      	movs	r1, #24
 8005578:	482b      	ldr	r0, [pc, #172]	; (8005628 <MX_GPIO_Init+0x140>)
 800557a:	f7fc fb32 	bl	8001be2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800557e:	2201      	movs	r2, #1
 8005580:	2102      	movs	r1, #2
 8005582:	4829      	ldr	r0, [pc, #164]	; (8005628 <MX_GPIO_Init+0x140>)
 8005584:	f7fc fb2d 	bl	8001be2 <HAL_GPIO_WritePin>


  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800558c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800558e:	2301      	movs	r3, #1
 8005590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005592:	2300      	movs	r3, #0
 8005594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005596:	2302      	movs	r3, #2
 8005598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800559a:	f107 0310 	add.w	r3, r7, #16
 800559e:	4619      	mov	r1, r3
 80055a0:	481f      	ldr	r0, [pc, #124]	; (8005620 <MX_GPIO_Init+0x138>)
 80055a2:	f7fc f9a9 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80055a6:	231a      	movs	r3, #26
 80055a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055aa:	2301      	movs	r3, #1
 80055ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055b2:	2302      	movs	r3, #2
 80055b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055b6:	f107 0310 	add.w	r3, r7, #16
 80055ba:	4619      	mov	r1, r3
 80055bc:	481a      	ldr	r0, [pc, #104]	; (8005628 <MX_GPIO_Init+0x140>)
 80055be:	f7fc f99b 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80055c2:	2304      	movs	r3, #4
 80055c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ce:	f107 0310 	add.w	r3, r7, #16
 80055d2:	4619      	mov	r1, r3
 80055d4:	4814      	ldr	r0, [pc, #80]	; (8005628 <MX_GPIO_Init+0x140>)
 80055d6:	f7fc f98f 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80055da:	2380      	movs	r3, #128	; 0x80
 80055dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055de:	2301      	movs	r3, #1
 80055e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055e6:	2302      	movs	r3, #2
 80055e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055ea:	f107 0310 	add.w	r3, r7, #16
 80055ee:	4619      	mov	r1, r3
 80055f0:	480c      	ldr	r0, [pc, #48]	; (8005624 <MX_GPIO_Init+0x13c>)
 80055f2:	f7fc f981 	bl	80018f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80055f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055fc:	2301      	movs	r3, #1
 80055fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005600:	2300      	movs	r3, #0
 8005602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005604:	2302      	movs	r3, #2
 8005606:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005608:	f107 0310 	add.w	r3, r7, #16
 800560c:	4619      	mov	r1, r3
 800560e:	4805      	ldr	r0, [pc, #20]	; (8005624 <MX_GPIO_Init+0x13c>)
 8005610:	f7fc f972 	bl	80018f8 <HAL_GPIO_Init>

}
 8005614:	bf00      	nop
 8005616:	3720      	adds	r7, #32
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40021000 	.word	0x40021000
 8005620:	40011000 	.word	0x40011000
 8005624:	40010c00 	.word	0x40010c00
 8005628:	40010800 	.word	0x40010800

0800562c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	    if (htim->Instance==TIM2){
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563c:	d12c      	bne.n	8005698 <HAL_TIM_PeriodElapsedCallback+0x6c>


	        if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_2)){
 800563e:	2104      	movs	r1, #4
 8005640:	4817      	ldr	r0, [pc, #92]	; (80056a0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8005642:	f7fc fab7 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01c      	beq.n	8005686 <HAL_TIM_PeriodElapsedCallback+0x5a>
	          cont++;
 800564c:	4b15      	ldr	r3, [pc, #84]	; (80056a4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3301      	adds	r3, #1
 8005652:	4a14      	ldr	r2, [pc, #80]	; (80056a4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005654:	6013      	str	r3, [r2, #0]
	    	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8005656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800565a:	4813      	ldr	r0, [pc, #76]	; (80056a8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800565c:	f7fc fad9 	bl	8001c12 <HAL_GPIO_TogglePin>



		    	if(cont>= 4){
 8005660:	4b10      	ldr	r3, [pc, #64]	; (80056a4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b03      	cmp	r3, #3
 8005666:	dd17      	ble.n	8005698 <HAL_TIM_PeriodElapsedCallback+0x6c>
		    	  cont=0;
 8005668:	4b0e      	ldr	r3, [pc, #56]	; (80056a4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
			      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800566e:	2201      	movs	r2, #1
 8005670:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005674:	480d      	ldr	r0, [pc, #52]	; (80056ac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8005676:	f7fc fab4 	bl	8001be2 <HAL_GPIO_WritePin>
			      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800567a:	2201      	movs	r2, #1
 800567c:	2102      	movs	r1, #2
 800567e:	4808      	ldr	r0, [pc, #32]	; (80056a0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8005680:	f7fc faaf 	bl	8001be2 <HAL_GPIO_WritePin>
	    	else {
  			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
	    	  cont=0;
	    	}
	    }
}
 8005684:	e008      	b.n	8005698 <HAL_TIM_PeriodElapsedCallback+0x6c>
  			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8005686:	2200      	movs	r2, #0
 8005688:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800568c:	4807      	ldr	r0, [pc, #28]	; (80056ac <HAL_TIM_PeriodElapsedCallback+0x80>)
 800568e:	f7fc faa8 	bl	8001be2 <HAL_GPIO_WritePin>
	    	  cont=0;
 8005692:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
}
 8005698:	bf00      	nop
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40010800 	.word	0x40010800
 80056a4:	20000170 	.word	0x20000170
 80056a8:	40011000 	.word	0x40011000
 80056ac:	40010c00 	.word	0x40010c00

080056b0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80056b8:	4b07      	ldr	r3, [pc, #28]	; (80056d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80056ba:	4a08      	ldr	r2, [pc, #32]	; (80056dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80056bc:	2100      	movs	r1, #0
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fb fcbd 	bl	800103e <HAL_CAN_GetRxMessage>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {

    Error_Handler();
 80056ca:	f000 f809 	bl	80056e0 <Error_Handler>
  }
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	200002a4 	.word	0x200002a4
 80056dc:	20000154 	.word	0x20000154

080056e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr

080056ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80056f2:	4a0e      	ldr	r2, [pc, #56]	; (800572c <HAL_MspInit+0x40>)
 80056f4:	4b0d      	ldr	r3, [pc, #52]	; (800572c <HAL_MspInit+0x40>)
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	6193      	str	r3, [r2, #24]
 80056fe:	4b0b      	ldr	r3, [pc, #44]	; (800572c <HAL_MspInit+0x40>)
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	607b      	str	r3, [r7, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800570a:	4a08      	ldr	r2, [pc, #32]	; (800572c <HAL_MspInit+0x40>)
 800570c:	4b07      	ldr	r3, [pc, #28]	; (800572c <HAL_MspInit+0x40>)
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005714:	61d3      	str	r3, [r2, #28]
 8005716:	4b05      	ldr	r3, [pc, #20]	; (800572c <HAL_MspInit+0x40>)
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr
 800572c:	40021000 	.word	0x40021000

08005730 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005738:	f107 0310 	add.w	r3, r7, #16
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	605a      	str	r2, [r3, #4]
 8005742:	609a      	str	r2, [r3, #8]
 8005744:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a14      	ldr	r2, [pc, #80]	; (800579c <HAL_ADC_MspInit+0x6c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d121      	bne.n	8005794 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005750:	4a13      	ldr	r2, [pc, #76]	; (80057a0 <HAL_ADC_MspInit+0x70>)
 8005752:	4b13      	ldr	r3, [pc, #76]	; (80057a0 <HAL_ADC_MspInit+0x70>)
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800575a:	6193      	str	r3, [r2, #24]
 800575c:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <HAL_ADC_MspInit+0x70>)
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005768:	4a0d      	ldr	r2, [pc, #52]	; (80057a0 <HAL_ADC_MspInit+0x70>)
 800576a:	4b0d      	ldr	r3, [pc, #52]	; (80057a0 <HAL_ADC_MspInit+0x70>)
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	f043 0304 	orr.w	r3, r3, #4
 8005772:	6193      	str	r3, [r2, #24]
 8005774:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <HAL_ADC_MspInit+0x70>)
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005780:	2301      	movs	r3, #1
 8005782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005784:	2303      	movs	r3, #3
 8005786:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005788:	f107 0310 	add.w	r3, r7, #16
 800578c:	4619      	mov	r1, r3
 800578e:	4805      	ldr	r0, [pc, #20]	; (80057a4 <HAL_ADC_MspInit+0x74>)
 8005790:	f7fc f8b2 	bl	80018f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005794:	bf00      	nop
 8005796:	3720      	adds	r7, #32
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40012400 	.word	0x40012400
 80057a0:	40021000 	.word	0x40021000
 80057a4:	40010800 	.word	0x40010800

080057a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	; 0x28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057b0:	f107 0314 	add.w	r3, r7, #20
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	605a      	str	r2, [r3, #4]
 80057ba:	609a      	str	r2, [r3, #8]
 80057bc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a29      	ldr	r2, [pc, #164]	; (8005868 <HAL_CAN_MspInit+0xc0>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d14b      	bne.n	8005860 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80057c8:	4a28      	ldr	r2, [pc, #160]	; (800586c <HAL_CAN_MspInit+0xc4>)
 80057ca:	4b28      	ldr	r3, [pc, #160]	; (800586c <HAL_CAN_MspInit+0xc4>)
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80057d2:	61d3      	str	r3, [r2, #28]
 80057d4:	4b25      	ldr	r3, [pc, #148]	; (800586c <HAL_CAN_MspInit+0xc4>)
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057dc:	613b      	str	r3, [r7, #16]
 80057de:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057e0:	4a22      	ldr	r2, [pc, #136]	; (800586c <HAL_CAN_MspInit+0xc4>)
 80057e2:	4b22      	ldr	r3, [pc, #136]	; (800586c <HAL_CAN_MspInit+0xc4>)
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f043 0308 	orr.w	r3, r3, #8
 80057ea:	6193      	str	r3, [r2, #24]
 80057ec:	4b1f      	ldr	r3, [pc, #124]	; (800586c <HAL_CAN_MspInit+0xc4>)
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	f003 0308 	and.w	r3, r3, #8
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80057f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057fe:	2300      	movs	r3, #0
 8005800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005806:	f107 0314 	add.w	r3, r7, #20
 800580a:	4619      	mov	r1, r3
 800580c:	4818      	ldr	r0, [pc, #96]	; (8005870 <HAL_CAN_MspInit+0xc8>)
 800580e:	f7fc f873 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005818:	2302      	movs	r3, #2
 800581a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800581c:	2303      	movs	r3, #3
 800581e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005820:	f107 0314 	add.w	r3, r7, #20
 8005824:	4619      	mov	r1, r3
 8005826:	4812      	ldr	r0, [pc, #72]	; (8005870 <HAL_CAN_MspInit+0xc8>)
 8005828:	f7fc f866 	bl	80018f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800582c:	4b11      	ldr	r3, [pc, #68]	; (8005874 <HAL_CAN_MspInit+0xcc>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
 800584a:	4a0a      	ldr	r2, [pc, #40]	; (8005874 <HAL_CAN_MspInit+0xcc>)
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005850:	2200      	movs	r2, #0
 8005852:	2100      	movs	r1, #0
 8005854:	2014      	movs	r0, #20
 8005856:	f7fc f818 	bl	800188a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800585a:	2014      	movs	r0, #20
 800585c:	f7fc f831 	bl	80018c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8005860:	bf00      	nop
 8005862:	3728      	adds	r7, #40	; 0x28
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40006400 	.word	0x40006400
 800586c:	40021000 	.word	0x40021000
 8005870:	40010c00 	.word	0x40010c00
 8005874:	40010000 	.word	0x40010000

08005878 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005880:	f107 0310 	add.w	r3, r7, #16
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	605a      	str	r2, [r3, #4]
 800588a:	609a      	str	r2, [r3, #8]
 800588c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a1b      	ldr	r2, [pc, #108]	; (8005900 <HAL_SPI_MspInit+0x88>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d12f      	bne.n	80058f8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005898:	4a1a      	ldr	r2, [pc, #104]	; (8005904 <HAL_SPI_MspInit+0x8c>)
 800589a:	4b1a      	ldr	r3, [pc, #104]	; (8005904 <HAL_SPI_MspInit+0x8c>)
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058a2:	6193      	str	r3, [r2, #24]
 80058a4:	4b17      	ldr	r3, [pc, #92]	; (8005904 <HAL_SPI_MspInit+0x8c>)
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058b0:	4a14      	ldr	r2, [pc, #80]	; (8005904 <HAL_SPI_MspInit+0x8c>)
 80058b2:	4b14      	ldr	r3, [pc, #80]	; (8005904 <HAL_SPI_MspInit+0x8c>)
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	f043 0304 	orr.w	r3, r3, #4
 80058ba:	6193      	str	r3, [r2, #24]
 80058bc:	4b11      	ldr	r3, [pc, #68]	; (8005904 <HAL_SPI_MspInit+0x8c>)
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	60bb      	str	r3, [r7, #8]
 80058c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80058c8:	23a0      	movs	r3, #160	; 0xa0
 80058ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058cc:	2302      	movs	r3, #2
 80058ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80058d0:	2303      	movs	r3, #3
 80058d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058d4:	f107 0310 	add.w	r3, r7, #16
 80058d8:	4619      	mov	r1, r3
 80058da:	480b      	ldr	r0, [pc, #44]	; (8005908 <HAL_SPI_MspInit+0x90>)
 80058dc:	f7fc f80c 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80058e0:	2340      	movs	r3, #64	; 0x40
 80058e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058e4:	2300      	movs	r3, #0
 80058e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058e8:	2300      	movs	r3, #0
 80058ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ec:	f107 0310 	add.w	r3, r7, #16
 80058f0:	4619      	mov	r1, r3
 80058f2:	4805      	ldr	r0, [pc, #20]	; (8005908 <HAL_SPI_MspInit+0x90>)
 80058f4:	f7fc f800 	bl	80018f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80058f8:	bf00      	nop
 80058fa:	3720      	adds	r7, #32
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40013000 	.word	0x40013000
 8005904:	40021000 	.word	0x40021000
 8005908:	40010800 	.word	0x40010800

0800590c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591c:	d113      	bne.n	8005946 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800591e:	4a0c      	ldr	r2, [pc, #48]	; (8005950 <HAL_TIM_Base_MspInit+0x44>)
 8005920:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <HAL_TIM_Base_MspInit+0x44>)
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	f043 0301 	orr.w	r3, r3, #1
 8005928:	61d3      	str	r3, [r2, #28]
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <HAL_TIM_Base_MspInit+0x44>)
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005936:	2200      	movs	r2, #0
 8005938:	2100      	movs	r1, #0
 800593a:	201c      	movs	r0, #28
 800593c:	f7fb ffa5 	bl	800188a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005940:	201c      	movs	r0, #28
 8005942:	f7fb ffbe 	bl	80018c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005946:	bf00      	nop
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	40021000 	.word	0x40021000

08005954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800595c:	f107 0310 	add.w	r3, r7, #16
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	605a      	str	r2, [r3, #4]
 8005966:	609a      	str	r2, [r3, #8]
 8005968:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1c      	ldr	r2, [pc, #112]	; (80059e0 <HAL_UART_MspInit+0x8c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d131      	bne.n	80059d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005974:	4a1b      	ldr	r2, [pc, #108]	; (80059e4 <HAL_UART_MspInit+0x90>)
 8005976:	4b1b      	ldr	r3, [pc, #108]	; (80059e4 <HAL_UART_MspInit+0x90>)
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800597e:	6193      	str	r3, [r2, #24]
 8005980:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <HAL_UART_MspInit+0x90>)
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800598c:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <HAL_UART_MspInit+0x90>)
 800598e:	4b15      	ldr	r3, [pc, #84]	; (80059e4 <HAL_UART_MspInit+0x90>)
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	f043 0304 	orr.w	r3, r3, #4
 8005996:	6193      	str	r3, [r2, #24]
 8005998:	4b12      	ldr	r3, [pc, #72]	; (80059e4 <HAL_UART_MspInit+0x90>)
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80059a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059aa:	2302      	movs	r3, #2
 80059ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80059ae:	2303      	movs	r3, #3
 80059b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059b2:	f107 0310 	add.w	r3, r7, #16
 80059b6:	4619      	mov	r1, r3
 80059b8:	480b      	ldr	r0, [pc, #44]	; (80059e8 <HAL_UART_MspInit+0x94>)
 80059ba:	f7fb ff9d 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80059be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059cc:	f107 0310 	add.w	r3, r7, #16
 80059d0:	4619      	mov	r1, r3
 80059d2:	4805      	ldr	r0, [pc, #20]	; (80059e8 <HAL_UART_MspInit+0x94>)
 80059d4:	f7fb ff90 	bl	80018f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80059d8:	bf00      	nop
 80059da:	3720      	adds	r7, #32
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40013800 	.word	0x40013800
 80059e4:	40021000 	.word	0x40021000
 80059e8:	40010800 	.word	0x40010800

080059ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80059f0:	bf00      	nop
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr

080059f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059fc:	e7fe      	b.n	80059fc <HardFault_Handler+0x4>

080059fe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059fe:	b480      	push	{r7}
 8005a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a02:	e7fe      	b.n	8005a02 <MemManage_Handler+0x4>

08005a04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a08:	e7fe      	b.n	8005a08 <BusFault_Handler+0x4>

08005a0a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a0e:	e7fe      	b.n	8005a0e <UsageFault_Handler+0x4>

08005a10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a14:	bf00      	nop
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr

08005a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a20:	bf00      	nop
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr

08005a28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a2c:	bf00      	nop
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr

08005a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a38:	f7fa fbd6 	bl	80001e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a3c:	bf00      	nop
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8005a44:	4802      	ldr	r0, [pc, #8]	; (8005a50 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8005a46:	f7fb fc31 	bl	80012ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8005a4a:	bf00      	nop
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	200001a4 	.word	0x200001a4

08005a54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005a58:	4802      	ldr	r0, [pc, #8]	; (8005a64 <TIM2_IRQHandler+0x10>)
 8005a5a:	f7fd fb9b 	bl	8003194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005a5e:	bf00      	nop
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	200002ac 	.word	0x200002ac

08005a68 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005a70:	4b11      	ldr	r3, [pc, #68]	; (8005ab8 <_sbrk+0x50>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d102      	bne.n	8005a7e <_sbrk+0x16>
		heap_end = &end;
 8005a78:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <_sbrk+0x50>)
 8005a7a:	4a10      	ldr	r2, [pc, #64]	; (8005abc <_sbrk+0x54>)
 8005a7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005a7e:	4b0e      	ldr	r3, [pc, #56]	; (8005ab8 <_sbrk+0x50>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005a84:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <_sbrk+0x50>)
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	466a      	mov	r2, sp
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d907      	bls.n	8005aa2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005a92:	f000 f86f 	bl	8005b74 <__errno>
 8005a96:	4602      	mov	r2, r0
 8005a98:	230c      	movs	r3, #12
 8005a9a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005aa0:	e006      	b.n	8005ab0 <_sbrk+0x48>
	}

	heap_end += incr;
 8005aa2:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <_sbrk+0x50>)
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	4a03      	ldr	r2, [pc, #12]	; (8005ab8 <_sbrk+0x50>)
 8005aac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005aae:	68fb      	ldr	r3, [r7, #12]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20000174 	.word	0x20000174
 8005abc:	200002f4 	.word	0x200002f4

08005ac0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005ac4:	4a15      	ldr	r2, [pc, #84]	; (8005b1c <SystemInit+0x5c>)
 8005ac6:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <SystemInit+0x5c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f043 0301 	orr.w	r3, r3, #1
 8005ace:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005ad0:	4912      	ldr	r1, [pc, #72]	; (8005b1c <SystemInit+0x5c>)
 8005ad2:	4b12      	ldr	r3, [pc, #72]	; (8005b1c <SystemInit+0x5c>)
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	4b12      	ldr	r3, [pc, #72]	; (8005b20 <SystemInit+0x60>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005adc:	4a0f      	ldr	r2, [pc, #60]	; (8005b1c <SystemInit+0x5c>)
 8005ade:	4b0f      	ldr	r3, [pc, #60]	; (8005b1c <SystemInit+0x5c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005aec:	4a0b      	ldr	r2, [pc, #44]	; (8005b1c <SystemInit+0x5c>)
 8005aee:	4b0b      	ldr	r3, [pc, #44]	; (8005b1c <SystemInit+0x5c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005af6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005af8:	4a08      	ldr	r2, [pc, #32]	; (8005b1c <SystemInit+0x5c>)
 8005afa:	4b08      	ldr	r3, [pc, #32]	; (8005b1c <SystemInit+0x5c>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005b02:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <SystemInit+0x5c>)
 8005b06:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005b0a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005b0c:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <SystemInit+0x64>)
 8005b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b12:	609a      	str	r2, [r3, #8]
#endif 
}
 8005b14:	bf00      	nop
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	f8ff0000 	.word	0xf8ff0000
 8005b24:	e000ed00 	.word	0xe000ed00

08005b28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005b28:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005b2a:	e003      	b.n	8005b34 <LoopCopyDataInit>

08005b2c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005b2e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005b30:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005b32:	3104      	adds	r1, #4

08005b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005b34:	480a      	ldr	r0, [pc, #40]	; (8005b60 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005b36:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005b38:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005b3a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005b3c:	d3f6      	bcc.n	8005b2c <CopyDataInit>
  ldr r2, =_sbss
 8005b3e:	4a0a      	ldr	r2, [pc, #40]	; (8005b68 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005b40:	e002      	b.n	8005b48 <LoopFillZerobss>

08005b42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005b42:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005b44:	f842 3b04 	str.w	r3, [r2], #4

08005b48 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005b48:	4b08      	ldr	r3, [pc, #32]	; (8005b6c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005b4a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005b4c:	d3f9      	bcc.n	8005b42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005b4e:	f7ff ffb7 	bl	8005ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b52:	f000 f815 	bl	8005b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005b56:	f7ff f9e5 	bl	8004f24 <main>
  bx lr
 8005b5a:	4770      	bx	lr
  ldr r3, =_sidata
 8005b5c:	08006a10 	.word	0x08006a10
  ldr r0, =_sdata
 8005b60:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005b64:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8005b68:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8005b6c:	200002f4 	.word	0x200002f4

08005b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005b70:	e7fe      	b.n	8005b70 <ADC1_2_IRQHandler>
	...

08005b74 <__errno>:
 8005b74:	4b01      	ldr	r3, [pc, #4]	; (8005b7c <__errno+0x8>)
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	20000014 	.word	0x20000014

08005b80 <__libc_init_array>:
 8005b80:	b570      	push	{r4, r5, r6, lr}
 8005b82:	2500      	movs	r5, #0
 8005b84:	4e0c      	ldr	r6, [pc, #48]	; (8005bb8 <__libc_init_array+0x38>)
 8005b86:	4c0d      	ldr	r4, [pc, #52]	; (8005bbc <__libc_init_array+0x3c>)
 8005b88:	1ba4      	subs	r4, r4, r6
 8005b8a:	10a4      	asrs	r4, r4, #2
 8005b8c:	42a5      	cmp	r5, r4
 8005b8e:	d109      	bne.n	8005ba4 <__libc_init_array+0x24>
 8005b90:	f000 fc4e 	bl	8006430 <_init>
 8005b94:	2500      	movs	r5, #0
 8005b96:	4e0a      	ldr	r6, [pc, #40]	; (8005bc0 <__libc_init_array+0x40>)
 8005b98:	4c0a      	ldr	r4, [pc, #40]	; (8005bc4 <__libc_init_array+0x44>)
 8005b9a:	1ba4      	subs	r4, r4, r6
 8005b9c:	10a4      	asrs	r4, r4, #2
 8005b9e:	42a5      	cmp	r5, r4
 8005ba0:	d105      	bne.n	8005bae <__libc_init_array+0x2e>
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}
 8005ba4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ba8:	4798      	blx	r3
 8005baa:	3501      	adds	r5, #1
 8005bac:	e7ee      	b.n	8005b8c <__libc_init_array+0xc>
 8005bae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bb2:	4798      	blx	r3
 8005bb4:	3501      	adds	r5, #1
 8005bb6:	e7f2      	b.n	8005b9e <__libc_init_array+0x1e>
 8005bb8:	08006a08 	.word	0x08006a08
 8005bbc:	08006a08 	.word	0x08006a08
 8005bc0:	08006a08 	.word	0x08006a08
 8005bc4:	08006a0c 	.word	0x08006a0c

08005bc8 <memcpy>:
 8005bc8:	b510      	push	{r4, lr}
 8005bca:	1e43      	subs	r3, r0, #1
 8005bcc:	440a      	add	r2, r1
 8005bce:	4291      	cmp	r1, r2
 8005bd0:	d100      	bne.n	8005bd4 <memcpy+0xc>
 8005bd2:	bd10      	pop	{r4, pc}
 8005bd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bdc:	e7f7      	b.n	8005bce <memcpy+0x6>

08005bde <memset>:
 8005bde:	4603      	mov	r3, r0
 8005be0:	4402      	add	r2, r0
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d100      	bne.n	8005be8 <memset+0xa>
 8005be6:	4770      	bx	lr
 8005be8:	f803 1b01 	strb.w	r1, [r3], #1
 8005bec:	e7f9      	b.n	8005be2 <memset+0x4>
	...

08005bf0 <siprintf>:
 8005bf0:	b40e      	push	{r1, r2, r3}
 8005bf2:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005bf6:	b500      	push	{lr}
 8005bf8:	b09c      	sub	sp, #112	; 0x70
 8005bfa:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005bfe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c02:	9104      	str	r1, [sp, #16]
 8005c04:	9107      	str	r1, [sp, #28]
 8005c06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c0a:	ab1d      	add	r3, sp, #116	; 0x74
 8005c0c:	9002      	str	r0, [sp, #8]
 8005c0e:	9006      	str	r0, [sp, #24]
 8005c10:	4808      	ldr	r0, [pc, #32]	; (8005c34 <siprintf+0x44>)
 8005c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c16:	f8ad 1016 	strh.w	r1, [sp, #22]
 8005c1a:	6800      	ldr	r0, [r0, #0]
 8005c1c:	a902      	add	r1, sp, #8
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	f000 f866 	bl	8005cf0 <_svfiprintf_r>
 8005c24:	2200      	movs	r2, #0
 8005c26:	9b02      	ldr	r3, [sp, #8]
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	b01c      	add	sp, #112	; 0x70
 8005c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c30:	b003      	add	sp, #12
 8005c32:	4770      	bx	lr
 8005c34:	20000014 	.word	0x20000014

08005c38 <__ssputs_r>:
 8005c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3c:	688e      	ldr	r6, [r1, #8]
 8005c3e:	4682      	mov	sl, r0
 8005c40:	429e      	cmp	r6, r3
 8005c42:	460c      	mov	r4, r1
 8005c44:	4691      	mov	r9, r2
 8005c46:	4698      	mov	r8, r3
 8005c48:	d835      	bhi.n	8005cb6 <__ssputs_r+0x7e>
 8005c4a:	898a      	ldrh	r2, [r1, #12]
 8005c4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c50:	d031      	beq.n	8005cb6 <__ssputs_r+0x7e>
 8005c52:	2302      	movs	r3, #2
 8005c54:	6825      	ldr	r5, [r4, #0]
 8005c56:	6909      	ldr	r1, [r1, #16]
 8005c58:	1a6f      	subs	r7, r5, r1
 8005c5a:	6965      	ldr	r5, [r4, #20]
 8005c5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c60:	fb95 f5f3 	sdiv	r5, r5, r3
 8005c64:	f108 0301 	add.w	r3, r8, #1
 8005c68:	443b      	add	r3, r7
 8005c6a:	429d      	cmp	r5, r3
 8005c6c:	bf38      	it	cc
 8005c6e:	461d      	movcc	r5, r3
 8005c70:	0553      	lsls	r3, r2, #21
 8005c72:	d531      	bpl.n	8005cd8 <__ssputs_r+0xa0>
 8005c74:	4629      	mov	r1, r5
 8005c76:	f000 fb3b 	bl	80062f0 <_malloc_r>
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	b950      	cbnz	r0, 8005c94 <__ssputs_r+0x5c>
 8005c7e:	230c      	movs	r3, #12
 8005c80:	f8ca 3000 	str.w	r3, [sl]
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c8e:	81a3      	strh	r3, [r4, #12]
 8005c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c94:	463a      	mov	r2, r7
 8005c96:	6921      	ldr	r1, [r4, #16]
 8005c98:	f7ff ff96 	bl	8005bc8 <memcpy>
 8005c9c:	89a3      	ldrh	r3, [r4, #12]
 8005c9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca6:	81a3      	strh	r3, [r4, #12]
 8005ca8:	6126      	str	r6, [r4, #16]
 8005caa:	443e      	add	r6, r7
 8005cac:	6026      	str	r6, [r4, #0]
 8005cae:	4646      	mov	r6, r8
 8005cb0:	6165      	str	r5, [r4, #20]
 8005cb2:	1bed      	subs	r5, r5, r7
 8005cb4:	60a5      	str	r5, [r4, #8]
 8005cb6:	4546      	cmp	r6, r8
 8005cb8:	bf28      	it	cs
 8005cba:	4646      	movcs	r6, r8
 8005cbc:	4649      	mov	r1, r9
 8005cbe:	4632      	mov	r2, r6
 8005cc0:	6820      	ldr	r0, [r4, #0]
 8005cc2:	f000 faaf 	bl	8006224 <memmove>
 8005cc6:	68a3      	ldr	r3, [r4, #8]
 8005cc8:	2000      	movs	r0, #0
 8005cca:	1b9b      	subs	r3, r3, r6
 8005ccc:	60a3      	str	r3, [r4, #8]
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	441e      	add	r6, r3
 8005cd2:	6026      	str	r6, [r4, #0]
 8005cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd8:	462a      	mov	r2, r5
 8005cda:	f000 fb67 	bl	80063ac <_realloc_r>
 8005cde:	4606      	mov	r6, r0
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d1e1      	bne.n	8005ca8 <__ssputs_r+0x70>
 8005ce4:	6921      	ldr	r1, [r4, #16]
 8005ce6:	4650      	mov	r0, sl
 8005ce8:	f000 fab6 	bl	8006258 <_free_r>
 8005cec:	e7c7      	b.n	8005c7e <__ssputs_r+0x46>
	...

08005cf0 <_svfiprintf_r>:
 8005cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf4:	b09d      	sub	sp, #116	; 0x74
 8005cf6:	9303      	str	r3, [sp, #12]
 8005cf8:	898b      	ldrh	r3, [r1, #12]
 8005cfa:	4680      	mov	r8, r0
 8005cfc:	061c      	lsls	r4, r3, #24
 8005cfe:	460d      	mov	r5, r1
 8005d00:	4616      	mov	r6, r2
 8005d02:	d50f      	bpl.n	8005d24 <_svfiprintf_r+0x34>
 8005d04:	690b      	ldr	r3, [r1, #16]
 8005d06:	b96b      	cbnz	r3, 8005d24 <_svfiprintf_r+0x34>
 8005d08:	2140      	movs	r1, #64	; 0x40
 8005d0a:	f000 faf1 	bl	80062f0 <_malloc_r>
 8005d0e:	6028      	str	r0, [r5, #0]
 8005d10:	6128      	str	r0, [r5, #16]
 8005d12:	b928      	cbnz	r0, 8005d20 <_svfiprintf_r+0x30>
 8005d14:	230c      	movs	r3, #12
 8005d16:	f8c8 3000 	str.w	r3, [r8]
 8005d1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d1e:	e0c4      	b.n	8005eaa <_svfiprintf_r+0x1ba>
 8005d20:	2340      	movs	r3, #64	; 0x40
 8005d22:	616b      	str	r3, [r5, #20]
 8005d24:	2300      	movs	r3, #0
 8005d26:	9309      	str	r3, [sp, #36]	; 0x24
 8005d28:	2320      	movs	r3, #32
 8005d2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d2e:	2330      	movs	r3, #48	; 0x30
 8005d30:	f04f 0b01 	mov.w	fp, #1
 8005d34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d38:	4637      	mov	r7, r6
 8005d3a:	463c      	mov	r4, r7
 8005d3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d13c      	bne.n	8005dbe <_svfiprintf_r+0xce>
 8005d44:	ebb7 0a06 	subs.w	sl, r7, r6
 8005d48:	d00b      	beq.n	8005d62 <_svfiprintf_r+0x72>
 8005d4a:	4653      	mov	r3, sl
 8005d4c:	4632      	mov	r2, r6
 8005d4e:	4629      	mov	r1, r5
 8005d50:	4640      	mov	r0, r8
 8005d52:	f7ff ff71 	bl	8005c38 <__ssputs_r>
 8005d56:	3001      	adds	r0, #1
 8005d58:	f000 80a2 	beq.w	8005ea0 <_svfiprintf_r+0x1b0>
 8005d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d5e:	4453      	add	r3, sl
 8005d60:	9309      	str	r3, [sp, #36]	; 0x24
 8005d62:	783b      	ldrb	r3, [r7, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 809b 	beq.w	8005ea0 <_svfiprintf_r+0x1b0>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d70:	9304      	str	r3, [sp, #16]
 8005d72:	9307      	str	r3, [sp, #28]
 8005d74:	9205      	str	r2, [sp, #20]
 8005d76:	9306      	str	r3, [sp, #24]
 8005d78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d7c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d7e:	2205      	movs	r2, #5
 8005d80:	7821      	ldrb	r1, [r4, #0]
 8005d82:	4850      	ldr	r0, [pc, #320]	; (8005ec4 <_svfiprintf_r+0x1d4>)
 8005d84:	f000 fa40 	bl	8006208 <memchr>
 8005d88:	1c67      	adds	r7, r4, #1
 8005d8a:	9b04      	ldr	r3, [sp, #16]
 8005d8c:	b9d8      	cbnz	r0, 8005dc6 <_svfiprintf_r+0xd6>
 8005d8e:	06d9      	lsls	r1, r3, #27
 8005d90:	bf44      	itt	mi
 8005d92:	2220      	movmi	r2, #32
 8005d94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d98:	071a      	lsls	r2, r3, #28
 8005d9a:	bf44      	itt	mi
 8005d9c:	222b      	movmi	r2, #43	; 0x2b
 8005d9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005da2:	7822      	ldrb	r2, [r4, #0]
 8005da4:	2a2a      	cmp	r2, #42	; 0x2a
 8005da6:	d016      	beq.n	8005dd6 <_svfiprintf_r+0xe6>
 8005da8:	2100      	movs	r1, #0
 8005daa:	200a      	movs	r0, #10
 8005dac:	9a07      	ldr	r2, [sp, #28]
 8005dae:	4627      	mov	r7, r4
 8005db0:	783b      	ldrb	r3, [r7, #0]
 8005db2:	3401      	adds	r4, #1
 8005db4:	3b30      	subs	r3, #48	; 0x30
 8005db6:	2b09      	cmp	r3, #9
 8005db8:	d950      	bls.n	8005e5c <_svfiprintf_r+0x16c>
 8005dba:	b1c9      	cbz	r1, 8005df0 <_svfiprintf_r+0x100>
 8005dbc:	e011      	b.n	8005de2 <_svfiprintf_r+0xf2>
 8005dbe:	2b25      	cmp	r3, #37	; 0x25
 8005dc0:	d0c0      	beq.n	8005d44 <_svfiprintf_r+0x54>
 8005dc2:	4627      	mov	r7, r4
 8005dc4:	e7b9      	b.n	8005d3a <_svfiprintf_r+0x4a>
 8005dc6:	4a3f      	ldr	r2, [pc, #252]	; (8005ec4 <_svfiprintf_r+0x1d4>)
 8005dc8:	463c      	mov	r4, r7
 8005dca:	1a80      	subs	r0, r0, r2
 8005dcc:	fa0b f000 	lsl.w	r0, fp, r0
 8005dd0:	4318      	orrs	r0, r3
 8005dd2:	9004      	str	r0, [sp, #16]
 8005dd4:	e7d3      	b.n	8005d7e <_svfiprintf_r+0x8e>
 8005dd6:	9a03      	ldr	r2, [sp, #12]
 8005dd8:	1d11      	adds	r1, r2, #4
 8005dda:	6812      	ldr	r2, [r2, #0]
 8005ddc:	9103      	str	r1, [sp, #12]
 8005dde:	2a00      	cmp	r2, #0
 8005de0:	db01      	blt.n	8005de6 <_svfiprintf_r+0xf6>
 8005de2:	9207      	str	r2, [sp, #28]
 8005de4:	e004      	b.n	8005df0 <_svfiprintf_r+0x100>
 8005de6:	4252      	negs	r2, r2
 8005de8:	f043 0302 	orr.w	r3, r3, #2
 8005dec:	9207      	str	r2, [sp, #28]
 8005dee:	9304      	str	r3, [sp, #16]
 8005df0:	783b      	ldrb	r3, [r7, #0]
 8005df2:	2b2e      	cmp	r3, #46	; 0x2e
 8005df4:	d10d      	bne.n	8005e12 <_svfiprintf_r+0x122>
 8005df6:	787b      	ldrb	r3, [r7, #1]
 8005df8:	1c79      	adds	r1, r7, #1
 8005dfa:	2b2a      	cmp	r3, #42	; 0x2a
 8005dfc:	d132      	bne.n	8005e64 <_svfiprintf_r+0x174>
 8005dfe:	9b03      	ldr	r3, [sp, #12]
 8005e00:	3702      	adds	r7, #2
 8005e02:	1d1a      	adds	r2, r3, #4
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	9203      	str	r2, [sp, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	bfb8      	it	lt
 8005e0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e10:	9305      	str	r3, [sp, #20]
 8005e12:	4c2d      	ldr	r4, [pc, #180]	; (8005ec8 <_svfiprintf_r+0x1d8>)
 8005e14:	2203      	movs	r2, #3
 8005e16:	7839      	ldrb	r1, [r7, #0]
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 f9f5 	bl	8006208 <memchr>
 8005e1e:	b138      	cbz	r0, 8005e30 <_svfiprintf_r+0x140>
 8005e20:	2340      	movs	r3, #64	; 0x40
 8005e22:	1b00      	subs	r0, r0, r4
 8005e24:	fa03 f000 	lsl.w	r0, r3, r0
 8005e28:	9b04      	ldr	r3, [sp, #16]
 8005e2a:	3701      	adds	r7, #1
 8005e2c:	4303      	orrs	r3, r0
 8005e2e:	9304      	str	r3, [sp, #16]
 8005e30:	7839      	ldrb	r1, [r7, #0]
 8005e32:	2206      	movs	r2, #6
 8005e34:	4825      	ldr	r0, [pc, #148]	; (8005ecc <_svfiprintf_r+0x1dc>)
 8005e36:	1c7e      	adds	r6, r7, #1
 8005e38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e3c:	f000 f9e4 	bl	8006208 <memchr>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d035      	beq.n	8005eb0 <_svfiprintf_r+0x1c0>
 8005e44:	4b22      	ldr	r3, [pc, #136]	; (8005ed0 <_svfiprintf_r+0x1e0>)
 8005e46:	b9fb      	cbnz	r3, 8005e88 <_svfiprintf_r+0x198>
 8005e48:	9b03      	ldr	r3, [sp, #12]
 8005e4a:	3307      	adds	r3, #7
 8005e4c:	f023 0307 	bic.w	r3, r3, #7
 8005e50:	3308      	adds	r3, #8
 8005e52:	9303      	str	r3, [sp, #12]
 8005e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e56:	444b      	add	r3, r9
 8005e58:	9309      	str	r3, [sp, #36]	; 0x24
 8005e5a:	e76d      	b.n	8005d38 <_svfiprintf_r+0x48>
 8005e5c:	fb00 3202 	mla	r2, r0, r2, r3
 8005e60:	2101      	movs	r1, #1
 8005e62:	e7a4      	b.n	8005dae <_svfiprintf_r+0xbe>
 8005e64:	2300      	movs	r3, #0
 8005e66:	240a      	movs	r4, #10
 8005e68:	4618      	mov	r0, r3
 8005e6a:	9305      	str	r3, [sp, #20]
 8005e6c:	460f      	mov	r7, r1
 8005e6e:	783a      	ldrb	r2, [r7, #0]
 8005e70:	3101      	adds	r1, #1
 8005e72:	3a30      	subs	r2, #48	; 0x30
 8005e74:	2a09      	cmp	r2, #9
 8005e76:	d903      	bls.n	8005e80 <_svfiprintf_r+0x190>
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0ca      	beq.n	8005e12 <_svfiprintf_r+0x122>
 8005e7c:	9005      	str	r0, [sp, #20]
 8005e7e:	e7c8      	b.n	8005e12 <_svfiprintf_r+0x122>
 8005e80:	fb04 2000 	mla	r0, r4, r0, r2
 8005e84:	2301      	movs	r3, #1
 8005e86:	e7f1      	b.n	8005e6c <_svfiprintf_r+0x17c>
 8005e88:	ab03      	add	r3, sp, #12
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	462a      	mov	r2, r5
 8005e8e:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <_svfiprintf_r+0x1e4>)
 8005e90:	a904      	add	r1, sp, #16
 8005e92:	4640      	mov	r0, r8
 8005e94:	f3af 8000 	nop.w
 8005e98:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005e9c:	4681      	mov	r9, r0
 8005e9e:	d1d9      	bne.n	8005e54 <_svfiprintf_r+0x164>
 8005ea0:	89ab      	ldrh	r3, [r5, #12]
 8005ea2:	065b      	lsls	r3, r3, #25
 8005ea4:	f53f af39 	bmi.w	8005d1a <_svfiprintf_r+0x2a>
 8005ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005eaa:	b01d      	add	sp, #116	; 0x74
 8005eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb0:	ab03      	add	r3, sp, #12
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	462a      	mov	r2, r5
 8005eb6:	4b07      	ldr	r3, [pc, #28]	; (8005ed4 <_svfiprintf_r+0x1e4>)
 8005eb8:	a904      	add	r1, sp, #16
 8005eba:	4640      	mov	r0, r8
 8005ebc:	f000 f884 	bl	8005fc8 <_printf_i>
 8005ec0:	e7ea      	b.n	8005e98 <_svfiprintf_r+0x1a8>
 8005ec2:	bf00      	nop
 8005ec4:	080069d4 	.word	0x080069d4
 8005ec8:	080069da 	.word	0x080069da
 8005ecc:	080069de 	.word	0x080069de
 8005ed0:	00000000 	.word	0x00000000
 8005ed4:	08005c39 	.word	0x08005c39

08005ed8 <_printf_common>:
 8005ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005edc:	4691      	mov	r9, r2
 8005ede:	461f      	mov	r7, r3
 8005ee0:	688a      	ldr	r2, [r1, #8]
 8005ee2:	690b      	ldr	r3, [r1, #16]
 8005ee4:	4606      	mov	r6, r0
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	bfb8      	it	lt
 8005eea:	4613      	movlt	r3, r2
 8005eec:	f8c9 3000 	str.w	r3, [r9]
 8005ef0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005efa:	b112      	cbz	r2, 8005f02 <_printf_common+0x2a>
 8005efc:	3301      	adds	r3, #1
 8005efe:	f8c9 3000 	str.w	r3, [r9]
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	0699      	lsls	r1, r3, #26
 8005f06:	bf42      	ittt	mi
 8005f08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f0c:	3302      	addmi	r3, #2
 8005f0e:	f8c9 3000 	strmi.w	r3, [r9]
 8005f12:	6825      	ldr	r5, [r4, #0]
 8005f14:	f015 0506 	ands.w	r5, r5, #6
 8005f18:	d107      	bne.n	8005f2a <_printf_common+0x52>
 8005f1a:	f104 0a19 	add.w	sl, r4, #25
 8005f1e:	68e3      	ldr	r3, [r4, #12]
 8005f20:	f8d9 2000 	ldr.w	r2, [r9]
 8005f24:	1a9b      	subs	r3, r3, r2
 8005f26:	429d      	cmp	r5, r3
 8005f28:	db2a      	blt.n	8005f80 <_printf_common+0xa8>
 8005f2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f2e:	6822      	ldr	r2, [r4, #0]
 8005f30:	3300      	adds	r3, #0
 8005f32:	bf18      	it	ne
 8005f34:	2301      	movne	r3, #1
 8005f36:	0692      	lsls	r2, r2, #26
 8005f38:	d42f      	bmi.n	8005f9a <_printf_common+0xc2>
 8005f3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f3e:	4639      	mov	r1, r7
 8005f40:	4630      	mov	r0, r6
 8005f42:	47c0      	blx	r8
 8005f44:	3001      	adds	r0, #1
 8005f46:	d022      	beq.n	8005f8e <_printf_common+0xb6>
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	68e5      	ldr	r5, [r4, #12]
 8005f4c:	f003 0306 	and.w	r3, r3, #6
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	bf18      	it	ne
 8005f54:	2500      	movne	r5, #0
 8005f56:	f8d9 2000 	ldr.w	r2, [r9]
 8005f5a:	f04f 0900 	mov.w	r9, #0
 8005f5e:	bf08      	it	eq
 8005f60:	1aad      	subeq	r5, r5, r2
 8005f62:	68a3      	ldr	r3, [r4, #8]
 8005f64:	6922      	ldr	r2, [r4, #16]
 8005f66:	bf08      	it	eq
 8005f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	bfc4      	itt	gt
 8005f70:	1a9b      	subgt	r3, r3, r2
 8005f72:	18ed      	addgt	r5, r5, r3
 8005f74:	341a      	adds	r4, #26
 8005f76:	454d      	cmp	r5, r9
 8005f78:	d11b      	bne.n	8005fb2 <_printf_common+0xda>
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f80:	2301      	movs	r3, #1
 8005f82:	4652      	mov	r2, sl
 8005f84:	4639      	mov	r1, r7
 8005f86:	4630      	mov	r0, r6
 8005f88:	47c0      	blx	r8
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	d103      	bne.n	8005f96 <_printf_common+0xbe>
 8005f8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f96:	3501      	adds	r5, #1
 8005f98:	e7c1      	b.n	8005f1e <_printf_common+0x46>
 8005f9a:	2030      	movs	r0, #48	; 0x30
 8005f9c:	18e1      	adds	r1, r4, r3
 8005f9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fa8:	4422      	add	r2, r4
 8005faa:	3302      	adds	r3, #2
 8005fac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fb0:	e7c3      	b.n	8005f3a <_printf_common+0x62>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	4639      	mov	r1, r7
 8005fb8:	4630      	mov	r0, r6
 8005fba:	47c0      	blx	r8
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d0e6      	beq.n	8005f8e <_printf_common+0xb6>
 8005fc0:	f109 0901 	add.w	r9, r9, #1
 8005fc4:	e7d7      	b.n	8005f76 <_printf_common+0x9e>
	...

08005fc8 <_printf_i>:
 8005fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fcc:	4617      	mov	r7, r2
 8005fce:	7e0a      	ldrb	r2, [r1, #24]
 8005fd0:	b085      	sub	sp, #20
 8005fd2:	2a6e      	cmp	r2, #110	; 0x6e
 8005fd4:	4698      	mov	r8, r3
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	460c      	mov	r4, r1
 8005fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fdc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005fe0:	f000 80bc 	beq.w	800615c <_printf_i+0x194>
 8005fe4:	d81a      	bhi.n	800601c <_printf_i+0x54>
 8005fe6:	2a63      	cmp	r2, #99	; 0x63
 8005fe8:	d02e      	beq.n	8006048 <_printf_i+0x80>
 8005fea:	d80a      	bhi.n	8006002 <_printf_i+0x3a>
 8005fec:	2a00      	cmp	r2, #0
 8005fee:	f000 80c8 	beq.w	8006182 <_printf_i+0x1ba>
 8005ff2:	2a58      	cmp	r2, #88	; 0x58
 8005ff4:	f000 808a 	beq.w	800610c <_printf_i+0x144>
 8005ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ffc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006000:	e02a      	b.n	8006058 <_printf_i+0x90>
 8006002:	2a64      	cmp	r2, #100	; 0x64
 8006004:	d001      	beq.n	800600a <_printf_i+0x42>
 8006006:	2a69      	cmp	r2, #105	; 0x69
 8006008:	d1f6      	bne.n	8005ff8 <_printf_i+0x30>
 800600a:	6821      	ldr	r1, [r4, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006012:	d023      	beq.n	800605c <_printf_i+0x94>
 8006014:	1d11      	adds	r1, r2, #4
 8006016:	6019      	str	r1, [r3, #0]
 8006018:	6813      	ldr	r3, [r2, #0]
 800601a:	e027      	b.n	800606c <_printf_i+0xa4>
 800601c:	2a73      	cmp	r2, #115	; 0x73
 800601e:	f000 80b4 	beq.w	800618a <_printf_i+0x1c2>
 8006022:	d808      	bhi.n	8006036 <_printf_i+0x6e>
 8006024:	2a6f      	cmp	r2, #111	; 0x6f
 8006026:	d02a      	beq.n	800607e <_printf_i+0xb6>
 8006028:	2a70      	cmp	r2, #112	; 0x70
 800602a:	d1e5      	bne.n	8005ff8 <_printf_i+0x30>
 800602c:	680a      	ldr	r2, [r1, #0]
 800602e:	f042 0220 	orr.w	r2, r2, #32
 8006032:	600a      	str	r2, [r1, #0]
 8006034:	e003      	b.n	800603e <_printf_i+0x76>
 8006036:	2a75      	cmp	r2, #117	; 0x75
 8006038:	d021      	beq.n	800607e <_printf_i+0xb6>
 800603a:	2a78      	cmp	r2, #120	; 0x78
 800603c:	d1dc      	bne.n	8005ff8 <_printf_i+0x30>
 800603e:	2278      	movs	r2, #120	; 0x78
 8006040:	496f      	ldr	r1, [pc, #444]	; (8006200 <_printf_i+0x238>)
 8006042:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006046:	e064      	b.n	8006112 <_printf_i+0x14a>
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800604e:	1d11      	adds	r1, r2, #4
 8006050:	6019      	str	r1, [r3, #0]
 8006052:	6813      	ldr	r3, [r2, #0]
 8006054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006058:	2301      	movs	r3, #1
 800605a:	e0a3      	b.n	80061a4 <_printf_i+0x1dc>
 800605c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006060:	f102 0104 	add.w	r1, r2, #4
 8006064:	6019      	str	r1, [r3, #0]
 8006066:	d0d7      	beq.n	8006018 <_printf_i+0x50>
 8006068:	f9b2 3000 	ldrsh.w	r3, [r2]
 800606c:	2b00      	cmp	r3, #0
 800606e:	da03      	bge.n	8006078 <_printf_i+0xb0>
 8006070:	222d      	movs	r2, #45	; 0x2d
 8006072:	425b      	negs	r3, r3
 8006074:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006078:	4962      	ldr	r1, [pc, #392]	; (8006204 <_printf_i+0x23c>)
 800607a:	220a      	movs	r2, #10
 800607c:	e017      	b.n	80060ae <_printf_i+0xe6>
 800607e:	6820      	ldr	r0, [r4, #0]
 8006080:	6819      	ldr	r1, [r3, #0]
 8006082:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006086:	d003      	beq.n	8006090 <_printf_i+0xc8>
 8006088:	1d08      	adds	r0, r1, #4
 800608a:	6018      	str	r0, [r3, #0]
 800608c:	680b      	ldr	r3, [r1, #0]
 800608e:	e006      	b.n	800609e <_printf_i+0xd6>
 8006090:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006094:	f101 0004 	add.w	r0, r1, #4
 8006098:	6018      	str	r0, [r3, #0]
 800609a:	d0f7      	beq.n	800608c <_printf_i+0xc4>
 800609c:	880b      	ldrh	r3, [r1, #0]
 800609e:	2a6f      	cmp	r2, #111	; 0x6f
 80060a0:	bf14      	ite	ne
 80060a2:	220a      	movne	r2, #10
 80060a4:	2208      	moveq	r2, #8
 80060a6:	4957      	ldr	r1, [pc, #348]	; (8006204 <_printf_i+0x23c>)
 80060a8:	2000      	movs	r0, #0
 80060aa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80060ae:	6865      	ldr	r5, [r4, #4]
 80060b0:	2d00      	cmp	r5, #0
 80060b2:	60a5      	str	r5, [r4, #8]
 80060b4:	f2c0 809c 	blt.w	80061f0 <_printf_i+0x228>
 80060b8:	6820      	ldr	r0, [r4, #0]
 80060ba:	f020 0004 	bic.w	r0, r0, #4
 80060be:	6020      	str	r0, [r4, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d13f      	bne.n	8006144 <_printf_i+0x17c>
 80060c4:	2d00      	cmp	r5, #0
 80060c6:	f040 8095 	bne.w	80061f4 <_printf_i+0x22c>
 80060ca:	4675      	mov	r5, lr
 80060cc:	2a08      	cmp	r2, #8
 80060ce:	d10b      	bne.n	80060e8 <_printf_i+0x120>
 80060d0:	6823      	ldr	r3, [r4, #0]
 80060d2:	07da      	lsls	r2, r3, #31
 80060d4:	d508      	bpl.n	80060e8 <_printf_i+0x120>
 80060d6:	6923      	ldr	r3, [r4, #16]
 80060d8:	6862      	ldr	r2, [r4, #4]
 80060da:	429a      	cmp	r2, r3
 80060dc:	bfde      	ittt	le
 80060de:	2330      	movle	r3, #48	; 0x30
 80060e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060e4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80060e8:	ebae 0305 	sub.w	r3, lr, r5
 80060ec:	6123      	str	r3, [r4, #16]
 80060ee:	f8cd 8000 	str.w	r8, [sp]
 80060f2:	463b      	mov	r3, r7
 80060f4:	aa03      	add	r2, sp, #12
 80060f6:	4621      	mov	r1, r4
 80060f8:	4630      	mov	r0, r6
 80060fa:	f7ff feed 	bl	8005ed8 <_printf_common>
 80060fe:	3001      	adds	r0, #1
 8006100:	d155      	bne.n	80061ae <_printf_i+0x1e6>
 8006102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006106:	b005      	add	sp, #20
 8006108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800610c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006110:	493c      	ldr	r1, [pc, #240]	; (8006204 <_printf_i+0x23c>)
 8006112:	6822      	ldr	r2, [r4, #0]
 8006114:	6818      	ldr	r0, [r3, #0]
 8006116:	f012 0f80 	tst.w	r2, #128	; 0x80
 800611a:	f100 0504 	add.w	r5, r0, #4
 800611e:	601d      	str	r5, [r3, #0]
 8006120:	d001      	beq.n	8006126 <_printf_i+0x15e>
 8006122:	6803      	ldr	r3, [r0, #0]
 8006124:	e002      	b.n	800612c <_printf_i+0x164>
 8006126:	0655      	lsls	r5, r2, #25
 8006128:	d5fb      	bpl.n	8006122 <_printf_i+0x15a>
 800612a:	8803      	ldrh	r3, [r0, #0]
 800612c:	07d0      	lsls	r0, r2, #31
 800612e:	bf44      	itt	mi
 8006130:	f042 0220 	orrmi.w	r2, r2, #32
 8006134:	6022      	strmi	r2, [r4, #0]
 8006136:	b91b      	cbnz	r3, 8006140 <_printf_i+0x178>
 8006138:	6822      	ldr	r2, [r4, #0]
 800613a:	f022 0220 	bic.w	r2, r2, #32
 800613e:	6022      	str	r2, [r4, #0]
 8006140:	2210      	movs	r2, #16
 8006142:	e7b1      	b.n	80060a8 <_printf_i+0xe0>
 8006144:	4675      	mov	r5, lr
 8006146:	fbb3 f0f2 	udiv	r0, r3, r2
 800614a:	fb02 3310 	mls	r3, r2, r0, r3
 800614e:	5ccb      	ldrb	r3, [r1, r3]
 8006150:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006154:	4603      	mov	r3, r0
 8006156:	2800      	cmp	r0, #0
 8006158:	d1f5      	bne.n	8006146 <_printf_i+0x17e>
 800615a:	e7b7      	b.n	80060cc <_printf_i+0x104>
 800615c:	6808      	ldr	r0, [r1, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006164:	6949      	ldr	r1, [r1, #20]
 8006166:	d004      	beq.n	8006172 <_printf_i+0x1aa>
 8006168:	1d10      	adds	r0, r2, #4
 800616a:	6018      	str	r0, [r3, #0]
 800616c:	6813      	ldr	r3, [r2, #0]
 800616e:	6019      	str	r1, [r3, #0]
 8006170:	e007      	b.n	8006182 <_printf_i+0x1ba>
 8006172:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006176:	f102 0004 	add.w	r0, r2, #4
 800617a:	6018      	str	r0, [r3, #0]
 800617c:	6813      	ldr	r3, [r2, #0]
 800617e:	d0f6      	beq.n	800616e <_printf_i+0x1a6>
 8006180:	8019      	strh	r1, [r3, #0]
 8006182:	2300      	movs	r3, #0
 8006184:	4675      	mov	r5, lr
 8006186:	6123      	str	r3, [r4, #16]
 8006188:	e7b1      	b.n	80060ee <_printf_i+0x126>
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	1d11      	adds	r1, r2, #4
 800618e:	6019      	str	r1, [r3, #0]
 8006190:	6815      	ldr	r5, [r2, #0]
 8006192:	2100      	movs	r1, #0
 8006194:	6862      	ldr	r2, [r4, #4]
 8006196:	4628      	mov	r0, r5
 8006198:	f000 f836 	bl	8006208 <memchr>
 800619c:	b108      	cbz	r0, 80061a2 <_printf_i+0x1da>
 800619e:	1b40      	subs	r0, r0, r5
 80061a0:	6060      	str	r0, [r4, #4]
 80061a2:	6863      	ldr	r3, [r4, #4]
 80061a4:	6123      	str	r3, [r4, #16]
 80061a6:	2300      	movs	r3, #0
 80061a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ac:	e79f      	b.n	80060ee <_printf_i+0x126>
 80061ae:	6923      	ldr	r3, [r4, #16]
 80061b0:	462a      	mov	r2, r5
 80061b2:	4639      	mov	r1, r7
 80061b4:	4630      	mov	r0, r6
 80061b6:	47c0      	blx	r8
 80061b8:	3001      	adds	r0, #1
 80061ba:	d0a2      	beq.n	8006102 <_printf_i+0x13a>
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	079b      	lsls	r3, r3, #30
 80061c0:	d507      	bpl.n	80061d2 <_printf_i+0x20a>
 80061c2:	2500      	movs	r5, #0
 80061c4:	f104 0919 	add.w	r9, r4, #25
 80061c8:	68e3      	ldr	r3, [r4, #12]
 80061ca:	9a03      	ldr	r2, [sp, #12]
 80061cc:	1a9b      	subs	r3, r3, r2
 80061ce:	429d      	cmp	r5, r3
 80061d0:	db05      	blt.n	80061de <_printf_i+0x216>
 80061d2:	68e0      	ldr	r0, [r4, #12]
 80061d4:	9b03      	ldr	r3, [sp, #12]
 80061d6:	4298      	cmp	r0, r3
 80061d8:	bfb8      	it	lt
 80061da:	4618      	movlt	r0, r3
 80061dc:	e793      	b.n	8006106 <_printf_i+0x13e>
 80061de:	2301      	movs	r3, #1
 80061e0:	464a      	mov	r2, r9
 80061e2:	4639      	mov	r1, r7
 80061e4:	4630      	mov	r0, r6
 80061e6:	47c0      	blx	r8
 80061e8:	3001      	adds	r0, #1
 80061ea:	d08a      	beq.n	8006102 <_printf_i+0x13a>
 80061ec:	3501      	adds	r5, #1
 80061ee:	e7eb      	b.n	80061c8 <_printf_i+0x200>
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1a7      	bne.n	8006144 <_printf_i+0x17c>
 80061f4:	780b      	ldrb	r3, [r1, #0]
 80061f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061fe:	e765      	b.n	80060cc <_printf_i+0x104>
 8006200:	080069f6 	.word	0x080069f6
 8006204:	080069e5 	.word	0x080069e5

08006208 <memchr>:
 8006208:	b510      	push	{r4, lr}
 800620a:	b2c9      	uxtb	r1, r1
 800620c:	4402      	add	r2, r0
 800620e:	4290      	cmp	r0, r2
 8006210:	4603      	mov	r3, r0
 8006212:	d101      	bne.n	8006218 <memchr+0x10>
 8006214:	2000      	movs	r0, #0
 8006216:	bd10      	pop	{r4, pc}
 8006218:	781c      	ldrb	r4, [r3, #0]
 800621a:	3001      	adds	r0, #1
 800621c:	428c      	cmp	r4, r1
 800621e:	d1f6      	bne.n	800620e <memchr+0x6>
 8006220:	4618      	mov	r0, r3
 8006222:	bd10      	pop	{r4, pc}

08006224 <memmove>:
 8006224:	4288      	cmp	r0, r1
 8006226:	b510      	push	{r4, lr}
 8006228:	eb01 0302 	add.w	r3, r1, r2
 800622c:	d803      	bhi.n	8006236 <memmove+0x12>
 800622e:	1e42      	subs	r2, r0, #1
 8006230:	4299      	cmp	r1, r3
 8006232:	d10c      	bne.n	800624e <memmove+0x2a>
 8006234:	bd10      	pop	{r4, pc}
 8006236:	4298      	cmp	r0, r3
 8006238:	d2f9      	bcs.n	800622e <memmove+0xa>
 800623a:	1881      	adds	r1, r0, r2
 800623c:	1ad2      	subs	r2, r2, r3
 800623e:	42d3      	cmn	r3, r2
 8006240:	d100      	bne.n	8006244 <memmove+0x20>
 8006242:	bd10      	pop	{r4, pc}
 8006244:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006248:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800624c:	e7f7      	b.n	800623e <memmove+0x1a>
 800624e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006252:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006256:	e7eb      	b.n	8006230 <memmove+0xc>

08006258 <_free_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4605      	mov	r5, r0
 800625c:	2900      	cmp	r1, #0
 800625e:	d043      	beq.n	80062e8 <_free_r+0x90>
 8006260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006264:	1f0c      	subs	r4, r1, #4
 8006266:	2b00      	cmp	r3, #0
 8006268:	bfb8      	it	lt
 800626a:	18e4      	addlt	r4, r4, r3
 800626c:	f000 f8d4 	bl	8006418 <__malloc_lock>
 8006270:	4a1e      	ldr	r2, [pc, #120]	; (80062ec <_free_r+0x94>)
 8006272:	6813      	ldr	r3, [r2, #0]
 8006274:	4610      	mov	r0, r2
 8006276:	b933      	cbnz	r3, 8006286 <_free_r+0x2e>
 8006278:	6063      	str	r3, [r4, #4]
 800627a:	6014      	str	r4, [r2, #0]
 800627c:	4628      	mov	r0, r5
 800627e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006282:	f000 b8ca 	b.w	800641a <__malloc_unlock>
 8006286:	42a3      	cmp	r3, r4
 8006288:	d90b      	bls.n	80062a2 <_free_r+0x4a>
 800628a:	6821      	ldr	r1, [r4, #0]
 800628c:	1862      	adds	r2, r4, r1
 800628e:	4293      	cmp	r3, r2
 8006290:	bf01      	itttt	eq
 8006292:	681a      	ldreq	r2, [r3, #0]
 8006294:	685b      	ldreq	r3, [r3, #4]
 8006296:	1852      	addeq	r2, r2, r1
 8006298:	6022      	streq	r2, [r4, #0]
 800629a:	6063      	str	r3, [r4, #4]
 800629c:	6004      	str	r4, [r0, #0]
 800629e:	e7ed      	b.n	800627c <_free_r+0x24>
 80062a0:	4613      	mov	r3, r2
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	b10a      	cbz	r2, 80062aa <_free_r+0x52>
 80062a6:	42a2      	cmp	r2, r4
 80062a8:	d9fa      	bls.n	80062a0 <_free_r+0x48>
 80062aa:	6819      	ldr	r1, [r3, #0]
 80062ac:	1858      	adds	r0, r3, r1
 80062ae:	42a0      	cmp	r0, r4
 80062b0:	d10b      	bne.n	80062ca <_free_r+0x72>
 80062b2:	6820      	ldr	r0, [r4, #0]
 80062b4:	4401      	add	r1, r0
 80062b6:	1858      	adds	r0, r3, r1
 80062b8:	4282      	cmp	r2, r0
 80062ba:	6019      	str	r1, [r3, #0]
 80062bc:	d1de      	bne.n	800627c <_free_r+0x24>
 80062be:	6810      	ldr	r0, [r2, #0]
 80062c0:	6852      	ldr	r2, [r2, #4]
 80062c2:	4401      	add	r1, r0
 80062c4:	6019      	str	r1, [r3, #0]
 80062c6:	605a      	str	r2, [r3, #4]
 80062c8:	e7d8      	b.n	800627c <_free_r+0x24>
 80062ca:	d902      	bls.n	80062d2 <_free_r+0x7a>
 80062cc:	230c      	movs	r3, #12
 80062ce:	602b      	str	r3, [r5, #0]
 80062d0:	e7d4      	b.n	800627c <_free_r+0x24>
 80062d2:	6820      	ldr	r0, [r4, #0]
 80062d4:	1821      	adds	r1, r4, r0
 80062d6:	428a      	cmp	r2, r1
 80062d8:	bf01      	itttt	eq
 80062da:	6811      	ldreq	r1, [r2, #0]
 80062dc:	6852      	ldreq	r2, [r2, #4]
 80062de:	1809      	addeq	r1, r1, r0
 80062e0:	6021      	streq	r1, [r4, #0]
 80062e2:	6062      	str	r2, [r4, #4]
 80062e4:	605c      	str	r4, [r3, #4]
 80062e6:	e7c9      	b.n	800627c <_free_r+0x24>
 80062e8:	bd38      	pop	{r3, r4, r5, pc}
 80062ea:	bf00      	nop
 80062ec:	20000178 	.word	0x20000178

080062f0 <_malloc_r>:
 80062f0:	b570      	push	{r4, r5, r6, lr}
 80062f2:	1ccd      	adds	r5, r1, #3
 80062f4:	f025 0503 	bic.w	r5, r5, #3
 80062f8:	3508      	adds	r5, #8
 80062fa:	2d0c      	cmp	r5, #12
 80062fc:	bf38      	it	cc
 80062fe:	250c      	movcc	r5, #12
 8006300:	2d00      	cmp	r5, #0
 8006302:	4606      	mov	r6, r0
 8006304:	db01      	blt.n	800630a <_malloc_r+0x1a>
 8006306:	42a9      	cmp	r1, r5
 8006308:	d903      	bls.n	8006312 <_malloc_r+0x22>
 800630a:	230c      	movs	r3, #12
 800630c:	6033      	str	r3, [r6, #0]
 800630e:	2000      	movs	r0, #0
 8006310:	bd70      	pop	{r4, r5, r6, pc}
 8006312:	f000 f881 	bl	8006418 <__malloc_lock>
 8006316:	4a23      	ldr	r2, [pc, #140]	; (80063a4 <_malloc_r+0xb4>)
 8006318:	6814      	ldr	r4, [r2, #0]
 800631a:	4621      	mov	r1, r4
 800631c:	b991      	cbnz	r1, 8006344 <_malloc_r+0x54>
 800631e:	4c22      	ldr	r4, [pc, #136]	; (80063a8 <_malloc_r+0xb8>)
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	b91b      	cbnz	r3, 800632c <_malloc_r+0x3c>
 8006324:	4630      	mov	r0, r6
 8006326:	f000 f867 	bl	80063f8 <_sbrk_r>
 800632a:	6020      	str	r0, [r4, #0]
 800632c:	4629      	mov	r1, r5
 800632e:	4630      	mov	r0, r6
 8006330:	f000 f862 	bl	80063f8 <_sbrk_r>
 8006334:	1c43      	adds	r3, r0, #1
 8006336:	d126      	bne.n	8006386 <_malloc_r+0x96>
 8006338:	230c      	movs	r3, #12
 800633a:	4630      	mov	r0, r6
 800633c:	6033      	str	r3, [r6, #0]
 800633e:	f000 f86c 	bl	800641a <__malloc_unlock>
 8006342:	e7e4      	b.n	800630e <_malloc_r+0x1e>
 8006344:	680b      	ldr	r3, [r1, #0]
 8006346:	1b5b      	subs	r3, r3, r5
 8006348:	d41a      	bmi.n	8006380 <_malloc_r+0x90>
 800634a:	2b0b      	cmp	r3, #11
 800634c:	d90f      	bls.n	800636e <_malloc_r+0x7e>
 800634e:	600b      	str	r3, [r1, #0]
 8006350:	18cc      	adds	r4, r1, r3
 8006352:	50cd      	str	r5, [r1, r3]
 8006354:	4630      	mov	r0, r6
 8006356:	f000 f860 	bl	800641a <__malloc_unlock>
 800635a:	f104 000b 	add.w	r0, r4, #11
 800635e:	1d23      	adds	r3, r4, #4
 8006360:	f020 0007 	bic.w	r0, r0, #7
 8006364:	1ac3      	subs	r3, r0, r3
 8006366:	d01b      	beq.n	80063a0 <_malloc_r+0xb0>
 8006368:	425a      	negs	r2, r3
 800636a:	50e2      	str	r2, [r4, r3]
 800636c:	bd70      	pop	{r4, r5, r6, pc}
 800636e:	428c      	cmp	r4, r1
 8006370:	bf0b      	itete	eq
 8006372:	6863      	ldreq	r3, [r4, #4]
 8006374:	684b      	ldrne	r3, [r1, #4]
 8006376:	6013      	streq	r3, [r2, #0]
 8006378:	6063      	strne	r3, [r4, #4]
 800637a:	bf18      	it	ne
 800637c:	460c      	movne	r4, r1
 800637e:	e7e9      	b.n	8006354 <_malloc_r+0x64>
 8006380:	460c      	mov	r4, r1
 8006382:	6849      	ldr	r1, [r1, #4]
 8006384:	e7ca      	b.n	800631c <_malloc_r+0x2c>
 8006386:	1cc4      	adds	r4, r0, #3
 8006388:	f024 0403 	bic.w	r4, r4, #3
 800638c:	42a0      	cmp	r0, r4
 800638e:	d005      	beq.n	800639c <_malloc_r+0xac>
 8006390:	1a21      	subs	r1, r4, r0
 8006392:	4630      	mov	r0, r6
 8006394:	f000 f830 	bl	80063f8 <_sbrk_r>
 8006398:	3001      	adds	r0, #1
 800639a:	d0cd      	beq.n	8006338 <_malloc_r+0x48>
 800639c:	6025      	str	r5, [r4, #0]
 800639e:	e7d9      	b.n	8006354 <_malloc_r+0x64>
 80063a0:	bd70      	pop	{r4, r5, r6, pc}
 80063a2:	bf00      	nop
 80063a4:	20000178 	.word	0x20000178
 80063a8:	2000017c 	.word	0x2000017c

080063ac <_realloc_r>:
 80063ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ae:	4607      	mov	r7, r0
 80063b0:	4614      	mov	r4, r2
 80063b2:	460e      	mov	r6, r1
 80063b4:	b921      	cbnz	r1, 80063c0 <_realloc_r+0x14>
 80063b6:	4611      	mov	r1, r2
 80063b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063bc:	f7ff bf98 	b.w	80062f0 <_malloc_r>
 80063c0:	b922      	cbnz	r2, 80063cc <_realloc_r+0x20>
 80063c2:	f7ff ff49 	bl	8006258 <_free_r>
 80063c6:	4625      	mov	r5, r4
 80063c8:	4628      	mov	r0, r5
 80063ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063cc:	f000 f826 	bl	800641c <_malloc_usable_size_r>
 80063d0:	4284      	cmp	r4, r0
 80063d2:	d90f      	bls.n	80063f4 <_realloc_r+0x48>
 80063d4:	4621      	mov	r1, r4
 80063d6:	4638      	mov	r0, r7
 80063d8:	f7ff ff8a 	bl	80062f0 <_malloc_r>
 80063dc:	4605      	mov	r5, r0
 80063de:	2800      	cmp	r0, #0
 80063e0:	d0f2      	beq.n	80063c8 <_realloc_r+0x1c>
 80063e2:	4631      	mov	r1, r6
 80063e4:	4622      	mov	r2, r4
 80063e6:	f7ff fbef 	bl	8005bc8 <memcpy>
 80063ea:	4631      	mov	r1, r6
 80063ec:	4638      	mov	r0, r7
 80063ee:	f7ff ff33 	bl	8006258 <_free_r>
 80063f2:	e7e9      	b.n	80063c8 <_realloc_r+0x1c>
 80063f4:	4635      	mov	r5, r6
 80063f6:	e7e7      	b.n	80063c8 <_realloc_r+0x1c>

080063f8 <_sbrk_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	2300      	movs	r3, #0
 80063fc:	4c05      	ldr	r4, [pc, #20]	; (8006414 <_sbrk_r+0x1c>)
 80063fe:	4605      	mov	r5, r0
 8006400:	4608      	mov	r0, r1
 8006402:	6023      	str	r3, [r4, #0]
 8006404:	f7ff fb30 	bl	8005a68 <_sbrk>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	d102      	bne.n	8006412 <_sbrk_r+0x1a>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	b103      	cbz	r3, 8006412 <_sbrk_r+0x1a>
 8006410:	602b      	str	r3, [r5, #0]
 8006412:	bd38      	pop	{r3, r4, r5, pc}
 8006414:	200002f0 	.word	0x200002f0

08006418 <__malloc_lock>:
 8006418:	4770      	bx	lr

0800641a <__malloc_unlock>:
 800641a:	4770      	bx	lr

0800641c <_malloc_usable_size_r>:
 800641c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006420:	2800      	cmp	r0, #0
 8006422:	f1a0 0004 	sub.w	r0, r0, #4
 8006426:	bfbc      	itt	lt
 8006428:	580b      	ldrlt	r3, [r1, r0]
 800642a:	18c0      	addlt	r0, r0, r3
 800642c:	4770      	bx	lr
	...

08006430 <_init>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	bf00      	nop
 8006434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006436:	bc08      	pop	{r3}
 8006438:	469e      	mov	lr, r3
 800643a:	4770      	bx	lr

0800643c <_fini>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	bf00      	nop
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr

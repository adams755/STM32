
nRF24_TX_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004618  08004618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800461c  0800461c  0001461c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000098  20000000  08004620  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000170  20000098  080046b8  00020098  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000208  080046b8  00020208  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ef3c  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001fb7  00000000  00000000  0002effd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a30  00000000  00000000  00030fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000958  00000000  00000000  000319e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000047fd  00000000  00000000  00032340  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002d58  00000000  00000000  00036b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00039895  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002c48  00000000  00000000  00039914  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08004040 	.word	0x08004040

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08004040 	.word	0x08004040

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000160:	4a08      	ldr	r2, [pc, #32]	; (8000184 <HAL_Init+0x28>)
 8000162:	4b08      	ldr	r3, [pc, #32]	; (8000184 <HAL_Init+0x28>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800016c:	2003      	movs	r0, #3
 800016e:	f000 f927 	bl	80003c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 f808 	bl	8000188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000178:	f003 f99c 	bl	80034b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800017c:	2300      	movs	r3, #0
}
 800017e:	4618      	mov	r0, r3
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40022000 	.word	0x40022000

08000188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000190:	4b12      	ldr	r3, [pc, #72]	; (80001dc <HAL_InitTick+0x54>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b12      	ldr	r3, [pc, #72]	; (80001e0 <HAL_InitTick+0x58>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	4619      	mov	r1, r3
 800019a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019e:	fbb3 f3f1 	udiv	r3, r3, r1
 80001a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 f931 	bl	800040e <HAL_SYSTICK_Config>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001b2:	2301      	movs	r3, #1
 80001b4:	e00e      	b.n	80001d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2b0f      	cmp	r3, #15
 80001ba:	d80a      	bhi.n	80001d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001bc:	2200      	movs	r2, #0
 80001be:	6879      	ldr	r1, [r7, #4]
 80001c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001c4:	f000 f907 	bl	80003d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <HAL_InitTick+0x5c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e000      	b.n	80001d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001d2:	2301      	movs	r3, #1
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	20000030 	.word	0x20000030
 80001e0:	20000004 	.word	0x20000004
 80001e4:	20000000 	.word	0x20000000

080001e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <HAL_IncTick+0x1c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <HAL_IncTick+0x20>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4413      	add	r3, r2
 80001f8:	4a03      	ldr	r2, [pc, #12]	; (8000208 <HAL_IncTick+0x20>)
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	20000004 	.word	0x20000004
 8000208:	20000168 	.word	0x20000168

0800020c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  return uwTick;
 8000210:	4b02      	ldr	r3, [pc, #8]	; (800021c <HAL_GetTick+0x10>)
 8000212:	681b      	ldr	r3, [r3, #0]
}
 8000214:	4618      	mov	r0, r3
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	20000168 	.word	0x20000168

08000220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000228:	f7ff fff0 	bl	800020c <HAL_GetTick>
 800022c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000238:	d005      	beq.n	8000246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <HAL_Delay+0x40>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	461a      	mov	r2, r3
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4413      	add	r3, r2
 8000244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000246:	bf00      	nop
 8000248:	f7ff ffe0 	bl	800020c <HAL_GetTick>
 800024c:	4602      	mov	r2, r0
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	1ad2      	subs	r2, r2, r3
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d3f7      	bcc.n	8000248 <HAL_Delay+0x28>
  {
  }
}
 8000258:	bf00      	nop
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000004 	.word	0x20000004

08000264 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f003 0307 	and.w	r3, r3, #7
 8000272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <NVIC_SetPriorityGrouping+0x44>)
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800027a:	68ba      	ldr	r2, [r7, #8]
 800027c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000280:	4013      	ands	r3, r2
 8000282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800028c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000296:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <NVIC_SetPriorityGrouping+0x44>)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	60d3      	str	r3, [r2, #12]
}
 800029c:	bf00      	nop
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <NVIC_GetPriorityGrouping+0x18>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	0a1b      	lsrs	r3, r3, #8
 80002b6:	f003 0307 	and.w	r3, r3, #7
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	6039      	str	r1, [r7, #0]
 80002d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	da0b      	bge.n	80002f4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	490d      	ldr	r1, [pc, #52]	; (8000314 <NVIC_SetPriority+0x4c>)
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	f003 030f 	and.w	r3, r3, #15
 80002e4:	3b04      	subs	r3, #4
 80002e6:	683a      	ldr	r2, [r7, #0]
 80002e8:	b2d2      	uxtb	r2, r2
 80002ea:	0112      	lsls	r2, r2, #4
 80002ec:	b2d2      	uxtb	r2, r2
 80002ee:	440b      	add	r3, r1
 80002f0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f2:	e009      	b.n	8000308 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f4:	4908      	ldr	r1, [pc, #32]	; (8000318 <NVIC_SetPriority+0x50>)
 80002f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fa:	683a      	ldr	r2, [r7, #0]
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	0112      	lsls	r2, r2, #4
 8000300:	b2d2      	uxtb	r2, r2
 8000302:	440b      	add	r3, r1
 8000304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	e000ed00 	.word	0xe000ed00
 8000318:	e000e100 	.word	0xe000e100

0800031c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800031c:	b480      	push	{r7}
 800031e:	b089      	sub	sp, #36	; 0x24
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f003 0307 	and.w	r3, r3, #7
 800032e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000330:	69fb      	ldr	r3, [r7, #28]
 8000332:	f1c3 0307 	rsb	r3, r3, #7
 8000336:	2b04      	cmp	r3, #4
 8000338:	bf28      	it	cs
 800033a:	2304      	movcs	r3, #4
 800033c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	3304      	adds	r3, #4
 8000342:	2b06      	cmp	r3, #6
 8000344:	d902      	bls.n	800034c <NVIC_EncodePriority+0x30>
 8000346:	69fb      	ldr	r3, [r7, #28]
 8000348:	3b03      	subs	r3, #3
 800034a:	e000      	b.n	800034e <NVIC_EncodePriority+0x32>
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000350:	2201      	movs	r2, #1
 8000352:	69bb      	ldr	r3, [r7, #24]
 8000354:	fa02 f303 	lsl.w	r3, r2, r3
 8000358:	1e5a      	subs	r2, r3, #1
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	401a      	ands	r2, r3
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000362:	2101      	movs	r1, #1
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	fa01 f303 	lsl.w	r3, r1, r3
 800036a:	1e59      	subs	r1, r3, #1
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000370:	4313      	orrs	r3, r2
         );
}
 8000372:	4618      	mov	r0, r3
 8000374:	3724      	adds	r7, #36	; 0x24
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr

0800037c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3b01      	subs	r3, #1
 8000388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800038c:	d301      	bcc.n	8000392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800038e:	2301      	movs	r3, #1
 8000390:	e00f      	b.n	80003b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000392:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <SysTick_Config+0x40>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	3b01      	subs	r3, #1
 8000398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800039a:	210f      	movs	r1, #15
 800039c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003a0:	f7ff ff92 	bl	80002c8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003a4:	4b05      	ldr	r3, [pc, #20]	; (80003bc <SysTick_Config+0x40>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003aa:	4b04      	ldr	r3, [pc, #16]	; (80003bc <SysTick_Config+0x40>)
 80003ac:	2207      	movs	r2, #7
 80003ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003b0:	2300      	movs	r3, #0
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	e000e010 	.word	0xe000e010

080003c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f7ff ff4b 	bl	8000264 <NVIC_SetPriorityGrouping>
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b086      	sub	sp, #24
 80003da:	af00      	add	r7, sp, #0
 80003dc:	4603      	mov	r3, r0
 80003de:	60b9      	str	r1, [r7, #8]
 80003e0:	607a      	str	r2, [r7, #4]
 80003e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003e4:	2300      	movs	r3, #0
 80003e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003e8:	f7ff ff60 	bl	80002ac <NVIC_GetPriorityGrouping>
 80003ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	68b9      	ldr	r1, [r7, #8]
 80003f2:	6978      	ldr	r0, [r7, #20]
 80003f4:	f7ff ff92 	bl	800031c <NVIC_EncodePriority>
 80003f8:	4602      	mov	r2, r0
 80003fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003fe:	4611      	mov	r1, r2
 8000400:	4618      	mov	r0, r3
 8000402:	f7ff ff61 	bl	80002c8 <NVIC_SetPriority>
}
 8000406:	bf00      	nop
 8000408:	3718      	adds	r7, #24
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	b082      	sub	sp, #8
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f7ff ffb0 	bl	800037c <SysTick_Config>
 800041c:	4603      	mov	r3, r0
}
 800041e:	4618      	mov	r0, r3
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000428:	b480      	push	{r7}
 800042a:	b08b      	sub	sp, #44	; 0x2c
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000432:	2300      	movs	r3, #0
 8000434:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000436:	2300      	movs	r3, #0
 8000438:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800043e:	2300      	movs	r3, #0
 8000440:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000442:	2300      	movs	r3, #0
 8000444:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000446:	2300      	movs	r3, #0
 8000448:	627b      	str	r3, [r7, #36]	; 0x24
 800044a:	e127      	b.n	800069c <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800044c:	2201      	movs	r2, #1
 800044e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000450:	fa02 f303 	lsl.w	r3, r2, r3
 8000454:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	4013      	ands	r3, r2
 800045e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000460:	69ba      	ldr	r2, [r7, #24]
 8000462:	69fb      	ldr	r3, [r7, #28]
 8000464:	429a      	cmp	r2, r3
 8000466:	f040 8116 	bne.w	8000696 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	2b12      	cmp	r3, #18
 8000470:	d034      	beq.n	80004dc <HAL_GPIO_Init+0xb4>
 8000472:	2b12      	cmp	r3, #18
 8000474:	d80d      	bhi.n	8000492 <HAL_GPIO_Init+0x6a>
 8000476:	2b02      	cmp	r3, #2
 8000478:	d02b      	beq.n	80004d2 <HAL_GPIO_Init+0xaa>
 800047a:	2b02      	cmp	r3, #2
 800047c:	d804      	bhi.n	8000488 <HAL_GPIO_Init+0x60>
 800047e:	2b00      	cmp	r3, #0
 8000480:	d031      	beq.n	80004e6 <HAL_GPIO_Init+0xbe>
 8000482:	2b01      	cmp	r3, #1
 8000484:	d01c      	beq.n	80004c0 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000486:	e048      	b.n	800051a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000488:	2b03      	cmp	r3, #3
 800048a:	d043      	beq.n	8000514 <HAL_GPIO_Init+0xec>
 800048c:	2b11      	cmp	r3, #17
 800048e:	d01b      	beq.n	80004c8 <HAL_GPIO_Init+0xa0>
          break;
 8000490:	e043      	b.n	800051a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000492:	4a87      	ldr	r2, [pc, #540]	; (80006b0 <HAL_GPIO_Init+0x288>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d026      	beq.n	80004e6 <HAL_GPIO_Init+0xbe>
 8000498:	4a85      	ldr	r2, [pc, #532]	; (80006b0 <HAL_GPIO_Init+0x288>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d806      	bhi.n	80004ac <HAL_GPIO_Init+0x84>
 800049e:	4a85      	ldr	r2, [pc, #532]	; (80006b4 <HAL_GPIO_Init+0x28c>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d020      	beq.n	80004e6 <HAL_GPIO_Init+0xbe>
 80004a4:	4a84      	ldr	r2, [pc, #528]	; (80006b8 <HAL_GPIO_Init+0x290>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d01d      	beq.n	80004e6 <HAL_GPIO_Init+0xbe>
          break;
 80004aa:	e036      	b.n	800051a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80004ac:	4a83      	ldr	r2, [pc, #524]	; (80006bc <HAL_GPIO_Init+0x294>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d019      	beq.n	80004e6 <HAL_GPIO_Init+0xbe>
 80004b2:	4a83      	ldr	r2, [pc, #524]	; (80006c0 <HAL_GPIO_Init+0x298>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d016      	beq.n	80004e6 <HAL_GPIO_Init+0xbe>
 80004b8:	4a82      	ldr	r2, [pc, #520]	; (80006c4 <HAL_GPIO_Init+0x29c>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d013      	beq.n	80004e6 <HAL_GPIO_Init+0xbe>
          break;
 80004be:	e02c      	b.n	800051a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	623b      	str	r3, [r7, #32]
          break;
 80004c6:	e028      	b.n	800051a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	3304      	adds	r3, #4
 80004ce:	623b      	str	r3, [r7, #32]
          break;
 80004d0:	e023      	b.n	800051a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	3308      	adds	r3, #8
 80004d8:	623b      	str	r3, [r7, #32]
          break;
 80004da:	e01e      	b.n	800051a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	330c      	adds	r3, #12
 80004e2:	623b      	str	r3, [r7, #32]
          break;
 80004e4:	e019      	b.n	800051a <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	689b      	ldr	r3, [r3, #8]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d102      	bne.n	80004f4 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004ee:	2304      	movs	r3, #4
 80004f0:	623b      	str	r3, [r7, #32]
          break;
 80004f2:	e012      	b.n	800051a <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d105      	bne.n	8000508 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004fc:	2308      	movs	r3, #8
 80004fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	69fa      	ldr	r2, [r7, #28]
 8000504:	611a      	str	r2, [r3, #16]
          break;
 8000506:	e008      	b.n	800051a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000508:	2308      	movs	r3, #8
 800050a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	69fa      	ldr	r2, [r7, #28]
 8000510:	615a      	str	r2, [r3, #20]
          break;
 8000512:	e002      	b.n	800051a <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000514:	2300      	movs	r3, #0
 8000516:	623b      	str	r3, [r7, #32]
          break;
 8000518:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800051a:	69bb      	ldr	r3, [r7, #24]
 800051c:	2bff      	cmp	r3, #255	; 0xff
 800051e:	d801      	bhi.n	8000524 <HAL_GPIO_Init+0xfc>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	e001      	b.n	8000528 <HAL_GPIO_Init+0x100>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3304      	adds	r3, #4
 8000528:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800052a:	69bb      	ldr	r3, [r7, #24]
 800052c:	2bff      	cmp	r3, #255	; 0xff
 800052e:	d802      	bhi.n	8000536 <HAL_GPIO_Init+0x10e>
 8000530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	e002      	b.n	800053c <HAL_GPIO_Init+0x114>
 8000536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000538:	3b08      	subs	r3, #8
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	210f      	movs	r1, #15
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	43db      	mvns	r3, r3
 800054c:	401a      	ands	r2, r3
 800054e:	6a39      	ldr	r1, [r7, #32]
 8000550:	693b      	ldr	r3, [r7, #16]
 8000552:	fa01 f303 	lsl.w	r3, r1, r3
 8000556:	431a      	orrs	r2, r3
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	2b00      	cmp	r3, #0
 8000566:	f000 8096 	beq.w	8000696 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800056a:	4a57      	ldr	r2, [pc, #348]	; (80006c8 <HAL_GPIO_Init+0x2a0>)
 800056c:	4b56      	ldr	r3, [pc, #344]	; (80006c8 <HAL_GPIO_Init+0x2a0>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6193      	str	r3, [r2, #24]
 8000576:	4b54      	ldr	r3, [pc, #336]	; (80006c8 <HAL_GPIO_Init+0x2a0>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000582:	4a52      	ldr	r2, [pc, #328]	; (80006cc <HAL_GPIO_Init+0x2a4>)
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	089b      	lsrs	r3, r3, #2
 8000588:	3302      	adds	r3, #2
 800058a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800058e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000592:	f003 0303 	and.w	r3, r3, #3
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	220f      	movs	r2, #15
 800059a:	fa02 f303 	lsl.w	r3, r2, r3
 800059e:	43db      	mvns	r3, r3
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	4013      	ands	r3, r2
 80005a4:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a49      	ldr	r2, [pc, #292]	; (80006d0 <HAL_GPIO_Init+0x2a8>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d013      	beq.n	80005d6 <HAL_GPIO_Init+0x1ae>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a48      	ldr	r2, [pc, #288]	; (80006d4 <HAL_GPIO_Init+0x2ac>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d00d      	beq.n	80005d2 <HAL_GPIO_Init+0x1aa>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a47      	ldr	r2, [pc, #284]	; (80006d8 <HAL_GPIO_Init+0x2b0>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d007      	beq.n	80005ce <HAL_GPIO_Init+0x1a6>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4a46      	ldr	r2, [pc, #280]	; (80006dc <HAL_GPIO_Init+0x2b4>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d101      	bne.n	80005ca <HAL_GPIO_Init+0x1a2>
 80005c6:	2303      	movs	r3, #3
 80005c8:	e006      	b.n	80005d8 <HAL_GPIO_Init+0x1b0>
 80005ca:	2304      	movs	r3, #4
 80005cc:	e004      	b.n	80005d8 <HAL_GPIO_Init+0x1b0>
 80005ce:	2302      	movs	r3, #2
 80005d0:	e002      	b.n	80005d8 <HAL_GPIO_Init+0x1b0>
 80005d2:	2301      	movs	r3, #1
 80005d4:	e000      	b.n	80005d8 <HAL_GPIO_Init+0x1b0>
 80005d6:	2300      	movs	r3, #0
 80005d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005da:	f002 0203 	and.w	r2, r2, #3
 80005de:	0092      	lsls	r2, r2, #2
 80005e0:	4093      	lsls	r3, r2
 80005e2:	697a      	ldr	r2, [r7, #20]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80005e8:	4938      	ldr	r1, [pc, #224]	; (80006cc <HAL_GPIO_Init+0x2a4>)
 80005ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ec:	089b      	lsrs	r3, r3, #2
 80005ee:	3302      	adds	r3, #2
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d006      	beq.n	8000610 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000602:	4937      	ldr	r1, [pc, #220]	; (80006e0 <HAL_GPIO_Init+0x2b8>)
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <HAL_GPIO_Init+0x2b8>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	4313      	orrs	r3, r2
 800060c:	600b      	str	r3, [r1, #0]
 800060e:	e006      	b.n	800061e <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000610:	4933      	ldr	r1, [pc, #204]	; (80006e0 <HAL_GPIO_Init+0x2b8>)
 8000612:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <HAL_GPIO_Init+0x2b8>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	69bb      	ldr	r3, [r7, #24]
 8000618:	43db      	mvns	r3, r3
 800061a:	4013      	ands	r3, r2
 800061c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800062a:	492d      	ldr	r1, [pc, #180]	; (80006e0 <HAL_GPIO_Init+0x2b8>)
 800062c:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <HAL_GPIO_Init+0x2b8>)
 800062e:	685a      	ldr	r2, [r3, #4]
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	4313      	orrs	r3, r2
 8000634:	604b      	str	r3, [r1, #4]
 8000636:	e006      	b.n	8000646 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000638:	4929      	ldr	r1, [pc, #164]	; (80006e0 <HAL_GPIO_Init+0x2b8>)
 800063a:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <HAL_GPIO_Init+0x2b8>)
 800063c:	685a      	ldr	r2, [r3, #4]
 800063e:	69bb      	ldr	r3, [r7, #24]
 8000640:	43db      	mvns	r3, r3
 8000642:	4013      	ands	r3, r2
 8000644:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800064e:	2b00      	cmp	r3, #0
 8000650:	d006      	beq.n	8000660 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000652:	4923      	ldr	r1, [pc, #140]	; (80006e0 <HAL_GPIO_Init+0x2b8>)
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <HAL_GPIO_Init+0x2b8>)
 8000656:	689a      	ldr	r2, [r3, #8]
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	4313      	orrs	r3, r2
 800065c:	608b      	str	r3, [r1, #8]
 800065e:	e006      	b.n	800066e <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000660:	491f      	ldr	r1, [pc, #124]	; (80006e0 <HAL_GPIO_Init+0x2b8>)
 8000662:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <HAL_GPIO_Init+0x2b8>)
 8000664:	689a      	ldr	r2, [r3, #8]
 8000666:	69bb      	ldr	r3, [r7, #24]
 8000668:	43db      	mvns	r3, r3
 800066a:	4013      	ands	r3, r2
 800066c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000676:	2b00      	cmp	r3, #0
 8000678:	d006      	beq.n	8000688 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800067a:	4919      	ldr	r1, [pc, #100]	; (80006e0 <HAL_GPIO_Init+0x2b8>)
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <HAL_GPIO_Init+0x2b8>)
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	4313      	orrs	r3, r2
 8000684:	60cb      	str	r3, [r1, #12]
 8000686:	e006      	b.n	8000696 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000688:	4915      	ldr	r1, [pc, #84]	; (80006e0 <HAL_GPIO_Init+0x2b8>)
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_GPIO_Init+0x2b8>)
 800068c:	68da      	ldr	r2, [r3, #12]
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	43db      	mvns	r3, r3
 8000692:	4013      	ands	r3, r2
 8000694:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000698:	3301      	adds	r3, #1
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
 800069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069e:	2b0f      	cmp	r3, #15
 80006a0:	f67f aed4 	bls.w	800044c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80006a4:	bf00      	nop
 80006a6:	372c      	adds	r7, #44	; 0x2c
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	10210000 	.word	0x10210000
 80006b4:	10110000 	.word	0x10110000
 80006b8:	10120000 	.word	0x10120000
 80006bc:	10310000 	.word	0x10310000
 80006c0:	10320000 	.word	0x10320000
 80006c4:	10220000 	.word	0x10220000
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010000 	.word	0x40010000
 80006d0:	40010800 	.word	0x40010800
 80006d4:	40010c00 	.word	0x40010c00
 80006d8:	40011000 	.word	0x40011000
 80006dc:	40011400 	.word	0x40011400
 80006e0:	40010400 	.word	0x40010400

080006e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	807b      	strh	r3, [r7, #2]
 80006f0:	4613      	mov	r3, r2
 80006f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006f4:	787b      	ldrb	r3, [r7, #1]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d003      	beq.n	8000702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006fa:	887a      	ldrh	r2, [r7, #2]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000700:	e003      	b.n	800070a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000702:	887b      	ldrh	r3, [r7, #2]
 8000704:	041a      	lsls	r2, r3, #16
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	611a      	str	r2, [r3, #16]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	887b      	ldrh	r3, [r7, #2]
 8000726:	405a      	eors	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	60da      	str	r2, [r3, #12]
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
	...

08000738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	2b00      	cmp	r3, #0
 800074e:	f000 8087 	beq.w	8000860 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000752:	4b92      	ldr	r3, [pc, #584]	; (800099c <HAL_RCC_OscConfig+0x264>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	f003 030c 	and.w	r3, r3, #12
 800075a:	2b04      	cmp	r3, #4
 800075c:	d00c      	beq.n	8000778 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800075e:	4b8f      	ldr	r3, [pc, #572]	; (800099c <HAL_RCC_OscConfig+0x264>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	f003 030c 	and.w	r3, r3, #12
 8000766:	2b08      	cmp	r3, #8
 8000768:	d112      	bne.n	8000790 <HAL_RCC_OscConfig+0x58>
 800076a:	4b8c      	ldr	r3, [pc, #560]	; (800099c <HAL_RCC_OscConfig+0x264>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000776:	d10b      	bne.n	8000790 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000778:	4b88      	ldr	r3, [pc, #544]	; (800099c <HAL_RCC_OscConfig+0x264>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000780:	2b00      	cmp	r3, #0
 8000782:	d06c      	beq.n	800085e <HAL_RCC_OscConfig+0x126>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d168      	bne.n	800085e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 800078c:	2301      	movs	r3, #1
 800078e:	e22d      	b.n	8000bec <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000798:	d106      	bne.n	80007a8 <HAL_RCC_OscConfig+0x70>
 800079a:	4a80      	ldr	r2, [pc, #512]	; (800099c <HAL_RCC_OscConfig+0x264>)
 800079c:	4b7f      	ldr	r3, [pc, #508]	; (800099c <HAL_RCC_OscConfig+0x264>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007a4:	6013      	str	r3, [r2, #0]
 80007a6:	e02e      	b.n	8000806 <HAL_RCC_OscConfig+0xce>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d10c      	bne.n	80007ca <HAL_RCC_OscConfig+0x92>
 80007b0:	4a7a      	ldr	r2, [pc, #488]	; (800099c <HAL_RCC_OscConfig+0x264>)
 80007b2:	4b7a      	ldr	r3, [pc, #488]	; (800099c <HAL_RCC_OscConfig+0x264>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4a77      	ldr	r2, [pc, #476]	; (800099c <HAL_RCC_OscConfig+0x264>)
 80007be:	4b77      	ldr	r3, [pc, #476]	; (800099c <HAL_RCC_OscConfig+0x264>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	e01d      	b.n	8000806 <HAL_RCC_OscConfig+0xce>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007d2:	d10c      	bne.n	80007ee <HAL_RCC_OscConfig+0xb6>
 80007d4:	4a71      	ldr	r2, [pc, #452]	; (800099c <HAL_RCC_OscConfig+0x264>)
 80007d6:	4b71      	ldr	r3, [pc, #452]	; (800099c <HAL_RCC_OscConfig+0x264>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4a6e      	ldr	r2, [pc, #440]	; (800099c <HAL_RCC_OscConfig+0x264>)
 80007e2:	4b6e      	ldr	r3, [pc, #440]	; (800099c <HAL_RCC_OscConfig+0x264>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	e00b      	b.n	8000806 <HAL_RCC_OscConfig+0xce>
 80007ee:	4a6b      	ldr	r2, [pc, #428]	; (800099c <HAL_RCC_OscConfig+0x264>)
 80007f0:	4b6a      	ldr	r3, [pc, #424]	; (800099c <HAL_RCC_OscConfig+0x264>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007f8:	6013      	str	r3, [r2, #0]
 80007fa:	4a68      	ldr	r2, [pc, #416]	; (800099c <HAL_RCC_OscConfig+0x264>)
 80007fc:	4b67      	ldr	r3, [pc, #412]	; (800099c <HAL_RCC_OscConfig+0x264>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000804:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d013      	beq.n	8000836 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800080e:	f7ff fcfd 	bl	800020c <HAL_GetTick>
 8000812:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000814:	e008      	b.n	8000828 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000816:	f7ff fcf9 	bl	800020c <HAL_GetTick>
 800081a:	4602      	mov	r2, r0
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	2b64      	cmp	r3, #100	; 0x64
 8000822:	d901      	bls.n	8000828 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000824:	2303      	movs	r3, #3
 8000826:	e1e1      	b.n	8000bec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000828:	4b5c      	ldr	r3, [pc, #368]	; (800099c <HAL_RCC_OscConfig+0x264>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000830:	2b00      	cmp	r3, #0
 8000832:	d0f0      	beq.n	8000816 <HAL_RCC_OscConfig+0xde>
 8000834:	e014      	b.n	8000860 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000836:	f7ff fce9 	bl	800020c <HAL_GetTick>
 800083a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800083c:	e008      	b.n	8000850 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800083e:	f7ff fce5 	bl	800020c <HAL_GetTick>
 8000842:	4602      	mov	r2, r0
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	2b64      	cmp	r3, #100	; 0x64
 800084a:	d901      	bls.n	8000850 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 800084c:	2303      	movs	r3, #3
 800084e:	e1cd      	b.n	8000bec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000850:	4b52      	ldr	r3, [pc, #328]	; (800099c <HAL_RCC_OscConfig+0x264>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1f0      	bne.n	800083e <HAL_RCC_OscConfig+0x106>
 800085c:	e000      	b.n	8000860 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800085e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f003 0302 	and.w	r3, r3, #2
 8000868:	2b00      	cmp	r3, #0
 800086a:	d063      	beq.n	8000934 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800086c:	4b4b      	ldr	r3, [pc, #300]	; (800099c <HAL_RCC_OscConfig+0x264>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f003 030c 	and.w	r3, r3, #12
 8000874:	2b00      	cmp	r3, #0
 8000876:	d00b      	beq.n	8000890 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000878:	4b48      	ldr	r3, [pc, #288]	; (800099c <HAL_RCC_OscConfig+0x264>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f003 030c 	and.w	r3, r3, #12
 8000880:	2b08      	cmp	r3, #8
 8000882:	d11c      	bne.n	80008be <HAL_RCC_OscConfig+0x186>
 8000884:	4b45      	ldr	r3, [pc, #276]	; (800099c <HAL_RCC_OscConfig+0x264>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800088c:	2b00      	cmp	r3, #0
 800088e:	d116      	bne.n	80008be <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000890:	4b42      	ldr	r3, [pc, #264]	; (800099c <HAL_RCC_OscConfig+0x264>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f003 0302 	and.w	r3, r3, #2
 8000898:	2b00      	cmp	r3, #0
 800089a:	d005      	beq.n	80008a8 <HAL_RCC_OscConfig+0x170>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	691b      	ldr	r3, [r3, #16]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d001      	beq.n	80008a8 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80008a4:	2301      	movs	r3, #1
 80008a6:	e1a1      	b.n	8000bec <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008a8:	493c      	ldr	r1, [pc, #240]	; (800099c <HAL_RCC_OscConfig+0x264>)
 80008aa:	4b3c      	ldr	r3, [pc, #240]	; (800099c <HAL_RCC_OscConfig+0x264>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	4313      	orrs	r3, r2
 80008ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008bc:	e03a      	b.n	8000934 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d020      	beq.n	8000908 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008c6:	4b36      	ldr	r3, [pc, #216]	; (80009a0 <HAL_RCC_OscConfig+0x268>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008cc:	f7ff fc9e 	bl	800020c <HAL_GetTick>
 80008d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008d2:	e008      	b.n	80008e6 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008d4:	f7ff fc9a 	bl	800020c <HAL_GetTick>
 80008d8:	4602      	mov	r2, r0
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d901      	bls.n	80008e6 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80008e2:	2303      	movs	r3, #3
 80008e4:	e182      	b.n	8000bec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <HAL_RCC_OscConfig+0x264>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0f0      	beq.n	80008d4 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008f2:	492a      	ldr	r1, [pc, #168]	; (800099c <HAL_RCC_OscConfig+0x264>)
 80008f4:	4b29      	ldr	r3, [pc, #164]	; (800099c <HAL_RCC_OscConfig+0x264>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	00db      	lsls	r3, r3, #3
 8000902:	4313      	orrs	r3, r2
 8000904:	600b      	str	r3, [r1, #0]
 8000906:	e015      	b.n	8000934 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000908:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <HAL_RCC_OscConfig+0x268>)
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800090e:	f7ff fc7d 	bl	800020c <HAL_GetTick>
 8000912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000914:	e008      	b.n	8000928 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000916:	f7ff fc79 	bl	800020c <HAL_GetTick>
 800091a:	4602      	mov	r2, r0
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	2b02      	cmp	r3, #2
 8000922:	d901      	bls.n	8000928 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000924:	2303      	movs	r3, #3
 8000926:	e161      	b.n	8000bec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <HAL_RCC_OscConfig+0x264>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f003 0302 	and.w	r3, r3, #2
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1f0      	bne.n	8000916 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f003 0308 	and.w	r3, r3, #8
 800093c:	2b00      	cmp	r3, #0
 800093e:	d039      	beq.n	80009b4 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d019      	beq.n	800097c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 800094a:	2201      	movs	r2, #1
 800094c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800094e:	f7ff fc5d 	bl	800020c <HAL_GetTick>
 8000952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000954:	e008      	b.n	8000968 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000956:	f7ff fc59 	bl	800020c <HAL_GetTick>
 800095a:	4602      	mov	r2, r0
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	2b02      	cmp	r3, #2
 8000962:	d901      	bls.n	8000968 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000964:	2303      	movs	r3, #3
 8000966:	e141      	b.n	8000bec <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_RCC_OscConfig+0x264>)
 800096a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096c:	f003 0302 	and.w	r3, r3, #2
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0f0      	beq.n	8000956 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000974:	2001      	movs	r0, #1
 8000976:	f000 fae3 	bl	8000f40 <RCC_Delay>
 800097a:	e01b      	b.n	80009b4 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_RCC_OscConfig+0x26c>)
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000982:	f7ff fc43 	bl	800020c <HAL_GetTick>
 8000986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000988:	e00e      	b.n	80009a8 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800098a:	f7ff fc3f 	bl	800020c <HAL_GetTick>
 800098e:	4602      	mov	r2, r0
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	2b02      	cmp	r3, #2
 8000996:	d907      	bls.n	80009a8 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000998:	2303      	movs	r3, #3
 800099a:	e127      	b.n	8000bec <HAL_RCC_OscConfig+0x4b4>
 800099c:	40021000 	.word	0x40021000
 80009a0:	42420000 	.word	0x42420000
 80009a4:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009a8:	4b92      	ldr	r3, [pc, #584]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 80009aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ac:	f003 0302 	and.w	r3, r3, #2
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d1ea      	bne.n	800098a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	2b00      	cmp	r3, #0
 80009be:	f000 80a6 	beq.w	8000b0e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009c2:	2300      	movs	r3, #0
 80009c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009c6:	4b8b      	ldr	r3, [pc, #556]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d10d      	bne.n	80009ee <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	4a88      	ldr	r2, [pc, #544]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 80009d4:	4b87      	ldr	r3, [pc, #540]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 80009d6:	69db      	ldr	r3, [r3, #28]
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	61d3      	str	r3, [r2, #28]
 80009de:	4b85      	ldr	r3, [pc, #532]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80009ea:	2301      	movs	r3, #1
 80009ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009ee:	4b82      	ldr	r3, [pc, #520]	; (8000bf8 <HAL_RCC_OscConfig+0x4c0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d118      	bne.n	8000a2c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009fa:	4a7f      	ldr	r2, [pc, #508]	; (8000bf8 <HAL_RCC_OscConfig+0x4c0>)
 80009fc:	4b7e      	ldr	r3, [pc, #504]	; (8000bf8 <HAL_RCC_OscConfig+0x4c0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a06:	f7ff fc01 	bl	800020c <HAL_GetTick>
 8000a0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a0c:	e008      	b.n	8000a20 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a0e:	f7ff fbfd 	bl	800020c <HAL_GetTick>
 8000a12:	4602      	mov	r2, r0
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	2b64      	cmp	r3, #100	; 0x64
 8000a1a:	d901      	bls.n	8000a20 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	e0e5      	b.n	8000bec <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a20:	4b75      	ldr	r3, [pc, #468]	; (8000bf8 <HAL_RCC_OscConfig+0x4c0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d0f0      	beq.n	8000a0e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d106      	bne.n	8000a42 <HAL_RCC_OscConfig+0x30a>
 8000a34:	4a6f      	ldr	r2, [pc, #444]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000a36:	4b6f      	ldr	r3, [pc, #444]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000a38:	6a1b      	ldr	r3, [r3, #32]
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	6213      	str	r3, [r2, #32]
 8000a40:	e02d      	b.n	8000a9e <HAL_RCC_OscConfig+0x366>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d10c      	bne.n	8000a64 <HAL_RCC_OscConfig+0x32c>
 8000a4a:	4a6a      	ldr	r2, [pc, #424]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000a4c:	4b69      	ldr	r3, [pc, #420]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000a4e:	6a1b      	ldr	r3, [r3, #32]
 8000a50:	f023 0301 	bic.w	r3, r3, #1
 8000a54:	6213      	str	r3, [r2, #32]
 8000a56:	4a67      	ldr	r2, [pc, #412]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000a58:	4b66      	ldr	r3, [pc, #408]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	f023 0304 	bic.w	r3, r3, #4
 8000a60:	6213      	str	r3, [r2, #32]
 8000a62:	e01c      	b.n	8000a9e <HAL_RCC_OscConfig+0x366>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	2b05      	cmp	r3, #5
 8000a6a:	d10c      	bne.n	8000a86 <HAL_RCC_OscConfig+0x34e>
 8000a6c:	4a61      	ldr	r2, [pc, #388]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000a6e:	4b61      	ldr	r3, [pc, #388]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000a70:	6a1b      	ldr	r3, [r3, #32]
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6213      	str	r3, [r2, #32]
 8000a78:	4a5e      	ldr	r2, [pc, #376]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000a7a:	4b5e      	ldr	r3, [pc, #376]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000a7c:	6a1b      	ldr	r3, [r3, #32]
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6213      	str	r3, [r2, #32]
 8000a84:	e00b      	b.n	8000a9e <HAL_RCC_OscConfig+0x366>
 8000a86:	4a5b      	ldr	r2, [pc, #364]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000a88:	4b5a      	ldr	r3, [pc, #360]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000a8a:	6a1b      	ldr	r3, [r3, #32]
 8000a8c:	f023 0301 	bic.w	r3, r3, #1
 8000a90:	6213      	str	r3, [r2, #32]
 8000a92:	4a58      	ldr	r2, [pc, #352]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000a94:	4b57      	ldr	r3, [pc, #348]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000a96:	6a1b      	ldr	r3, [r3, #32]
 8000a98:	f023 0304 	bic.w	r3, r3, #4
 8000a9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d015      	beq.n	8000ad2 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aa6:	f7ff fbb1 	bl	800020c <HAL_GetTick>
 8000aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aac:	e00a      	b.n	8000ac4 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aae:	f7ff fbad 	bl	800020c <HAL_GetTick>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d901      	bls.n	8000ac4 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	e093      	b.n	8000bec <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ac4:	4b4b      	ldr	r3, [pc, #300]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000ac6:	6a1b      	ldr	r3, [r3, #32]
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d0ee      	beq.n	8000aae <HAL_RCC_OscConfig+0x376>
 8000ad0:	e014      	b.n	8000afc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ad2:	f7ff fb9b 	bl	800020c <HAL_GetTick>
 8000ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ad8:	e00a      	b.n	8000af0 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ada:	f7ff fb97 	bl	800020c <HAL_GetTick>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d901      	bls.n	8000af0 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000aec:	2303      	movs	r3, #3
 8000aee:	e07d      	b.n	8000bec <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000af0:	4b40      	ldr	r3, [pc, #256]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000af2:	6a1b      	ldr	r3, [r3, #32]
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d1ee      	bne.n	8000ada <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000afc:	7dfb      	ldrb	r3, [r7, #23]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d105      	bne.n	8000b0e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b02:	4a3c      	ldr	r2, [pc, #240]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000b04:	4b3b      	ldr	r3, [pc, #236]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000b06:	69db      	ldr	r3, [r3, #28]
 8000b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d069      	beq.n	8000bea <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b16:	4b37      	ldr	r3, [pc, #220]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f003 030c 	and.w	r3, r3, #12
 8000b1e:	2b08      	cmp	r3, #8
 8000b20:	d061      	beq.n	8000be6 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d146      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b2a:	4b34      	ldr	r3, [pc, #208]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b30:	f7ff fb6c 	bl	800020c <HAL_GetTick>
 8000b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b36:	e008      	b.n	8000b4a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b38:	f7ff fb68 	bl	800020c <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d901      	bls.n	8000b4a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000b46:	2303      	movs	r3, #3
 8000b48:	e050      	b.n	8000bec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1f0      	bne.n	8000b38 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b5e:	d108      	bne.n	8000b72 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b60:	4924      	ldr	r1, [pc, #144]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000b62:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b72:	4820      	ldr	r0, [pc, #128]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6a19      	ldr	r1, [r3, #32]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b84:	430b      	orrs	r3, r1
 8000b86:	4313      	orrs	r3, r2
 8000b88:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b90:	f7ff fb3c 	bl	800020c <HAL_GetTick>
 8000b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b96:	e008      	b.n	8000baa <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b98:	f7ff fb38 	bl	800020c <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d901      	bls.n	8000baa <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e020      	b.n	8000bec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d0f0      	beq.n	8000b98 <HAL_RCC_OscConfig+0x460>
 8000bb6:	e018      	b.n	8000bea <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_RCC_OscConfig+0x4c4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bbe:	f7ff fb25 	bl	800020c <HAL_GetTick>
 8000bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bc4:	e008      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bc6:	f7ff fb21 	bl	800020c <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d901      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	e009      	b.n	8000bec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_RCC_OscConfig+0x4bc>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1f0      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x48e>
 8000be4:	e001      	b.n	8000bea <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e000      	b.n	8000bec <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40007000 	.word	0x40007000
 8000bfc:	42420060 	.word	0x42420060

08000c00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c0e:	4b7e      	ldr	r3, [pc, #504]	; (8000e08 <HAL_RCC_ClockConfig+0x208>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0207 	and.w	r2, r3, #7
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d210      	bcs.n	8000c3e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c1c:	497a      	ldr	r1, [pc, #488]	; (8000e08 <HAL_RCC_ClockConfig+0x208>)
 8000c1e:	4b7a      	ldr	r3, [pc, #488]	; (8000e08 <HAL_RCC_ClockConfig+0x208>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f023 0207 	bic.w	r2, r3, #7
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c2c:	4b76      	ldr	r3, [pc, #472]	; (8000e08 <HAL_RCC_ClockConfig+0x208>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0207 	and.w	r2, r3, #7
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d001      	beq.n	8000c3e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e0e0      	b.n	8000e00 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d020      	beq.n	8000c8c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d005      	beq.n	8000c62 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c56:	4a6d      	ldr	r2, [pc, #436]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000c58:	4b6c      	ldr	r3, [pc, #432]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c60:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d005      	beq.n	8000c7a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c6e:	4a67      	ldr	r2, [pc, #412]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000c70:	4b66      	ldr	r3, [pc, #408]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000c78:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c7a:	4964      	ldr	r1, [pc, #400]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000c7c:	4b63      	ldr	r3, [pc, #396]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d06a      	beq.n	8000d6e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d107      	bne.n	8000cb0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca0:	4b5a      	ldr	r3, [pc, #360]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d115      	bne.n	8000cd8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e0a7      	b.n	8000e00 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d107      	bne.n	8000cc8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cb8:	4b54      	ldr	r3, [pc, #336]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d109      	bne.n	8000cd8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e09b      	b.n	8000e00 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc8:	4b50      	ldr	r3, [pc, #320]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d101      	bne.n	8000cd8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e093      	b.n	8000e00 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cd8:	494c      	ldr	r1, [pc, #304]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000cda:	4b4c      	ldr	r3, [pc, #304]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f023 0203 	bic.w	r2, r3, #3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cea:	f7ff fa8f 	bl	800020c <HAL_GetTick>
 8000cee:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d112      	bne.n	8000d1e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cf8:	e00a      	b.n	8000d10 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cfa:	f7ff fa87 	bl	800020c <HAL_GetTick>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d901      	bls.n	8000d10 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e077      	b.n	8000e00 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d10:	4b3e      	ldr	r3, [pc, #248]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 030c 	and.w	r3, r3, #12
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d1ee      	bne.n	8000cfa <HAL_RCC_ClockConfig+0xfa>
 8000d1c:	e027      	b.n	8000d6e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d11d      	bne.n	8000d62 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d26:	e00a      	b.n	8000d3e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d28:	f7ff fa70 	bl	800020c <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d901      	bls.n	8000d3e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	e060      	b.n	8000e00 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d3e:	4b33      	ldr	r3, [pc, #204]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 030c 	and.w	r3, r3, #12
 8000d46:	2b08      	cmp	r3, #8
 8000d48:	d1ee      	bne.n	8000d28 <HAL_RCC_ClockConfig+0x128>
 8000d4a:	e010      	b.n	8000d6e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d4c:	f7ff fa5e 	bl	800020c <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e04e      	b.n	8000e00 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d62:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 030c 	and.w	r3, r3, #12
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1ee      	bne.n	8000d4c <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <HAL_RCC_ClockConfig+0x208>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0207 	and.w	r2, r3, #7
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d910      	bls.n	8000d9e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d7c:	4922      	ldr	r1, [pc, #136]	; (8000e08 <HAL_RCC_ClockConfig+0x208>)
 8000d7e:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <HAL_RCC_ClockConfig+0x208>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f023 0207 	bic.w	r2, r3, #7
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <HAL_RCC_ClockConfig+0x208>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0207 	and.w	r2, r3, #7
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d001      	beq.n	8000d9e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e030      	b.n	8000e00 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d008      	beq.n	8000dbc <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000daa:	4918      	ldr	r1, [pc, #96]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d009      	beq.n	8000ddc <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dc8:	4910      	ldr	r1, [pc, #64]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ddc:	f000 f81c 	bl	8000e18 <HAL_RCC_GetSysClockFreq>
 8000de0:	4601      	mov	r1, r0
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_RCC_ClockConfig+0x20c>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	091b      	lsrs	r3, r3, #4
 8000de8:	f003 030f 	and.w	r3, r3, #15
 8000dec:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_RCC_ClockConfig+0x210>)
 8000dee:	5cd3      	ldrb	r3, [r2, r3]
 8000df0:	fa21 f303 	lsr.w	r3, r1, r3
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_RCC_ClockConfig+0x214>)
 8000df6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f7ff f9c5 	bl	8000188 <HAL_InitTick>
  
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40022000 	.word	0x40022000
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	080045cc 	.word	0x080045cc
 8000e14:	20000030 	.word	0x20000030

08000e18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e18:	b490      	push	{r4, r7}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e20:	1d3c      	adds	r4, r7, #4
 8000e22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e42:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 030c 	and.w	r3, r3, #12
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	d002      	beq.n	8000e58 <HAL_RCC_GetSysClockFreq+0x40>
 8000e52:	2b08      	cmp	r3, #8
 8000e54:	d003      	beq.n	8000e5e <HAL_RCC_GetSysClockFreq+0x46>
 8000e56:	e02d      	b.n	8000eb4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e5a:	623b      	str	r3, [r7, #32]
      break;
 8000e5c:	e02d      	b.n	8000eba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	0c9b      	lsrs	r3, r3, #18
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e6a:	4413      	add	r3, r2
 8000e6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e70:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d013      	beq.n	8000ea4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	0c5b      	lsrs	r3, r3, #17
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e8a:	4413      	add	r3, r2
 8000e8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e90:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e96:	fb02 f203 	mul.w	r2, r2, r3
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea2:	e004      	b.n	8000eae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	4a0c      	ldr	r2, [pc, #48]	; (8000ed8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000ea8:	fb02 f303 	mul.w	r3, r2, r3
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	623b      	str	r3, [r7, #32]
      break;
 8000eb2:	e002      	b.n	8000eba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000eb6:	623b      	str	r3, [r7, #32]
      break;
 8000eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000eba:	6a3b      	ldr	r3, [r7, #32]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3728      	adds	r7, #40	; 0x28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc90      	pop	{r4, r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	08004058 	.word	0x08004058
 8000ecc:	08004068 	.word	0x08004068
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	007a1200 	.word	0x007a1200
 8000ed8:	003d0900 	.word	0x003d0900

08000edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ee0:	4b02      	ldr	r3, [pc, #8]	; (8000eec <HAL_RCC_GetHCLKFreq+0x10>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	20000030 	.word	0x20000030

08000ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ef4:	f7ff fff2 	bl	8000edc <HAL_RCC_GetHCLKFreq>
 8000ef8:	4601      	mov	r1, r0
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	0a1b      	lsrs	r3, r3, #8
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	4a03      	ldr	r2, [pc, #12]	; (8000f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f06:	5cd3      	ldrb	r3, [r2, r3]
 8000f08:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40021000 	.word	0x40021000
 8000f14:	080045dc 	.word	0x080045dc

08000f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f1c:	f7ff ffde 	bl	8000edc <HAL_RCC_GetHCLKFreq>
 8000f20:	4601      	mov	r1, r0
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	0adb      	lsrs	r3, r3, #11
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	4a03      	ldr	r2, [pc, #12]	; (8000f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f2e:	5cd3      	ldrb	r3, [r2, r3]
 8000f30:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	080045dc 	.word	0x080045dc

08000f40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <RCC_Delay+0x34>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <RCC_Delay+0x38>)
 8000f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f52:	0a5b      	lsrs	r3, r3, #9
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	fb02 f303 	mul.w	r3, r2, r3
 8000f5a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000f5c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	1e5a      	subs	r2, r3, #1
 8000f62:	60fa      	str	r2, [r7, #12]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f9      	bne.n	8000f5c <RCC_Delay+0x1c>
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000030 	.word	0x20000030
 8000f78:	10624dd3 	.word	0x10624dd3

08000f7c <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d101      	bne.n	8000fa2 <HAL_SPI_Transmit+0x26>
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e123      	b.n	80011ea <HAL_SPI_Transmit+0x26e>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000faa:	f7ff f92f 	bl	800020c <HAL_GetTick>
 8000fae:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d002      	beq.n	8000fc2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8000fc0:	e10a      	b.n	80011d8 <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0U))
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <HAL_SPI_Transmit+0x52>
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d102      	bne.n	8000fd4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8000fd2:	e101      	b.n	80011d8 <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	68ba      	ldr	r2, [r7, #8]
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	88fa      	ldrh	r2, [r7, #6]
 8000fec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	88fa      	ldrh	r2, [r7, #6]
 8000ff2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2200      	movs	r2, #0
 8001004:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2200      	movs	r2, #0
 800100a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2200      	movs	r2, #0
 8001010:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800101a:	d107      	bne.n	800102c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	6812      	ldr	r2, [r2, #0]
 8001026:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800102a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001036:	2b40      	cmp	r3, #64	; 0x40
 8001038:	d007      	beq.n	800104a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	6812      	ldr	r2, [r2, #0]
 8001042:	6812      	ldr	r2, [r2, #0]
 8001044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001048:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001052:	d147      	bne.n	80010e4 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d004      	beq.n	8001066 <HAL_SPI_Transmit+0xea>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001060:	b29b      	uxth	r3, r3
 8001062:	2b01      	cmp	r3, #1
 8001064:	d138      	bne.n	80010d8 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	8812      	ldrh	r2, [r2, #0]
 800106e:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	3302      	adds	r3, #2
 8001074:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800107a:	b29b      	uxth	r3, r3
 800107c:	3b01      	subs	r3, #1
 800107e:	b29a      	uxth	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001084:	e028      	b.n	80010d8 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b02      	cmp	r3, #2
 8001092:	d10f      	bne.n	80010b4 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	8812      	ldrh	r2, [r2, #0]
 800109c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	3302      	adds	r3, #2
 80010a2:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	3b01      	subs	r3, #1
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80010b2:	e011      	b.n	80010d8 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00b      	beq.n	80010d2 <HAL_SPI_Transmit+0x156>
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010c0:	d00a      	beq.n	80010d8 <HAL_SPI_Transmit+0x15c>
 80010c2:	f7ff f8a3 	bl	800020c <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d302      	bcc.n	80010d8 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80010d6:	e07f      	b.n	80011d8 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80010dc:	b29b      	uxth	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1d1      	bne.n	8001086 <HAL_SPI_Transmit+0x10a>
 80010e2:	e048      	b.n	8001176 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d004      	beq.n	80010f6 <HAL_SPI_Transmit+0x17a>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d13a      	bne.n	800116c <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	330c      	adds	r3, #12
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	7812      	ldrb	r2, [r2, #0]
 8001100:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	3301      	adds	r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800110c:	b29b      	uxth	r3, r3
 800110e:	3b01      	subs	r3, #1
 8001110:	b29a      	uxth	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001116:	e029      	b.n	800116c <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b02      	cmp	r3, #2
 8001124:	d110      	bne.n	8001148 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	330c      	adds	r3, #12
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	7812      	ldrb	r2, [r2, #0]
 8001130:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	3301      	adds	r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800113c:	b29b      	uxth	r3, r3
 800113e:	3b01      	subs	r3, #1
 8001140:	b29a      	uxth	r2, r3
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	86da      	strh	r2, [r3, #54]	; 0x36
 8001146:	e011      	b.n	800116c <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00b      	beq.n	8001166 <HAL_SPI_Transmit+0x1ea>
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001154:	d00a      	beq.n	800116c <HAL_SPI_Transmit+0x1f0>
 8001156:	f7ff f859 	bl	800020c <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	1ad2      	subs	r2, r2, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d302      	bcc.n	800116c <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	77fb      	strb	r3, [r7, #31]
          goto error;
 800116a:	e035      	b.n	80011d8 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001170:	b29b      	uxth	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1d0      	bne.n	8001118 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2201      	movs	r2, #1
 800117e:	2102      	movs	r1, #2
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f000 fae3 	bl	800174c <SPI_WaitFlagStateUntilTimeout>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001190:	e022      	b.n	80011d8 <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	6839      	ldr	r1, [r7, #0]
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f000 fb41 	bl	800181e <SPI_CheckFlag_BSY>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2220      	movs	r2, #32
 80011aa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80011ac:	e014      	b.n	80011d8 <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10a      	bne.n	80011cc <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80011e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SPI_Receive>:
  * @param  Size: amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b088      	sub	sp, #32
 80011f6:	af02      	add	r7, sp, #8
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	4613      	mov	r3, r2
 8001200:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	75fb      	strb	r3, [r7, #23]

  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001212:	d112      	bne.n	800123a <HAL_SPI_Receive+0x48>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d10e      	bne.n	800123a <HAL_SPI_Receive+0x48>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2204      	movs	r2, #4
 8001220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8001224:	88fa      	ldrh	r2, [r7, #6]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	4613      	mov	r3, r2
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	68b9      	ldr	r1, [r7, #8]
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f000 f8ec 	bl	800140e <HAL_SPI_TransmitReceive>
 8001236:	4603      	mov	r3, r0
 8001238:	e0e5      	b.n	8001406 <HAL_SPI_Receive+0x214>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <HAL_SPI_Receive+0x56>
 8001244:	2302      	movs	r3, #2
 8001246:	e0de      	b.n	8001406 <HAL_SPI_Receive+0x214>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001250:	f7fe ffdc 	bl	800020c <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

  if(hspi->State != HAL_SPI_STATE_READY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b01      	cmp	r3, #1
 8001260:	d002      	beq.n	8001268 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8001262:	2302      	movs	r3, #2
 8001264:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001266:	e0c5      	b.n	80013f4 <HAL_SPI_Receive+0x202>
  }

  if((pData == NULL ) || (Size == 0U))
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <HAL_SPI_Receive+0x82>
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d102      	bne.n	800127a <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001278:	e0bc      	b.n	80013f4 <HAL_SPI_Receive+0x202>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2204      	movs	r2, #4
 800127e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2200      	movs	r2, #0
 8001286:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	88fa      	ldrh	r2, [r7, #6]
 8001292:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	88fa      	ldrh	r2, [r7, #6]
 8001298:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2200      	movs	r2, #0
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2200      	movs	r2, #0
 80012b6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012c0:	d107      	bne.n	80012d2 <HAL_SPI_Receive+0xe0>
  {
    SPI_1LINE_RX(hspi);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80012d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012dc:	2b40      	cmp	r3, #64	; 0x40
 80012de:	d007      	beq.n	80012f0 <HAL_SPI_Receive+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012ee:	601a      	str	r2, [r3, #0]
  }

    /* Receive data in 8 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d15b      	bne.n	80013b0 <HAL_SPI_Receive+0x1be>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 80012f8:	e02a      	b.n	8001350 <HAL_SPI_Receive+0x15e>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b01      	cmp	r3, #1
 8001306:	d111      	bne.n	800132c <HAL_SPI_Receive+0x13a>
      {
        /* read the received data */
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	330c      	adds	r3, #12
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	3301      	adds	r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001320:	b29b      	uxth	r3, r3
 8001322:	3b01      	subs	r3, #1
 8001324:	b29a      	uxth	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	87da      	strh	r2, [r3, #62]	; 0x3e
 800132a:	e011      	b.n	8001350 <HAL_SPI_Receive+0x15e>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00b      	beq.n	800134a <HAL_SPI_Receive+0x158>
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001338:	d00a      	beq.n	8001350 <HAL_SPI_Receive+0x15e>
 800133a:	f7fe ff67 	bl	800020c <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad2      	subs	r2, r2, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d302      	bcc.n	8001350 <HAL_SPI_Receive+0x15e>
        {
          errorcode = HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800134e:	e051      	b.n	80013f4 <HAL_SPI_Receive+0x202>
    while(hspi->RxXferCount > 0U)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001354:	b29b      	uxth	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1cf      	bne.n	80012fa <HAL_SPI_Receive+0x108>
 800135a:	e02e      	b.n	80013ba <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b01      	cmp	r3, #1
 8001368:	d110      	bne.n	800138c <HAL_SPI_Receive+0x19a>
      {
        *((uint16_t*)pData) = hspi->Instance->DR;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	b29a      	uxth	r2, r3
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	3302      	adds	r3, #2
 800137a:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001380:	b29b      	uxth	r3, r3
 8001382:	3b01      	subs	r3, #1
 8001384:	b29a      	uxth	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	87da      	strh	r2, [r3, #62]	; 0x3e
 800138a:	e011      	b.n	80013b0 <HAL_SPI_Receive+0x1be>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00b      	beq.n	80013aa <HAL_SPI_Receive+0x1b8>
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001398:	d00a      	beq.n	80013b0 <HAL_SPI_Receive+0x1be>
 800139a:	f7fe ff37 	bl	800020c <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad2      	subs	r2, r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d302      	bcc.n	80013b0 <HAL_SPI_Receive+0x1be>
        {
          errorcode = HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80013ae:	e021      	b.n	80013f4 <HAL_SPI_Receive+0x202>
    while(hspi->RxXferCount > 0U)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1d0      	bne.n	800135c <HAL_SPI_Receive+0x16a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80013c2:	d111      	bne.n	80013e8 <HAL_SPI_Receive+0x1f6>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013cc:	d004      	beq.n	80013d8 <HAL_SPI_Receive+0x1e6>
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d6:	d107      	bne.n	80013e8 <HAL_SPI_Receive+0x1f6>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013e6:	601a      	str	r2, [r3, #0]
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_SPI_Receive+0x202>
  {
    errorcode = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001404:	7dfb      	ldrb	r3, [r7, #23]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b08c      	sub	sp, #48	; 0x30
 8001412:	af02      	add	r7, sp, #8
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	2300      	movs	r3, #0
 8001422:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8001428:	2301      	movs	r3, #1
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_SPI_TransmitReceive+0x32>
 800143c:	2302      	movs	r3, #2
 800143e:	e181      	b.n	8001744 <HAL_SPI_TransmitReceive+0x336>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001448:	f7fe fee0 	bl	800020c <HAL_GetTick>
 800144c:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001454:	b2db      	uxtb	r3, r3
 8001456:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00e      	beq.n	8001482 <HAL_SPI_TransmitReceive+0x74>
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800146a:	d106      	bne.n	800147a <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <HAL_SPI_TransmitReceive+0x6c>
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	2b04      	cmp	r3, #4
 8001478:	d003      	beq.n	8001482 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 800147a:	2302      	movs	r3, #2
 800147c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001480:	e156      	b.n	8001730 <HAL_SPI_TransmitReceive+0x322>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_SPI_TransmitReceive+0x86>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <HAL_SPI_TransmitReceive+0x86>
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d103      	bne.n	800149c <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800149a:	e149      	b.n	8001730 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d103      	bne.n	80014b0 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2205      	movs	r2, #5
 80014ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	887a      	ldrh	r2, [r7, #2]
 80014c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	887a      	ldrh	r2, [r7, #2]
 80014c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	887a      	ldrh	r2, [r7, #2]
 80014d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f0:	2b40      	cmp	r3, #64	; 0x40
 80014f2:	d007      	beq.n	8001504 <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001502:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800150c:	d171      	bne.n	80015f2 <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d004      	beq.n	8001520 <HAL_SPI_TransmitReceive+0x112>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800151a:	b29b      	uxth	r3, r3
 800151c:	2b01      	cmp	r3, #1
 800151e:	d15d      	bne.n	80015dc <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	8812      	ldrh	r2, [r2, #0]
 8001528:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3302      	adds	r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001534:	b29b      	uxth	r3, r3
 8001536:	3b01      	subs	r3, #1
 8001538:	b29a      	uxth	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800153e:	e04d      	b.n	80015dc <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	2b00      	cmp	r3, #0
 8001544:	d01c      	beq.n	8001580 <HAL_SPI_TransmitReceive+0x172>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800154a:	b29b      	uxth	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d017      	beq.n	8001580 <HAL_SPI_TransmitReceive+0x172>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b02      	cmp	r3, #2
 800155c:	d110      	bne.n	8001580 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	8812      	ldrh	r2, [r2, #0]
 8001566:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	3302      	adds	r3, #2
 800156c:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001572:	b29b      	uxth	r3, r3
 8001574:	3b01      	subs	r3, #1
 8001576:	b29a      	uxth	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001584:	b29b      	uxth	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d018      	beq.n	80015bc <HAL_SPI_TransmitReceive+0x1ae>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b01      	cmp	r3, #1
 8001596:	d111      	bne.n	80015bc <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	b29a      	uxth	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3302      	adds	r3, #2
 80015a8:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80015b8:	2301      	movs	r3, #1
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80015bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015c2:	d00b      	beq.n	80015dc <HAL_SPI_TransmitReceive+0x1ce>
 80015c4:	f7fe fe22 	bl	800020c <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	1ad2      	subs	r2, r2, r3
 80015ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d303      	bcc.n	80015dc <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80015da:	e0a9      	b.n	8001730 <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1ac      	bne.n	8001540 <HAL_SPI_TransmitReceive+0x132>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1a7      	bne.n	8001540 <HAL_SPI_TransmitReceive+0x132>
 80015f0:	e071      	b.n	80016d6 <HAL_SPI_TransmitReceive+0x2c8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d004      	beq.n	8001604 <HAL_SPI_TransmitReceive+0x1f6>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015fe:	b29b      	uxth	r3, r3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d15e      	bne.n	80016c2 <HAL_SPI_TransmitReceive+0x2b4>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	330c      	adds	r3, #12
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	7812      	ldrb	r2, [r2, #0]
 800160e:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	3301      	adds	r3, #1
 8001614:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800161a:	b29b      	uxth	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	b29a      	uxth	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001624:	e04d      	b.n	80016c2 <HAL_SPI_TransmitReceive+0x2b4>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01d      	beq.n	8001668 <HAL_SPI_TransmitReceive+0x25a>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001630:	b29b      	uxth	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d018      	beq.n	8001668 <HAL_SPI_TransmitReceive+0x25a>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b02      	cmp	r3, #2
 8001642:	d111      	bne.n	8001668 <HAL_SPI_TransmitReceive+0x25a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f103 020c 	add.w	r2, r3, #12
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	1c59      	adds	r1, r3, #1
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800165a:	b29b      	uxth	r3, r3
 800165c:	3b01      	subs	r3, #1
 800165e:	b29a      	uxth	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800166c:	b29b      	uxth	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d017      	beq.n	80016a2 <HAL_SPI_TransmitReceive+0x294>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b01      	cmp	r3, #1
 800167e:	d110      	bne.n	80016a2 <HAL_SPI_TransmitReceive+0x294>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	68d2      	ldr	r2, [r2, #12]
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001694:	b29b      	uxth	r3, r3
 8001696:	3b01      	subs	r3, #1
 8001698:	b29a      	uxth	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 800169e:	2301      	movs	r3, #1
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80016a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016a8:	d00b      	beq.n	80016c2 <HAL_SPI_TransmitReceive+0x2b4>
 80016aa:	f7fe fdaf 	bl	800020c <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	1ad2      	subs	r2, r2, r3
 80016b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d303      	bcc.n	80016c2 <HAL_SPI_TransmitReceive+0x2b4>
      {
        errorcode = HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80016c0:	e036      	b.n	8001730 <HAL_SPI_TransmitReceive+0x322>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1ac      	bne.n	8001626 <HAL_SPI_TransmitReceive+0x218>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1a7      	bne.n	8001626 <HAL_SPI_TransmitReceive+0x218>
    }
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016dc:	2201      	movs	r2, #1
 80016de:	2102      	movs	r1, #2
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f000 f833 	bl	800174c <SPI_WaitFlagStateUntilTimeout>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_SPI_TransmitReceive+0x2e6>
  {
    errorcode = HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80016f2:	e01d      	b.n	8001730 <HAL_SPI_TransmitReceive+0x322>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f000 f890 	bl	800181e <SPI_CheckFlag_BSY>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <HAL_SPI_TransmitReceive+0x304>
  {
    errorcode = HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2220      	movs	r2, #32
 800170e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001710:	e00e      	b.n	8001730 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10a      	bne.n	8001730 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001740:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001744:	4618      	mov	r0, r3
 8001746:	3728      	adds	r7, #40	; 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800175a:	e04d      	b.n	80017f8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001762:	d049      	beq.n	80017f8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d007      	beq.n	800177a <SPI_WaitFlagStateUntilTimeout+0x2e>
 800176a:	f7fe fd4f 	bl	800020c <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	1ad2      	subs	r2, r2, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d33e      	bcc.n	80017f8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	6852      	ldr	r2, [r2, #4]
 8001784:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001788:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001792:	d111      	bne.n	80017b8 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800179c:	d004      	beq.n	80017a8 <SPI_WaitFlagStateUntilTimeout+0x5c>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a6:	d107      	bne.n	80017b8 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017c0:	d110      	bne.n	80017e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6819      	ldr	r1, [r3, #0]
 80017cc:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80017d0:	400b      	ands	r3, r1
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e00e      	b.n	8001816 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	401a      	ands	r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	429a      	cmp	r2, r3
 8001806:	d101      	bne.n	800180c <SPI_WaitFlagStateUntilTimeout+0xc0>
 8001808:	2201      	movs	r2, #1
 800180a:	e000      	b.n	800180e <SPI_WaitFlagStateUntilTimeout+0xc2>
 800180c:	2200      	movs	r2, #0
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	429a      	cmp	r2, r3
 8001812:	d1a3      	bne.n	800175c <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af02      	add	r7, sp, #8
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2200      	movs	r2, #0
 8001832:	2180      	movs	r1, #128	; 0x80
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f7ff ff89 	bl	800174c <SPI_WaitFlagStateUntilTimeout>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d007      	beq.n	8001850 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001844:	f043 0220 	orr.w	r2, r3, #32
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e000      	b.n	8001852 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e056      	b.n	800191a <HAL_SPI_Init+0xc0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f001 fe3a 	bl	80034f8 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2202      	movs	r2, #2
 8001888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800189a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6851      	ldr	r1, [r2, #4]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6892      	ldr	r2, [r2, #8]
 80018a8:	4311      	orrs	r1, r2
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68d2      	ldr	r2, [r2, #12]
 80018ae:	4311      	orrs	r1, r2
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6912      	ldr	r2, [r2, #16]
 80018b4:	4311      	orrs	r1, r2
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6952      	ldr	r2, [r2, #20]
 80018ba:	4311      	orrs	r1, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6992      	ldr	r2, [r2, #24]
 80018c0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80018c4:	4311      	orrs	r1, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	69d2      	ldr	r2, [r2, #28]
 80018ca:	4311      	orrs	r1, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6a12      	ldr	r2, [r2, #32]
 80018d0:	4311      	orrs	r1, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80018d6:	430a      	orrs	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6992      	ldr	r2, [r2, #24]
 80018e2:	0c12      	lsrs	r2, r2, #16
 80018e4:	f002 0104 	and.w	r1, r2, #4
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018ec:	430a      	orrs	r2, r1
 80018ee:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80018f8:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	69d2      	ldr	r2, [r2, #28]
 8001904:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001908:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e03f      	b.n	80019b4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d106      	bne.n	800194e <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f001 fe1f 	bl	800358c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2224      	movs	r2, #36	; 0x24
 8001952:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	68d2      	ldr	r2, [r2, #12]
 8001960:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001964:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f90a 	bl	8001b80 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	6912      	ldr	r2, [r2, #16]
 8001976:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800197a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	6952      	ldr	r2, [r2, #20]
 8001986:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800198a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	68d2      	ldr	r2, [r2, #12]
 8001996:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800199a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2220      	movs	r2, #32
 80019a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2220      	movs	r2, #32
 80019ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b20      	cmp	r3, #32
 80019da:	f040 8082 	bne.w	8001ae2 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL) || (Size == 0U))
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <HAL_UART_Transmit+0x2e>
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e07a      	b.n	8001ae4 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_UART_Transmit+0x40>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e073      	b.n	8001ae4 <HAL_UART_Transmit+0x128>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2221      	movs	r2, #33	; 0x21
 8001a0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a12:	f7fe fbfb 	bl	800020c <HAL_GetTick>
 8001a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	88fa      	ldrh	r2, [r7, #6]
 8001a1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	88fa      	ldrh	r2, [r7, #6]
 8001a22:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001a24:	e041      	b.n	8001aaa <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a3c:	d121      	bne.n	8001a82 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2200      	movs	r2, #0
 8001a46:	2180      	movs	r1, #128	; 0x80
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 f84f 	bl	8001aec <UART_WaitOnFlagUntilTimeout>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e045      	b.n	8001ae4 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	8812      	ldrh	r2, [r2, #0]
 8001a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a68:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d103      	bne.n	8001a7a <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	3302      	adds	r3, #2
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	e017      	b.n	8001aaa <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData +=1U;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	e013      	b.n	8001aaa <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2180      	movs	r1, #128	; 0x80
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 f82d 	bl	8001aec <UART_WaitOnFlagUntilTimeout>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e023      	b.n	8001ae4 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	1c59      	adds	r1, r3, #1
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1b8      	bne.n	8001a26 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2200      	movs	r2, #0
 8001abc:	2140      	movs	r1, #64	; 0x40
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f814 	bl	8001aec <UART_WaitOnFlagUntilTimeout>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e00a      	b.n	8001ae4 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e000      	b.n	8001ae4 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8001ae2:	2302      	movs	r3, #2
  }
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	4613      	mov	r3, r2
 8001afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001afc:	e02c      	b.n	8001b58 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b04:	d028      	beq.n	8001b58 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d007      	beq.n	8001b1c <UART_WaitOnFlagUntilTimeout+0x30>
 8001b0c:	f7fe fb7e 	bl	800020c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	1ad2      	subs	r2, r2, r3
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d91d      	bls.n	8001b58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	68d2      	ldr	r2, [r2, #12]
 8001b26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b2a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	6952      	ldr	r2, [r2, #20]
 8001b36:	f022 0201 	bic.w	r2, r2, #1
 8001b3a:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2220      	movs	r2, #32
 8001b48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e00f      	b.n	8001b78 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	401a      	ands	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d0c3      	beq.n	8001afe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	6912      	ldr	r2, [r2, #16]
 8001b96:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68d2      	ldr	r2, [r2, #12]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001bc6:	f023 030c 	bic.w	r3, r3, #12
 8001bca:	68f9      	ldr	r1, [r7, #12]
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	6952      	ldr	r2, [r2, #20]
 8001bda:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6992      	ldr	r2, [r2, #24]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a6f      	ldr	r2, [pc, #444]	; (8001da8 <UART_SetConfig+0x228>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d16b      	bne.n	8001cc8 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681c      	ldr	r4, [r3, #0]
 8001bf4:	f7ff f990 	bl	8000f18 <HAL_RCC_GetPCLK2Freq>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	009a      	lsls	r2, r3, #2
 8001c02:	441a      	add	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	4a67      	ldr	r2, [pc, #412]	; (8001dac <UART_SetConfig+0x22c>)
 8001c10:	fba2 2303 	umull	r2, r3, r2, r3
 8001c14:	095b      	lsrs	r3, r3, #5
 8001c16:	011d      	lsls	r5, r3, #4
 8001c18:	f7ff f97e 	bl	8000f18 <HAL_RCC_GetPCLK2Freq>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	009a      	lsls	r2, r3, #2
 8001c26:	441a      	add	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	fbb2 f6f3 	udiv	r6, r2, r3
 8001c32:	f7ff f971 	bl	8000f18 <HAL_RCC_GetPCLK2Freq>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009a      	lsls	r2, r3, #2
 8001c40:	441a      	add	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4c:	4a57      	ldr	r2, [pc, #348]	; (8001dac <UART_SetConfig+0x22c>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	2264      	movs	r2, #100	; 0x64
 8001c56:	fb02 f303 	mul.w	r3, r2, r3
 8001c5a:	1af3      	subs	r3, r6, r3
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	3332      	adds	r3, #50	; 0x32
 8001c60:	4a52      	ldr	r2, [pc, #328]	; (8001dac <UART_SetConfig+0x22c>)
 8001c62:	fba2 2303 	umull	r2, r3, r2, r3
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c6c:	441d      	add	r5, r3
 8001c6e:	f7ff f953 	bl	8000f18 <HAL_RCC_GetPCLK2Freq>
 8001c72:	4602      	mov	r2, r0
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	009a      	lsls	r2, r3, #2
 8001c7c:	441a      	add	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	fbb2 f6f3 	udiv	r6, r2, r3
 8001c88:	f7ff f946 	bl	8000f18 <HAL_RCC_GetPCLK2Freq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	009a      	lsls	r2, r3, #2
 8001c96:	441a      	add	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca2:	4a42      	ldr	r2, [pc, #264]	; (8001dac <UART_SetConfig+0x22c>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	2264      	movs	r2, #100	; 0x64
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	1af3      	subs	r3, r6, r3
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	3332      	adds	r3, #50	; 0x32
 8001cb6:	4a3d      	ldr	r2, [pc, #244]	; (8001dac <UART_SetConfig+0x22c>)
 8001cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbc:	095b      	lsrs	r3, r3, #5
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	442b      	add	r3, r5
 8001cc4:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001cc6:	e06a      	b.n	8001d9e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681c      	ldr	r4, [r3, #0]
 8001ccc:	f7ff f910 	bl	8000ef0 <HAL_RCC_GetPCLK1Freq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009a      	lsls	r2, r3, #2
 8001cda:	441a      	add	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	4a31      	ldr	r2, [pc, #196]	; (8001dac <UART_SetConfig+0x22c>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	095b      	lsrs	r3, r3, #5
 8001cee:	011d      	lsls	r5, r3, #4
 8001cf0:	f7ff f8fe 	bl	8000ef0 <HAL_RCC_GetPCLK1Freq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009a      	lsls	r2, r3, #2
 8001cfe:	441a      	add	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	fbb2 f6f3 	udiv	r6, r2, r3
 8001d0a:	f7ff f8f1 	bl	8000ef0 <HAL_RCC_GetPCLK1Freq>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	009a      	lsls	r2, r3, #2
 8001d18:	441a      	add	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	4a21      	ldr	r2, [pc, #132]	; (8001dac <UART_SetConfig+0x22c>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2264      	movs	r2, #100	; 0x64
 8001d2e:	fb02 f303 	mul.w	r3, r2, r3
 8001d32:	1af3      	subs	r3, r6, r3
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	3332      	adds	r3, #50	; 0x32
 8001d38:	4a1c      	ldr	r2, [pc, #112]	; (8001dac <UART_SetConfig+0x22c>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d44:	441d      	add	r5, r3
 8001d46:	f7ff f8d3 	bl	8000ef0 <HAL_RCC_GetPCLK1Freq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	009a      	lsls	r2, r3, #2
 8001d54:	441a      	add	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8001d60:	f7ff f8c6 	bl	8000ef0 <HAL_RCC_GetPCLK1Freq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009a      	lsls	r2, r3, #2
 8001d6e:	441a      	add	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7a:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <UART_SetConfig+0x22c>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	095b      	lsrs	r3, r3, #5
 8001d82:	2264      	movs	r2, #100	; 0x64
 8001d84:	fb02 f303 	mul.w	r3, r2, r3
 8001d88:	1af3      	subs	r3, r6, r3
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	3332      	adds	r3, #50	; 0x32
 8001d8e:	4a07      	ldr	r2, [pc, #28]	; (8001dac <UART_SetConfig+0x22c>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	095b      	lsrs	r3, r3, #5
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	442b      	add	r3, r5
 8001d9c:	60a3      	str	r3, [r4, #8]
}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40013800 	.word	0x40013800
 8001dac:	51eb851f 	.word	0x51eb851f

08001db0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <NRF24_DelayMicroSeconds+0x38>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <NRF24_DelayMicroSeconds+0x3c>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	0c9a      	lsrs	r2, r3, #18
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	fb02 f303 	mul.w	r3, r2, r3
 8001dce:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8001dd0:	bf00      	nop
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1e5a      	subs	r2, r3, #1
 8001dd6:	60fa      	str	r2, [r7, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1fa      	bne.n	8001dd2 <NRF24_DelayMicroSeconds+0x22>
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000030 	.word	0x20000030
 8001dec:	165e9f81 	.word	0x165e9f81

08001df0 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d008      	beq.n	8001e10 <NRF24_csn+0x20>
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <NRF24_csn+0x38>)
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <NRF24_csn+0x3c>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	2201      	movs	r2, #1
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f7fe fc6b 	bl	80006e4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8001e0e:	e007      	b.n	8001e20 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <NRF24_csn+0x38>)
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <NRF24_csn+0x3c>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f7fe fc62 	bl	80006e4 <HAL_GPIO_WritePin>
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	200000bc 	.word	0x200000bc
 8001e2c:	200000c0 	.word	0x200000c0

08001e30 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d008      	beq.n	8001e50 <NRF24_ce+0x20>
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <NRF24_ce+0x38>)
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <NRF24_ce+0x3c>)
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	2201      	movs	r2, #1
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f7fe fc4b 	bl	80006e4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8001e4e:	e007      	b.n	8001e60 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <NRF24_ce+0x38>)
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <NRF24_ce+0x3c>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7fe fc42 	bl	80006e4 <HAL_GPIO_WritePin>
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	200000bc 	.word	0x200000bc
 8001e6c:	200000c2 	.word	0x200000c2

08001e70 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff ffb8 	bl	8001df0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	f003 031f 	and.w	r3, r3, #31
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001e8a:	f107 010c 	add.w	r1, r7, #12
 8001e8e:	2364      	movs	r3, #100	; 0x64
 8001e90:	2201      	movs	r2, #1
 8001e92:	480a      	ldr	r0, [pc, #40]	; (8001ebc <NRF24_read_register+0x4c>)
 8001e94:	f7ff f872 	bl	8000f7c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	1c59      	adds	r1, r3, #1
 8001e9e:	2364      	movs	r3, #100	; 0x64
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	4806      	ldr	r0, [pc, #24]	; (8001ebc <NRF24_read_register+0x4c>)
 8001ea4:	f7ff f9a5 	bl	80011f2 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8001ea8:	7b7b      	ldrb	r3, [r7, #13]
 8001eaa:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8001eac:	2001      	movs	r0, #1
 8001eae:	f7ff ff9f 	bl	8001df0 <NRF24_csn>
	return retData;
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	200000c4 	.word	0x200000c4

08001ec0 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7ff ff8d 	bl	8001df0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001ee0:	f107 010c 	add.w	r1, r7, #12
 8001ee4:	2364      	movs	r3, #100	; 0x64
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4808      	ldr	r0, [pc, #32]	; (8001f0c <NRF24_read_registerN+0x4c>)
 8001eea:	f7ff f847 	bl	8000f7c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8001eee:	79bb      	ldrb	r3, [r7, #6]
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	2364      	movs	r3, #100	; 0x64
 8001ef4:	6839      	ldr	r1, [r7, #0]
 8001ef6:	4805      	ldr	r0, [pc, #20]	; (8001f0c <NRF24_read_registerN+0x4c>)
 8001ef8:	f7ff f97b 	bl	80011f2 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8001efc:	2001      	movs	r0, #1
 8001efe:	f7ff ff77 	bl	8001df0 <NRF24_csn>
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200000c4 	.word	0x200000c4

08001f10 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	460a      	mov	r2, r1
 8001f1a:	71fb      	strb	r3, [r7, #7]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001f20:	2000      	movs	r0, #0
 8001f22:	f7ff ff65 	bl	8001df0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	f043 0320 	orr.w	r3, r3, #32
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8001f30:	79bb      	ldrb	r3, [r7, #6]
 8001f32:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8001f34:	f107 010c 	add.w	r1, r7, #12
 8001f38:	2364      	movs	r3, #100	; 0x64
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	4804      	ldr	r0, [pc, #16]	; (8001f50 <NRF24_write_register+0x40>)
 8001f3e:	f7ff f81d 	bl	8000f7c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f7ff ff54 	bl	8001df0 <NRF24_csn>
}
 8001f48:	bf00      	nop
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200000c4 	.word	0x200000c4

08001f54 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	6039      	str	r1, [r7, #0]
 8001f5e:	71fb      	strb	r3, [r7, #7]
 8001f60:	4613      	mov	r3, r2
 8001f62:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7ff ff43 	bl	8001df0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	f043 0320 	orr.w	r3, r3, #32
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001f74:	f107 010c 	add.w	r1, r7, #12
 8001f78:	2364      	movs	r3, #100	; 0x64
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	4808      	ldr	r0, [pc, #32]	; (8001fa0 <NRF24_write_registerN+0x4c>)
 8001f7e:	f7fe fffd 	bl	8000f7c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8001f82:	79bb      	ldrb	r3, [r7, #6]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	2364      	movs	r3, #100	; 0x64
 8001f88:	6839      	ldr	r1, [r7, #0]
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <NRF24_write_registerN+0x4c>)
 8001f8c:	f7fe fff6 	bl	8000f7c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001f90:	2001      	movs	r0, #1
 8001f92:	f7ff ff2d 	bl	8001df0 <NRF24_csn>
}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200000c4 	.word	0x200000c4

08001fa4 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f7ff ff1d 	bl	8001df0 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8001fb6:	23a0      	movs	r3, #160	; 0xa0
 8001fb8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8001fba:	f107 010f 	add.w	r1, r7, #15
 8001fbe:	2364      	movs	r3, #100	; 0x64
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	4808      	ldr	r0, [pc, #32]	; (8001fe4 <NRF24_write_payload+0x40>)
 8001fc4:	f7fe ffda 	bl	8000f7c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	2364      	movs	r3, #100	; 0x64
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4804      	ldr	r0, [pc, #16]	; (8001fe4 <NRF24_write_payload+0x40>)
 8001fd2:	f7fe ffd3 	bl	8000f7c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f7ff ff0a 	bl	8001df0 <NRF24_csn>
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	200000c4 	.word	0x200000c4

08001fe8 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8001fec:	21ff      	movs	r1, #255	; 0xff
 8001fee:	20e1      	movs	r0, #225	; 0xe1
 8001ff0:	f7ff ff8e 	bl	8001f10 <NRF24_write_register>
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001ffc:	21ff      	movs	r1, #255	; 0xff
 8001ffe:	20e2      	movs	r0, #226	; 0xe2
 8002000:	f7ff ff86 	bl	8001f10 <NRF24_write_register>
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800200e:	2007      	movs	r0, #7
 8002010:	f7ff ff2e 	bl	8001e70 <NRF24_read_register>
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8002018:	79fb      	ldrb	r3, [r7, #7]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8002024:	b082      	sub	sp, #8
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
 8002034:	4613      	mov	r3, r2
 8002036:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8002038:	4b66      	ldr	r3, [pc, #408]	; (80021d4 <NRF24_begin+0x1b0>)
 800203a:	4618      	mov	r0, r3
 800203c:	f107 031c 	add.w	r3, r7, #28
 8002040:	2258      	movs	r2, #88	; 0x58
 8002042:	4619      	mov	r1, r3
 8002044:	f001 fbc8 	bl	80037d8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8002048:	4a63      	ldr	r2, [pc, #396]	; (80021d8 <NRF24_begin+0x1b4>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800204e:	4a63      	ldr	r2, [pc, #396]	; (80021dc <NRF24_begin+0x1b8>)
 8002050:	887b      	ldrh	r3, [r7, #2]
 8002052:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8002054:	4a62      	ldr	r2, [pc, #392]	; (80021e0 <NRF24_begin+0x1bc>)
 8002056:	883b      	ldrh	r3, [r7, #0]
 8002058:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 800205a:	2001      	movs	r0, #1
 800205c:	f7ff fec8 	bl	8001df0 <NRF24_csn>
	NRF24_ce(0);
 8002060:	2000      	movs	r0, #0
 8002062:	f7ff fee5 	bl	8001e30 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8002066:	2005      	movs	r0, #5
 8002068:	f7fe f8da 	bl	8000220 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 800206c:	2108      	movs	r1, #8
 800206e:	2000      	movs	r0, #0
 8002070:	f7ff ff4e 	bl	8001f10 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8002074:	213f      	movs	r1, #63	; 0x3f
 8002076:	2001      	movs	r0, #1
 8002078:	f7ff ff4a 	bl	8001f10 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800207c:	2103      	movs	r1, #3
 800207e:	2002      	movs	r0, #2
 8002080:	f7ff ff46 	bl	8001f10 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8002084:	2103      	movs	r1, #3
 8002086:	2003      	movs	r0, #3
 8002088:	f7ff ff42 	bl	8001f10 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 800208c:	2103      	movs	r1, #3
 800208e:	2004      	movs	r0, #4
 8002090:	f7ff ff3e 	bl	8001f10 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8002094:	2102      	movs	r1, #2
 8002096:	2005      	movs	r0, #5
 8002098:	f7ff ff3a 	bl	8001f10 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 800209c:	210f      	movs	r1, #15
 800209e:	2006      	movs	r0, #6
 80020a0:	f7ff ff36 	bl	8001f10 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80020a4:	210e      	movs	r1, #14
 80020a6:	2007      	movs	r0, #7
 80020a8:	f7ff ff32 	bl	8001f10 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80020ac:	2100      	movs	r1, #0
 80020ae:	2008      	movs	r0, #8
 80020b0:	f7ff ff2e 	bl	8001f10 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80020b4:	2100      	movs	r1, #0
 80020b6:	2009      	movs	r0, #9
 80020b8:	f7ff ff2a 	bl	8001f10 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80020bc:	23e7      	movs	r3, #231	; 0xe7
 80020be:	733b      	strb	r3, [r7, #12]
 80020c0:	23e7      	movs	r3, #231	; 0xe7
 80020c2:	72fb      	strb	r3, [r7, #11]
 80020c4:	23e7      	movs	r3, #231	; 0xe7
 80020c6:	72bb      	strb	r3, [r7, #10]
 80020c8:	23e7      	movs	r3, #231	; 0xe7
 80020ca:	727b      	strb	r3, [r7, #9]
 80020cc:	23e7      	movs	r3, #231	; 0xe7
 80020ce:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80020d0:	f107 0308 	add.w	r3, r7, #8
 80020d4:	2205      	movs	r2, #5
 80020d6:	4619      	mov	r1, r3
 80020d8:	200a      	movs	r0, #10
 80020da:	f7ff ff3b 	bl	8001f54 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80020de:	23c2      	movs	r3, #194	; 0xc2
 80020e0:	733b      	strb	r3, [r7, #12]
 80020e2:	23c2      	movs	r3, #194	; 0xc2
 80020e4:	72fb      	strb	r3, [r7, #11]
 80020e6:	23c2      	movs	r3, #194	; 0xc2
 80020e8:	72bb      	strb	r3, [r7, #10]
 80020ea:	23c2      	movs	r3, #194	; 0xc2
 80020ec:	727b      	strb	r3, [r7, #9]
 80020ee:	23c2      	movs	r3, #194	; 0xc2
 80020f0:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80020f2:	f107 0308 	add.w	r3, r7, #8
 80020f6:	2205      	movs	r2, #5
 80020f8:	4619      	mov	r1, r3
 80020fa:	200b      	movs	r0, #11
 80020fc:	f7ff ff2a 	bl	8001f54 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8002100:	21c3      	movs	r1, #195	; 0xc3
 8002102:	200c      	movs	r0, #12
 8002104:	f7ff ff04 	bl	8001f10 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8002108:	21c4      	movs	r1, #196	; 0xc4
 800210a:	200d      	movs	r0, #13
 800210c:	f7ff ff00 	bl	8001f10 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8002110:	21c5      	movs	r1, #197	; 0xc5
 8002112:	200e      	movs	r0, #14
 8002114:	f7ff fefc 	bl	8001f10 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8002118:	21c6      	movs	r1, #198	; 0xc6
 800211a:	200f      	movs	r0, #15
 800211c:	f7ff fef8 	bl	8001f10 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8002120:	23e7      	movs	r3, #231	; 0xe7
 8002122:	733b      	strb	r3, [r7, #12]
 8002124:	23e7      	movs	r3, #231	; 0xe7
 8002126:	72fb      	strb	r3, [r7, #11]
 8002128:	23e7      	movs	r3, #231	; 0xe7
 800212a:	72bb      	strb	r3, [r7, #10]
 800212c:	23e7      	movs	r3, #231	; 0xe7
 800212e:	727b      	strb	r3, [r7, #9]
 8002130:	23e7      	movs	r3, #231	; 0xe7
 8002132:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8002134:	f107 0308 	add.w	r3, r7, #8
 8002138:	2205      	movs	r2, #5
 800213a:	4619      	mov	r1, r3
 800213c:	2010      	movs	r0, #16
 800213e:	f7ff ff09 	bl	8001f54 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8002142:	2100      	movs	r1, #0
 8002144:	2011      	movs	r0, #17
 8002146:	f7ff fee3 	bl	8001f10 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800214a:	2100      	movs	r1, #0
 800214c:	2012      	movs	r0, #18
 800214e:	f7ff fedf 	bl	8001f10 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8002152:	2100      	movs	r1, #0
 8002154:	2013      	movs	r0, #19
 8002156:	f7ff fedb 	bl	8001f10 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800215a:	2100      	movs	r1, #0
 800215c:	2014      	movs	r0, #20
 800215e:	f7ff fed7 	bl	8001f10 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8002162:	2100      	movs	r1, #0
 8002164:	2015      	movs	r0, #21
 8002166:	f7ff fed3 	bl	8001f10 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800216a:	2100      	movs	r1, #0
 800216c:	2016      	movs	r0, #22
 800216e:	f7ff fecf 	bl	8001f10 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8002172:	f000 fa85 	bl	8002680 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8002176:	2100      	movs	r1, #0
 8002178:	201c      	movs	r0, #28
 800217a:	f7ff fec9 	bl	8001f10 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800217e:	2100      	movs	r1, #0
 8002180:	201d      	movs	r0, #29
 8002182:	f7ff fec5 	bl	8001f10 <NRF24_write_register>
	printRadioSettings();
 8002186:	f000 fa95 	bl	80026b4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800218a:	210f      	movs	r1, #15
 800218c:	200f      	movs	r0, #15
 800218e:	f000 f8b1 	bl	80022f4 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8002192:	2003      	movs	r0, #3
 8002194:	f000 f929 	bl	80023ea <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8002198:	2001      	movs	r0, #1
 800219a:	f000 f95f 	bl	800245c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800219e:	2002      	movs	r0, #2
 80021a0:	f000 f9a2 	bl	80024e8 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80021a4:	f000 f8f4 	bl	8002390 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80021a8:	2020      	movs	r0, #32
 80021aa:	f000 f8d3 	bl	8002354 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80021ae:	f000 fa5e 	bl	800266e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80021b2:	204c      	movs	r0, #76	; 0x4c
 80021b4:	f000 f8b9 	bl	800232a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80021b8:	f7ff ff16 	bl	8001fe8 <NRF24_flush_tx>
	NRF24_flush_rx();
 80021bc:	f7ff ff1c 	bl	8001ff8 <NRF24_flush_rx>
	
	NRF24_powerDown();
 80021c0:	f000 f9ba 	bl	8002538 <NRF24_powerDown>
	
}
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021ce:	b002      	add	sp, #8
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	200000c4 	.word	0x200000c4
 80021d8:	200000bc 	.word	0x200000bc
 80021dc:	200000c0 	.word	0x200000c0
 80021e0:	200000c2 	.word	0x200000c2

080021e4 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80021e8:	2000      	movs	r0, #0
 80021ea:	f7ff fe21 	bl	8001e30 <NRF24_ce>
	NRF24_flush_tx();
 80021ee:	f7ff fefb 	bl	8001fe8 <NRF24_flush_tx>
	NRF24_flush_rx();
 80021f2:	f7ff ff01 	bl	8001ff8 <NRF24_flush_rx>
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8002208:	f000 fa31 	bl	800266e <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	4619      	mov	r1, r3
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f9d0 	bl	80025b6 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8002216:	f7fd fff9 	bl	800020c <HAL_GetTick>
 800221a:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 800221c:	230a      	movs	r3, #10
 800221e:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8002220:	f107 030d 	add.w	r3, r7, #13
 8002224:	2201      	movs	r2, #1
 8002226:	4619      	mov	r1, r3
 8002228:	2008      	movs	r0, #8
 800222a:	f7ff fe49 	bl	8001ec0 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800222e:	f7ff feeb 	bl	8002008 <NRF24_get_status>
 8002232:	4603      	mov	r3, r0
 8002234:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800223c:	2b00      	cmp	r3, #0
 800223e:	d107      	bne.n	8002250 <NRF24_write+0x54>
 8002240:	f7fd ffe4 	bl	800020c <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	1ad2      	subs	r2, r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d3e7      	bcc.n	8002220 <NRF24_write+0x24>
	
	printConfigReg();
 8002250:	f000 ff44 	bl	80030dc <printConfigReg>
	printStatusReg();
 8002254:	f000 fec0 	bl	8002fd8 <printStatusReg>
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8002258:	f107 010b 	add.w	r1, r7, #11
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	4a0c      	ldr	r2, [pc, #48]	; (8002294 <NRF24_write+0x98>)
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f9d0 	bl	8002608 <NRF24_whatHappened>
	retStatus = tx_ok;
 8002268:	7b3b      	ldrb	r3, [r7, #12]
 800226a:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <NRF24_write+0x98>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <NRF24_write+0x84>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8002274:	f000 f884 	bl	8002380 <NRF24_getDynamicPayloadSize>
 8002278:	4603      	mov	r3, r0
 800227a:	461a      	mov	r2, r3
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <NRF24_write+0x9c>)
 800227e:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8002280:	f000 f80c 	bl	800229c <NRF24_available>
	NRF24_flush_tx();
 8002284:	f7ff feb0 	bl	8001fe8 <NRF24_flush_tx>
	return retStatus;
 8002288:	7bbb      	ldrb	r3, [r7, #14]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200000b4 	.word	0x200000b4
 8002298:	200000b5 	.word	0x200000b5

0800229c <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80022a0:	2000      	movs	r0, #0
 80022a2:	f000 f958 	bl	8002556 <NRF24_availablePipe>
 80022a6:	4603      	mov	r3, r0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd80      	pop	{r7, pc}

080022ac <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80022b6:	463b      	mov	r3, r7
 80022b8:	2205      	movs	r2, #5
 80022ba:	4619      	mov	r1, r3
 80022bc:	200a      	movs	r0, #10
 80022be:	f7ff fe49 	bl	8001f54 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80022c2:	463b      	mov	r3, r7
 80022c4:	2205      	movs	r2, #5
 80022c6:	4619      	mov	r1, r3
 80022c8:	2010      	movs	r0, #16
 80022ca:	f7ff fe43 	bl	8001f54 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 80022ce:	2320      	movs	r3, #32
 80022d0:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <NRF24_openWritingPipe+0x44>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	4293      	cmp	r3, r2
 80022da:	bf28      	it	cs
 80022dc:	4613      	movcs	r3, r2
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	4619      	mov	r1, r3
 80022e2:	2011      	movs	r0, #17
 80022e4:	f7ff fe14 	bl	8001f10 <NRF24_write_register>
}
 80022e8:	bf00      	nop
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	200000b6 	.word	0x200000b6

080022f4 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	460a      	mov	r2, r1
 80022fe:	71fb      	strb	r3, [r7, #7]
 8002300:	4613      	mov	r3, r2
 8002302:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	b25a      	sxtb	r2, r3
 800230a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	b25b      	sxtb	r3, r3
 8002314:	4313      	orrs	r3, r2
 8002316:	b25b      	sxtb	r3, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	4619      	mov	r1, r3
 800231c:	2004      	movs	r0, #4
 800231e:	f7ff fdf7 	bl	8001f10 <NRF24_write_register>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8002334:	237f      	movs	r3, #127	; 0x7f
 8002336:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4293      	cmp	r3, r2
 800233e:	bf28      	it	cs
 8002340:	4613      	movcs	r3, r2
 8002342:	b2db      	uxtb	r3, r3
 8002344:	4619      	mov	r1, r3
 8002346:	2005      	movs	r0, #5
 8002348:	f7ff fde2 	bl	8001f10 <NRF24_write_register>
}
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800235e:	2320      	movs	r3, #32
 8002360:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	4293      	cmp	r3, r2
 8002368:	bf28      	it	cs
 800236a:	4613      	movcs	r3, r2
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4b03      	ldr	r3, [pc, #12]	; (800237c <NRF24_setPayloadSize+0x28>)
 8002370:	701a      	strb	r2, [r3, #0]
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	200000b6 	.word	0x200000b6

08002380 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8002384:	2060      	movs	r0, #96	; 0x60
 8002386:	f7ff fd73 	bl	8001e70 <NRF24_read_register>
 800238a:	4603      	mov	r3, r0
}
 800238c:	4618      	mov	r0, r3
 800238e:	bd80      	pop	{r7, pc}

08002390 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8002394:	201d      	movs	r0, #29
 8002396:	f7ff fd6b 	bl	8001e70 <NRF24_read_register>
 800239a:	4603      	mov	r3, r0
 800239c:	f023 0304 	bic.w	r3, r3, #4
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	4619      	mov	r1, r3
 80023a4:	201d      	movs	r0, #29
 80023a6:	f7ff fdb3 	bl	8001f10 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80023aa:	2100      	movs	r1, #0
 80023ac:	201c      	movs	r0, #28
 80023ae:	f7ff fdaf 	bl	8001f10 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80023b2:	4b02      	ldr	r3, [pc, #8]	; (80023bc <NRF24_disableDynamicPayloads+0x2c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	200000b7 	.word	0x200000b7

080023c0 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d004      	beq.n	80023da <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80023d0:	213f      	movs	r1, #63	; 0x3f
 80023d2:	2001      	movs	r0, #1
 80023d4:	f7ff fd9c 	bl	8001f10 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80023d8:	e003      	b.n	80023e2 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80023da:	2100      	movs	r1, #0
 80023dc:	2001      	movs	r0, #1
 80023de:	f7ff fd97 	bl	8001f10 <NRF24_write_register>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	4603      	mov	r3, r0
 80023f2:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80023f4:	2006      	movs	r0, #6
 80023f6:	f7ff fd3b 	bl	8001e70 <NRF24_read_register>
 80023fa:	4603      	mov	r3, r0
 80023fc:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	f023 0306 	bic.w	r3, r3, #6
 8002404:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d104      	bne.n	8002416 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	f043 0306 	orr.w	r3, r3, #6
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	e019      	b.n	800244a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d104      	bne.n	8002426 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	f043 0304 	orr.w	r3, r3, #4
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	e011      	b.n	800244a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d104      	bne.n	8002436 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	f043 0302 	orr.w	r3, r3, #2
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	e009      	b.n	800244a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d006      	beq.n	800244a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	2b04      	cmp	r3, #4
 8002440:	d103      	bne.n	800244a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	f043 0306 	orr.w	r3, r3, #6
 8002448:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	4619      	mov	r1, r3
 800244e:	2006      	movs	r0, #6
 8002450:	f7ff fd5e 	bl	8001f10 <NRF24_write_register>
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8002466:	2300      	movs	r3, #0
 8002468:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800246a:	2006      	movs	r0, #6
 800246c:	f7ff fd00 	bl	8001e70 <NRF24_read_register>
 8002470:	4603      	mov	r3, r0
 8002472:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8002474:	4b1b      	ldr	r3, [pc, #108]	; (80024e4 <NRF24_setDataRate+0x88>)
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800247a:	7bbb      	ldrb	r3, [r7, #14]
 800247c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002480:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d107      	bne.n	8002498 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8002488:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <NRF24_setDataRate+0x88>)
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800248e:	7bbb      	ldrb	r3, [r7, #14]
 8002490:	f043 0320 	orr.w	r3, r3, #32
 8002494:	73bb      	strb	r3, [r7, #14]
 8002496:	e00d      	b.n	80024b4 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d107      	bne.n	80024ae <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <NRF24_setDataRate+0x88>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80024a4:	7bbb      	ldrb	r3, [r7, #14]
 80024a6:	f043 0308 	orr.w	r3, r3, #8
 80024aa:	73bb      	strb	r3, [r7, #14]
 80024ac:	e002      	b.n	80024b4 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80024ae:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <NRF24_setDataRate+0x88>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80024b4:	7bbb      	ldrb	r3, [r7, #14]
 80024b6:	4619      	mov	r1, r3
 80024b8:	2006      	movs	r0, #6
 80024ba:	f7ff fd29 	bl	8001f10 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80024be:	2006      	movs	r0, #6
 80024c0:	f7ff fcd6 	bl	8001e70 <NRF24_read_register>
 80024c4:	4603      	mov	r3, r0
 80024c6:	461a      	mov	r2, r3
 80024c8:	7bbb      	ldrb	r3, [r7, #14]
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d102      	bne.n	80024d4 <NRF24_setDataRate+0x78>
  {
    result = true;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	e002      	b.n	80024da <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <NRF24_setDataRate+0x88>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200000b8 	.word	0x200000b8

080024e8 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7ff fcbc 	bl	8001e70 <NRF24_read_register>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f023 030c 	bic.w	r3, r3, #12
 80024fe:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00f      	beq.n	8002526 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d104      	bne.n	8002516 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	f043 0308 	orr.w	r3, r3, #8
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	e007      	b.n	8002526 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	f043 0308 	orr.w	r3, r3, #8
 800251c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	f043 0304 	orr.w	r3, r3, #4
 8002524:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	4619      	mov	r1, r3
 800252a:	2000      	movs	r0, #0
 800252c:	f7ff fcf0 	bl	8001f10 <NRF24_write_register>
}
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800253c:	2000      	movs	r0, #0
 800253e:	f7ff fc97 	bl	8001e70 <NRF24_read_register>
 8002542:	4603      	mov	r3, r0
 8002544:	f023 0302 	bic.w	r3, r3, #2
 8002548:	b2db      	uxtb	r3, r3
 800254a:	4619      	mov	r1, r3
 800254c:	2000      	movs	r0, #0
 800254e:	f7ff fcdf 	bl	8001f10 <NRF24_write_register>
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}

08002556 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800255e:	f7ff fd53 	bl	8002008 <NRF24_get_status>
 8002562:	4603      	mov	r3, r0
 8002564:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	73bb      	strb	r3, [r7, #14]

  if (result)
 8002576:	7bbb      	ldrb	r3, [r7, #14]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d017      	beq.n	80025ac <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d007      	beq.n	8002592 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	b2da      	uxtb	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8002592:	2140      	movs	r1, #64	; 0x40
 8002594:	2007      	movs	r0, #7
 8002596:	f7ff fcbb 	bl	8001f10 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80025a4:	2120      	movs	r1, #32
 80025a6:	2007      	movs	r0, #7
 80025a8:	f7ff fcb2 	bl	8001f10 <NRF24_write_register>
    }
  }
  return result;
 80025ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 80025c2:	2000      	movs	r0, #0
 80025c4:	f7ff fc54 	bl	8001e70 <NRF24_read_register>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f023 0301 	bic.w	r3, r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	4619      	mov	r1, r3
 80025d8:	2000      	movs	r0, #0
 80025da:	f7ff fc99 	bl	8001f10 <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 80025de:	2096      	movs	r0, #150	; 0x96
 80025e0:	f7ff fbe6 	bl	8001db0 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	4619      	mov	r1, r3
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff fcdb 	bl	8001fa4 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 80025ee:	2001      	movs	r0, #1
 80025f0:	f7ff fc1e 	bl	8001e30 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 80025f4:	200f      	movs	r0, #15
 80025f6:	f7ff fbdb 	bl	8001db0 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7ff fc18 	bl	8001e30 <NRF24_ce>
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8002614:	f7ff fcf8 	bl	8002008 <NRF24_get_status>
 8002618:	4603      	mov	r3, r0
 800261a:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8002622:	2170      	movs	r1, #112	; 0x70
 8002624:	2007      	movs	r0, #7
 8002626:	f7ff fc73 	bl	8001f10 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 800262a:	7dfb      	ldrb	r3, [r7, #23]
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf14      	ite	ne
 8002634:	2301      	movne	r3, #1
 8002636:	2300      	moveq	r3, #0
 8002638:	b2da      	uxtb	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf14      	ite	ne
 8002648:	2301      	movne	r3, #1
 800264a:	2300      	moveq	r3, #0
 800264c:	b2da      	uxtb	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8002652:	7dfb      	ldrb	r3, [r7, #23]
 8002654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf14      	ite	ne
 800265c:	2301      	movne	r3, #1
 800265e:	2300      	moveq	r3, #0
 8002660:	b2da      	uxtb	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	701a      	strb	r2, [r3, #0]
}
 8002666:	bf00      	nop
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8002672:	2170      	movs	r1, #112	; 0x70
 8002674:	2007      	movs	r0, #7
 8002676:	f7ff fc4b 	bl	8001f10 <NRF24_write_register>
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8002686:	2000      	movs	r0, #0
 8002688:	f7ff fbb2 	bl	8001df0 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800268c:	2350      	movs	r3, #80	; 0x50
 800268e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8002690:	2373      	movs	r3, #115	; 0x73
 8002692:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8002694:	1d39      	adds	r1, r7, #4
 8002696:	2364      	movs	r3, #100	; 0x64
 8002698:	2202      	movs	r2, #2
 800269a:	4805      	ldr	r0, [pc, #20]	; (80026b0 <NRF24_ACTIVATE_cmd+0x30>)
 800269c:	f7fe fc6e 	bl	8000f7c <HAL_SPI_Transmit>
	NRF24_csn(1);
 80026a0:	2001      	movs	r0, #1
 80026a2:	f7ff fba5 	bl	8001df0 <NRF24_csn>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200000c4 	.word	0x200000c4

080026b4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80026b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b6:	b0a1      	sub	sp, #132	; 0x84
 80026b8:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80026ba:	f107 0308 	add.w	r3, r7, #8
 80026be:	4ab6      	ldr	r2, [pc, #728]	; (8002998 <printRadioSettings+0x2e4>)
 80026c0:	461c      	mov	r4, r3
 80026c2:	4615      	mov	r5, r2
 80026c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026d0:	682b      	ldr	r3, [r5, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	8022      	strh	r2, [r4, #0]
 80026d6:	3402      	adds	r4, #2
 80026d8:	0c1b      	lsrs	r3, r3, #16
 80026da:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80026dc:	f107 0308 	add.w	r3, r7, #8
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd fd33 	bl	800014c <strlen>
 80026e6:	4603      	mov	r3, r0
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	f107 0108 	add.w	r1, r7, #8
 80026ee:	230a      	movs	r3, #10
 80026f0:	48aa      	ldr	r0, [pc, #680]	; (800299c <printRadioSettings+0x2e8>)
 80026f2:	f7ff f963 	bl	80019bc <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7ff fbba 	bl	8001e70 <NRF24_read_register>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8002702:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d020      	beq.n	8002750 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800270e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <printRadioSettings+0x7e>
 800271a:	f107 0308 	add.w	r3, r7, #8
 800271e:	4aa0      	ldr	r2, [pc, #640]	; (80029a0 <printRadioSettings+0x2ec>)
 8002720:	461c      	mov	r4, r3
 8002722:	4615      	mov	r5, r2
 8002724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002728:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800272c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002730:	e017      	b.n	8002762 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8002732:	f107 0308 	add.w	r3, r7, #8
 8002736:	4a9b      	ldr	r2, [pc, #620]	; (80029a4 <printRadioSettings+0x2f0>)
 8002738:	461c      	mov	r4, r3
 800273a:	4615      	mov	r5, r2
 800273c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800273e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002740:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002744:	c403      	stmia	r4!, {r0, r1}
 8002746:	8022      	strh	r2, [r4, #0]
 8002748:	3402      	adds	r4, #2
 800274a:	0c13      	lsrs	r3, r2, #16
 800274c:	7023      	strb	r3, [r4, #0]
 800274e:	e008      	b.n	8002762 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8002750:	f107 0308 	add.w	r3, r7, #8
 8002754:	4a94      	ldr	r2, [pc, #592]	; (80029a8 <printRadioSettings+0x2f4>)
 8002756:	461c      	mov	r4, r3
 8002758:	4615      	mov	r5, r2
 800275a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800275e:	682b      	ldr	r3, [r5, #0]
 8002760:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002762:	f107 0308 	add.w	r3, r7, #8
 8002766:	4618      	mov	r0, r3
 8002768:	f7fd fcf0 	bl	800014c <strlen>
 800276c:	4603      	mov	r3, r0
 800276e:	b29a      	uxth	r2, r3
 8002770:	f107 0108 	add.w	r1, r7, #8
 8002774:	230a      	movs	r3, #10
 8002776:	4889      	ldr	r0, [pc, #548]	; (800299c <printRadioSettings+0x2e8>)
 8002778:	f7ff f920 	bl	80019bc <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800277c:	2001      	movs	r0, #1
 800277e:	f7ff fb77 	bl	8001e70 <NRF24_read_register>
 8002782:	4603      	mov	r3, r0
 8002784:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002788:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800278c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002790:	2b00      	cmp	r3, #0
 8002792:	bfcc      	ite	gt
 8002794:	2301      	movgt	r3, #1
 8002796:	2300      	movle	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800279c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80027a0:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bfcc      	ite	gt
 80027a8:	2301      	movgt	r3, #1
 80027aa:	2300      	movle	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80027b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80027b4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bfcc      	ite	gt
 80027bc:	2301      	movgt	r3, #1
 80027be:	2300      	movle	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80027c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80027c8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	bfcc      	ite	gt
 80027d0:	2301      	movgt	r3, #1
 80027d2:	2300      	movle	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80027d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80027dc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bfcc      	ite	gt
 80027e4:	2301      	movgt	r3, #1
 80027e6:	2300      	movle	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80027ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80027f0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bfcc      	ite	gt
 80027f8:	2301      	movgt	r3, #1
 80027fa:	2300      	movle	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	f107 0008 	add.w	r0, r7, #8
 8002802:	9303      	str	r3, [sp, #12]
 8002804:	9402      	str	r4, [sp, #8]
 8002806:	9101      	str	r1, [sp, #4]
 8002808:	9200      	str	r2, [sp, #0]
 800280a:	4633      	mov	r3, r6
 800280c:	462a      	mov	r2, r5
 800280e:	4967      	ldr	r1, [pc, #412]	; (80029ac <printRadioSettings+0x2f8>)
 8002810:	f000 fff6 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002814:	f107 0308 	add.w	r3, r7, #8
 8002818:	4618      	mov	r0, r3
 800281a:	f7fd fc97 	bl	800014c <strlen>
 800281e:	4603      	mov	r3, r0
 8002820:	b29a      	uxth	r2, r3
 8002822:	f107 0108 	add.w	r1, r7, #8
 8002826:	230a      	movs	r3, #10
 8002828:	485c      	ldr	r0, [pc, #368]	; (800299c <printRadioSettings+0x2e8>)
 800282a:	f7ff f8c7 	bl	80019bc <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800282e:	2002      	movs	r0, #2
 8002830:	f7ff fb1e 	bl	8001e70 <NRF24_read_register>
 8002834:	4603      	mov	r3, r0
 8002836:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800283a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800283e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002842:	2b00      	cmp	r3, #0
 8002844:	bfcc      	ite	gt
 8002846:	2301      	movgt	r3, #1
 8002848:	2300      	movle	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800284e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002852:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002856:	2b00      	cmp	r3, #0
 8002858:	bfcc      	ite	gt
 800285a:	2301      	movgt	r3, #1
 800285c:	2300      	movle	r3, #0
 800285e:	b2db      	uxtb	r3, r3
 8002860:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002862:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002866:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800286a:	2b00      	cmp	r3, #0
 800286c:	bfcc      	ite	gt
 800286e:	2301      	movgt	r3, #1
 8002870:	2300      	movle	r3, #0
 8002872:	b2db      	uxtb	r3, r3
 8002874:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002876:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800287a:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800287e:	2b00      	cmp	r3, #0
 8002880:	bfcc      	ite	gt
 8002882:	2301      	movgt	r3, #1
 8002884:	2300      	movle	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800288a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800288e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002892:	2b00      	cmp	r3, #0
 8002894:	bfcc      	ite	gt
 8002896:	2301      	movgt	r3, #1
 8002898:	2300      	movle	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800289e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80028a2:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	bfcc      	ite	gt
 80028aa:	2301      	movgt	r3, #1
 80028ac:	2300      	movle	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f107 0008 	add.w	r0, r7, #8
 80028b4:	9303      	str	r3, [sp, #12]
 80028b6:	9402      	str	r4, [sp, #8]
 80028b8:	9101      	str	r1, [sp, #4]
 80028ba:	9200      	str	r2, [sp, #0]
 80028bc:	4633      	mov	r3, r6
 80028be:	462a      	mov	r2, r5
 80028c0:	493b      	ldr	r1, [pc, #236]	; (80029b0 <printRadioSettings+0x2fc>)
 80028c2:	f000 ff9d 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80028c6:	f107 0308 	add.w	r3, r7, #8
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fc3e 	bl	800014c <strlen>
 80028d0:	4603      	mov	r3, r0
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	f107 0108 	add.w	r1, r7, #8
 80028d8:	230a      	movs	r3, #10
 80028da:	4830      	ldr	r0, [pc, #192]	; (800299c <printRadioSettings+0x2e8>)
 80028dc:	f7ff f86e 	bl	80019bc <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80028e0:	2003      	movs	r0, #3
 80028e2:	f7ff fac5 	bl	8001e70 <NRF24_read_register>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80028f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80028f4:	3302      	adds	r3, #2
 80028f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80028fa:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80028fe:	f107 0308 	add.w	r3, r7, #8
 8002902:	492c      	ldr	r1, [pc, #176]	; (80029b4 <printRadioSettings+0x300>)
 8002904:	4618      	mov	r0, r3
 8002906:	f000 ff7b 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800290a:	f107 0308 	add.w	r3, r7, #8
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fc1c 	bl	800014c <strlen>
 8002914:	4603      	mov	r3, r0
 8002916:	b29a      	uxth	r2, r3
 8002918:	f107 0108 	add.w	r1, r7, #8
 800291c:	230a      	movs	r3, #10
 800291e:	481f      	ldr	r0, [pc, #124]	; (800299c <printRadioSettings+0x2e8>)
 8002920:	f7ff f84c 	bl	80019bc <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8002924:	2005      	movs	r0, #5
 8002926:	f7ff faa3 	bl	8001e70 <NRF24_read_register>
 800292a:	4603      	mov	r3, r0
 800292c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8002930:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002934:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002938:	f107 0308 	add.w	r3, r7, #8
 800293c:	491e      	ldr	r1, [pc, #120]	; (80029b8 <printRadioSettings+0x304>)
 800293e:	4618      	mov	r0, r3
 8002940:	f000 ff5e 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002944:	f107 0308 	add.w	r3, r7, #8
 8002948:	4618      	mov	r0, r3
 800294a:	f7fd fbff 	bl	800014c <strlen>
 800294e:	4603      	mov	r3, r0
 8002950:	b29a      	uxth	r2, r3
 8002952:	f107 0108 	add.w	r1, r7, #8
 8002956:	230a      	movs	r3, #10
 8002958:	4810      	ldr	r0, [pc, #64]	; (800299c <printRadioSettings+0x2e8>)
 800295a:	f7ff f82f 	bl	80019bc <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 800295e:	2006      	movs	r0, #6
 8002960:	f7ff fa86 	bl	8001e70 <NRF24_read_register>
 8002964:	4603      	mov	r3, r0
 8002966:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800296a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d024      	beq.n	80029c0 <printRadioSettings+0x30c>
 8002976:	f107 0308 	add.w	r3, r7, #8
 800297a:	4a10      	ldr	r2, [pc, #64]	; (80029bc <printRadioSettings+0x308>)
 800297c:	461c      	mov	r4, r3
 800297e:	4615      	mov	r5, r2
 8002980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002984:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002988:	6020      	str	r0, [r4, #0]
 800298a:	3404      	adds	r4, #4
 800298c:	8021      	strh	r1, [r4, #0]
 800298e:	3402      	adds	r4, #2
 8002990:	0c0b      	lsrs	r3, r1, #16
 8002992:	7023      	strb	r3, [r4, #0]
 8002994:	e023      	b.n	80029de <printRadioSettings+0x32a>
 8002996:	bf00      	nop
 8002998:	0800406c 	.word	0x0800406c
 800299c:	2000011c 	.word	0x2000011c
 80029a0:	080040a0 	.word	0x080040a0
 80029a4:	080040bc 	.word	0x080040bc
 80029a8:	080040d8 	.word	0x080040d8
 80029ac:	080040ec 	.word	0x080040ec
 80029b0:	08004130 	.word	0x08004130
 80029b4:	0800417c 	.word	0x0800417c
 80029b8:	08004198 	.word	0x08004198
 80029bc:	080041ac 	.word	0x080041ac
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80029c0:	f107 0308 	add.w	r3, r7, #8
 80029c4:	4a29      	ldr	r2, [pc, #164]	; (8002a6c <printRadioSettings+0x3b8>)
 80029c6:	461c      	mov	r4, r3
 80029c8:	4615      	mov	r5, r2
 80029ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029d2:	6020      	str	r0, [r4, #0]
 80029d4:	3404      	adds	r4, #4
 80029d6:	8021      	strh	r1, [r4, #0]
 80029d8:	3402      	adds	r4, #2
 80029da:	0c0b      	lsrs	r3, r1, #16
 80029dc:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80029de:	f107 0308 	add.w	r3, r7, #8
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fbb2 	bl	800014c <strlen>
 80029e8:	4603      	mov	r3, r0
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	f107 0108 	add.w	r1, r7, #8
 80029f0:	230a      	movs	r3, #10
 80029f2:	481f      	ldr	r0, [pc, #124]	; (8002a70 <printRadioSettings+0x3bc>)
 80029f4:	f7fe ffe2 	bl	80019bc <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80029f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80029fc:	f003 0306 	and.w	r3, r3, #6
 8002a00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8002a04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a08:	085b      	lsrs	r3, r3, #1
 8002a0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8002a0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d109      	bne.n	8002a2a <printRadioSettings+0x376>
 8002a16:	f107 0308 	add.w	r3, r7, #8
 8002a1a:	4a16      	ldr	r2, [pc, #88]	; (8002a74 <printRadioSettings+0x3c0>)
 8002a1c:	461c      	mov	r4, r3
 8002a1e:	4615      	mov	r5, r2
 8002a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a24:	682b      	ldr	r3, [r5, #0]
 8002a26:	6023      	str	r3, [r4, #0]
 8002a28:	e037      	b.n	8002a9a <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8002a2a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d109      	bne.n	8002a46 <printRadioSettings+0x392>
 8002a32:	f107 0308 	add.w	r3, r7, #8
 8002a36:	4a10      	ldr	r2, [pc, #64]	; (8002a78 <printRadioSettings+0x3c4>)
 8002a38:	461c      	mov	r4, r3
 8002a3a:	4615      	mov	r5, r2
 8002a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a40:	682b      	ldr	r3, [r5, #0]
 8002a42:	6023      	str	r3, [r4, #0]
 8002a44:	e029      	b.n	8002a9a <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8002a46:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d118      	bne.n	8002a80 <printRadioSettings+0x3cc>
 8002a4e:	f107 0308 	add.w	r3, r7, #8
 8002a52:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <printRadioSettings+0x3c8>)
 8002a54:	461c      	mov	r4, r3
 8002a56:	4615      	mov	r5, r2
 8002a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a5c:	682b      	ldr	r3, [r5, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	8022      	strh	r2, [r4, #0]
 8002a62:	3402      	adds	r4, #2
 8002a64:	0c1b      	lsrs	r3, r3, #16
 8002a66:	7023      	strb	r3, [r4, #0]
 8002a68:	e017      	b.n	8002a9a <printRadioSettings+0x3e6>
 8002a6a:	bf00      	nop
 8002a6c:	080041c4 	.word	0x080041c4
 8002a70:	2000011c 	.word	0x2000011c
 8002a74:	080041dc 	.word	0x080041dc
 8002a78:	080041f0 	.word	0x080041f0
 8002a7c:	08004204 	.word	0x08004204
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8002a80:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d108      	bne.n	8002a9a <printRadioSettings+0x3e6>
 8002a88:	f107 0308 	add.w	r3, r7, #8
 8002a8c:	4ad7      	ldr	r2, [pc, #860]	; (8002dec <printRadioSettings+0x738>)
 8002a8e:	461c      	mov	r4, r3
 8002a90:	4615      	mov	r5, r2
 8002a92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a96:	682b      	ldr	r3, [r5, #0]
 8002a98:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a9a:	f107 0308 	add.w	r3, r7, #8
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fd fb54 	bl	800014c <strlen>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	f107 0108 	add.w	r1, r7, #8
 8002aac:	230a      	movs	r3, #10
 8002aae:	48d0      	ldr	r0, [pc, #832]	; (8002df0 <printRadioSettings+0x73c>)
 8002ab0:	f7fe ff84 	bl	80019bc <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8002ab4:	463b      	mov	r3, r7
 8002ab6:	2205      	movs	r2, #5
 8002ab8:	4619      	mov	r1, r3
 8002aba:	200a      	movs	r0, #10
 8002abc:	f7ff fa00 	bl	8001ec0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002ac0:	793b      	ldrb	r3, [r7, #4]
 8002ac2:	461c      	mov	r4, r3
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	461d      	mov	r5, r3
 8002ac8:	78bb      	ldrb	r3, [r7, #2]
 8002aca:	787a      	ldrb	r2, [r7, #1]
 8002acc:	7839      	ldrb	r1, [r7, #0]
 8002ace:	f107 0008 	add.w	r0, r7, #8
 8002ad2:	9102      	str	r1, [sp, #8]
 8002ad4:	9201      	str	r2, [sp, #4]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	462b      	mov	r3, r5
 8002ada:	4622      	mov	r2, r4
 8002adc:	49c5      	ldr	r1, [pc, #788]	; (8002df4 <printRadioSettings+0x740>)
 8002ade:	f000 fe8f 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002ae2:	f107 0308 	add.w	r3, r7, #8
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fd fb30 	bl	800014c <strlen>
 8002aec:	4603      	mov	r3, r0
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	f107 0108 	add.w	r1, r7, #8
 8002af4:	230a      	movs	r3, #10
 8002af6:	48be      	ldr	r0, [pc, #760]	; (8002df0 <printRadioSettings+0x73c>)
 8002af8:	f7fe ff60 	bl	80019bc <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8002afc:	463b      	mov	r3, r7
 8002afe:	2205      	movs	r2, #5
 8002b00:	4619      	mov	r1, r3
 8002b02:	200b      	movs	r0, #11
 8002b04:	f7ff f9dc 	bl	8001ec0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002b08:	793b      	ldrb	r3, [r7, #4]
 8002b0a:	461c      	mov	r4, r3
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	461d      	mov	r5, r3
 8002b10:	78bb      	ldrb	r3, [r7, #2]
 8002b12:	787a      	ldrb	r2, [r7, #1]
 8002b14:	7839      	ldrb	r1, [r7, #0]
 8002b16:	f107 0008 	add.w	r0, r7, #8
 8002b1a:	9102      	str	r1, [sp, #8]
 8002b1c:	9201      	str	r2, [sp, #4]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	462b      	mov	r3, r5
 8002b22:	4622      	mov	r2, r4
 8002b24:	49b4      	ldr	r1, [pc, #720]	; (8002df8 <printRadioSettings+0x744>)
 8002b26:	f000 fe6b 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b2a:	f107 0308 	add.w	r3, r7, #8
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fb0c 	bl	800014c <strlen>
 8002b34:	4603      	mov	r3, r0
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	f107 0108 	add.w	r1, r7, #8
 8002b3c:	230a      	movs	r3, #10
 8002b3e:	48ac      	ldr	r0, [pc, #688]	; (8002df0 <printRadioSettings+0x73c>)
 8002b40:	f7fe ff3c 	bl	80019bc <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8002b44:	463b      	mov	r3, r7
 8002b46:	2201      	movs	r2, #1
 8002b48:	4619      	mov	r1, r3
 8002b4a:	200c      	movs	r0, #12
 8002b4c:	f7ff f9b8 	bl	8001ec0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002b50:	783b      	ldrb	r3, [r7, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	f107 0308 	add.w	r3, r7, #8
 8002b58:	49a8      	ldr	r1, [pc, #672]	; (8002dfc <printRadioSettings+0x748>)
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fe50 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b60:	f107 0308 	add.w	r3, r7, #8
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd faf1 	bl	800014c <strlen>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	f107 0108 	add.w	r1, r7, #8
 8002b72:	230a      	movs	r3, #10
 8002b74:	489e      	ldr	r0, [pc, #632]	; (8002df0 <printRadioSettings+0x73c>)
 8002b76:	f7fe ff21 	bl	80019bc <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8002b7a:	463b      	mov	r3, r7
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	4619      	mov	r1, r3
 8002b80:	200d      	movs	r0, #13
 8002b82:	f7ff f99d 	bl	8001ec0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002b86:	783b      	ldrb	r3, [r7, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	f107 0308 	add.w	r3, r7, #8
 8002b8e:	499c      	ldr	r1, [pc, #624]	; (8002e00 <printRadioSettings+0x74c>)
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fe35 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b96:	f107 0308 	add.w	r3, r7, #8
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd fad6 	bl	800014c <strlen>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	f107 0108 	add.w	r1, r7, #8
 8002ba8:	230a      	movs	r3, #10
 8002baa:	4891      	ldr	r0, [pc, #580]	; (8002df0 <printRadioSettings+0x73c>)
 8002bac:	f7fe ff06 	bl	80019bc <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8002bb0:	463b      	mov	r3, r7
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	200e      	movs	r0, #14
 8002bb8:	f7ff f982 	bl	8001ec0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002bbc:	783b      	ldrb	r3, [r7, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f107 0308 	add.w	r3, r7, #8
 8002bc4:	498f      	ldr	r1, [pc, #572]	; (8002e04 <printRadioSettings+0x750>)
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fe1a 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002bcc:	f107 0308 	add.w	r3, r7, #8
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd fabb 	bl	800014c <strlen>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	f107 0108 	add.w	r1, r7, #8
 8002bde:	230a      	movs	r3, #10
 8002be0:	4883      	ldr	r0, [pc, #524]	; (8002df0 <printRadioSettings+0x73c>)
 8002be2:	f7fe feeb 	bl	80019bc <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8002be6:	463b      	mov	r3, r7
 8002be8:	2201      	movs	r2, #1
 8002bea:	4619      	mov	r1, r3
 8002bec:	200f      	movs	r0, #15
 8002bee:	f7ff f967 	bl	8001ec0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002bf2:	783b      	ldrb	r3, [r7, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f107 0308 	add.w	r3, r7, #8
 8002bfa:	4983      	ldr	r1, [pc, #524]	; (8002e08 <printRadioSettings+0x754>)
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fdff 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002c02:	f107 0308 	add.w	r3, r7, #8
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fd faa0 	bl	800014c <strlen>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	f107 0108 	add.w	r1, r7, #8
 8002c14:	230a      	movs	r3, #10
 8002c16:	4876      	ldr	r0, [pc, #472]	; (8002df0 <printRadioSettings+0x73c>)
 8002c18:	f7fe fed0 	bl	80019bc <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8002c1c:	463b      	mov	r3, r7
 8002c1e:	2205      	movs	r2, #5
 8002c20:	4619      	mov	r1, r3
 8002c22:	2010      	movs	r0, #16
 8002c24:	f7ff f94c 	bl	8001ec0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002c28:	793b      	ldrb	r3, [r7, #4]
 8002c2a:	461c      	mov	r4, r3
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	461d      	mov	r5, r3
 8002c30:	78bb      	ldrb	r3, [r7, #2]
 8002c32:	787a      	ldrb	r2, [r7, #1]
 8002c34:	7839      	ldrb	r1, [r7, #0]
 8002c36:	f107 0008 	add.w	r0, r7, #8
 8002c3a:	9102      	str	r1, [sp, #8]
 8002c3c:	9201      	str	r2, [sp, #4]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	462b      	mov	r3, r5
 8002c42:	4622      	mov	r2, r4
 8002c44:	4971      	ldr	r1, [pc, #452]	; (8002e0c <printRadioSettings+0x758>)
 8002c46:	f000 fddb 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002c4a:	f107 0308 	add.w	r3, r7, #8
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd fa7c 	bl	800014c <strlen>
 8002c54:	4603      	mov	r3, r0
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	f107 0108 	add.w	r1, r7, #8
 8002c5c:	230a      	movs	r3, #10
 8002c5e:	4864      	ldr	r0, [pc, #400]	; (8002df0 <printRadioSettings+0x73c>)
 8002c60:	f7fe feac 	bl	80019bc <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8002c64:	2011      	movs	r0, #17
 8002c66:	f7ff f903 	bl	8001e70 <NRF24_read_register>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002c70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002c74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c78:	f107 0308 	add.w	r3, r7, #8
 8002c7c:	4964      	ldr	r1, [pc, #400]	; (8002e10 <printRadioSettings+0x75c>)
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 fdbe 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002c84:	f107 0308 	add.w	r3, r7, #8
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fd fa5f 	bl	800014c <strlen>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	f107 0108 	add.w	r1, r7, #8
 8002c96:	230a      	movs	r3, #10
 8002c98:	4855      	ldr	r0, [pc, #340]	; (8002df0 <printRadioSettings+0x73c>)
 8002c9a:	f7fe fe8f 	bl	80019bc <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8002c9e:	2012      	movs	r0, #18
 8002ca0:	f7ff f8e6 	bl	8001e70 <NRF24_read_register>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002caa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002cae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cb2:	f107 0308 	add.w	r3, r7, #8
 8002cb6:	4957      	ldr	r1, [pc, #348]	; (8002e14 <printRadioSettings+0x760>)
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fda1 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002cbe:	f107 0308 	add.w	r3, r7, #8
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fa42 	bl	800014c <strlen>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	f107 0108 	add.w	r1, r7, #8
 8002cd0:	230a      	movs	r3, #10
 8002cd2:	4847      	ldr	r0, [pc, #284]	; (8002df0 <printRadioSettings+0x73c>)
 8002cd4:	f7fe fe72 	bl	80019bc <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8002cd8:	2013      	movs	r0, #19
 8002cda:	f7ff f8c9 	bl	8001e70 <NRF24_read_register>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002ce4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002ce8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cec:	f107 0308 	add.w	r3, r7, #8
 8002cf0:	4949      	ldr	r1, [pc, #292]	; (8002e18 <printRadioSettings+0x764>)
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fd84 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002cf8:	f107 0308 	add.w	r3, r7, #8
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fd fa25 	bl	800014c <strlen>
 8002d02:	4603      	mov	r3, r0
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	f107 0108 	add.w	r1, r7, #8
 8002d0a:	230a      	movs	r3, #10
 8002d0c:	4838      	ldr	r0, [pc, #224]	; (8002df0 <printRadioSettings+0x73c>)
 8002d0e:	f7fe fe55 	bl	80019bc <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8002d12:	2014      	movs	r0, #20
 8002d14:	f7ff f8ac 	bl	8001e70 <NRF24_read_register>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002d1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d26:	f107 0308 	add.w	r3, r7, #8
 8002d2a:	493c      	ldr	r1, [pc, #240]	; (8002e1c <printRadioSettings+0x768>)
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 fd67 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002d32:	f107 0308 	add.w	r3, r7, #8
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fd fa08 	bl	800014c <strlen>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	f107 0108 	add.w	r1, r7, #8
 8002d44:	230a      	movs	r3, #10
 8002d46:	482a      	ldr	r0, [pc, #168]	; (8002df0 <printRadioSettings+0x73c>)
 8002d48:	f7fe fe38 	bl	80019bc <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8002d4c:	2015      	movs	r0, #21
 8002d4e:	f7ff f88f 	bl	8001e70 <NRF24_read_register>
 8002d52:	4603      	mov	r3, r0
 8002d54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002d58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002d5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d60:	f107 0308 	add.w	r3, r7, #8
 8002d64:	492e      	ldr	r1, [pc, #184]	; (8002e20 <printRadioSettings+0x76c>)
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fd4a 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002d6c:	f107 0308 	add.w	r3, r7, #8
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd f9eb 	bl	800014c <strlen>
 8002d76:	4603      	mov	r3, r0
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	f107 0108 	add.w	r1, r7, #8
 8002d7e:	230a      	movs	r3, #10
 8002d80:	481b      	ldr	r0, [pc, #108]	; (8002df0 <printRadioSettings+0x73c>)
 8002d82:	f7fe fe1b 	bl	80019bc <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8002d86:	2016      	movs	r0, #22
 8002d88:	f7ff f872 	bl	8001e70 <NRF24_read_register>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002d92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002d96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d9a:	f107 0308 	add.w	r3, r7, #8
 8002d9e:	4921      	ldr	r1, [pc, #132]	; (8002e24 <printRadioSettings+0x770>)
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fd2d 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002da6:	f107 0308 	add.w	r3, r7, #8
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd f9ce 	bl	800014c <strlen>
 8002db0:	4603      	mov	r3, r0
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	f107 0108 	add.w	r1, r7, #8
 8002db8:	230a      	movs	r3, #10
 8002dba:	480d      	ldr	r0, [pc, #52]	; (8002df0 <printRadioSettings+0x73c>)
 8002dbc:	f7fe fdfe 	bl	80019bc <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8002dc0:	201c      	movs	r0, #28
 8002dc2:	f7ff f855 	bl	8001e70 <NRF24_read_register>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002dcc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002dd0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bfcc      	ite	gt
 8002dd8:	2301      	movgt	r3, #1
 8002dda:	2300      	movle	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002de0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	e01e      	b.n	8002e28 <printRadioSettings+0x774>
 8002dea:	bf00      	nop
 8002dec:	08004218 	.word	0x08004218
 8002df0:	2000011c 	.word	0x2000011c
 8002df4:	0800422c 	.word	0x0800422c
 8002df8:	0800425c 	.word	0x0800425c
 8002dfc:	0800428c 	.word	0x0800428c
 8002e00:	080042b4 	.word	0x080042b4
 8002e04:	080042dc 	.word	0x080042dc
 8002e08:	08004304 	.word	0x08004304
 8002e0c:	0800432c 	.word	0x0800432c
 8002e10:	08004358 	.word	0x08004358
 8002e14:	08004374 	.word	0x08004374
 8002e18:	08004390 	.word	0x08004390
 8002e1c:	080043ac 	.word	0x080043ac
 8002e20:	080043c8 	.word	0x080043c8
 8002e24:	080043e4 	.word	0x080043e4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bfcc      	ite	gt
 8002e2c:	2301      	movgt	r3, #1
 8002e2e:	2300      	movle	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002e34:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002e38:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bfcc      	ite	gt
 8002e40:	2301      	movgt	r3, #1
 8002e42:	2300      	movle	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002e48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002e4c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bfcc      	ite	gt
 8002e54:	2301      	movgt	r3, #1
 8002e56:	2300      	movle	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002e5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002e60:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bfcc      	ite	gt
 8002e68:	2301      	movgt	r3, #1
 8002e6a:	2300      	movle	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002e70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002e74:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bfcc      	ite	gt
 8002e7c:	2301      	movgt	r3, #1
 8002e7e:	2300      	movle	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f107 0008 	add.w	r0, r7, #8
 8002e86:	9303      	str	r3, [sp, #12]
 8002e88:	9402      	str	r4, [sp, #8]
 8002e8a:	9101      	str	r1, [sp, #4]
 8002e8c:	9200      	str	r2, [sp, #0]
 8002e8e:	4633      	mov	r3, r6
 8002e90:	462a      	mov	r2, r5
 8002e92:	494a      	ldr	r1, [pc, #296]	; (8002fbc <printRadioSettings+0x908>)
 8002e94:	f000 fcb4 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fd f955 	bl	800014c <strlen>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	f107 0108 	add.w	r1, r7, #8
 8002eaa:	230a      	movs	r3, #10
 8002eac:	4844      	ldr	r0, [pc, #272]	; (8002fc0 <printRadioSettings+0x90c>)
 8002eae:	f7fe fd85 	bl	80019bc <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8002eb2:	201d      	movs	r0, #29
 8002eb4:	f7fe ffdc 	bl	8001e70 <NRF24_read_register>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8002ebe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <printRadioSettings+0x830>
 8002eca:	f107 0308 	add.w	r3, r7, #8
 8002ece:	4a3d      	ldr	r2, [pc, #244]	; (8002fc4 <printRadioSettings+0x910>)
 8002ed0:	461c      	mov	r4, r3
 8002ed2:	4615      	mov	r5, r2
 8002ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ed8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002edc:	6020      	str	r0, [r4, #0]
 8002ede:	3404      	adds	r4, #4
 8002ee0:	8021      	strh	r1, [r4, #0]
 8002ee2:	e00e      	b.n	8002f02 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8002ee4:	f107 0308 	add.w	r3, r7, #8
 8002ee8:	4a37      	ldr	r2, [pc, #220]	; (8002fc8 <printRadioSettings+0x914>)
 8002eea:	461c      	mov	r4, r3
 8002eec:	4615      	mov	r5, r2
 8002eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ef2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002ef6:	6020      	str	r0, [r4, #0]
 8002ef8:	3404      	adds	r4, #4
 8002efa:	8021      	strh	r1, [r4, #0]
 8002efc:	3402      	adds	r4, #2
 8002efe:	0c0b      	lsrs	r3, r1, #16
 8002f00:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002f02:	f107 0308 	add.w	r3, r7, #8
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd f920 	bl	800014c <strlen>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	f107 0108 	add.w	r1, r7, #8
 8002f14:	230a      	movs	r3, #10
 8002f16:	482a      	ldr	r0, [pc, #168]	; (8002fc0 <printRadioSettings+0x90c>)
 8002f18:	f7fe fd50 	bl	80019bc <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002f1c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00b      	beq.n	8002f40 <printRadioSettings+0x88c>
 8002f28:	f107 0308 	add.w	r3, r7, #8
 8002f2c:	4a27      	ldr	r2, [pc, #156]	; (8002fcc <printRadioSettings+0x918>)
 8002f2e:	461c      	mov	r4, r3
 8002f30:	4615      	mov	r5, r2
 8002f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f3a:	c403      	stmia	r4!, {r0, r1}
 8002f3c:	8022      	strh	r2, [r4, #0]
 8002f3e:	e00d      	b.n	8002f5c <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8002f40:	f107 0308 	add.w	r3, r7, #8
 8002f44:	4a22      	ldr	r2, [pc, #136]	; (8002fd0 <printRadioSettings+0x91c>)
 8002f46:	461c      	mov	r4, r3
 8002f48:	4615      	mov	r5, r2
 8002f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f52:	c403      	stmia	r4!, {r0, r1}
 8002f54:	8022      	strh	r2, [r4, #0]
 8002f56:	3402      	adds	r4, #2
 8002f58:	0c13      	lsrs	r3, r2, #16
 8002f5a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002f5c:	f107 0308 	add.w	r3, r7, #8
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fd f8f3 	bl	800014c <strlen>
 8002f66:	4603      	mov	r3, r0
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	f107 0108 	add.w	r1, r7, #8
 8002f6e:	230a      	movs	r3, #10
 8002f70:	4813      	ldr	r0, [pc, #76]	; (8002fc0 <printRadioSettings+0x90c>)
 8002f72:	f7fe fd23 	bl	80019bc <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002f76:	f107 0308 	add.w	r3, r7, #8
 8002f7a:	4a16      	ldr	r2, [pc, #88]	; (8002fd4 <printRadioSettings+0x920>)
 8002f7c:	461c      	mov	r4, r3
 8002f7e:	4615      	mov	r5, r2
 8002f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	8022      	strh	r2, [r4, #0]
 8002f92:	3402      	adds	r4, #2
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002f98:	f107 0308 	add.w	r3, r7, #8
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fd f8d5 	bl	800014c <strlen>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	f107 0108 	add.w	r1, r7, #8
 8002faa:	230a      	movs	r3, #10
 8002fac:	4804      	ldr	r0, [pc, #16]	; (8002fc0 <printRadioSettings+0x90c>)
 8002fae:	f7fe fd05 	bl	80019bc <HAL_UART_Transmit>
}
 8002fb2:	bf00      	nop
 8002fb4:	3774      	adds	r7, #116	; 0x74
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	08004400 	.word	0x08004400
 8002fc0:	2000011c 	.word	0x2000011c
 8002fc4:	0800444c 	.word	0x0800444c
 8002fc8:	08004464 	.word	0x08004464
 8002fcc:	0800447c 	.word	0x0800447c
 8002fd0:	08004498 	.word	0x08004498
 8002fd4:	0800406c 	.word	0x0800406c

08002fd8 <printStatusReg>:

//2. Print Status 
void printStatusReg(void)
{
 8002fd8:	b5b0      	push	{r4, r5, r7, lr}
 8002fda:	b09e      	sub	sp, #120	; 0x78
 8002fdc:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n-------------------------\r\n");
 8002fde:	463b      	mov	r3, r7
 8002fe0:	4a3b      	ldr	r2, [pc, #236]	; (80030d0 <printStatusReg+0xf8>)
 8002fe2:	461c      	mov	r4, r3
 8002fe4:	4615      	mov	r5, r2
 8002fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002fee:	c407      	stmia	r4!, {r0, r1, r2}
 8002ff0:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002ff2:	463b      	mov	r3, r7
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd f8a9 	bl	800014c <strlen>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	4639      	mov	r1, r7
 8003000:	230a      	movs	r3, #10
 8003002:	4834      	ldr	r0, [pc, #208]	; (80030d4 <printStatusReg+0xfc>)
 8003004:	f7fe fcda 	bl	80019bc <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x07);
 8003008:	2007      	movs	r0, #7
 800300a:	f7fe ff31 	bl	8001e70 <NRF24_read_register>
 800300e:	4603      	mov	r3, r0
 8003010:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	sprintf(uartTxBuf, "STATUS reg:\r\n		RX_DR:		%d\r\n		TX_DS:		%d\r\n		MAX_RT:		%d\r\n		RX_P_NO:	%d\r\n		TX_FULL:	%d\r\n",
	_BOOL(reg8Val&(1<<6)), _BOOL(reg8Val&(1<<5)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(3<<1)), _BOOL(reg8Val&(1<<0)));
 8003014:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003018:	f003 0340 	and.w	r3, r3, #64	; 0x40
	sprintf(uartTxBuf, "STATUS reg:\r\n		RX_DR:		%d\r\n		TX_DS:		%d\r\n		MAX_RT:		%d\r\n		RX_P_NO:	%d\r\n		TX_FULL:	%d\r\n",
 800301c:	2b00      	cmp	r3, #0
 800301e:	bfcc      	ite	gt
 8003020:	2301      	movgt	r3, #1
 8003022:	2300      	movle	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<6)), _BOOL(reg8Val&(1<<5)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(3<<1)), _BOOL(reg8Val&(1<<0)));
 8003028:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800302c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "STATUS reg:\r\n		RX_DR:		%d\r\n		TX_DS:		%d\r\n		MAX_RT:		%d\r\n		RX_P_NO:	%d\r\n		TX_FULL:	%d\r\n",
 8003030:	2b00      	cmp	r3, #0
 8003032:	bfcc      	ite	gt
 8003034:	2301      	movgt	r3, #1
 8003036:	2300      	movle	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<6)), _BOOL(reg8Val&(1<<5)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(3<<1)), _BOOL(reg8Val&(1<<0)));
 800303c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003040:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "STATUS reg:\r\n		RX_DR:		%d\r\n		TX_DS:		%d\r\n		MAX_RT:		%d\r\n		RX_P_NO:	%d\r\n		TX_FULL:	%d\r\n",
 8003044:	2b00      	cmp	r3, #0
 8003046:	bfcc      	ite	gt
 8003048:	2301      	movgt	r3, #1
 800304a:	2300      	movle	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<6)), _BOOL(reg8Val&(1<<5)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(3<<1)), _BOOL(reg8Val&(1<<0)));
 8003050:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003054:	f003 0306 	and.w	r3, r3, #6
	sprintf(uartTxBuf, "STATUS reg:\r\n		RX_DR:		%d\r\n		TX_DS:		%d\r\n		MAX_RT:		%d\r\n		RX_P_NO:	%d\r\n		TX_FULL:	%d\r\n",
 8003058:	2b00      	cmp	r3, #0
 800305a:	bfcc      	ite	gt
 800305c:	2301      	movgt	r3, #1
 800305e:	2300      	movle	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<6)), _BOOL(reg8Val&(1<<5)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(3<<1)), _BOOL(reg8Val&(1<<0)));
 8003064:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003068:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "STATUS reg:\r\n		RX_DR:		%d\r\n		TX_DS:		%d\r\n		MAX_RT:		%d\r\n		RX_P_NO:	%d\r\n		TX_FULL:	%d\r\n",
 800306c:	2b00      	cmp	r3, #0
 800306e:	bfcc      	ite	gt
 8003070:	2301      	movgt	r3, #1
 8003072:	2300      	movle	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	4638      	mov	r0, r7
 8003078:	9302      	str	r3, [sp, #8]
 800307a:	9101      	str	r1, [sp, #4]
 800307c:	9200      	str	r2, [sp, #0]
 800307e:	462b      	mov	r3, r5
 8003080:	4622      	mov	r2, r4
 8003082:	4915      	ldr	r1, [pc, #84]	; (80030d8 <printStatusReg+0x100>)
 8003084:	f000 fbbc 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003088:	463b      	mov	r3, r7
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd f85e 	bl	800014c <strlen>
 8003090:	4603      	mov	r3, r0
 8003092:	b29a      	uxth	r2, r3
 8003094:	4639      	mov	r1, r7
 8003096:	230a      	movs	r3, #10
 8003098:	480e      	ldr	r0, [pc, #56]	; (80030d4 <printStatusReg+0xfc>)
 800309a:	f7fe fc8f 	bl	80019bc <HAL_UART_Transmit>
	
	sprintf(uartTxBuf, "\r\n-------------------------\r\n");
 800309e:	463b      	mov	r3, r7
 80030a0:	4a0b      	ldr	r2, [pc, #44]	; (80030d0 <printStatusReg+0xf8>)
 80030a2:	461c      	mov	r4, r3
 80030a4:	4615      	mov	r5, r2
 80030a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80030ae:	c407      	stmia	r4!, {r0, r1, r2}
 80030b0:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80030b2:	463b      	mov	r3, r7
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fd f849 	bl	800014c <strlen>
 80030ba:	4603      	mov	r3, r0
 80030bc:	b29a      	uxth	r2, r3
 80030be:	4639      	mov	r1, r7
 80030c0:	230a      	movs	r3, #10
 80030c2:	4804      	ldr	r0, [pc, #16]	; (80030d4 <printStatusReg+0xfc>)
 80030c4:	f7fe fc7a 	bl	80019bc <HAL_UART_Transmit>
}
 80030c8:	bf00      	nop
 80030ca:	3768      	adds	r7, #104	; 0x68
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bdb0      	pop	{r4, r5, r7, pc}
 80030d0:	080044b4 	.word	0x080044b4
 80030d4:	2000011c 	.word	0x2000011c
 80030d8:	080044d4 	.word	0x080044d4

080030dc <printConfigReg>:
//3. Print Config 
void printConfigReg(void)
{
 80030dc:	b5b0      	push	{r4, r5, r7, lr}
 80030de:	b09a      	sub	sp, #104	; 0x68
 80030e0:	af00      	add	r7, sp, #0
	uint8_t reg8Val;
	char uartTxBuf[100];
	
	sprintf(uartTxBuf, "\r\n-------------------------\r\n");
 80030e2:	463b      	mov	r3, r7
 80030e4:	4a2a      	ldr	r2, [pc, #168]	; (8003190 <printConfigReg+0xb4>)
 80030e6:	461c      	mov	r4, r3
 80030e8:	4615      	mov	r5, r2
 80030ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80030f2:	c407      	stmia	r4!, {r0, r1, r2}
 80030f4:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80030f6:	463b      	mov	r3, r7
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fd f827 	bl	800014c <strlen>
 80030fe:	4603      	mov	r3, r0
 8003100:	b29a      	uxth	r2, r3
 8003102:	4639      	mov	r1, r7
 8003104:	230a      	movs	r3, #10
 8003106:	4823      	ldr	r0, [pc, #140]	; (8003194 <printConfigReg+0xb8>)
 8003108:	f7fe fc58 	bl	80019bc <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x00);
 800310c:	2000      	movs	r0, #0
 800310e:	f7fe feaf 	bl	8001e70 <NRF24_read_register>
 8003112:	4603      	mov	r3, r0
 8003114:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	sprintf(uartTxBuf, "CONFIG reg:\r\n		PWR_UP:		%d\r\n		PRIM_RX:	%d\r\n",
	_BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<0)));
 8003118:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800311c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "CONFIG reg:\r\n		PWR_UP:		%d\r\n		PRIM_RX:	%d\r\n",
 8003120:	2b00      	cmp	r3, #0
 8003122:	bfcc      	ite	gt
 8003124:	2301      	movgt	r3, #1
 8003126:	2300      	movle	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<0)));
 800312c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003130:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "CONFIG reg:\r\n		PWR_UP:		%d\r\n		PRIM_RX:	%d\r\n",
 8003134:	2b00      	cmp	r3, #0
 8003136:	bfcc      	ite	gt
 8003138:	2301      	movgt	r3, #1
 800313a:	2300      	movle	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	4638      	mov	r0, r7
 8003140:	4915      	ldr	r1, [pc, #84]	; (8003198 <printConfigReg+0xbc>)
 8003142:	f000 fb5d 	bl	8003800 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003146:	463b      	mov	r3, r7
 8003148:	4618      	mov	r0, r3
 800314a:	f7fc ffff 	bl	800014c <strlen>
 800314e:	4603      	mov	r3, r0
 8003150:	b29a      	uxth	r2, r3
 8003152:	4639      	mov	r1, r7
 8003154:	230a      	movs	r3, #10
 8003156:	480f      	ldr	r0, [pc, #60]	; (8003194 <printConfigReg+0xb8>)
 8003158:	f7fe fc30 	bl	80019bc <HAL_UART_Transmit>
	
	sprintf(uartTxBuf, "\r\n-------------------------\r\n");
 800315c:	463b      	mov	r3, r7
 800315e:	4a0c      	ldr	r2, [pc, #48]	; (8003190 <printConfigReg+0xb4>)
 8003160:	461c      	mov	r4, r3
 8003162:	4615      	mov	r5, r2
 8003164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003168:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800316c:	c407      	stmia	r4!, {r0, r1, r2}
 800316e:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003170:	463b      	mov	r3, r7
 8003172:	4618      	mov	r0, r3
 8003174:	f7fc ffea 	bl	800014c <strlen>
 8003178:	4603      	mov	r3, r0
 800317a:	b29a      	uxth	r2, r3
 800317c:	4639      	mov	r1, r7
 800317e:	230a      	movs	r3, #10
 8003180:	4804      	ldr	r0, [pc, #16]	; (8003194 <printConfigReg+0xb8>)
 8003182:	f7fe fc1b 	bl	80019bc <HAL_UART_Transmit>
}
 8003186:	bf00      	nop
 8003188:	3768      	adds	r7, #104	; 0x68
 800318a:	46bd      	mov	sp, r7
 800318c:	bdb0      	pop	{r4, r5, r7, pc}
 800318e:	bf00      	nop
 8003190:	080044b4 	.word	0x080044b4
 8003194:	2000011c 	.word	0x2000011c
 8003198:	0800452c 	.word	0x0800452c

0800319c <nrf24_DebugUART_Init>:

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 800319c:	b084      	sub	sp, #16
 800319e:	b4b0      	push	{r4, r5, r7}
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	f107 040c 	add.w	r4, r7, #12
 80031a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <nrf24_DebugUART_Init+0x34>)
 80031ac:	461c      	mov	r4, r3
 80031ae:	f107 050c 	add.w	r5, r7, #12
 80031b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80031c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80031c6:	bf00      	nop
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bcb0      	pop	{r4, r5, r7}
 80031cc:	b004      	add	sp, #16
 80031ce:	4770      	bx	lr
 80031d0:	2000011c 	.word	0x2000011c

080031d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d6:	b097      	sub	sp, #92	; 0x5c
 80031d8:	af16      	add	r7, sp, #88	; 0x58
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031da:	f7fc ffbf 	bl	800015c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031de:	f000 f85d 	bl	800329c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031e2:	f000 f901 	bl	80033e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80031e6:	f000 f89f 	bl	8003328 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80031ea:	f000 f8d3 	bl	8003394 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  NRF24_begin(GPIOA,GPIO_PIN_3,GPIO_PIN_4, hspi1); //CS CE
 80031ee:	4c24      	ldr	r4, [pc, #144]	; (8003280 <main+0xac>)
 80031f0:	4668      	mov	r0, sp
 80031f2:	1d23      	adds	r3, r4, #4
 80031f4:	2254      	movs	r2, #84	; 0x54
 80031f6:	4619      	mov	r1, r3
 80031f8:	f000 faee 	bl	80037d8 <memcpy>
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	2210      	movs	r2, #16
 8003200:	2108      	movs	r1, #8
 8003202:	4820      	ldr	r0, [pc, #128]	; (8003284 <main+0xb0>)
 8003204:	f7fe ff0e 	bl	8002024 <NRF24_begin>
  nrf24_DebugUART_Init(huart1);
 8003208:	4e1f      	ldr	r6, [pc, #124]	; (8003288 <main+0xb4>)
 800320a:	466d      	mov	r5, sp
 800320c:	f106 0410 	add.w	r4, r6, #16
 8003210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003218:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800321c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003220:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003224:	f7ff ffba 	bl	800319c <nrf24_DebugUART_Init>


  printRadioSettings();
 8003228:	f7ff fa44 	bl	80026b4 <printRadioSettings>
  //*** TRANSMIT - NO ACK ***//
  NRF24_stopListening();
 800322c:	f7fe ffda 	bl	80021e4 <NRF24_stopListening>
  NRF24_openWritingPipe(TxpipeAddrs);
 8003230:	4b16      	ldr	r3, [pc, #88]	; (800328c <main+0xb8>)
 8003232:	cb18      	ldmia	r3, {r3, r4}
 8003234:	4618      	mov	r0, r3
 8003236:	4621      	mov	r1, r4
 8003238:	f7ff f838 	bl	80022ac <NRF24_openWritingPipe>
  NRF24_setAutoAck(false);
 800323c:	2000      	movs	r0, #0
 800323e:	f7ff f8bf 	bl	80023c0 <NRF24_setAutoAck>
  NRF24_setChannel(103);
 8003242:	2067      	movs	r0, #103	; 0x67
 8003244:	f7ff f871 	bl	800232a <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 8003248:	2020      	movs	r0, #32
 800324a:	f7ff f883 	bl	8002354 <NRF24_setPayloadSize>
  //NRF24_setDataRate(RF24_1MBPS);
  //NRF24_setPALevel(RF24_PA_m12dB); // máximo RF24_PA_0dB



  printRadioSettings();
 800324e:	f7ff fa31 	bl	80026b4 <printRadioSettings>
  while (1)
  {
    /* USER CODE END WHILE */


    if (NRF24_write(myTxData,32)){
 8003252:	2120      	movs	r1, #32
 8003254:	480e      	ldr	r0, [pc, #56]	; (8003290 <main+0xbc>)
 8003256:	f7fe ffd1 	bl	80021fc <NRF24_write>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <main+0xa2>
    	HAL_UART_Transmit(&huart1, (uint8_t *)"Transmitted Successfully\r\n", strlen("Transmitted Successfully\r\n"),10);
 8003260:	230a      	movs	r3, #10
 8003262:	221a      	movs	r2, #26
 8003264:	490b      	ldr	r1, [pc, #44]	; (8003294 <main+0xc0>)
 8003266:	4808      	ldr	r0, [pc, #32]	; (8003288 <main+0xb4>)
 8003268:	f7fe fba8 	bl	80019bc <HAL_UART_Transmit>
        HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800326c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003270:	4809      	ldr	r0, [pc, #36]	; (8003298 <main+0xc4>)
 8003272:	f7fd fa4f 	bl	8000714 <HAL_GPIO_TogglePin>

    }
    //printRadioSettings();
    HAL_Delay(1000);
 8003276:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800327a:	f7fc ffd1 	bl	8000220 <HAL_Delay>
    if (NRF24_write(myTxData,32)){
 800327e:	e7e8      	b.n	8003252 <main+0x7e>
 8003280:	200001ac 	.word	0x200001ac
 8003284:	40010800 	.word	0x40010800
 8003288:	2000016c 	.word	0x2000016c
 800328c:	20000008 	.word	0x20000008
 8003290:	20000010 	.word	0x20000010
 8003294:	080045b0 	.word	0x080045b0
 8003298:	40011000 	.word	0x40011000

0800329c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b090      	sub	sp, #64	; 0x40
 80032a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032a2:	f107 0318 	add.w	r3, r7, #24
 80032a6:	2228      	movs	r2, #40	; 0x28
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fa9f 	bl	80037ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032b0:	1d3b      	adds	r3, r7, #4
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	605a      	str	r2, [r3, #4]
 80032b8:	609a      	str	r2, [r3, #8]
 80032ba:	60da      	str	r2, [r3, #12]
 80032bc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032be:	2301      	movs	r3, #1
 80032c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80032c8:	2300      	movs	r3, #0
 80032ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032cc:	2301      	movs	r3, #1
 80032ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032d0:	2302      	movs	r3, #2
 80032d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80032da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80032de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032e0:	f107 0318 	add.w	r3, r7, #24
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fd fa27 	bl	8000738 <HAL_RCC_OscConfig>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80032f0:	f000 f8da 	bl	80034a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032f4:	230f      	movs	r3, #15
 80032f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032f8:	2302      	movs	r3, #2
 80032fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800330a:	1d3b      	adds	r3, r7, #4
 800330c:	2102      	movs	r1, #2
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd fc76 	bl	8000c00 <HAL_RCC_ClockConfig>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800331a:	f000 f8c5 	bl	80034a8 <Error_Handler>
  }
}
 800331e:	bf00      	nop
 8003320:	3740      	adds	r7, #64	; 0x40
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800332c:	4b17      	ldr	r3, [pc, #92]	; (800338c <MX_SPI1_Init+0x64>)
 800332e:	4a18      	ldr	r2, [pc, #96]	; (8003390 <MX_SPI1_Init+0x68>)
 8003330:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003332:	4b16      	ldr	r3, [pc, #88]	; (800338c <MX_SPI1_Init+0x64>)
 8003334:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003338:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800333a:	4b14      	ldr	r3, [pc, #80]	; (800338c <MX_SPI1_Init+0x64>)
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003340:	4b12      	ldr	r3, [pc, #72]	; (800338c <MX_SPI1_Init+0x64>)
 8003342:	2200      	movs	r2, #0
 8003344:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <MX_SPI1_Init+0x64>)
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800334c:	4b0f      	ldr	r3, [pc, #60]	; (800338c <MX_SPI1_Init+0x64>)
 800334e:	2200      	movs	r2, #0
 8003350:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003352:	4b0e      	ldr	r3, [pc, #56]	; (800338c <MX_SPI1_Init+0x64>)
 8003354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003358:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800335a:	4b0c      	ldr	r3, [pc, #48]	; (800338c <MX_SPI1_Init+0x64>)
 800335c:	2220      	movs	r2, #32
 800335e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003360:	4b0a      	ldr	r3, [pc, #40]	; (800338c <MX_SPI1_Init+0x64>)
 8003362:	2200      	movs	r2, #0
 8003364:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <MX_SPI1_Init+0x64>)
 8003368:	2200      	movs	r2, #0
 800336a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800336c:	4b07      	ldr	r3, [pc, #28]	; (800338c <MX_SPI1_Init+0x64>)
 800336e:	2200      	movs	r2, #0
 8003370:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003372:	4b06      	ldr	r3, [pc, #24]	; (800338c <MX_SPI1_Init+0x64>)
 8003374:	220a      	movs	r2, #10
 8003376:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003378:	4804      	ldr	r0, [pc, #16]	; (800338c <MX_SPI1_Init+0x64>)
 800337a:	f7fe fa6e 	bl	800185a <HAL_SPI_Init>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003384:	f000 f890 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003388:	bf00      	nop
 800338a:	bd80      	pop	{r7, pc}
 800338c:	200001ac 	.word	0x200001ac
 8003390:	40013000 	.word	0x40013000

08003394 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003398:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <MX_USART1_UART_Init+0x4c>)
 800339a:	4a12      	ldr	r2, [pc, #72]	; (80033e4 <MX_USART1_UART_Init+0x50>)
 800339c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800339e:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <MX_USART1_UART_Init+0x4c>)
 80033a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033a6:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <MX_USART1_UART_Init+0x4c>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033ac:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <MX_USART1_UART_Init+0x4c>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033b2:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <MX_USART1_UART_Init+0x4c>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033b8:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <MX_USART1_UART_Init+0x4c>)
 80033ba:	220c      	movs	r2, #12
 80033bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033be:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <MX_USART1_UART_Init+0x4c>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <MX_USART1_UART_Init+0x4c>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033ca:	4805      	ldr	r0, [pc, #20]	; (80033e0 <MX_USART1_UART_Init+0x4c>)
 80033cc:	f7fe faa9 	bl	8001922 <HAL_UART_Init>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80033d6:	f000 f867 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	2000016c 	.word	0x2000016c
 80033e4:	40013800 	.word	0x40013800

080033e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ee:	f107 0310 	add.w	r3, r7, #16
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	609a      	str	r2, [r3, #8]
 80033fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033fc:	4a27      	ldr	r2, [pc, #156]	; (800349c <MX_GPIO_Init+0xb4>)
 80033fe:	4b27      	ldr	r3, [pc, #156]	; (800349c <MX_GPIO_Init+0xb4>)
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f043 0310 	orr.w	r3, r3, #16
 8003406:	6193      	str	r3, [r2, #24]
 8003408:	4b24      	ldr	r3, [pc, #144]	; (800349c <MX_GPIO_Init+0xb4>)
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003414:	4a21      	ldr	r2, [pc, #132]	; (800349c <MX_GPIO_Init+0xb4>)
 8003416:	4b21      	ldr	r3, [pc, #132]	; (800349c <MX_GPIO_Init+0xb4>)
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f043 0320 	orr.w	r3, r3, #32
 800341e:	6193      	str	r3, [r2, #24]
 8003420:	4b1e      	ldr	r3, [pc, #120]	; (800349c <MX_GPIO_Init+0xb4>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800342c:	4a1b      	ldr	r2, [pc, #108]	; (800349c <MX_GPIO_Init+0xb4>)
 800342e:	4b1b      	ldr	r3, [pc, #108]	; (800349c <MX_GPIO_Init+0xb4>)
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	6193      	str	r3, [r2, #24]
 8003438:	4b18      	ldr	r3, [pc, #96]	; (800349c <MX_GPIO_Init+0xb4>)
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	607b      	str	r3, [r7, #4]
 8003442:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003444:	2200      	movs	r2, #0
 8003446:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800344a:	4815      	ldr	r0, [pc, #84]	; (80034a0 <MX_GPIO_Init+0xb8>)
 800344c:	f7fd f94a 	bl	80006e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8003450:	2200      	movs	r2, #0
 8003452:	2118      	movs	r1, #24
 8003454:	4813      	ldr	r0, [pc, #76]	; (80034a4 <MX_GPIO_Init+0xbc>)
 8003456:	f7fd f945 	bl	80006e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800345a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800345e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003460:	2301      	movs	r3, #1
 8003462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	2300      	movs	r3, #0
 8003466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003468:	2302      	movs	r3, #2
 800346a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800346c:	f107 0310 	add.w	r3, r7, #16
 8003470:	4619      	mov	r1, r3
 8003472:	480b      	ldr	r0, [pc, #44]	; (80034a0 <MX_GPIO_Init+0xb8>)
 8003474:	f7fc ffd8 	bl	8000428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003478:	2318      	movs	r3, #24
 800347a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800347c:	2301      	movs	r3, #1
 800347e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003480:	2300      	movs	r3, #0
 8003482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003484:	2302      	movs	r3, #2
 8003486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003488:	f107 0310 	add.w	r3, r7, #16
 800348c:	4619      	mov	r1, r3
 800348e:	4805      	ldr	r0, [pc, #20]	; (80034a4 <MX_GPIO_Init+0xbc>)
 8003490:	f7fc ffca 	bl	8000428 <HAL_GPIO_Init>

}
 8003494:	bf00      	nop
 8003496:	3720      	adds	r7, #32
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000
 80034a0:	40011000 	.word	0x40011000
 80034a4:	40010800 	.word	0x40010800

080034a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80034ba:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <HAL_MspInit+0x40>)
 80034bc:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <HAL_MspInit+0x40>)
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	6193      	str	r3, [r2, #24]
 80034c6:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_MspInit+0x40>)
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	607b      	str	r3, [r7, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034d2:	4a08      	ldr	r2, [pc, #32]	; (80034f4 <HAL_MspInit+0x40>)
 80034d4:	4b07      	ldr	r3, [pc, #28]	; (80034f4 <HAL_MspInit+0x40>)
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034dc:	61d3      	str	r3, [r2, #28]
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_MspInit+0x40>)
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	40021000 	.word	0x40021000

080034f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003500:	f107 0310 	add.w	r3, r7, #16
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1b      	ldr	r2, [pc, #108]	; (8003580 <HAL_SPI_MspInit+0x88>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d12f      	bne.n	8003578 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003518:	4a1a      	ldr	r2, [pc, #104]	; (8003584 <HAL_SPI_MspInit+0x8c>)
 800351a:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <HAL_SPI_MspInit+0x8c>)
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003522:	6193      	str	r3, [r2, #24]
 8003524:	4b17      	ldr	r3, [pc, #92]	; (8003584 <HAL_SPI_MspInit+0x8c>)
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003530:	4a14      	ldr	r2, [pc, #80]	; (8003584 <HAL_SPI_MspInit+0x8c>)
 8003532:	4b14      	ldr	r3, [pc, #80]	; (8003584 <HAL_SPI_MspInit+0x8c>)
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	f043 0304 	orr.w	r3, r3, #4
 800353a:	6193      	str	r3, [r2, #24]
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_SPI_MspInit+0x8c>)
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003548:	23a0      	movs	r3, #160	; 0xa0
 800354a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354c:	2302      	movs	r3, #2
 800354e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003550:	2303      	movs	r3, #3
 8003552:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003554:	f107 0310 	add.w	r3, r7, #16
 8003558:	4619      	mov	r1, r3
 800355a:	480b      	ldr	r0, [pc, #44]	; (8003588 <HAL_SPI_MspInit+0x90>)
 800355c:	f7fc ff64 	bl	8000428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003560:	2340      	movs	r3, #64	; 0x40
 8003562:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356c:	f107 0310 	add.w	r3, r7, #16
 8003570:	4619      	mov	r1, r3
 8003572:	4805      	ldr	r0, [pc, #20]	; (8003588 <HAL_SPI_MspInit+0x90>)
 8003574:	f7fc ff58 	bl	8000428 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003578:	bf00      	nop
 800357a:	3720      	adds	r7, #32
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40013000 	.word	0x40013000
 8003584:	40021000 	.word	0x40021000
 8003588:	40010800 	.word	0x40010800

0800358c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003594:	f107 0310 	add.w	r3, r7, #16
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <HAL_UART_MspInit+0x8c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d131      	bne.n	8003610 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035ac:	4a1b      	ldr	r2, [pc, #108]	; (800361c <HAL_UART_MspInit+0x90>)
 80035ae:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_UART_MspInit+0x90>)
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b6:	6193      	str	r3, [r2, #24]
 80035b8:	4b18      	ldr	r3, [pc, #96]	; (800361c <HAL_UART_MspInit+0x90>)
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c4:	4a15      	ldr	r2, [pc, #84]	; (800361c <HAL_UART_MspInit+0x90>)
 80035c6:	4b15      	ldr	r3, [pc, #84]	; (800361c <HAL_UART_MspInit+0x90>)
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f043 0304 	orr.w	r3, r3, #4
 80035ce:	6193      	str	r3, [r2, #24]
 80035d0:	4b12      	ldr	r3, [pc, #72]	; (800361c <HAL_UART_MspInit+0x90>)
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80035dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e2:	2302      	movs	r3, #2
 80035e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035e6:	2303      	movs	r3, #3
 80035e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ea:	f107 0310 	add.w	r3, r7, #16
 80035ee:	4619      	mov	r1, r3
 80035f0:	480b      	ldr	r0, [pc, #44]	; (8003620 <HAL_UART_MspInit+0x94>)
 80035f2:	f7fc ff19 	bl	8000428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003604:	f107 0310 	add.w	r3, r7, #16
 8003608:	4619      	mov	r1, r3
 800360a:	4805      	ldr	r0, [pc, #20]	; (8003620 <HAL_UART_MspInit+0x94>)
 800360c:	f7fc ff0c 	bl	8000428 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003610:	bf00      	nop
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40013800 	.word	0x40013800
 800361c:	40021000 	.word	0x40021000
 8003620:	40010800 	.word	0x40010800

08003624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003628:	bf00      	nop
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr

08003630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003634:	e7fe      	b.n	8003634 <HardFault_Handler+0x4>

08003636 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800363a:	e7fe      	b.n	800363a <MemManage_Handler+0x4>

0800363c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003640:	e7fe      	b.n	8003640 <BusFault_Handler+0x4>

08003642 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003642:	b480      	push	{r7}
 8003644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003646:	e7fe      	b.n	8003646 <UsageFault_Handler+0x4>

08003648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003658:	bf00      	nop
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003670:	f7fc fdba 	bl	80001e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003674:	bf00      	nop
 8003676:	bd80      	pop	{r7, pc}

08003678 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003680:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <_sbrk+0x50>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <_sbrk+0x16>
		heap_end = &end;
 8003688:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <_sbrk+0x50>)
 800368a:	4a10      	ldr	r2, [pc, #64]	; (80036cc <_sbrk+0x54>)
 800368c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800368e:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <_sbrk+0x50>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003694:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <_sbrk+0x50>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4413      	add	r3, r2
 800369c:	466a      	mov	r2, sp
 800369e:	4293      	cmp	r3, r2
 80036a0:	d907      	bls.n	80036b2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80036a2:	f000 f86f 	bl	8003784 <__errno>
 80036a6:	4602      	mov	r2, r0
 80036a8:	230c      	movs	r3, #12
 80036aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80036ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036b0:	e006      	b.n	80036c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <_sbrk+0x50>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	4a03      	ldr	r2, [pc, #12]	; (80036c8 <_sbrk+0x50>)
 80036bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80036be:	68fb      	ldr	r3, [r7, #12]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	2000015c 	.word	0x2000015c
 80036cc:	20000208 	.word	0x20000208

080036d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80036d4:	4a15      	ldr	r2, [pc, #84]	; (800372c <SystemInit+0x5c>)
 80036d6:	4b15      	ldr	r3, [pc, #84]	; (800372c <SystemInit+0x5c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80036e0:	4912      	ldr	r1, [pc, #72]	; (800372c <SystemInit+0x5c>)
 80036e2:	4b12      	ldr	r3, [pc, #72]	; (800372c <SystemInit+0x5c>)
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	4b12      	ldr	r3, [pc, #72]	; (8003730 <SystemInit+0x60>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80036ec:	4a0f      	ldr	r2, [pc, #60]	; (800372c <SystemInit+0x5c>)
 80036ee:	4b0f      	ldr	r3, [pc, #60]	; (800372c <SystemInit+0x5c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80036f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80036fc:	4a0b      	ldr	r2, [pc, #44]	; (800372c <SystemInit+0x5c>)
 80036fe:	4b0b      	ldr	r3, [pc, #44]	; (800372c <SystemInit+0x5c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003706:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003708:	4a08      	ldr	r2, [pc, #32]	; (800372c <SystemInit+0x5c>)
 800370a:	4b08      	ldr	r3, [pc, #32]	; (800372c <SystemInit+0x5c>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003712:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <SystemInit+0x5c>)
 8003716:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800371a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800371c:	4b05      	ldr	r3, [pc, #20]	; (8003734 <SystemInit+0x64>)
 800371e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003722:	609a      	str	r2, [r3, #8]
#endif 
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	40021000 	.word	0x40021000
 8003730:	f8ff0000 	.word	0xf8ff0000
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003738:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800373a:	e003      	b.n	8003744 <LoopCopyDataInit>

0800373c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800373e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003740:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003742:	3104      	adds	r1, #4

08003744 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003744:	480a      	ldr	r0, [pc, #40]	; (8003770 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003748:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800374a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800374c:	d3f6      	bcc.n	800373c <CopyDataInit>
  ldr r2, =_sbss
 800374e:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003750:	e002      	b.n	8003758 <LoopFillZerobss>

08003752 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003752:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003754:	f842 3b04 	str.w	r3, [r2], #4

08003758 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003758:	4b08      	ldr	r3, [pc, #32]	; (800377c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800375a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800375c:	d3f9      	bcc.n	8003752 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800375e:	f7ff ffb7 	bl	80036d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003762:	f000 f815 	bl	8003790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003766:	f7ff fd35 	bl	80031d4 <main>
  bx lr
 800376a:	4770      	bx	lr
  ldr r3, =_sidata
 800376c:	08004620 	.word	0x08004620
  ldr r0, =_sdata
 8003770:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003774:	20000098 	.word	0x20000098
  ldr r2, =_sbss
 8003778:	20000098 	.word	0x20000098
  ldr r3, = _ebss
 800377c:	20000208 	.word	0x20000208

08003780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003780:	e7fe      	b.n	8003780 <ADC1_2_IRQHandler>
	...

08003784 <__errno>:
 8003784:	4b01      	ldr	r3, [pc, #4]	; (800378c <__errno+0x8>)
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	20000034 	.word	0x20000034

08003790 <__libc_init_array>:
 8003790:	b570      	push	{r4, r5, r6, lr}
 8003792:	2500      	movs	r5, #0
 8003794:	4e0c      	ldr	r6, [pc, #48]	; (80037c8 <__libc_init_array+0x38>)
 8003796:	4c0d      	ldr	r4, [pc, #52]	; (80037cc <__libc_init_array+0x3c>)
 8003798:	1ba4      	subs	r4, r4, r6
 800379a:	10a4      	asrs	r4, r4, #2
 800379c:	42a5      	cmp	r5, r4
 800379e:	d109      	bne.n	80037b4 <__libc_init_array+0x24>
 80037a0:	f000 fc4e 	bl	8004040 <_init>
 80037a4:	2500      	movs	r5, #0
 80037a6:	4e0a      	ldr	r6, [pc, #40]	; (80037d0 <__libc_init_array+0x40>)
 80037a8:	4c0a      	ldr	r4, [pc, #40]	; (80037d4 <__libc_init_array+0x44>)
 80037aa:	1ba4      	subs	r4, r4, r6
 80037ac:	10a4      	asrs	r4, r4, #2
 80037ae:	42a5      	cmp	r5, r4
 80037b0:	d105      	bne.n	80037be <__libc_init_array+0x2e>
 80037b2:	bd70      	pop	{r4, r5, r6, pc}
 80037b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037b8:	4798      	blx	r3
 80037ba:	3501      	adds	r5, #1
 80037bc:	e7ee      	b.n	800379c <__libc_init_array+0xc>
 80037be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037c2:	4798      	blx	r3
 80037c4:	3501      	adds	r5, #1
 80037c6:	e7f2      	b.n	80037ae <__libc_init_array+0x1e>
 80037c8:	08004618 	.word	0x08004618
 80037cc:	08004618 	.word	0x08004618
 80037d0:	08004618 	.word	0x08004618
 80037d4:	0800461c 	.word	0x0800461c

080037d8 <memcpy>:
 80037d8:	b510      	push	{r4, lr}
 80037da:	1e43      	subs	r3, r0, #1
 80037dc:	440a      	add	r2, r1
 80037de:	4291      	cmp	r1, r2
 80037e0:	d100      	bne.n	80037e4 <memcpy+0xc>
 80037e2:	bd10      	pop	{r4, pc}
 80037e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037ec:	e7f7      	b.n	80037de <memcpy+0x6>

080037ee <memset>:
 80037ee:	4603      	mov	r3, r0
 80037f0:	4402      	add	r2, r0
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d100      	bne.n	80037f8 <memset+0xa>
 80037f6:	4770      	bx	lr
 80037f8:	f803 1b01 	strb.w	r1, [r3], #1
 80037fc:	e7f9      	b.n	80037f2 <memset+0x4>
	...

08003800 <siprintf>:
 8003800:	b40e      	push	{r1, r2, r3}
 8003802:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003806:	b500      	push	{lr}
 8003808:	b09c      	sub	sp, #112	; 0x70
 800380a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800380e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003812:	9104      	str	r1, [sp, #16]
 8003814:	9107      	str	r1, [sp, #28]
 8003816:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800381a:	ab1d      	add	r3, sp, #116	; 0x74
 800381c:	9002      	str	r0, [sp, #8]
 800381e:	9006      	str	r0, [sp, #24]
 8003820:	4808      	ldr	r0, [pc, #32]	; (8003844 <siprintf+0x44>)
 8003822:	f853 2b04 	ldr.w	r2, [r3], #4
 8003826:	f8ad 1016 	strh.w	r1, [sp, #22]
 800382a:	6800      	ldr	r0, [r0, #0]
 800382c:	a902      	add	r1, sp, #8
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	f000 f866 	bl	8003900 <_svfiprintf_r>
 8003834:	2200      	movs	r2, #0
 8003836:	9b02      	ldr	r3, [sp, #8]
 8003838:	701a      	strb	r2, [r3, #0]
 800383a:	b01c      	add	sp, #112	; 0x70
 800383c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003840:	b003      	add	sp, #12
 8003842:	4770      	bx	lr
 8003844:	20000034 	.word	0x20000034

08003848 <__ssputs_r>:
 8003848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800384c:	688e      	ldr	r6, [r1, #8]
 800384e:	4682      	mov	sl, r0
 8003850:	429e      	cmp	r6, r3
 8003852:	460c      	mov	r4, r1
 8003854:	4691      	mov	r9, r2
 8003856:	4698      	mov	r8, r3
 8003858:	d835      	bhi.n	80038c6 <__ssputs_r+0x7e>
 800385a:	898a      	ldrh	r2, [r1, #12]
 800385c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003860:	d031      	beq.n	80038c6 <__ssputs_r+0x7e>
 8003862:	2302      	movs	r3, #2
 8003864:	6825      	ldr	r5, [r4, #0]
 8003866:	6909      	ldr	r1, [r1, #16]
 8003868:	1a6f      	subs	r7, r5, r1
 800386a:	6965      	ldr	r5, [r4, #20]
 800386c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003870:	fb95 f5f3 	sdiv	r5, r5, r3
 8003874:	f108 0301 	add.w	r3, r8, #1
 8003878:	443b      	add	r3, r7
 800387a:	429d      	cmp	r5, r3
 800387c:	bf38      	it	cc
 800387e:	461d      	movcc	r5, r3
 8003880:	0553      	lsls	r3, r2, #21
 8003882:	d531      	bpl.n	80038e8 <__ssputs_r+0xa0>
 8003884:	4629      	mov	r1, r5
 8003886:	f000 fb3b 	bl	8003f00 <_malloc_r>
 800388a:	4606      	mov	r6, r0
 800388c:	b950      	cbnz	r0, 80038a4 <__ssputs_r+0x5c>
 800388e:	230c      	movs	r3, #12
 8003890:	f8ca 3000 	str.w	r3, [sl]
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800389a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800389e:	81a3      	strh	r3, [r4, #12]
 80038a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a4:	463a      	mov	r2, r7
 80038a6:	6921      	ldr	r1, [r4, #16]
 80038a8:	f7ff ff96 	bl	80037d8 <memcpy>
 80038ac:	89a3      	ldrh	r3, [r4, #12]
 80038ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b6:	81a3      	strh	r3, [r4, #12]
 80038b8:	6126      	str	r6, [r4, #16]
 80038ba:	443e      	add	r6, r7
 80038bc:	6026      	str	r6, [r4, #0]
 80038be:	4646      	mov	r6, r8
 80038c0:	6165      	str	r5, [r4, #20]
 80038c2:	1bed      	subs	r5, r5, r7
 80038c4:	60a5      	str	r5, [r4, #8]
 80038c6:	4546      	cmp	r6, r8
 80038c8:	bf28      	it	cs
 80038ca:	4646      	movcs	r6, r8
 80038cc:	4649      	mov	r1, r9
 80038ce:	4632      	mov	r2, r6
 80038d0:	6820      	ldr	r0, [r4, #0]
 80038d2:	f000 faaf 	bl	8003e34 <memmove>
 80038d6:	68a3      	ldr	r3, [r4, #8]
 80038d8:	2000      	movs	r0, #0
 80038da:	1b9b      	subs	r3, r3, r6
 80038dc:	60a3      	str	r3, [r4, #8]
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	441e      	add	r6, r3
 80038e2:	6026      	str	r6, [r4, #0]
 80038e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e8:	462a      	mov	r2, r5
 80038ea:	f000 fb67 	bl	8003fbc <_realloc_r>
 80038ee:	4606      	mov	r6, r0
 80038f0:	2800      	cmp	r0, #0
 80038f2:	d1e1      	bne.n	80038b8 <__ssputs_r+0x70>
 80038f4:	6921      	ldr	r1, [r4, #16]
 80038f6:	4650      	mov	r0, sl
 80038f8:	f000 fab6 	bl	8003e68 <_free_r>
 80038fc:	e7c7      	b.n	800388e <__ssputs_r+0x46>
	...

08003900 <_svfiprintf_r>:
 8003900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003904:	b09d      	sub	sp, #116	; 0x74
 8003906:	9303      	str	r3, [sp, #12]
 8003908:	898b      	ldrh	r3, [r1, #12]
 800390a:	4680      	mov	r8, r0
 800390c:	061c      	lsls	r4, r3, #24
 800390e:	460d      	mov	r5, r1
 8003910:	4616      	mov	r6, r2
 8003912:	d50f      	bpl.n	8003934 <_svfiprintf_r+0x34>
 8003914:	690b      	ldr	r3, [r1, #16]
 8003916:	b96b      	cbnz	r3, 8003934 <_svfiprintf_r+0x34>
 8003918:	2140      	movs	r1, #64	; 0x40
 800391a:	f000 faf1 	bl	8003f00 <_malloc_r>
 800391e:	6028      	str	r0, [r5, #0]
 8003920:	6128      	str	r0, [r5, #16]
 8003922:	b928      	cbnz	r0, 8003930 <_svfiprintf_r+0x30>
 8003924:	230c      	movs	r3, #12
 8003926:	f8c8 3000 	str.w	r3, [r8]
 800392a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800392e:	e0c4      	b.n	8003aba <_svfiprintf_r+0x1ba>
 8003930:	2340      	movs	r3, #64	; 0x40
 8003932:	616b      	str	r3, [r5, #20]
 8003934:	2300      	movs	r3, #0
 8003936:	9309      	str	r3, [sp, #36]	; 0x24
 8003938:	2320      	movs	r3, #32
 800393a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800393e:	2330      	movs	r3, #48	; 0x30
 8003940:	f04f 0b01 	mov.w	fp, #1
 8003944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003948:	4637      	mov	r7, r6
 800394a:	463c      	mov	r4, r7
 800394c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d13c      	bne.n	80039ce <_svfiprintf_r+0xce>
 8003954:	ebb7 0a06 	subs.w	sl, r7, r6
 8003958:	d00b      	beq.n	8003972 <_svfiprintf_r+0x72>
 800395a:	4653      	mov	r3, sl
 800395c:	4632      	mov	r2, r6
 800395e:	4629      	mov	r1, r5
 8003960:	4640      	mov	r0, r8
 8003962:	f7ff ff71 	bl	8003848 <__ssputs_r>
 8003966:	3001      	adds	r0, #1
 8003968:	f000 80a2 	beq.w	8003ab0 <_svfiprintf_r+0x1b0>
 800396c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800396e:	4453      	add	r3, sl
 8003970:	9309      	str	r3, [sp, #36]	; 0x24
 8003972:	783b      	ldrb	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 809b 	beq.w	8003ab0 <_svfiprintf_r+0x1b0>
 800397a:	2300      	movs	r3, #0
 800397c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003980:	9304      	str	r3, [sp, #16]
 8003982:	9307      	str	r3, [sp, #28]
 8003984:	9205      	str	r2, [sp, #20]
 8003986:	9306      	str	r3, [sp, #24]
 8003988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800398c:	931a      	str	r3, [sp, #104]	; 0x68
 800398e:	2205      	movs	r2, #5
 8003990:	7821      	ldrb	r1, [r4, #0]
 8003992:	4850      	ldr	r0, [pc, #320]	; (8003ad4 <_svfiprintf_r+0x1d4>)
 8003994:	f000 fa40 	bl	8003e18 <memchr>
 8003998:	1c67      	adds	r7, r4, #1
 800399a:	9b04      	ldr	r3, [sp, #16]
 800399c:	b9d8      	cbnz	r0, 80039d6 <_svfiprintf_r+0xd6>
 800399e:	06d9      	lsls	r1, r3, #27
 80039a0:	bf44      	itt	mi
 80039a2:	2220      	movmi	r2, #32
 80039a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039a8:	071a      	lsls	r2, r3, #28
 80039aa:	bf44      	itt	mi
 80039ac:	222b      	movmi	r2, #43	; 0x2b
 80039ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039b2:	7822      	ldrb	r2, [r4, #0]
 80039b4:	2a2a      	cmp	r2, #42	; 0x2a
 80039b6:	d016      	beq.n	80039e6 <_svfiprintf_r+0xe6>
 80039b8:	2100      	movs	r1, #0
 80039ba:	200a      	movs	r0, #10
 80039bc:	9a07      	ldr	r2, [sp, #28]
 80039be:	4627      	mov	r7, r4
 80039c0:	783b      	ldrb	r3, [r7, #0]
 80039c2:	3401      	adds	r4, #1
 80039c4:	3b30      	subs	r3, #48	; 0x30
 80039c6:	2b09      	cmp	r3, #9
 80039c8:	d950      	bls.n	8003a6c <_svfiprintf_r+0x16c>
 80039ca:	b1c9      	cbz	r1, 8003a00 <_svfiprintf_r+0x100>
 80039cc:	e011      	b.n	80039f2 <_svfiprintf_r+0xf2>
 80039ce:	2b25      	cmp	r3, #37	; 0x25
 80039d0:	d0c0      	beq.n	8003954 <_svfiprintf_r+0x54>
 80039d2:	4627      	mov	r7, r4
 80039d4:	e7b9      	b.n	800394a <_svfiprintf_r+0x4a>
 80039d6:	4a3f      	ldr	r2, [pc, #252]	; (8003ad4 <_svfiprintf_r+0x1d4>)
 80039d8:	463c      	mov	r4, r7
 80039da:	1a80      	subs	r0, r0, r2
 80039dc:	fa0b f000 	lsl.w	r0, fp, r0
 80039e0:	4318      	orrs	r0, r3
 80039e2:	9004      	str	r0, [sp, #16]
 80039e4:	e7d3      	b.n	800398e <_svfiprintf_r+0x8e>
 80039e6:	9a03      	ldr	r2, [sp, #12]
 80039e8:	1d11      	adds	r1, r2, #4
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	9103      	str	r1, [sp, #12]
 80039ee:	2a00      	cmp	r2, #0
 80039f0:	db01      	blt.n	80039f6 <_svfiprintf_r+0xf6>
 80039f2:	9207      	str	r2, [sp, #28]
 80039f4:	e004      	b.n	8003a00 <_svfiprintf_r+0x100>
 80039f6:	4252      	negs	r2, r2
 80039f8:	f043 0302 	orr.w	r3, r3, #2
 80039fc:	9207      	str	r2, [sp, #28]
 80039fe:	9304      	str	r3, [sp, #16]
 8003a00:	783b      	ldrb	r3, [r7, #0]
 8003a02:	2b2e      	cmp	r3, #46	; 0x2e
 8003a04:	d10d      	bne.n	8003a22 <_svfiprintf_r+0x122>
 8003a06:	787b      	ldrb	r3, [r7, #1]
 8003a08:	1c79      	adds	r1, r7, #1
 8003a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a0c:	d132      	bne.n	8003a74 <_svfiprintf_r+0x174>
 8003a0e:	9b03      	ldr	r3, [sp, #12]
 8003a10:	3702      	adds	r7, #2
 8003a12:	1d1a      	adds	r2, r3, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	9203      	str	r2, [sp, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bfb8      	it	lt
 8003a1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003a20:	9305      	str	r3, [sp, #20]
 8003a22:	4c2d      	ldr	r4, [pc, #180]	; (8003ad8 <_svfiprintf_r+0x1d8>)
 8003a24:	2203      	movs	r2, #3
 8003a26:	7839      	ldrb	r1, [r7, #0]
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f000 f9f5 	bl	8003e18 <memchr>
 8003a2e:	b138      	cbz	r0, 8003a40 <_svfiprintf_r+0x140>
 8003a30:	2340      	movs	r3, #64	; 0x40
 8003a32:	1b00      	subs	r0, r0, r4
 8003a34:	fa03 f000 	lsl.w	r0, r3, r0
 8003a38:	9b04      	ldr	r3, [sp, #16]
 8003a3a:	3701      	adds	r7, #1
 8003a3c:	4303      	orrs	r3, r0
 8003a3e:	9304      	str	r3, [sp, #16]
 8003a40:	7839      	ldrb	r1, [r7, #0]
 8003a42:	2206      	movs	r2, #6
 8003a44:	4825      	ldr	r0, [pc, #148]	; (8003adc <_svfiprintf_r+0x1dc>)
 8003a46:	1c7e      	adds	r6, r7, #1
 8003a48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a4c:	f000 f9e4 	bl	8003e18 <memchr>
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d035      	beq.n	8003ac0 <_svfiprintf_r+0x1c0>
 8003a54:	4b22      	ldr	r3, [pc, #136]	; (8003ae0 <_svfiprintf_r+0x1e0>)
 8003a56:	b9fb      	cbnz	r3, 8003a98 <_svfiprintf_r+0x198>
 8003a58:	9b03      	ldr	r3, [sp, #12]
 8003a5a:	3307      	adds	r3, #7
 8003a5c:	f023 0307 	bic.w	r3, r3, #7
 8003a60:	3308      	adds	r3, #8
 8003a62:	9303      	str	r3, [sp, #12]
 8003a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a66:	444b      	add	r3, r9
 8003a68:	9309      	str	r3, [sp, #36]	; 0x24
 8003a6a:	e76d      	b.n	8003948 <_svfiprintf_r+0x48>
 8003a6c:	fb00 3202 	mla	r2, r0, r2, r3
 8003a70:	2101      	movs	r1, #1
 8003a72:	e7a4      	b.n	80039be <_svfiprintf_r+0xbe>
 8003a74:	2300      	movs	r3, #0
 8003a76:	240a      	movs	r4, #10
 8003a78:	4618      	mov	r0, r3
 8003a7a:	9305      	str	r3, [sp, #20]
 8003a7c:	460f      	mov	r7, r1
 8003a7e:	783a      	ldrb	r2, [r7, #0]
 8003a80:	3101      	adds	r1, #1
 8003a82:	3a30      	subs	r2, #48	; 0x30
 8003a84:	2a09      	cmp	r2, #9
 8003a86:	d903      	bls.n	8003a90 <_svfiprintf_r+0x190>
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0ca      	beq.n	8003a22 <_svfiprintf_r+0x122>
 8003a8c:	9005      	str	r0, [sp, #20]
 8003a8e:	e7c8      	b.n	8003a22 <_svfiprintf_r+0x122>
 8003a90:	fb04 2000 	mla	r0, r4, r0, r2
 8003a94:	2301      	movs	r3, #1
 8003a96:	e7f1      	b.n	8003a7c <_svfiprintf_r+0x17c>
 8003a98:	ab03      	add	r3, sp, #12
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	462a      	mov	r2, r5
 8003a9e:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <_svfiprintf_r+0x1e4>)
 8003aa0:	a904      	add	r1, sp, #16
 8003aa2:	4640      	mov	r0, r8
 8003aa4:	f3af 8000 	nop.w
 8003aa8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003aac:	4681      	mov	r9, r0
 8003aae:	d1d9      	bne.n	8003a64 <_svfiprintf_r+0x164>
 8003ab0:	89ab      	ldrh	r3, [r5, #12]
 8003ab2:	065b      	lsls	r3, r3, #25
 8003ab4:	f53f af39 	bmi.w	800392a <_svfiprintf_r+0x2a>
 8003ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aba:	b01d      	add	sp, #116	; 0x74
 8003abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ac0:	ab03      	add	r3, sp, #12
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	462a      	mov	r2, r5
 8003ac6:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <_svfiprintf_r+0x1e4>)
 8003ac8:	a904      	add	r1, sp, #16
 8003aca:	4640      	mov	r0, r8
 8003acc:	f000 f884 	bl	8003bd8 <_printf_i>
 8003ad0:	e7ea      	b.n	8003aa8 <_svfiprintf_r+0x1a8>
 8003ad2:	bf00      	nop
 8003ad4:	080045e4 	.word	0x080045e4
 8003ad8:	080045ea 	.word	0x080045ea
 8003adc:	080045ee 	.word	0x080045ee
 8003ae0:	00000000 	.word	0x00000000
 8003ae4:	08003849 	.word	0x08003849

08003ae8 <_printf_common>:
 8003ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aec:	4691      	mov	r9, r2
 8003aee:	461f      	mov	r7, r3
 8003af0:	688a      	ldr	r2, [r1, #8]
 8003af2:	690b      	ldr	r3, [r1, #16]
 8003af4:	4606      	mov	r6, r0
 8003af6:	4293      	cmp	r3, r2
 8003af8:	bfb8      	it	lt
 8003afa:	4613      	movlt	r3, r2
 8003afc:	f8c9 3000 	str.w	r3, [r9]
 8003b00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b04:	460c      	mov	r4, r1
 8003b06:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b0a:	b112      	cbz	r2, 8003b12 <_printf_common+0x2a>
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	f8c9 3000 	str.w	r3, [r9]
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	0699      	lsls	r1, r3, #26
 8003b16:	bf42      	ittt	mi
 8003b18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b1c:	3302      	addmi	r3, #2
 8003b1e:	f8c9 3000 	strmi.w	r3, [r9]
 8003b22:	6825      	ldr	r5, [r4, #0]
 8003b24:	f015 0506 	ands.w	r5, r5, #6
 8003b28:	d107      	bne.n	8003b3a <_printf_common+0x52>
 8003b2a:	f104 0a19 	add.w	sl, r4, #25
 8003b2e:	68e3      	ldr	r3, [r4, #12]
 8003b30:	f8d9 2000 	ldr.w	r2, [r9]
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	429d      	cmp	r5, r3
 8003b38:	db2a      	blt.n	8003b90 <_printf_common+0xa8>
 8003b3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b3e:	6822      	ldr	r2, [r4, #0]
 8003b40:	3300      	adds	r3, #0
 8003b42:	bf18      	it	ne
 8003b44:	2301      	movne	r3, #1
 8003b46:	0692      	lsls	r2, r2, #26
 8003b48:	d42f      	bmi.n	8003baa <_printf_common+0xc2>
 8003b4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b4e:	4639      	mov	r1, r7
 8003b50:	4630      	mov	r0, r6
 8003b52:	47c0      	blx	r8
 8003b54:	3001      	adds	r0, #1
 8003b56:	d022      	beq.n	8003b9e <_printf_common+0xb6>
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	68e5      	ldr	r5, [r4, #12]
 8003b5c:	f003 0306 	and.w	r3, r3, #6
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	bf18      	it	ne
 8003b64:	2500      	movne	r5, #0
 8003b66:	f8d9 2000 	ldr.w	r2, [r9]
 8003b6a:	f04f 0900 	mov.w	r9, #0
 8003b6e:	bf08      	it	eq
 8003b70:	1aad      	subeq	r5, r5, r2
 8003b72:	68a3      	ldr	r3, [r4, #8]
 8003b74:	6922      	ldr	r2, [r4, #16]
 8003b76:	bf08      	it	eq
 8003b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	bfc4      	itt	gt
 8003b80:	1a9b      	subgt	r3, r3, r2
 8003b82:	18ed      	addgt	r5, r5, r3
 8003b84:	341a      	adds	r4, #26
 8003b86:	454d      	cmp	r5, r9
 8003b88:	d11b      	bne.n	8003bc2 <_printf_common+0xda>
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b90:	2301      	movs	r3, #1
 8003b92:	4652      	mov	r2, sl
 8003b94:	4639      	mov	r1, r7
 8003b96:	4630      	mov	r0, r6
 8003b98:	47c0      	blx	r8
 8003b9a:	3001      	adds	r0, #1
 8003b9c:	d103      	bne.n	8003ba6 <_printf_common+0xbe>
 8003b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba6:	3501      	adds	r5, #1
 8003ba8:	e7c1      	b.n	8003b2e <_printf_common+0x46>
 8003baa:	2030      	movs	r0, #48	; 0x30
 8003bac:	18e1      	adds	r1, r4, r3
 8003bae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bb8:	4422      	add	r2, r4
 8003bba:	3302      	adds	r3, #2
 8003bbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bc0:	e7c3      	b.n	8003b4a <_printf_common+0x62>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	4622      	mov	r2, r4
 8003bc6:	4639      	mov	r1, r7
 8003bc8:	4630      	mov	r0, r6
 8003bca:	47c0      	blx	r8
 8003bcc:	3001      	adds	r0, #1
 8003bce:	d0e6      	beq.n	8003b9e <_printf_common+0xb6>
 8003bd0:	f109 0901 	add.w	r9, r9, #1
 8003bd4:	e7d7      	b.n	8003b86 <_printf_common+0x9e>
	...

08003bd8 <_printf_i>:
 8003bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bdc:	4617      	mov	r7, r2
 8003bde:	7e0a      	ldrb	r2, [r1, #24]
 8003be0:	b085      	sub	sp, #20
 8003be2:	2a6e      	cmp	r2, #110	; 0x6e
 8003be4:	4698      	mov	r8, r3
 8003be6:	4606      	mov	r6, r0
 8003be8:	460c      	mov	r4, r1
 8003bea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003bec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003bf0:	f000 80bc 	beq.w	8003d6c <_printf_i+0x194>
 8003bf4:	d81a      	bhi.n	8003c2c <_printf_i+0x54>
 8003bf6:	2a63      	cmp	r2, #99	; 0x63
 8003bf8:	d02e      	beq.n	8003c58 <_printf_i+0x80>
 8003bfa:	d80a      	bhi.n	8003c12 <_printf_i+0x3a>
 8003bfc:	2a00      	cmp	r2, #0
 8003bfe:	f000 80c8 	beq.w	8003d92 <_printf_i+0x1ba>
 8003c02:	2a58      	cmp	r2, #88	; 0x58
 8003c04:	f000 808a 	beq.w	8003d1c <_printf_i+0x144>
 8003c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c0c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003c10:	e02a      	b.n	8003c68 <_printf_i+0x90>
 8003c12:	2a64      	cmp	r2, #100	; 0x64
 8003c14:	d001      	beq.n	8003c1a <_printf_i+0x42>
 8003c16:	2a69      	cmp	r2, #105	; 0x69
 8003c18:	d1f6      	bne.n	8003c08 <_printf_i+0x30>
 8003c1a:	6821      	ldr	r1, [r4, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003c22:	d023      	beq.n	8003c6c <_printf_i+0x94>
 8003c24:	1d11      	adds	r1, r2, #4
 8003c26:	6019      	str	r1, [r3, #0]
 8003c28:	6813      	ldr	r3, [r2, #0]
 8003c2a:	e027      	b.n	8003c7c <_printf_i+0xa4>
 8003c2c:	2a73      	cmp	r2, #115	; 0x73
 8003c2e:	f000 80b4 	beq.w	8003d9a <_printf_i+0x1c2>
 8003c32:	d808      	bhi.n	8003c46 <_printf_i+0x6e>
 8003c34:	2a6f      	cmp	r2, #111	; 0x6f
 8003c36:	d02a      	beq.n	8003c8e <_printf_i+0xb6>
 8003c38:	2a70      	cmp	r2, #112	; 0x70
 8003c3a:	d1e5      	bne.n	8003c08 <_printf_i+0x30>
 8003c3c:	680a      	ldr	r2, [r1, #0]
 8003c3e:	f042 0220 	orr.w	r2, r2, #32
 8003c42:	600a      	str	r2, [r1, #0]
 8003c44:	e003      	b.n	8003c4e <_printf_i+0x76>
 8003c46:	2a75      	cmp	r2, #117	; 0x75
 8003c48:	d021      	beq.n	8003c8e <_printf_i+0xb6>
 8003c4a:	2a78      	cmp	r2, #120	; 0x78
 8003c4c:	d1dc      	bne.n	8003c08 <_printf_i+0x30>
 8003c4e:	2278      	movs	r2, #120	; 0x78
 8003c50:	496f      	ldr	r1, [pc, #444]	; (8003e10 <_printf_i+0x238>)
 8003c52:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003c56:	e064      	b.n	8003d22 <_printf_i+0x14a>
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003c5e:	1d11      	adds	r1, r2, #4
 8003c60:	6019      	str	r1, [r3, #0]
 8003c62:	6813      	ldr	r3, [r2, #0]
 8003c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0a3      	b.n	8003db4 <_printf_i+0x1dc>
 8003c6c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003c70:	f102 0104 	add.w	r1, r2, #4
 8003c74:	6019      	str	r1, [r3, #0]
 8003c76:	d0d7      	beq.n	8003c28 <_printf_i+0x50>
 8003c78:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	da03      	bge.n	8003c88 <_printf_i+0xb0>
 8003c80:	222d      	movs	r2, #45	; 0x2d
 8003c82:	425b      	negs	r3, r3
 8003c84:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c88:	4962      	ldr	r1, [pc, #392]	; (8003e14 <_printf_i+0x23c>)
 8003c8a:	220a      	movs	r2, #10
 8003c8c:	e017      	b.n	8003cbe <_printf_i+0xe6>
 8003c8e:	6820      	ldr	r0, [r4, #0]
 8003c90:	6819      	ldr	r1, [r3, #0]
 8003c92:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003c96:	d003      	beq.n	8003ca0 <_printf_i+0xc8>
 8003c98:	1d08      	adds	r0, r1, #4
 8003c9a:	6018      	str	r0, [r3, #0]
 8003c9c:	680b      	ldr	r3, [r1, #0]
 8003c9e:	e006      	b.n	8003cae <_printf_i+0xd6>
 8003ca0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ca4:	f101 0004 	add.w	r0, r1, #4
 8003ca8:	6018      	str	r0, [r3, #0]
 8003caa:	d0f7      	beq.n	8003c9c <_printf_i+0xc4>
 8003cac:	880b      	ldrh	r3, [r1, #0]
 8003cae:	2a6f      	cmp	r2, #111	; 0x6f
 8003cb0:	bf14      	ite	ne
 8003cb2:	220a      	movne	r2, #10
 8003cb4:	2208      	moveq	r2, #8
 8003cb6:	4957      	ldr	r1, [pc, #348]	; (8003e14 <_printf_i+0x23c>)
 8003cb8:	2000      	movs	r0, #0
 8003cba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003cbe:	6865      	ldr	r5, [r4, #4]
 8003cc0:	2d00      	cmp	r5, #0
 8003cc2:	60a5      	str	r5, [r4, #8]
 8003cc4:	f2c0 809c 	blt.w	8003e00 <_printf_i+0x228>
 8003cc8:	6820      	ldr	r0, [r4, #0]
 8003cca:	f020 0004 	bic.w	r0, r0, #4
 8003cce:	6020      	str	r0, [r4, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d13f      	bne.n	8003d54 <_printf_i+0x17c>
 8003cd4:	2d00      	cmp	r5, #0
 8003cd6:	f040 8095 	bne.w	8003e04 <_printf_i+0x22c>
 8003cda:	4675      	mov	r5, lr
 8003cdc:	2a08      	cmp	r2, #8
 8003cde:	d10b      	bne.n	8003cf8 <_printf_i+0x120>
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	07da      	lsls	r2, r3, #31
 8003ce4:	d508      	bpl.n	8003cf8 <_printf_i+0x120>
 8003ce6:	6923      	ldr	r3, [r4, #16]
 8003ce8:	6862      	ldr	r2, [r4, #4]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	bfde      	ittt	le
 8003cee:	2330      	movle	r3, #48	; 0x30
 8003cf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cf4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003cf8:	ebae 0305 	sub.w	r3, lr, r5
 8003cfc:	6123      	str	r3, [r4, #16]
 8003cfe:	f8cd 8000 	str.w	r8, [sp]
 8003d02:	463b      	mov	r3, r7
 8003d04:	aa03      	add	r2, sp, #12
 8003d06:	4621      	mov	r1, r4
 8003d08:	4630      	mov	r0, r6
 8003d0a:	f7ff feed 	bl	8003ae8 <_printf_common>
 8003d0e:	3001      	adds	r0, #1
 8003d10:	d155      	bne.n	8003dbe <_printf_i+0x1e6>
 8003d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d16:	b005      	add	sp, #20
 8003d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d1c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003d20:	493c      	ldr	r1, [pc, #240]	; (8003e14 <_printf_i+0x23c>)
 8003d22:	6822      	ldr	r2, [r4, #0]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003d2a:	f100 0504 	add.w	r5, r0, #4
 8003d2e:	601d      	str	r5, [r3, #0]
 8003d30:	d001      	beq.n	8003d36 <_printf_i+0x15e>
 8003d32:	6803      	ldr	r3, [r0, #0]
 8003d34:	e002      	b.n	8003d3c <_printf_i+0x164>
 8003d36:	0655      	lsls	r5, r2, #25
 8003d38:	d5fb      	bpl.n	8003d32 <_printf_i+0x15a>
 8003d3a:	8803      	ldrh	r3, [r0, #0]
 8003d3c:	07d0      	lsls	r0, r2, #31
 8003d3e:	bf44      	itt	mi
 8003d40:	f042 0220 	orrmi.w	r2, r2, #32
 8003d44:	6022      	strmi	r2, [r4, #0]
 8003d46:	b91b      	cbnz	r3, 8003d50 <_printf_i+0x178>
 8003d48:	6822      	ldr	r2, [r4, #0]
 8003d4a:	f022 0220 	bic.w	r2, r2, #32
 8003d4e:	6022      	str	r2, [r4, #0]
 8003d50:	2210      	movs	r2, #16
 8003d52:	e7b1      	b.n	8003cb8 <_printf_i+0xe0>
 8003d54:	4675      	mov	r5, lr
 8003d56:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d5a:	fb02 3310 	mls	r3, r2, r0, r3
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d64:	4603      	mov	r3, r0
 8003d66:	2800      	cmp	r0, #0
 8003d68:	d1f5      	bne.n	8003d56 <_printf_i+0x17e>
 8003d6a:	e7b7      	b.n	8003cdc <_printf_i+0x104>
 8003d6c:	6808      	ldr	r0, [r1, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003d74:	6949      	ldr	r1, [r1, #20]
 8003d76:	d004      	beq.n	8003d82 <_printf_i+0x1aa>
 8003d78:	1d10      	adds	r0, r2, #4
 8003d7a:	6018      	str	r0, [r3, #0]
 8003d7c:	6813      	ldr	r3, [r2, #0]
 8003d7e:	6019      	str	r1, [r3, #0]
 8003d80:	e007      	b.n	8003d92 <_printf_i+0x1ba>
 8003d82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d86:	f102 0004 	add.w	r0, r2, #4
 8003d8a:	6018      	str	r0, [r3, #0]
 8003d8c:	6813      	ldr	r3, [r2, #0]
 8003d8e:	d0f6      	beq.n	8003d7e <_printf_i+0x1a6>
 8003d90:	8019      	strh	r1, [r3, #0]
 8003d92:	2300      	movs	r3, #0
 8003d94:	4675      	mov	r5, lr
 8003d96:	6123      	str	r3, [r4, #16]
 8003d98:	e7b1      	b.n	8003cfe <_printf_i+0x126>
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	1d11      	adds	r1, r2, #4
 8003d9e:	6019      	str	r1, [r3, #0]
 8003da0:	6815      	ldr	r5, [r2, #0]
 8003da2:	2100      	movs	r1, #0
 8003da4:	6862      	ldr	r2, [r4, #4]
 8003da6:	4628      	mov	r0, r5
 8003da8:	f000 f836 	bl	8003e18 <memchr>
 8003dac:	b108      	cbz	r0, 8003db2 <_printf_i+0x1da>
 8003dae:	1b40      	subs	r0, r0, r5
 8003db0:	6060      	str	r0, [r4, #4]
 8003db2:	6863      	ldr	r3, [r4, #4]
 8003db4:	6123      	str	r3, [r4, #16]
 8003db6:	2300      	movs	r3, #0
 8003db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dbc:	e79f      	b.n	8003cfe <_printf_i+0x126>
 8003dbe:	6923      	ldr	r3, [r4, #16]
 8003dc0:	462a      	mov	r2, r5
 8003dc2:	4639      	mov	r1, r7
 8003dc4:	4630      	mov	r0, r6
 8003dc6:	47c0      	blx	r8
 8003dc8:	3001      	adds	r0, #1
 8003dca:	d0a2      	beq.n	8003d12 <_printf_i+0x13a>
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	079b      	lsls	r3, r3, #30
 8003dd0:	d507      	bpl.n	8003de2 <_printf_i+0x20a>
 8003dd2:	2500      	movs	r5, #0
 8003dd4:	f104 0919 	add.w	r9, r4, #25
 8003dd8:	68e3      	ldr	r3, [r4, #12]
 8003dda:	9a03      	ldr	r2, [sp, #12]
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	429d      	cmp	r5, r3
 8003de0:	db05      	blt.n	8003dee <_printf_i+0x216>
 8003de2:	68e0      	ldr	r0, [r4, #12]
 8003de4:	9b03      	ldr	r3, [sp, #12]
 8003de6:	4298      	cmp	r0, r3
 8003de8:	bfb8      	it	lt
 8003dea:	4618      	movlt	r0, r3
 8003dec:	e793      	b.n	8003d16 <_printf_i+0x13e>
 8003dee:	2301      	movs	r3, #1
 8003df0:	464a      	mov	r2, r9
 8003df2:	4639      	mov	r1, r7
 8003df4:	4630      	mov	r0, r6
 8003df6:	47c0      	blx	r8
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d08a      	beq.n	8003d12 <_printf_i+0x13a>
 8003dfc:	3501      	adds	r5, #1
 8003dfe:	e7eb      	b.n	8003dd8 <_printf_i+0x200>
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1a7      	bne.n	8003d54 <_printf_i+0x17c>
 8003e04:	780b      	ldrb	r3, [r1, #0]
 8003e06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e0e:	e765      	b.n	8003cdc <_printf_i+0x104>
 8003e10:	08004606 	.word	0x08004606
 8003e14:	080045f5 	.word	0x080045f5

08003e18 <memchr>:
 8003e18:	b510      	push	{r4, lr}
 8003e1a:	b2c9      	uxtb	r1, r1
 8003e1c:	4402      	add	r2, r0
 8003e1e:	4290      	cmp	r0, r2
 8003e20:	4603      	mov	r3, r0
 8003e22:	d101      	bne.n	8003e28 <memchr+0x10>
 8003e24:	2000      	movs	r0, #0
 8003e26:	bd10      	pop	{r4, pc}
 8003e28:	781c      	ldrb	r4, [r3, #0]
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	428c      	cmp	r4, r1
 8003e2e:	d1f6      	bne.n	8003e1e <memchr+0x6>
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd10      	pop	{r4, pc}

08003e34 <memmove>:
 8003e34:	4288      	cmp	r0, r1
 8003e36:	b510      	push	{r4, lr}
 8003e38:	eb01 0302 	add.w	r3, r1, r2
 8003e3c:	d803      	bhi.n	8003e46 <memmove+0x12>
 8003e3e:	1e42      	subs	r2, r0, #1
 8003e40:	4299      	cmp	r1, r3
 8003e42:	d10c      	bne.n	8003e5e <memmove+0x2a>
 8003e44:	bd10      	pop	{r4, pc}
 8003e46:	4298      	cmp	r0, r3
 8003e48:	d2f9      	bcs.n	8003e3e <memmove+0xa>
 8003e4a:	1881      	adds	r1, r0, r2
 8003e4c:	1ad2      	subs	r2, r2, r3
 8003e4e:	42d3      	cmn	r3, r2
 8003e50:	d100      	bne.n	8003e54 <memmove+0x20>
 8003e52:	bd10      	pop	{r4, pc}
 8003e54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e58:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003e5c:	e7f7      	b.n	8003e4e <memmove+0x1a>
 8003e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e62:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003e66:	e7eb      	b.n	8003e40 <memmove+0xc>

08003e68 <_free_r>:
 8003e68:	b538      	push	{r3, r4, r5, lr}
 8003e6a:	4605      	mov	r5, r0
 8003e6c:	2900      	cmp	r1, #0
 8003e6e:	d043      	beq.n	8003ef8 <_free_r+0x90>
 8003e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e74:	1f0c      	subs	r4, r1, #4
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	bfb8      	it	lt
 8003e7a:	18e4      	addlt	r4, r4, r3
 8003e7c:	f000 f8d4 	bl	8004028 <__malloc_lock>
 8003e80:	4a1e      	ldr	r2, [pc, #120]	; (8003efc <_free_r+0x94>)
 8003e82:	6813      	ldr	r3, [r2, #0]
 8003e84:	4610      	mov	r0, r2
 8003e86:	b933      	cbnz	r3, 8003e96 <_free_r+0x2e>
 8003e88:	6063      	str	r3, [r4, #4]
 8003e8a:	6014      	str	r4, [r2, #0]
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e92:	f000 b8ca 	b.w	800402a <__malloc_unlock>
 8003e96:	42a3      	cmp	r3, r4
 8003e98:	d90b      	bls.n	8003eb2 <_free_r+0x4a>
 8003e9a:	6821      	ldr	r1, [r4, #0]
 8003e9c:	1862      	adds	r2, r4, r1
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	bf01      	itttt	eq
 8003ea2:	681a      	ldreq	r2, [r3, #0]
 8003ea4:	685b      	ldreq	r3, [r3, #4]
 8003ea6:	1852      	addeq	r2, r2, r1
 8003ea8:	6022      	streq	r2, [r4, #0]
 8003eaa:	6063      	str	r3, [r4, #4]
 8003eac:	6004      	str	r4, [r0, #0]
 8003eae:	e7ed      	b.n	8003e8c <_free_r+0x24>
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	b10a      	cbz	r2, 8003eba <_free_r+0x52>
 8003eb6:	42a2      	cmp	r2, r4
 8003eb8:	d9fa      	bls.n	8003eb0 <_free_r+0x48>
 8003eba:	6819      	ldr	r1, [r3, #0]
 8003ebc:	1858      	adds	r0, r3, r1
 8003ebe:	42a0      	cmp	r0, r4
 8003ec0:	d10b      	bne.n	8003eda <_free_r+0x72>
 8003ec2:	6820      	ldr	r0, [r4, #0]
 8003ec4:	4401      	add	r1, r0
 8003ec6:	1858      	adds	r0, r3, r1
 8003ec8:	4282      	cmp	r2, r0
 8003eca:	6019      	str	r1, [r3, #0]
 8003ecc:	d1de      	bne.n	8003e8c <_free_r+0x24>
 8003ece:	6810      	ldr	r0, [r2, #0]
 8003ed0:	6852      	ldr	r2, [r2, #4]
 8003ed2:	4401      	add	r1, r0
 8003ed4:	6019      	str	r1, [r3, #0]
 8003ed6:	605a      	str	r2, [r3, #4]
 8003ed8:	e7d8      	b.n	8003e8c <_free_r+0x24>
 8003eda:	d902      	bls.n	8003ee2 <_free_r+0x7a>
 8003edc:	230c      	movs	r3, #12
 8003ede:	602b      	str	r3, [r5, #0]
 8003ee0:	e7d4      	b.n	8003e8c <_free_r+0x24>
 8003ee2:	6820      	ldr	r0, [r4, #0]
 8003ee4:	1821      	adds	r1, r4, r0
 8003ee6:	428a      	cmp	r2, r1
 8003ee8:	bf01      	itttt	eq
 8003eea:	6811      	ldreq	r1, [r2, #0]
 8003eec:	6852      	ldreq	r2, [r2, #4]
 8003eee:	1809      	addeq	r1, r1, r0
 8003ef0:	6021      	streq	r1, [r4, #0]
 8003ef2:	6062      	str	r2, [r4, #4]
 8003ef4:	605c      	str	r4, [r3, #4]
 8003ef6:	e7c9      	b.n	8003e8c <_free_r+0x24>
 8003ef8:	bd38      	pop	{r3, r4, r5, pc}
 8003efa:	bf00      	nop
 8003efc:	20000160 	.word	0x20000160

08003f00 <_malloc_r>:
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	1ccd      	adds	r5, r1, #3
 8003f04:	f025 0503 	bic.w	r5, r5, #3
 8003f08:	3508      	adds	r5, #8
 8003f0a:	2d0c      	cmp	r5, #12
 8003f0c:	bf38      	it	cc
 8003f0e:	250c      	movcc	r5, #12
 8003f10:	2d00      	cmp	r5, #0
 8003f12:	4606      	mov	r6, r0
 8003f14:	db01      	blt.n	8003f1a <_malloc_r+0x1a>
 8003f16:	42a9      	cmp	r1, r5
 8003f18:	d903      	bls.n	8003f22 <_malloc_r+0x22>
 8003f1a:	230c      	movs	r3, #12
 8003f1c:	6033      	str	r3, [r6, #0]
 8003f1e:	2000      	movs	r0, #0
 8003f20:	bd70      	pop	{r4, r5, r6, pc}
 8003f22:	f000 f881 	bl	8004028 <__malloc_lock>
 8003f26:	4a23      	ldr	r2, [pc, #140]	; (8003fb4 <_malloc_r+0xb4>)
 8003f28:	6814      	ldr	r4, [r2, #0]
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	b991      	cbnz	r1, 8003f54 <_malloc_r+0x54>
 8003f2e:	4c22      	ldr	r4, [pc, #136]	; (8003fb8 <_malloc_r+0xb8>)
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	b91b      	cbnz	r3, 8003f3c <_malloc_r+0x3c>
 8003f34:	4630      	mov	r0, r6
 8003f36:	f000 f867 	bl	8004008 <_sbrk_r>
 8003f3a:	6020      	str	r0, [r4, #0]
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	4630      	mov	r0, r6
 8003f40:	f000 f862 	bl	8004008 <_sbrk_r>
 8003f44:	1c43      	adds	r3, r0, #1
 8003f46:	d126      	bne.n	8003f96 <_malloc_r+0x96>
 8003f48:	230c      	movs	r3, #12
 8003f4a:	4630      	mov	r0, r6
 8003f4c:	6033      	str	r3, [r6, #0]
 8003f4e:	f000 f86c 	bl	800402a <__malloc_unlock>
 8003f52:	e7e4      	b.n	8003f1e <_malloc_r+0x1e>
 8003f54:	680b      	ldr	r3, [r1, #0]
 8003f56:	1b5b      	subs	r3, r3, r5
 8003f58:	d41a      	bmi.n	8003f90 <_malloc_r+0x90>
 8003f5a:	2b0b      	cmp	r3, #11
 8003f5c:	d90f      	bls.n	8003f7e <_malloc_r+0x7e>
 8003f5e:	600b      	str	r3, [r1, #0]
 8003f60:	18cc      	adds	r4, r1, r3
 8003f62:	50cd      	str	r5, [r1, r3]
 8003f64:	4630      	mov	r0, r6
 8003f66:	f000 f860 	bl	800402a <__malloc_unlock>
 8003f6a:	f104 000b 	add.w	r0, r4, #11
 8003f6e:	1d23      	adds	r3, r4, #4
 8003f70:	f020 0007 	bic.w	r0, r0, #7
 8003f74:	1ac3      	subs	r3, r0, r3
 8003f76:	d01b      	beq.n	8003fb0 <_malloc_r+0xb0>
 8003f78:	425a      	negs	r2, r3
 8003f7a:	50e2      	str	r2, [r4, r3]
 8003f7c:	bd70      	pop	{r4, r5, r6, pc}
 8003f7e:	428c      	cmp	r4, r1
 8003f80:	bf0b      	itete	eq
 8003f82:	6863      	ldreq	r3, [r4, #4]
 8003f84:	684b      	ldrne	r3, [r1, #4]
 8003f86:	6013      	streq	r3, [r2, #0]
 8003f88:	6063      	strne	r3, [r4, #4]
 8003f8a:	bf18      	it	ne
 8003f8c:	460c      	movne	r4, r1
 8003f8e:	e7e9      	b.n	8003f64 <_malloc_r+0x64>
 8003f90:	460c      	mov	r4, r1
 8003f92:	6849      	ldr	r1, [r1, #4]
 8003f94:	e7ca      	b.n	8003f2c <_malloc_r+0x2c>
 8003f96:	1cc4      	adds	r4, r0, #3
 8003f98:	f024 0403 	bic.w	r4, r4, #3
 8003f9c:	42a0      	cmp	r0, r4
 8003f9e:	d005      	beq.n	8003fac <_malloc_r+0xac>
 8003fa0:	1a21      	subs	r1, r4, r0
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	f000 f830 	bl	8004008 <_sbrk_r>
 8003fa8:	3001      	adds	r0, #1
 8003faa:	d0cd      	beq.n	8003f48 <_malloc_r+0x48>
 8003fac:	6025      	str	r5, [r4, #0]
 8003fae:	e7d9      	b.n	8003f64 <_malloc_r+0x64>
 8003fb0:	bd70      	pop	{r4, r5, r6, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000160 	.word	0x20000160
 8003fb8:	20000164 	.word	0x20000164

08003fbc <_realloc_r>:
 8003fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fbe:	4607      	mov	r7, r0
 8003fc0:	4614      	mov	r4, r2
 8003fc2:	460e      	mov	r6, r1
 8003fc4:	b921      	cbnz	r1, 8003fd0 <_realloc_r+0x14>
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003fcc:	f7ff bf98 	b.w	8003f00 <_malloc_r>
 8003fd0:	b922      	cbnz	r2, 8003fdc <_realloc_r+0x20>
 8003fd2:	f7ff ff49 	bl	8003e68 <_free_r>
 8003fd6:	4625      	mov	r5, r4
 8003fd8:	4628      	mov	r0, r5
 8003fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fdc:	f000 f826 	bl	800402c <_malloc_usable_size_r>
 8003fe0:	4284      	cmp	r4, r0
 8003fe2:	d90f      	bls.n	8004004 <_realloc_r+0x48>
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	f7ff ff8a 	bl	8003f00 <_malloc_r>
 8003fec:	4605      	mov	r5, r0
 8003fee:	2800      	cmp	r0, #0
 8003ff0:	d0f2      	beq.n	8003fd8 <_realloc_r+0x1c>
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	4622      	mov	r2, r4
 8003ff6:	f7ff fbef 	bl	80037d8 <memcpy>
 8003ffa:	4631      	mov	r1, r6
 8003ffc:	4638      	mov	r0, r7
 8003ffe:	f7ff ff33 	bl	8003e68 <_free_r>
 8004002:	e7e9      	b.n	8003fd8 <_realloc_r+0x1c>
 8004004:	4635      	mov	r5, r6
 8004006:	e7e7      	b.n	8003fd8 <_realloc_r+0x1c>

08004008 <_sbrk_r>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	2300      	movs	r3, #0
 800400c:	4c05      	ldr	r4, [pc, #20]	; (8004024 <_sbrk_r+0x1c>)
 800400e:	4605      	mov	r5, r0
 8004010:	4608      	mov	r0, r1
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	f7ff fb30 	bl	8003678 <_sbrk>
 8004018:	1c43      	adds	r3, r0, #1
 800401a:	d102      	bne.n	8004022 <_sbrk_r+0x1a>
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	b103      	cbz	r3, 8004022 <_sbrk_r+0x1a>
 8004020:	602b      	str	r3, [r5, #0]
 8004022:	bd38      	pop	{r3, r4, r5, pc}
 8004024:	20000204 	.word	0x20000204

08004028 <__malloc_lock>:
 8004028:	4770      	bx	lr

0800402a <__malloc_unlock>:
 800402a:	4770      	bx	lr

0800402c <_malloc_usable_size_r>:
 800402c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004030:	2800      	cmp	r0, #0
 8004032:	f1a0 0004 	sub.w	r0, r0, #4
 8004036:	bfbc      	itt	lt
 8004038:	580b      	ldrlt	r3, [r1, r0]
 800403a:	18c0      	addlt	r0, r0, r3
 800403c:	4770      	bx	lr
	...

08004040 <_init>:
 8004040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004042:	bf00      	nop
 8004044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004046:	bc08      	pop	{r3}
 8004048:	469e      	mov	lr, r3
 800404a:	4770      	bx	lr

0800404c <_fini>:
 800404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404e:	bf00      	nop
 8004050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004052:	bc08      	pop	{r3}
 8004054:	469e      	mov	lr, r3
 8004056:	4770      	bx	lr

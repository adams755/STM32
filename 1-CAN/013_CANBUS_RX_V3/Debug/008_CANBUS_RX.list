
008_CANBUS_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002308  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002414  08002414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002440  08002440  00012440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002444  08002444  00012444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d0  2000000c  08002454  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000dc  08002454  000200dc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000068ed  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001393  00000000  00000000  00026922  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000718  00000000  00000000  00027cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000670  00000000  00000000  000283d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002e68  00000000  00000000  00028a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000022eb  00000000  00000000  0002b8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002db93  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001c24  00000000  00000000  0002dc10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080023fc 	.word	0x080023fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080023fc 	.word	0x080023fc

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fe9d 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 ffb8 	bl	80020dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 feb5 	bl	8000f06 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 fe7d 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000005c 	.word	0x2000005c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000005c 	.word	0x2000005c

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad2      	subs	r2, r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d3f7      	bcc.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d101      	bne.n	8000266 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000262:	2301      	movs	r3, #1
 8000264:	e0ec      	b.n	8000440 <HAL_CAN_Init+0x1ec>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	2b00      	cmp	r3, #0
 8000270:	d102      	bne.n	8000278 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000272:	6878      	ldr	r0, [r7, #4]
 8000274:	f001 ff54 	bl	8002120 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	6812      	ldr	r2, [r2, #0]
 8000280:	6812      	ldr	r2, [r2, #0]
 8000282:	f022 0202 	bic.w	r2, r2, #2
 8000286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000288:	f7ff ffb8 	bl	80001fc <HAL_GetTick>
 800028c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800028e:	e012      	b.n	80002b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000290:	f7ff ffb4 	bl	80001fc <HAL_GetTick>
 8000294:	4602      	mov	r2, r0
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	1ad3      	subs	r3, r2, r3
 800029a:	2b0a      	cmp	r3, #10
 800029c:	d90b      	bls.n	80002b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2205      	movs	r2, #5
 80002ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002b2:	2301      	movs	r3, #1
 80002b4:	e0c4      	b.n	8000440 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	f003 0302 	and.w	r3, r3, #2
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1e5      	bne.n	8000290 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	6812      	ldr	r2, [r2, #0]
 80002cc:	6812      	ldr	r2, [r2, #0]
 80002ce:	f042 0201 	orr.w	r2, r2, #1
 80002d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002d4:	f7ff ff92 	bl	80001fc <HAL_GetTick>
 80002d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002da:	e012      	b.n	8000302 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002dc:	f7ff ff8e 	bl	80001fc <HAL_GetTick>
 80002e0:	4602      	mov	r2, r0
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	2b0a      	cmp	r3, #10
 80002e8:	d90b      	bls.n	8000302 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2205      	movs	r2, #5
 80002fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002fe:	2301      	movs	r3, #1
 8000300:	e09e      	b.n	8000440 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0e5      	beq.n	80002dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	7e1b      	ldrb	r3, [r3, #24]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d108      	bne.n	800032a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	6812      	ldr	r2, [r2, #0]
 8000320:	6812      	ldr	r2, [r2, #0]
 8000322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	e007      	b.n	800033a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	6812      	ldr	r2, [r2, #0]
 8000332:	6812      	ldr	r2, [r2, #0]
 8000334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000338:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	7e5b      	ldrb	r3, [r3, #25]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d108      	bne.n	8000354 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	6812      	ldr	r2, [r2, #0]
 800034a:	6812      	ldr	r2, [r2, #0]
 800034c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	e007      	b.n	8000364 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	6812      	ldr	r2, [r2, #0]
 800035c:	6812      	ldr	r2, [r2, #0]
 800035e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000362:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	7e9b      	ldrb	r3, [r3, #26]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d108      	bne.n	800037e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	6812      	ldr	r2, [r2, #0]
 8000374:	6812      	ldr	r2, [r2, #0]
 8000376:	f042 0220 	orr.w	r2, r2, #32
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	e007      	b.n	800038e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	6812      	ldr	r2, [r2, #0]
 8000386:	6812      	ldr	r2, [r2, #0]
 8000388:	f022 0220 	bic.w	r2, r2, #32
 800038c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	7edb      	ldrb	r3, [r3, #27]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d108      	bne.n	80003a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	6812      	ldr	r2, [r2, #0]
 800039e:	6812      	ldr	r2, [r2, #0]
 80003a0:	f022 0210 	bic.w	r2, r2, #16
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	e007      	b.n	80003b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	6812      	ldr	r2, [r2, #0]
 80003b0:	6812      	ldr	r2, [r2, #0]
 80003b2:	f042 0210 	orr.w	r2, r2, #16
 80003b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	7f1b      	ldrb	r3, [r3, #28]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d108      	bne.n	80003d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	6812      	ldr	r2, [r2, #0]
 80003c8:	6812      	ldr	r2, [r2, #0]
 80003ca:	f042 0208 	orr.w	r2, r2, #8
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	e007      	b.n	80003e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	6812      	ldr	r2, [r2, #0]
 80003da:	6812      	ldr	r2, [r2, #0]
 80003dc:	f022 0208 	bic.w	r2, r2, #8
 80003e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	7f5b      	ldrb	r3, [r3, #29]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d108      	bne.n	80003fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	6812      	ldr	r2, [r2, #0]
 80003f2:	6812      	ldr	r2, [r2, #0]
 80003f4:	f042 0204 	orr.w	r2, r2, #4
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	e007      	b.n	800040c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	6812      	ldr	r2, [r2, #0]
 8000404:	6812      	ldr	r2, [r2, #0]
 8000406:	f022 0204 	bic.w	r2, r2, #4
 800040a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	6891      	ldr	r1, [r2, #8]
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	68d2      	ldr	r2, [r2, #12]
 8000418:	4311      	orrs	r1, r2
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	6912      	ldr	r2, [r2, #16]
 800041e:	4311      	orrs	r1, r2
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	6952      	ldr	r2, [r2, #20]
 8000424:	4311      	orrs	r1, r2
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	6852      	ldr	r2, [r2, #4]
 800042a:	3a01      	subs	r2, #1
 800042c:	430a      	orrs	r2, r1
 800042e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2200      	movs	r2, #0
 8000434:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800043e:	2300      	movs	r3, #0
}
 8000440:	4618      	mov	r0, r3
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000448:	b480      	push	{r7}
 800044a:	b087      	sub	sp, #28
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800045e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000460:	7cfb      	ldrb	r3, [r7, #19]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d003      	beq.n	800046e <HAL_CAN_ConfigFilter+0x26>
 8000466:	7cfb      	ldrb	r3, [r7, #19]
 8000468:	2b02      	cmp	r3, #2
 800046a:	f040 80aa 	bne.w	80005c2 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000474:	f043 0201 	orr.w	r2, r3, #1
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f003 031f 	and.w	r3, r3, #31
 8000486:	2201      	movs	r2, #1
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	43db      	mvns	r3, r3
 8000498:	401a      	ands	r2, r3
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	69db      	ldr	r3, [r3, #28]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d123      	bne.n	80004f0 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	43db      	mvns	r3, r3
 80004b2:	401a      	ands	r2, r3
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80004ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	3248      	adds	r2, #72	; 0x48
 80004d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80004d8:	683a      	ldr	r2, [r7, #0]
 80004da:	6892      	ldr	r2, [r2, #8]
 80004dc:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80004de:	683a      	ldr	r2, [r7, #0]
 80004e0:	6812      	ldr	r2, [r2, #0]
 80004e2:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80004e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80004e6:	6979      	ldr	r1, [r7, #20]
 80004e8:	3348      	adds	r3, #72	; 0x48
 80004ea:	00db      	lsls	r3, r3, #3
 80004ec:	440b      	add	r3, r1
 80004ee:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d122      	bne.n	800053e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	431a      	orrs	r2, r3
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000518:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	3248      	adds	r2, #72	; 0x48
 800051e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000526:	683a      	ldr	r2, [r7, #0]
 8000528:	6892      	ldr	r2, [r2, #8]
 800052a:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	68d2      	ldr	r2, [r2, #12]
 8000530:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000532:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000534:	6979      	ldr	r1, [r7, #20]
 8000536:	3348      	adds	r3, #72	; 0x48
 8000538:	00db      	lsls	r3, r3, #3
 800053a:	440b      	add	r3, r1
 800053c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d109      	bne.n	800055a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	43db      	mvns	r3, r3
 8000550:	401a      	ands	r2, r3
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000558:	e007      	b.n	800056a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	431a      	orrs	r2, r3
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	691b      	ldr	r3, [r3, #16]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d109      	bne.n	8000586 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	43db      	mvns	r3, r3
 800057c:	401a      	ands	r2, r3
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000584:	e007      	b.n	8000596 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	431a      	orrs	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	6a1b      	ldr	r3, [r3, #32]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d107      	bne.n	80005ae <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	431a      	orrs	r2, r3
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005b4:	f023 0201 	bic.w	r2, r3, #1
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80005be:	2300      	movs	r3, #0
 80005c0:	e006      	b.n	80005d0 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
  }
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	371c      	adds	r7, #28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr

080005da <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d12e      	bne.n	800064c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2202      	movs	r2, #2
 80005f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	6812      	ldr	r2, [r2, #0]
 80005fe:	6812      	ldr	r2, [r2, #0]
 8000600:	f022 0201 	bic.w	r2, r2, #1
 8000604:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000606:	f7ff fdf9 	bl	80001fc <HAL_GetTick>
 800060a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800060c:	e012      	b.n	8000634 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800060e:	f7ff fdf5 	bl	80001fc <HAL_GetTick>
 8000612:	4602      	mov	r2, r0
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	2b0a      	cmp	r3, #10
 800061a:	d90b      	bls.n	8000634 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000620:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2205      	movs	r2, #5
 800062c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000630:	2301      	movs	r3, #1
 8000632:	e012      	b.n	800065a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1e5      	bne.n	800060e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2200      	movs	r2, #0
 8000646:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000648:	2300      	movs	r3, #0
 800064a:	e006      	b.n	800065a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000650:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000658:	2301      	movs	r3, #1
  }
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000662:	b480      	push	{r7}
 8000664:	b087      	sub	sp, #28
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	607a      	str	r2, [r7, #4]
 800066e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000676:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000678:	7dfb      	ldrb	r3, [r7, #23]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d003      	beq.n	8000686 <HAL_CAN_GetRxMessage+0x24>
 800067e:	7dfb      	ldrb	r3, [r7, #23]
 8000680:	2b02      	cmp	r3, #2
 8000682:	f040 80f3 	bne.w	800086c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d10e      	bne.n	80006aa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	f003 0303 	and.w	r3, r3, #3
 8000696:	2b00      	cmp	r3, #0
 8000698:	d116      	bne.n	80006c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e0e7      	b.n	800087a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	691b      	ldr	r3, [r3, #16]
 80006b0:	f003 0303 	and.w	r3, r3, #3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d107      	bne.n	80006c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80006c4:	2301      	movs	r3, #1
 80006c6:	e0d8      	b.n	800087a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	331b      	adds	r3, #27
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	4413      	add	r3, r2
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0204 	and.w	r2, r3, #4
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d10c      	bne.n	8000700 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	331b      	adds	r3, #27
 80006ee:	011b      	lsls	r3, r3, #4
 80006f0:	4413      	add	r3, r2
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	0d5b      	lsrs	r3, r3, #21
 80006f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	e00b      	b.n	8000718 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	331b      	adds	r3, #27
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	4413      	add	r3, r2
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	08db      	lsrs	r3, r3, #3
 8000710:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	331b      	adds	r3, #27
 8000720:	011b      	lsls	r3, r3, #4
 8000722:	4413      	add	r3, r2
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f003 0202 	and.w	r2, r3, #2
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	331b      	adds	r3, #27
 8000736:	011b      	lsls	r3, r3, #4
 8000738:	4413      	add	r3, r2
 800073a:	3304      	adds	r3, #4
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f003 020f 	and.w	r2, r3, #15
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	331b      	adds	r3, #27
 800074e:	011b      	lsls	r3, r3, #4
 8000750:	4413      	add	r3, r2
 8000752:	3304      	adds	r3, #4
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	0a1b      	lsrs	r3, r3, #8
 8000758:	b2da      	uxtb	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	331b      	adds	r3, #27
 8000766:	011b      	lsls	r3, r3, #4
 8000768:	4413      	add	r3, r2
 800076a:	3304      	adds	r3, #4
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	0c1b      	lsrs	r3, r3, #16
 8000770:	b29a      	uxth	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	011b      	lsls	r3, r3, #4
 800077e:	4413      	add	r3, r2
 8000780:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	3301      	adds	r3, #1
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	6811      	ldr	r1, [r2, #0]
 8000794:	68ba      	ldr	r2, [r7, #8]
 8000796:	0112      	lsls	r2, r2, #4
 8000798:	440a      	add	r2, r1
 800079a:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 800079e:	6812      	ldr	r2, [r2, #0]
 80007a0:	0a12      	lsrs	r2, r2, #8
 80007a2:	b2d2      	uxtb	r2, r2
 80007a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	3302      	adds	r3, #2
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	6811      	ldr	r1, [r2, #0]
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	0112      	lsls	r2, r2, #4
 80007b2:	440a      	add	r2, r1
 80007b4:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80007b8:	6812      	ldr	r2, [r2, #0]
 80007ba:	0c12      	lsrs	r2, r2, #16
 80007bc:	b2d2      	uxtb	r2, r2
 80007be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	3303      	adds	r3, #3
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	6811      	ldr	r1, [r2, #0]
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	0112      	lsls	r2, r2, #4
 80007cc:	440a      	add	r2, r1
 80007ce:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80007d2:	6812      	ldr	r2, [r2, #0]
 80007d4:	0e12      	lsrs	r2, r2, #24
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	3304      	adds	r3, #4
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	6811      	ldr	r1, [r2, #0]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	0112      	lsls	r2, r2, #4
 80007e6:	440a      	add	r2, r1
 80007e8:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	b2d2      	uxtb	r2, r2
 80007f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	3305      	adds	r3, #5
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	6811      	ldr	r1, [r2, #0]
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	0112      	lsls	r2, r2, #4
 80007fe:	440a      	add	r2, r1
 8000800:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000804:	6812      	ldr	r2, [r2, #0]
 8000806:	0a12      	lsrs	r2, r2, #8
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	3306      	adds	r3, #6
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	6811      	ldr	r1, [r2, #0]
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	0112      	lsls	r2, r2, #4
 8000818:	440a      	add	r2, r1
 800081a:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 800081e:	6812      	ldr	r2, [r2, #0]
 8000820:	0c12      	lsrs	r2, r2, #16
 8000822:	b2d2      	uxtb	r2, r2
 8000824:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	3307      	adds	r3, #7
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	6811      	ldr	r1, [r2, #0]
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	0112      	lsls	r2, r2, #4
 8000832:	440a      	add	r2, r1
 8000834:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000838:	6812      	ldr	r2, [r2, #0]
 800083a:	0e12      	lsrs	r2, r2, #24
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d108      	bne.n	8000858 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	6812      	ldr	r2, [r2, #0]
 800084e:	68d2      	ldr	r2, [r2, #12]
 8000850:	f042 0220 	orr.w	r2, r2, #32
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	e007      	b.n	8000868 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	6812      	ldr	r2, [r2, #0]
 8000860:	6912      	ldr	r2, [r2, #16]
 8000862:	f042 0220 	orr.w	r2, r2, #32
 8000866:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000868:	2300      	movs	r3, #0
 800086a:	e006      	b.n	800087a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000870:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000878:	2301      	movs	r3, #1
  }
}
 800087a:	4618      	mov	r0, r3
 800087c:	371c      	adds	r7, #28
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000894:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d002      	beq.n	80008a2 <HAL_CAN_ActivateNotification+0x1e>
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d109      	bne.n	80008b6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	6812      	ldr	r2, [r2, #0]
 80008aa:	6951      	ldr	r1, [r2, #20]
 80008ac:	683a      	ldr	r2, [r7, #0]
 80008ae:	430a      	orrs	r2, r1
 80008b0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80008b2:	2300      	movs	r3, #0
 80008b4:	e006      	b.n	80008c4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
  }
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b08a      	sub	sp, #40	; 0x28
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	691b      	ldr	r3, [r3, #16]
 8000900:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800090a:	6a3b      	ldr	r3, [r7, #32]
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	2b00      	cmp	r3, #0
 8000912:	d07c      	beq.n	8000a0e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	2b00      	cmp	r3, #0
 800091c:	d023      	beq.n	8000966 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2201      	movs	r2, #1
 8000924:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	f003 0302 	and.w	r3, r3, #2
 800092c:	2b00      	cmp	r3, #0
 800092e:	d003      	beq.n	8000938 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f000 f97d 	bl	8000c30 <HAL_CAN_TxMailbox0CompleteCallback>
 8000936:	e016      	b.n	8000966 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	2b00      	cmp	r3, #0
 8000940:	d004      	beq.n	800094c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000944:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
 800094a:	e00c      	b.n	8000966 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	f003 0308 	and.w	r3, r3, #8
 8000952:	2b00      	cmp	r3, #0
 8000954:	d004      	beq.n	8000960 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000958:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
 800095e:	e002      	b.n	8000966 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f000 f980 	bl	8000c66 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800096c:	2b00      	cmp	r3, #0
 800096e:	d024      	beq.n	80009ba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000978:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000980:	2b00      	cmp	r3, #0
 8000982:	d003      	beq.n	800098c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f000 f95c 	bl	8000c42 <HAL_CAN_TxMailbox1CompleteCallback>
 800098a:	e016      	b.n	80009ba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000992:	2b00      	cmp	r3, #0
 8000994:	d004      	beq.n	80009a0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
 800099e:	e00c      	b.n	80009ba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d004      	beq.n	80009b4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
 80009b2:	e002      	b.n	80009ba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f000 f95f 	bl	8000c78 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d024      	beq.n	8000a0e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d003      	beq.n	80009e0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f93b 	bl	8000c54 <HAL_CAN_TxMailbox2CompleteCallback>
 80009de:	e016      	b.n	8000a0e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d004      	beq.n	80009f4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80009ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
 80009f2:	e00c      	b.n	8000a0e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d004      	beq.n	8000a08 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
 8000a06:	e002      	b.n	8000a0e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f000 f93e 	bl	8000c8a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	f003 0308 	and.w	r3, r3, #8
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d00c      	beq.n	8000a32 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	f003 0310 	and.w	r3, r3, #16
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d007      	beq.n	8000a32 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2210      	movs	r2, #16
 8000a30:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000a32:	6a3b      	ldr	r3, [r7, #32]
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00b      	beq.n	8000a54 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	f003 0308 	and.w	r3, r3, #8
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d006      	beq.n	8000a54 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f000 f924 	bl	8000c9c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d009      	beq.n	8000a72 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	f003 0303 	and.w	r3, r3, #3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f001 fb09 	bl	8002084 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000a72:	6a3b      	ldr	r3, [r7, #32]
 8000a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00c      	beq.n	8000a96 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	f003 0310 	and.w	r3, r3, #16
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d007      	beq.n	8000a96 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2210      	movs	r2, #16
 8000a94:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000a96:	6a3b      	ldr	r3, [r7, #32]
 8000a98:	f003 0320 	and.w	r3, r3, #32
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d00b      	beq.n	8000ab8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d006      	beq.n	8000ab8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2208      	movs	r2, #8
 8000ab0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 f904 	bl	8000cc0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000ab8:	6a3b      	ldr	r3, [r7, #32]
 8000aba:	f003 0310 	and.w	r3, r3, #16
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d009      	beq.n	8000ad6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	691b      	ldr	r3, [r3, #16]
 8000ac8:	f003 0303 	and.w	r3, r3, #3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d002      	beq.n	8000ad6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f000 f8ec 	bl	8000cae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000ad6:	6a3b      	ldr	r3, [r7, #32]
 8000ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d00b      	beq.n	8000af8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f003 0310 	and.w	r3, r3, #16
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d006      	beq.n	8000af8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2210      	movs	r2, #16
 8000af0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f000 f8ed 	bl	8000cd2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d00b      	beq.n	8000b1a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	f003 0308 	and.w	r3, r3, #8
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d006      	beq.n	8000b1a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2208      	movs	r2, #8
 8000b12:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f000 f8e5 	bl	8000ce4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000b1a:	6a3b      	ldr	r3, [r7, #32]
 8000b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d075      	beq.n	8000c10 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d06c      	beq.n	8000c08 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d008      	beq.n	8000b4a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000b4a:	6a3b      	ldr	r3, [r7, #32]
 8000b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d008      	beq.n	8000b66 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000b66:	6a3b      	ldr	r3, [r7, #32]
 8000b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d008      	beq.n	8000b82 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000b82:	6a3b      	ldr	r3, [r7, #32]
 8000b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d03d      	beq.n	8000c08 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d038      	beq.n	8000c08 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000b9c:	2b30      	cmp	r3, #48	; 0x30
 8000b9e:	d017      	beq.n	8000bd0 <HAL_CAN_IRQHandler+0x302>
 8000ba0:	2b30      	cmp	r3, #48	; 0x30
 8000ba2:	d804      	bhi.n	8000bae <HAL_CAN_IRQHandler+0x2e0>
 8000ba4:	2b10      	cmp	r3, #16
 8000ba6:	d009      	beq.n	8000bbc <HAL_CAN_IRQHandler+0x2ee>
 8000ba8:	2b20      	cmp	r3, #32
 8000baa:	d00c      	beq.n	8000bc6 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000bac:	e024      	b.n	8000bf8 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000bae:	2b50      	cmp	r3, #80	; 0x50
 8000bb0:	d018      	beq.n	8000be4 <HAL_CAN_IRQHandler+0x316>
 8000bb2:	2b60      	cmp	r3, #96	; 0x60
 8000bb4:	d01b      	beq.n	8000bee <HAL_CAN_IRQHandler+0x320>
 8000bb6:	2b40      	cmp	r3, #64	; 0x40
 8000bb8:	d00f      	beq.n	8000bda <HAL_CAN_IRQHandler+0x30c>
            break;
 8000bba:	e01d      	b.n	8000bf8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	f043 0308 	orr.w	r3, r3, #8
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000bc4:	e018      	b.n	8000bf8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc8:	f043 0310 	orr.w	r3, r3, #16
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000bce:	e013      	b.n	8000bf8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd2:	f043 0320 	orr.w	r3, r3, #32
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000bd8:	e00e      	b.n	8000bf8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000be2:	e009      	b.n	8000bf8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000bec:	e004      	b.n	8000bf8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000bf6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	6812      	ldr	r2, [r2, #0]
 8000c00:	6992      	ldr	r2, [r2, #24]
 8000c02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000c06:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d008      	beq.n	8000c28 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f000 f867 	bl	8000cf6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3728      	adds	r7, #40	; 0x28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr

08000cae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr

08000cf6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	4908      	ldr	r1, [pc, #32]	; (8000da0 <__NVIC_EnableIRQ+0x34>)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	095b      	lsrs	r3, r3, #5
 8000d86:	79fa      	ldrb	r2, [r7, #7]
 8000d88:	f002 021f 	and.w	r2, r2, #31
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	490d      	ldr	r1, [pc, #52]	; (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	4909      	ldr	r1, [pc, #36]	; (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	3b04      	subs	r3, #4
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	1e5a      	subs	r2, r3, #1
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	401a      	ands	r2, r3
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e3e:	2101      	movs	r1, #1
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	1e59      	subs	r1, r3, #1
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	4313      	orrs	r3, r2
         );
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3724      	adds	r7, #36	; 0x24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e7c:	f7ff ff92 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff2f 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff44 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff92 	bl	8000df8 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff61 	bl	8000da4 <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff37 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffa2 	bl	8000e58 <SysTick_Config>
 8000f14:	4603      	mov	r3, r0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b08b      	sub	sp, #44	; 0x2c
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f32:	e127      	b.n	8001184 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f34:	2201      	movs	r2, #1
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	f040 8116 	bne.w	800117e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b12      	cmp	r3, #18
 8000f58:	d034      	beq.n	8000fc4 <HAL_GPIO_Init+0xa4>
 8000f5a:	2b12      	cmp	r3, #18
 8000f5c:	d80d      	bhi.n	8000f7a <HAL_GPIO_Init+0x5a>
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d02b      	beq.n	8000fba <HAL_GPIO_Init+0x9a>
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d804      	bhi.n	8000f70 <HAL_GPIO_Init+0x50>
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d031      	beq.n	8000fce <HAL_GPIO_Init+0xae>
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d01c      	beq.n	8000fa8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f6e:	e048      	b.n	8001002 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d043      	beq.n	8000ffc <HAL_GPIO_Init+0xdc>
 8000f74:	2b11      	cmp	r3, #17
 8000f76:	d01b      	beq.n	8000fb0 <HAL_GPIO_Init+0x90>
          break;
 8000f78:	e043      	b.n	8001002 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f7a:	4a89      	ldr	r2, [pc, #548]	; (80011a0 <HAL_GPIO_Init+0x280>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d026      	beq.n	8000fce <HAL_GPIO_Init+0xae>
 8000f80:	4a87      	ldr	r2, [pc, #540]	; (80011a0 <HAL_GPIO_Init+0x280>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d806      	bhi.n	8000f94 <HAL_GPIO_Init+0x74>
 8000f86:	4a87      	ldr	r2, [pc, #540]	; (80011a4 <HAL_GPIO_Init+0x284>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d020      	beq.n	8000fce <HAL_GPIO_Init+0xae>
 8000f8c:	4a86      	ldr	r2, [pc, #536]	; (80011a8 <HAL_GPIO_Init+0x288>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d01d      	beq.n	8000fce <HAL_GPIO_Init+0xae>
          break;
 8000f92:	e036      	b.n	8001002 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f94:	4a85      	ldr	r2, [pc, #532]	; (80011ac <HAL_GPIO_Init+0x28c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d019      	beq.n	8000fce <HAL_GPIO_Init+0xae>
 8000f9a:	4a85      	ldr	r2, [pc, #532]	; (80011b0 <HAL_GPIO_Init+0x290>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d016      	beq.n	8000fce <HAL_GPIO_Init+0xae>
 8000fa0:	4a84      	ldr	r2, [pc, #528]	; (80011b4 <HAL_GPIO_Init+0x294>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d013      	beq.n	8000fce <HAL_GPIO_Init+0xae>
          break;
 8000fa6:	e02c      	b.n	8001002 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	623b      	str	r3, [r7, #32]
          break;
 8000fae:	e028      	b.n	8001002 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	623b      	str	r3, [r7, #32]
          break;
 8000fb8:	e023      	b.n	8001002 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	3308      	adds	r3, #8
 8000fc0:	623b      	str	r3, [r7, #32]
          break;
 8000fc2:	e01e      	b.n	8001002 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	330c      	adds	r3, #12
 8000fca:	623b      	str	r3, [r7, #32]
          break;
 8000fcc:	e019      	b.n	8001002 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d102      	bne.n	8000fdc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	623b      	str	r3, [r7, #32]
          break;
 8000fda:	e012      	b.n	8001002 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d105      	bne.n	8000ff0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe4:	2308      	movs	r3, #8
 8000fe6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69fa      	ldr	r2, [r7, #28]
 8000fec:	611a      	str	r2, [r3, #16]
          break;
 8000fee:	e008      	b.n	8001002 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	615a      	str	r2, [r3, #20]
          break;
 8000ffa:	e002      	b.n	8001002 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
          break;
 8001000:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	2bff      	cmp	r3, #255	; 0xff
 8001006:	d801      	bhi.n	800100c <HAL_GPIO_Init+0xec>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	e001      	b.n	8001010 <HAL_GPIO_Init+0xf0>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3304      	adds	r3, #4
 8001010:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	2bff      	cmp	r3, #255	; 0xff
 8001016:	d802      	bhi.n	800101e <HAL_GPIO_Init+0xfe>
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	e002      	b.n	8001024 <HAL_GPIO_Init+0x104>
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	3b08      	subs	r3, #8
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	210f      	movs	r1, #15
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	401a      	ands	r2, r3
 8001036:	6a39      	ldr	r1, [r7, #32]
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	431a      	orrs	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 8096 	beq.w	800117e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001052:	4a59      	ldr	r2, [pc, #356]	; (80011b8 <HAL_GPIO_Init+0x298>)
 8001054:	4b58      	ldr	r3, [pc, #352]	; (80011b8 <HAL_GPIO_Init+0x298>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6193      	str	r3, [r2, #24]
 800105e:	4b56      	ldr	r3, [pc, #344]	; (80011b8 <HAL_GPIO_Init+0x298>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800106a:	4a54      	ldr	r2, [pc, #336]	; (80011bc <HAL_GPIO_Init+0x29c>)
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	4013      	ands	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4b      	ldr	r2, [pc, #300]	; (80011c0 <HAL_GPIO_Init+0x2a0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d013      	beq.n	80010be <HAL_GPIO_Init+0x19e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4a      	ldr	r2, [pc, #296]	; (80011c4 <HAL_GPIO_Init+0x2a4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d00d      	beq.n	80010ba <HAL_GPIO_Init+0x19a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a49      	ldr	r2, [pc, #292]	; (80011c8 <HAL_GPIO_Init+0x2a8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d007      	beq.n	80010b6 <HAL_GPIO_Init+0x196>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a48      	ldr	r2, [pc, #288]	; (80011cc <HAL_GPIO_Init+0x2ac>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d101      	bne.n	80010b2 <HAL_GPIO_Init+0x192>
 80010ae:	2303      	movs	r3, #3
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x1a0>
 80010b2:	2304      	movs	r3, #4
 80010b4:	e004      	b.n	80010c0 <HAL_GPIO_Init+0x1a0>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x1a0>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x1a0>
 80010be:	2300      	movs	r3, #0
 80010c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c2:	f002 0203 	and.w	r2, r2, #3
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4093      	lsls	r3, r2
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010d0:	493a      	ldr	r1, [pc, #232]	; (80011bc <HAL_GPIO_Init+0x29c>)
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d006      	beq.n	80010f8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010ea:	4939      	ldr	r1, [pc, #228]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 80010ec:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]
 80010f6:	e006      	b.n	8001106 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010f8:	4935      	ldr	r1, [pc, #212]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 80010fa:	4b35      	ldr	r3, [pc, #212]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	43db      	mvns	r3, r3
 8001102:	4013      	ands	r3, r2
 8001104:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d006      	beq.n	8001120 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001112:	492f      	ldr	r1, [pc, #188]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8001114:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	604b      	str	r3, [r1, #4]
 800111e:	e006      	b.n	800112e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001120:	492b      	ldr	r1, [pc, #172]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8001122:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	43db      	mvns	r3, r3
 800112a:	4013      	ands	r3, r2
 800112c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d006      	beq.n	8001148 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800113a:	4925      	ldr	r1, [pc, #148]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 800113c:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	608b      	str	r3, [r1, #8]
 8001146:	e006      	b.n	8001156 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001148:	4921      	ldr	r1, [pc, #132]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	43db      	mvns	r3, r3
 8001152:	4013      	ands	r3, r2
 8001154:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d006      	beq.n	8001170 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001162:	491b      	ldr	r1, [pc, #108]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	60cb      	str	r3, [r1, #12]
 800116e:	e006      	b.n	800117e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001170:	4917      	ldr	r1, [pc, #92]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	43db      	mvns	r3, r3
 800117a:	4013      	ands	r3, r2
 800117c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	3301      	adds	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	fa22 f303 	lsr.w	r3, r2, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	f47f aed0 	bne.w	8000f34 <HAL_GPIO_Init+0x14>
  }
}
 8001194:	bf00      	nop
 8001196:	372c      	adds	r7, #44	; 0x2c
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	10210000 	.word	0x10210000
 80011a4:	10110000 	.word	0x10110000
 80011a8:	10120000 	.word	0x10120000
 80011ac:	10310000 	.word	0x10310000
 80011b0:	10320000 	.word	0x10320000
 80011b4:	10220000 	.word	0x10220000
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010000 	.word	0x40010000
 80011c0:	40010800 	.word	0x40010800
 80011c4:	40010c00 	.word	0x40010c00
 80011c8:	40011000 	.word	0x40011000
 80011cc:	40011400 	.word	0x40011400
 80011d0:	40010400 	.word	0x40010400

080011d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
 80011e0:	4613      	mov	r3, r2
 80011e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011e4:	787b      	ldrb	r3, [r7, #1]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011f0:	e003      	b.n	80011fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	041a      	lsls	r2, r3, #16
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	611a      	str	r2, [r3, #16]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	4013      	ands	r3, r2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800121c:	887a      	ldrh	r2, [r7, #2]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001222:	e002      	b.n	800122a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001224:	887a      	ldrh	r2, [r7, #2]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	611a      	str	r2, [r3, #16]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e26c      	b.n	8001720 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 8087 	beq.w	8001362 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001254:	4b92      	ldr	r3, [pc, #584]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b04      	cmp	r3, #4
 800125e:	d00c      	beq.n	800127a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001260:	4b8f      	ldr	r3, [pc, #572]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 030c 	and.w	r3, r3, #12
 8001268:	2b08      	cmp	r3, #8
 800126a:	d112      	bne.n	8001292 <HAL_RCC_OscConfig+0x5e>
 800126c:	4b8c      	ldr	r3, [pc, #560]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001278:	d10b      	bne.n	8001292 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127a:	4b89      	ldr	r3, [pc, #548]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d06c      	beq.n	8001360 <HAL_RCC_OscConfig+0x12c>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d168      	bne.n	8001360 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e246      	b.n	8001720 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800129a:	d106      	bne.n	80012aa <HAL_RCC_OscConfig+0x76>
 800129c:	4a80      	ldr	r2, [pc, #512]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800129e:	4b80      	ldr	r3, [pc, #512]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	e02e      	b.n	8001308 <HAL_RCC_OscConfig+0xd4>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x98>
 80012b2:	4a7b      	ldr	r2, [pc, #492]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	4b7a      	ldr	r3, [pc, #488]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4a78      	ldr	r2, [pc, #480]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	4b77      	ldr	r3, [pc, #476]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e01d      	b.n	8001308 <HAL_RCC_OscConfig+0xd4>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d4:	d10c      	bne.n	80012f0 <HAL_RCC_OscConfig+0xbc>
 80012d6:	4a72      	ldr	r2, [pc, #456]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012d8:	4b71      	ldr	r3, [pc, #452]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	4a6f      	ldr	r2, [pc, #444]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	4b6e      	ldr	r3, [pc, #440]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	e00b      	b.n	8001308 <HAL_RCC_OscConfig+0xd4>
 80012f0:	4a6b      	ldr	r2, [pc, #428]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012f2:	4b6b      	ldr	r3, [pc, #428]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4a68      	ldr	r2, [pc, #416]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012fe:	4b68      	ldr	r3, [pc, #416]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001306:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d013      	beq.n	8001338 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7fe ff74 	bl	80001fc <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001318:	f7fe ff70 	bl	80001fc <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e1fa      	b.n	8001720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132a:	4b5d      	ldr	r3, [pc, #372]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0xe4>
 8001336:	e014      	b.n	8001362 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7fe ff60 	bl	80001fc <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001340:	f7fe ff5c 	bl	80001fc <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b64      	cmp	r3, #100	; 0x64
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e1e6      	b.n	8001720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001352:	4b53      	ldr	r3, [pc, #332]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x10c>
 800135e:	e000      	b.n	8001362 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d063      	beq.n	8001436 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800136e:	4b4c      	ldr	r3, [pc, #304]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 030c 	and.w	r3, r3, #12
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00b      	beq.n	8001392 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800137a:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b08      	cmp	r3, #8
 8001384:	d11c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x18c>
 8001386:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d116      	bne.n	80013c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001392:	4b43      	ldr	r3, [pc, #268]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d005      	beq.n	80013aa <HAL_RCC_OscConfig+0x176>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d001      	beq.n	80013aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e1ba      	b.n	8001720 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013aa:	493d      	ldr	r1, [pc, #244]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013be:	e03a      	b.n	8001436 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d020      	beq.n	800140a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c8:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7fe ff15 	bl	80001fc <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d6:	f7fe ff11 	bl	80001fc <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e19b      	b.n	8001720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e8:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f0      	beq.n	80013d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f4:	492a      	ldr	r1, [pc, #168]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4313      	orrs	r3, r2
 8001406:	600b      	str	r3, [r1, #0]
 8001408:	e015      	b.n	8001436 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7fe fef4 	bl	80001fc <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001418:	f7fe fef0 	bl	80001fc <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e17a      	b.n	8001720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142a:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b00      	cmp	r3, #0
 8001440:	d03a      	beq.n	80014b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d019      	beq.n	800147e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_RCC_OscConfig+0x274>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001450:	f7fe fed4 	bl	80001fc <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001458:	f7fe fed0 	bl	80001fc <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e15a      	b.n	8001720 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001476:	2001      	movs	r0, #1
 8001478:	f000 fada 	bl	8001a30 <RCC_Delay>
 800147c:	e01c      	b.n	80014b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_RCC_OscConfig+0x274>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001484:	f7fe feba 	bl	80001fc <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148a:	e00f      	b.n	80014ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800148c:	f7fe feb6 	bl	80001fc <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d908      	bls.n	80014ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e140      	b.n	8001720 <HAL_RCC_OscConfig+0x4ec>
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000
 80014a4:	42420000 	.word	0x42420000
 80014a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	4b9e      	ldr	r3, [pc, #632]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1e9      	bne.n	800148c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80a6 	beq.w	8001612 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ca:	4b97      	ldr	r3, [pc, #604]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10d      	bne.n	80014f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4a94      	ldr	r2, [pc, #592]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 80014d8:	4b93      	ldr	r3, [pc, #588]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	61d3      	str	r3, [r2, #28]
 80014e2:	4b91      	ldr	r3, [pc, #580]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ee:	2301      	movs	r3, #1
 80014f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f2:	4b8e      	ldr	r3, [pc, #568]	; (800172c <HAL_RCC_OscConfig+0x4f8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d118      	bne.n	8001530 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014fe:	4a8b      	ldr	r2, [pc, #556]	; (800172c <HAL_RCC_OscConfig+0x4f8>)
 8001500:	4b8a      	ldr	r3, [pc, #552]	; (800172c <HAL_RCC_OscConfig+0x4f8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800150a:	f7fe fe77 	bl	80001fc <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001512:	f7fe fe73 	bl	80001fc <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b64      	cmp	r3, #100	; 0x64
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e0fd      	b.n	8001720 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	4b81      	ldr	r3, [pc, #516]	; (800172c <HAL_RCC_OscConfig+0x4f8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d106      	bne.n	8001546 <HAL_RCC_OscConfig+0x312>
 8001538:	4a7b      	ldr	r2, [pc, #492]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 800153a:	4b7b      	ldr	r3, [pc, #492]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6213      	str	r3, [r2, #32]
 8001544:	e02d      	b.n	80015a2 <HAL_RCC_OscConfig+0x36e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0x334>
 800154e:	4a76      	ldr	r2, [pc, #472]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 8001550:	4b75      	ldr	r3, [pc, #468]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	6213      	str	r3, [r2, #32]
 800155a:	4a73      	ldr	r2, [pc, #460]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 800155c:	4b72      	ldr	r3, [pc, #456]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	f023 0304 	bic.w	r3, r3, #4
 8001564:	6213      	str	r3, [r2, #32]
 8001566:	e01c      	b.n	80015a2 <HAL_RCC_OscConfig+0x36e>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	2b05      	cmp	r3, #5
 800156e:	d10c      	bne.n	800158a <HAL_RCC_OscConfig+0x356>
 8001570:	4a6d      	ldr	r2, [pc, #436]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 8001572:	4b6d      	ldr	r3, [pc, #436]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	6213      	str	r3, [r2, #32]
 800157c:	4a6a      	ldr	r2, [pc, #424]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 800157e:	4b6a      	ldr	r3, [pc, #424]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6213      	str	r3, [r2, #32]
 8001588:	e00b      	b.n	80015a2 <HAL_RCC_OscConfig+0x36e>
 800158a:	4a67      	ldr	r2, [pc, #412]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 800158c:	4b66      	ldr	r3, [pc, #408]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	6213      	str	r3, [r2, #32]
 8001596:	4a64      	ldr	r2, [pc, #400]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 8001598:	4b63      	ldr	r3, [pc, #396]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	f023 0304 	bic.w	r3, r3, #4
 80015a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d015      	beq.n	80015d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015aa:	f7fe fe27 	bl	80001fc <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b2:	f7fe fe23 	bl	80001fc <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e0ab      	b.n	8001720 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c8:	4b57      	ldr	r3, [pc, #348]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0ee      	beq.n	80015b2 <HAL_RCC_OscConfig+0x37e>
 80015d4:	e014      	b.n	8001600 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d6:	f7fe fe11 	bl	80001fc <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015dc:	e00a      	b.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f7fe fe0d 	bl	80001fc <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e095      	b.n	8001720 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f4:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1ee      	bne.n	80015de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d105      	bne.n	8001612 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001606:	4a48      	ldr	r2, [pc, #288]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 8001608:	4b47      	ldr	r3, [pc, #284]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001610:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8081 	beq.w	800171e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800161c:	4b42      	ldr	r3, [pc, #264]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 030c 	and.w	r3, r3, #12
 8001624:	2b08      	cmp	r3, #8
 8001626:	d061      	beq.n	80016ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d146      	bne.n	80016be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001630:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <HAL_RCC_OscConfig+0x4fc>)
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7fe fde1 	bl	80001fc <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163e:	f7fe fddd 	bl	80001fc <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e067      	b.n	8001720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001650:	4b35      	ldr	r3, [pc, #212]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f0      	bne.n	800163e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001664:	d108      	bne.n	8001678 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001666:	4930      	ldr	r1, [pc, #192]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 8001668:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001678:	482b      	ldr	r0, [pc, #172]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 800167a:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a19      	ldr	r1, [r3, #32]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	430b      	orrs	r3, r1
 800168c:	4313      	orrs	r3, r2
 800168e:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <HAL_RCC_OscConfig+0x4fc>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7fe fdb1 	bl	80001fc <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169e:	f7fe fdad 	bl	80001fc <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e037      	b.n	8001720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x46a>
 80016bc:	e02f      	b.n	800171e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_RCC_OscConfig+0x4fc>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7fe fd9a 	bl	80001fc <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016cc:	f7fe fd96 	bl	80001fc <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e020      	b.n	8001720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x498>
 80016ea:	e018      	b.n	800171e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e013      	b.n	8001720 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_RCC_OscConfig+0x4f4>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	429a      	cmp	r2, r3
 800170a:	d106      	bne.n	800171a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001716:	429a      	cmp	r2, r3
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000
 800172c:	40007000 	.word	0x40007000
 8001730:	42420060 	.word	0x42420060

08001734 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0d0      	b.n	80018ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001748:	4b6a      	ldr	r3, [pc, #424]	; (80018f4 <HAL_RCC_ClockConfig+0x1c0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0207 	and.w	r2, r3, #7
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d210      	bcs.n	8001778 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4967      	ldr	r1, [pc, #412]	; (80018f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001758:	4b66      	ldr	r3, [pc, #408]	; (80018f4 <HAL_RCC_ClockConfig+0x1c0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f023 0207 	bic.w	r2, r3, #7
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	4313      	orrs	r3, r2
 8001764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0207 	and.w	r2, r3, #7
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0b8      	b.n	80018ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001790:	4a59      	ldr	r2, [pc, #356]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001792:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800179a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a8:	4a53      	ldr	r2, [pc, #332]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 80017aa:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b4:	4950      	ldr	r1, [pc, #320]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d040      	beq.n	8001854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d115      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e07f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f2:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e073      	b.n	80018ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001802:	4b3d      	ldr	r3, [pc, #244]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e06b      	b.n	80018ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001812:	4939      	ldr	r1, [pc, #228]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f023 0203 	bic.w	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001824:	f7fe fcea 	bl	80001fc <HAL_GetTick>
 8001828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	e00a      	b.n	8001842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182c:	f7fe fce6 	bl	80001fc <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e053      	b.n	80018ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 020c 	and.w	r2, r3, #12
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	429a      	cmp	r2, r3
 8001852:	d1eb      	bne.n	800182c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001854:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0207 	and.w	r2, r3, #7
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d910      	bls.n	8001884 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4924      	ldr	r1, [pc, #144]	; (80018f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f023 0207 	bic.w	r2, r3, #7
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0207 	and.w	r2, r3, #7
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e032      	b.n	80018ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d008      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001890:	4919      	ldr	r1, [pc, #100]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ae:	4912      	ldr	r1, [pc, #72]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4313      	orrs	r3, r2
 80018c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018c2:	f000 f821 	bl	8001908 <HAL_RCC_GetSysClockFreq>
 80018c6:	4601      	mov	r1, r0
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <HAL_RCC_ClockConfig+0x1c8>)
 80018d4:	5cd3      	ldrb	r3, [r2, r3]
 80018d6:	fa21 f303 	lsr.w	r3, r1, r3
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <HAL_RCC_ClockConfig+0x1cc>)
 80018dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_RCC_ClockConfig+0x1d0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fc48 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40022000 	.word	0x40022000
 80018f8:	40021000 	.word	0x40021000
 80018fc:	08002428 	.word	0x08002428
 8001900:	20000008 	.word	0x20000008
 8001904:	20000000 	.word	0x20000000

08001908 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001908:	b490      	push	{r4, r7}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800190e:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001910:	1d3c      	adds	r4, r7, #4
 8001912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001918:	4b28      	ldr	r3, [pc, #160]	; (80019bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001932:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b04      	cmp	r3, #4
 8001940:	d002      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x40>
 8001942:	2b08      	cmp	r3, #8
 8001944:	d003      	beq.n	800194e <HAL_RCC_GetSysClockFreq+0x46>
 8001946:	e02d      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800194a:	623b      	str	r3, [r7, #32]
      break;
 800194c:	e02d      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	0c9b      	lsrs	r3, r3, #18
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800195a:	4413      	add	r3, r2
 800195c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001960:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d013      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	0c5b      	lsrs	r3, r3, #17
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800197a:	4413      	add	r3, r2
 800197c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001980:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001986:	fb02 f203 	mul.w	r2, r2, r3
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
 8001992:	e004      	b.n	800199e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	4a0c      	ldr	r2, [pc, #48]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001998:	fb02 f303 	mul.w	r3, r2, r3
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	623b      	str	r3, [r7, #32]
      break;
 80019a2:	e002      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019a6:	623b      	str	r3, [r7, #32]
      break;
 80019a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019aa:	6a3b      	ldr	r3, [r7, #32]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc90      	pop	{r4, r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	08002414 	.word	0x08002414
 80019bc:	08002424 	.word	0x08002424
 80019c0:	40021000 	.word	0x40021000
 80019c4:	007a1200 	.word	0x007a1200
 80019c8:	003d0900 	.word	0x003d0900

080019cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d0:	4b02      	ldr	r3, [pc, #8]	; (80019dc <HAL_RCC_GetHCLKFreq+0x10>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	20000008 	.word	0x20000008

080019e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019e4:	f7ff fff2 	bl	80019cc <HAL_RCC_GetHCLKFreq>
 80019e8:	4601      	mov	r1, r0
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	0a1b      	lsrs	r3, r3, #8
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	4a03      	ldr	r2, [pc, #12]	; (8001a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019f6:	5cd3      	ldrb	r3, [r2, r3]
 80019f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	08002438 	.word	0x08002438

08001a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a0c:	f7ff ffde 	bl	80019cc <HAL_RCC_GetHCLKFreq>
 8001a10:	4601      	mov	r1, r0
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	0adb      	lsrs	r3, r3, #11
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	4a03      	ldr	r2, [pc, #12]	; (8001a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
 8001a20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	08002438 	.word	0x08002438

08001a30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <RCC_Delay+0x34>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <RCC_Delay+0x38>)
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	0a5b      	lsrs	r3, r3, #9
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	fb02 f303 	mul.w	r3, r2, r3
 8001a4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a4c:	bf00      	nop
  }
  while (Delay --);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1e5a      	subs	r2, r3, #1
 8001a52:	60fa      	str	r2, [r7, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f9      	bne.n	8001a4c <RCC_Delay+0x1c>
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000008 	.word	0x20000008
 8001a68:	10624dd3 	.word	0x10624dd3

08001a6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e03f      	b.n	8001afe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d106      	bne.n	8001a98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 fbac 	bl	80021f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2224      	movs	r2, #36	; 0x24
 8001a9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	68d2      	ldr	r2, [r2, #12]
 8001aaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f829 	bl	8001b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	6912      	ldr	r2, [r2, #16]
 8001ac0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ac4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	6952      	ldr	r2, [r2, #20]
 8001ad0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ad4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	68d2      	ldr	r2, [r2, #12]
 8001ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ae4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2220      	movs	r2, #32
 8001af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2220      	movs	r2, #32
 8001af8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	6912      	ldr	r2, [r2, #16]
 8001b1a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68d2      	ldr	r2, [r2, #12]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001b46:	f023 030c 	bic.w	r3, r3, #12
 8001b4a:	68f9      	ldr	r1, [r7, #12]
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	6952      	ldr	r2, [r2, #20]
 8001b5a:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6992      	ldr	r2, [r2, #24]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a52      	ldr	r2, [pc, #328]	; (8001cb4 <UART_SetConfig+0x1ac>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d14e      	bne.n	8001c0e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001b70:	f7ff ff4a 	bl	8001a08 <HAL_RCC_GetPCLK2Freq>
 8001b74:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6819      	ldr	r1, [r3, #0]
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	009a      	lsls	r2, r3, #2
 8001b84:	441a      	add	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b90:	4a49      	ldr	r2, [pc, #292]	; (8001cb8 <UART_SetConfig+0x1b0>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	0118      	lsls	r0, r3, #4
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009a      	lsls	r2, r3, #2
 8001ba4:	441a      	add	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bb0:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <UART_SetConfig+0x1b0>)
 8001bb2:	fba3 4302 	umull	r4, r3, r3, r2
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	2464      	movs	r4, #100	; 0x64
 8001bba:	fb04 f303 	mul.w	r3, r4, r3
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	011b      	lsls	r3, r3, #4
 8001bc2:	3332      	adds	r3, #50	; 0x32
 8001bc4:	4a3c      	ldr	r2, [pc, #240]	; (8001cb8 <UART_SetConfig+0x1b0>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bd0:	4418      	add	r0, r3
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	009a      	lsls	r2, r3, #2
 8001bdc:	441a      	add	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001be8:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <UART_SetConfig+0x1b0>)
 8001bea:	fba3 4302 	umull	r4, r3, r3, r2
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	2464      	movs	r4, #100	; 0x64
 8001bf2:	fb04 f303 	mul.w	r3, r4, r3
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	3332      	adds	r3, #50	; 0x32
 8001bfc:	4a2e      	ldr	r2, [pc, #184]	; (8001cb8 <UART_SetConfig+0x1b0>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	4403      	add	r3, r0
 8001c0a:	608b      	str	r3, [r1, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001c0c:	e04d      	b.n	8001caa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c0e:	f7ff fee7 	bl	80019e0 <HAL_RCC_GetPCLK1Freq>
 8001c12:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6819      	ldr	r1, [r3, #0]
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	009a      	lsls	r2, r3, #2
 8001c22:	441a      	add	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	4a22      	ldr	r2, [pc, #136]	; (8001cb8 <UART_SetConfig+0x1b0>)
 8001c30:	fba2 2303 	umull	r2, r3, r2, r3
 8001c34:	095b      	lsrs	r3, r3, #5
 8001c36:	0118      	lsls	r0, r3, #4
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	009a      	lsls	r2, r3, #2
 8001c42:	441a      	add	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <UART_SetConfig+0x1b0>)
 8001c50:	fba3 4302 	umull	r4, r3, r3, r2
 8001c54:	095b      	lsrs	r3, r3, #5
 8001c56:	2464      	movs	r4, #100	; 0x64
 8001c58:	fb04 f303 	mul.w	r3, r4, r3
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	3332      	adds	r3, #50	; 0x32
 8001c62:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <UART_SetConfig+0x1b0>)
 8001c64:	fba2 2303 	umull	r2, r3, r2, r3
 8001c68:	095b      	lsrs	r3, r3, #5
 8001c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c6e:	4418      	add	r0, r3
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	009a      	lsls	r2, r3, #2
 8001c7a:	441a      	add	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <UART_SetConfig+0x1b0>)
 8001c88:	fba3 4302 	umull	r4, r3, r3, r2
 8001c8c:	095b      	lsrs	r3, r3, #5
 8001c8e:	2464      	movs	r4, #100	; 0x64
 8001c90:	fb04 f303 	mul.w	r3, r4, r3
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	3332      	adds	r3, #50	; 0x32
 8001c9a:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <UART_SetConfig+0x1b0>)
 8001c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca0:	095b      	lsrs	r3, r3, #5
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	4403      	add	r3, r0
 8001ca8:	608b      	str	r3, [r1, #8]
}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd90      	pop	{r4, r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40013800 	.word	0x40013800
 8001cb8:	51eb851f 	.word	0x51eb851f

08001cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  HAL_Init();
 8001cc0:	f7fe fa44 	bl	800014c <HAL_Init>
  SystemClock_Config();
 8001cc4:	f000 f86a 	bl	8001d9c <SystemClock_Config>
  MX_GPIO_Init();
 8001cc8:	f000 f956 	bl	8001f78 <MX_GPIO_Init>
  MX_CAN_Init();
 8001ccc:	f000 f8ac 	bl	8001e28 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001cd0:	f000 f928 	bl	8001f24 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (RxHeader.StdId == 0x003){ // green
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <main+0xd0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d119      	bne.n	8001d10 <main+0x54>
		  if (RxData[0] == 0){
 8001cdc:	4b2c      	ldr	r3, [pc, #176]	; (8001d90 <main+0xd4>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d108      	bne.n	8001cf6 <main+0x3a>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cea:	482a      	ldr	r0, [pc, #168]	; (8001d94 <main+0xd8>)
 8001cec:	f7ff fa72 	bl	80011d4 <HAL_GPIO_WritePin>
			  HAL_Delay(50);
 8001cf0:	2032      	movs	r0, #50	; 0x32
 8001cf2:	f7fe fa8d 	bl	8000210 <HAL_Delay>
		  }

		  if (RxData[0] == 1){
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <main+0xd4>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d108      	bne.n	8001d10 <main+0x54>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d04:	4823      	ldr	r0, [pc, #140]	; (8001d94 <main+0xd8>)
 8001d06:	f7ff fa65 	bl	80011d4 <HAL_GPIO_WritePin>
		  	  HAL_Delay(50);
 8001d0a:	2032      	movs	r0, #50	; 0x32
 8001d0c:	f7fe fa80 	bl	8000210 <HAL_Delay>
		  }
	  }

	  if (RxHeader.StdId == 0x002){ // red
 8001d10:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <main+0xd0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d119      	bne.n	8001d4c <main+0x90>
		  if (RxData[0] == 0){
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <main+0xd4>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d108      	bne.n	8001d32 <main+0x76>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001d20:	2201      	movs	r2, #1
 8001d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d26:	481c      	ldr	r0, [pc, #112]	; (8001d98 <main+0xdc>)
 8001d28:	f7ff fa54 	bl	80011d4 <HAL_GPIO_WritePin>
			  HAL_Delay(50);
 8001d2c:	2032      	movs	r0, #50	; 0x32
 8001d2e:	f7fe fa6f 	bl	8000210 <HAL_Delay>
		  }
		  if (RxData[0] == 1){
 8001d32:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <main+0xd4>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d108      	bne.n	8001d4c <main+0x90>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d40:	4815      	ldr	r0, [pc, #84]	; (8001d98 <main+0xdc>)
 8001d42:	f7ff fa47 	bl	80011d4 <HAL_GPIO_WritePin>
		  	  HAL_Delay(50);
 8001d46:	2032      	movs	r0, #50	; 0x32
 8001d48:	f7fe fa62 	bl	8000210 <HAL_Delay>
		  }
	  }

	  if (RxHeader.StdId == 0x001){ // green
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <main+0xd0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d1bf      	bne.n	8001cd4 <main+0x18>
		  if (RxData[0] == 0){
 8001d54:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <main+0xd4>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d108      	bne.n	8001d6e <main+0xb2>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d62:	480d      	ldr	r0, [pc, #52]	; (8001d98 <main+0xdc>)
 8001d64:	f7ff fa36 	bl	80011d4 <HAL_GPIO_WritePin>
			  HAL_Delay(50);
 8001d68:	2032      	movs	r0, #50	; 0x32
 8001d6a:	f7fe fa51 	bl	8000210 <HAL_Delay>
		  }
		  if (RxData[0] == 1){
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <main+0xd4>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d1ae      	bne.n	8001cd4 <main+0x18>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001d76:	2200      	movs	r2, #0
 8001d78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d7c:	4806      	ldr	r0, [pc, #24]	; (8001d98 <main+0xdc>)
 8001d7e:	f7ff fa29 	bl	80011d4 <HAL_GPIO_WritePin>
		      HAL_Delay(50);
 8001d82:	2032      	movs	r0, #50	; 0x32
 8001d84:	f7fe fa44 	bl	8000210 <HAL_Delay>
	  if (RxHeader.StdId == 0x003){ // green
 8001d88:	e7a4      	b.n	8001cd4 <main+0x18>
 8001d8a:	bf00      	nop
 8001d8c:	20000040 	.word	0x20000040
 8001d90:	200000d4 	.word	0x200000d4
 8001d94:	40011000 	.word	0x40011000
 8001d98:	40010c00 	.word	0x40010c00

08001d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b090      	sub	sp, #64	; 0x40
 8001da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da2:	f107 0318 	add.w	r3, r7, #24
 8001da6:	2228      	movs	r2, #40	; 0x28
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 fb1e 	bl	80023ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001dda:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de0:	f107 0318 	add.w	r3, r7, #24
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fa25 	bl	8001234 <HAL_RCC_OscConfig>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001df0:	f000 f966 	bl	80020c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df4:	230f      	movs	r3, #15
 8001df6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fc90 	bl	8001734 <HAL_RCC_ClockConfig>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e1a:	f000 f951 	bl	80020c0 <Error_Handler>





}
 8001e1e:	bf00      	nop
 8001e20:	3740      	adds	r7, #64	; 0x40
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0

  /* Configure the CAN peripheral */
  hcan.Instance = CAN1;
 8001e2e:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <MX_CAN_Init+0xec>)
 8001e30:	4a39      	ldr	r2, [pc, #228]	; (8001f18 <MX_CAN_Init+0xf0>)
 8001e32:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8001e34:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <MX_CAN_Init+0xec>)
 8001e36:	2209      	movs	r2, #9
 8001e38:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001e3a:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <MX_CAN_Init+0xec>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e40:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <MX_CAN_Init+0xec>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001e46:	4b33      	ldr	r3, [pc, #204]	; (8001f14 <MX_CAN_Init+0xec>)
 8001e48:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001e4c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001e4e:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <MX_CAN_Init+0xec>)
 8001e50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e54:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001e56:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <MX_CAN_Init+0xec>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <MX_CAN_Init+0xec>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001e62:	4b2c      	ldr	r3, [pc, #176]	; (8001f14 <MX_CAN_Init+0xec>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001e68:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <MX_CAN_Init+0xec>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001e6e:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <MX_CAN_Init+0xec>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001e74:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <MX_CAN_Init+0xec>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001e7a:	4826      	ldr	r0, [pc, #152]	; (8001f14 <MX_CAN_Init+0xec>)
 8001e7c:	f7fe f9ea 	bl	8000254 <HAL_CAN_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001e86:	f000 f91b 	bl	80020c0 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001e8a:	2102      	movs	r1, #2
 8001e8c:	4821      	ldr	r0, [pc, #132]	; (8001f14 <MX_CAN_Init+0xec>)
 8001e8e:	f7fe fcf9 	bl	8000884 <HAL_CAN_ActivateNotification>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_CAN_Init+0x74>
  {
	Error_Handler();
 8001e98:	f000 f912 	bl	80020c0 <Error_Handler>
  }


  /* Configure the CAN Filter */
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh     = 0x001<<5;
 8001ea8:	2320      	movs	r3, #32
 8001eaa:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow      = 0x0000;
 8001eac:	2300      	movs	r3, #0
 8001eae:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0xfff<<5; // mascara que filtra
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <MX_CAN_Init+0xf4>)
 8001eb2:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow  = 0x0000;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8001ec0:	230e      	movs	r3, #14
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4812      	ldr	r0, [pc, #72]	; (8001f14 <MX_CAN_Init+0xec>)
 8001eca:	f7fe fabd 	bl	8000448 <HAL_CAN_ConfigFilter>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_CAN_Init+0xb0>
  {
    /* Filter configuration Error */
    Error_Handler();
 8001ed4:	f000 f8f4 	bl	80020c0 <Error_Handler>
  }

  /* Configure Transmission process */
  TxHeader.StdId = 0x001;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <MX_CAN_Init+0xf8>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x001;
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <MX_CAN_Init+0xf8>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <MX_CAN_Init+0xf8>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <MX_CAN_Init+0xf8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <MX_CAN_Init+0xf8>)
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <MX_CAN_Init+0xf8>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	751a      	strb	r2, [r3, #20]


  /* Start the CAN peripheral */
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8001efc:	4805      	ldr	r0, [pc, #20]	; (8001f14 <MX_CAN_Init+0xec>)
 8001efe:	f7fe fb6c 	bl	80005da <HAL_CAN_Start>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_CAN_Init+0xe4>
  {
    /* Start Error */
    Error_Handler();
 8001f08:	f000 f8da 	bl	80020c0 <Error_Handler>
  }




}
 8001f0c:	bf00      	nop
 8001f0e:	3728      	adds	r7, #40	; 0x28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000060 	.word	0x20000060
 8001f18:	40006400 	.word	0x40006400
 8001f1c:	0001ffe0 	.word	0x0001ffe0
 8001f20:	20000028 	.word	0x20000028

08001f24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <MX_USART1_UART_Init+0x4c>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <MX_USART1_UART_Init+0x50>)
 8001f2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <MX_USART1_UART_Init+0x4c>)
 8001f30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <MX_USART1_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <MX_USART1_UART_Init+0x4c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f42:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <MX_USART1_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <MX_USART1_UART_Init+0x4c>)
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <MX_USART1_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <MX_USART1_UART_Init+0x4c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <MX_USART1_UART_Init+0x4c>)
 8001f5c:	f7ff fd86 	bl	8001a6c <HAL_UART_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f66:	f000 f8ab 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000088 	.word	0x20000088
 8001f74:	40013800 	.word	0x40013800

08001f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7e:	f107 0310 	add.w	r3, r7, #16
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8c:	4a3a      	ldr	r2, [pc, #232]	; (8002078 <MX_GPIO_Init+0x100>)
 8001f8e:	4b3a      	ldr	r3, [pc, #232]	; (8002078 <MX_GPIO_Init+0x100>)
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f043 0310 	orr.w	r3, r3, #16
 8001f96:	6193      	str	r3, [r2, #24]
 8001f98:	4b37      	ldr	r3, [pc, #220]	; (8002078 <MX_GPIO_Init+0x100>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa4:	4a34      	ldr	r2, [pc, #208]	; (8002078 <MX_GPIO_Init+0x100>)
 8001fa6:	4b34      	ldr	r3, [pc, #208]	; (8002078 <MX_GPIO_Init+0x100>)
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f043 0320 	orr.w	r3, r3, #32
 8001fae:	6193      	str	r3, [r2, #24]
 8001fb0:	4b31      	ldr	r3, [pc, #196]	; (8002078 <MX_GPIO_Init+0x100>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbc:	4a2e      	ldr	r2, [pc, #184]	; (8002078 <MX_GPIO_Init+0x100>)
 8001fbe:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <MX_GPIO_Init+0x100>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <MX_GPIO_Init+0x100>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd4:	4a28      	ldr	r2, [pc, #160]	; (8002078 <MX_GPIO_Init+0x100>)
 8001fd6:	4b28      	ldr	r3, [pc, #160]	; (8002078 <MX_GPIO_Init+0x100>)
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f043 0308 	orr.w	r3, r3, #8
 8001fde:	6193      	str	r3, [r2, #24]
 8001fe0:	4b25      	ldr	r3, [pc, #148]	; (8002078 <MX_GPIO_Init+0x100>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	603b      	str	r3, [r7, #0]
 8001fea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001fec:	2201      	movs	r2, #1
 8001fee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ff2:	4822      	ldr	r0, [pc, #136]	; (800207c <MX_GPIO_Init+0x104>)
 8001ff4:	f7ff f8ee 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ffc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffe:	2301      	movs	r3, #1
 8002000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2302      	movs	r3, #2
 8002008:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800200a:	f107 0310 	add.w	r3, r7, #16
 800200e:	4619      	mov	r1, r3
 8002010:	481a      	ldr	r0, [pc, #104]	; (800207c <MX_GPIO_Init+0x104>)
 8002012:	f7fe ff85 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800201a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201c:	2301      	movs	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2302      	movs	r3, #2
 8002026:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002028:	f107 0310 	add.w	r3, r7, #16
 800202c:	4619      	mov	r1, r3
 800202e:	4814      	ldr	r0, [pc, #80]	; (8002080 <MX_GPIO_Init+0x108>)
 8002030:	f7fe ff76 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2302      	movs	r3, #2
 8002044:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	4619      	mov	r1, r3
 800204c:	480c      	ldr	r0, [pc, #48]	; (8002080 <MX_GPIO_Init+0x108>)
 800204e:	f7fe ff67 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002052:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002056:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002058:	2301      	movs	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2302      	movs	r3, #2
 8002062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 0310 	add.w	r3, r7, #16
 8002068:	4619      	mov	r1, r3
 800206a:	4805      	ldr	r0, [pc, #20]	; (8002080 <MX_GPIO_Init+0x108>)
 800206c:	f7fe ff58 	bl	8000f20 <HAL_GPIO_Init>



}
 8002070:	bf00      	nop
 8002072:	3720      	adds	r7, #32
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	40011000 	.word	0x40011000
 8002080:	40010c00 	.word	0x40010c00

08002084 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800208c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002090:	4808      	ldr	r0, [pc, #32]	; (80020b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002092:	f7ff f8b7 	bl	8001204 <HAL_GPIO_TogglePin>
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002098:	4a08      	ldr	r2, [pc, #32]	; (80020bc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800209a:	2100      	movs	r1, #0
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7fe fae0 	bl	8000662 <HAL_CAN_GetRxMessage>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
  {
    Error_Handler();
 80020a8:	f000 f80a 	bl	80020c0 <Error_Handler>
  }
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40011000 	.word	0x40011000
 80020b8:	200000d4 	.word	0x200000d4
 80020bc:	20000040 	.word	0x20000040

080020c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80020c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c8:	4803      	ldr	r0, [pc, #12]	; (80020d8 <Error_Handler+0x18>)
 80020ca:	f7ff f89b 	bl	8001204 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80020ce:	2064      	movs	r0, #100	; 0x64
 80020d0:	f7fe f89e 	bl	8000210 <HAL_Delay>
  /* USER CODE END Error_Handler_Debug */
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40011000 	.word	0x40011000

080020dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020e2:	4a0e      	ldr	r2, [pc, #56]	; (800211c <HAL_MspInit+0x40>)
 80020e4:	4b0d      	ldr	r3, [pc, #52]	; (800211c <HAL_MspInit+0x40>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6193      	str	r3, [r2, #24]
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_MspInit+0x40>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4a08      	ldr	r2, [pc, #32]	; (800211c <HAL_MspInit+0x40>)
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <HAL_MspInit+0x40>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	61d3      	str	r3, [r2, #28]
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_MspInit+0x40>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr
 800211c:	40021000 	.word	0x40021000

08002120 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a29      	ldr	r2, [pc, #164]	; (80021e0 <HAL_CAN_MspInit+0xc0>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d14b      	bne.n	80021d8 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002140:	4a28      	ldr	r2, [pc, #160]	; (80021e4 <HAL_CAN_MspInit+0xc4>)
 8002142:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <HAL_CAN_MspInit+0xc4>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800214a:	61d3      	str	r3, [r2, #28]
 800214c:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_CAN_MspInit+0xc4>)
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002158:	4a22      	ldr	r2, [pc, #136]	; (80021e4 <HAL_CAN_MspInit+0xc4>)
 800215a:	4b22      	ldr	r3, [pc, #136]	; (80021e4 <HAL_CAN_MspInit+0xc4>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f043 0308 	orr.w	r3, r3, #8
 8002162:	6193      	str	r3, [r2, #24]
 8002164:	4b1f      	ldr	r3, [pc, #124]	; (80021e4 <HAL_CAN_MspInit+0xc4>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	4818      	ldr	r0, [pc, #96]	; (80021e8 <HAL_CAN_MspInit+0xc8>)
 8002186:	f7fe fecb 	bl	8000f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800218a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800218e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002194:	2303      	movs	r3, #3
 8002196:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4619      	mov	r1, r3
 800219e:	4812      	ldr	r0, [pc, #72]	; (80021e8 <HAL_CAN_MspInit+0xc8>)
 80021a0:	f7fe febe 	bl	8000f20 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_CAN_MspInit+0xcc>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_CAN_MspInit+0xcc>)
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2100      	movs	r1, #0
 80021cc:	2014      	movs	r0, #20
 80021ce:	f7fe fe70 	bl	8000eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80021d2:	2014      	movs	r0, #20
 80021d4:	f7fe fe89 	bl	8000eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80021d8:	bf00      	nop
 80021da:	3728      	adds	r7, #40	; 0x28
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40006400 	.word	0x40006400
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40010c00 	.word	0x40010c00
 80021ec:	40010000 	.word	0x40010000

080021f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0310 	add.w	r3, r7, #16
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a1c      	ldr	r2, [pc, #112]	; (800227c <HAL_UART_MspInit+0x8c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d131      	bne.n	8002274 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002210:	4a1b      	ldr	r2, [pc, #108]	; (8002280 <HAL_UART_MspInit+0x90>)
 8002212:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <HAL_UART_MspInit+0x90>)
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800221a:	6193      	str	r3, [r2, #24]
 800221c:	4b18      	ldr	r3, [pc, #96]	; (8002280 <HAL_UART_MspInit+0x90>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002228:	4a15      	ldr	r2, [pc, #84]	; (8002280 <HAL_UART_MspInit+0x90>)
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HAL_UART_MspInit+0x90>)
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	6193      	str	r3, [r2, #24]
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_UART_MspInit+0x90>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002240:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002244:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800224a:	2303      	movs	r3, #3
 800224c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224e:	f107 0310 	add.w	r3, r7, #16
 8002252:	4619      	mov	r1, r3
 8002254:	480b      	ldr	r0, [pc, #44]	; (8002284 <HAL_UART_MspInit+0x94>)
 8002256:	f7fe fe63 	bl	8000f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800225a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800225e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002268:	f107 0310 	add.w	r3, r7, #16
 800226c:	4619      	mov	r1, r3
 800226e:	4805      	ldr	r0, [pc, #20]	; (8002284 <HAL_UART_MspInit+0x94>)
 8002270:	f7fe fe56 	bl	8000f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002274:	bf00      	nop
 8002276:	3720      	adds	r7, #32
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40013800 	.word	0x40013800
 8002280:	40021000 	.word	0x40021000
 8002284:	40010800 	.word	0x40010800

08002288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <HardFault_Handler+0x4>

0800229a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800229e:	e7fe      	b.n	800229e <MemManage_Handler+0x4>

080022a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <BusFault_Handler+0x4>

080022a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <UsageFault_Handler+0x4>

080022ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d4:	f7fd ff80 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}

080022dc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0

  HAL_CAN_IRQHandler(&hcan);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80022e2:	f7fe faf4 	bl	80008ce <HAL_CAN_IRQHandler>


}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000060 	.word	0x20000060

080022f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80022f4:	4a15      	ldr	r2, [pc, #84]	; (800234c <SystemInit+0x5c>)
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <SystemInit+0x5c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002300:	4912      	ldr	r1, [pc, #72]	; (800234c <SystemInit+0x5c>)
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <SystemInit+0x5c>)
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <SystemInit+0x60>)
 8002308:	4013      	ands	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800230c:	4a0f      	ldr	r2, [pc, #60]	; (800234c <SystemInit+0x5c>)
 800230e:	4b0f      	ldr	r3, [pc, #60]	; (800234c <SystemInit+0x5c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800231c:	4a0b      	ldr	r2, [pc, #44]	; (800234c <SystemInit+0x5c>)
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <SystemInit+0x5c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002326:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002328:	4a08      	ldr	r2, [pc, #32]	; (800234c <SystemInit+0x5c>)
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <SystemInit+0x5c>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002332:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <SystemInit+0x5c>)
 8002336:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800233a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <SystemInit+0x64>)
 800233e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002342:	609a      	str	r2, [r3, #8]
#endif 
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	40021000 	.word	0x40021000
 8002350:	f8ff0000 	.word	0xf8ff0000
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002358:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800235a:	e003      	b.n	8002364 <LoopCopyDataInit>

0800235c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800235e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002360:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002362:	3104      	adds	r1, #4

08002364 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002364:	480a      	ldr	r0, [pc, #40]	; (8002390 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002368:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800236a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800236c:	d3f6      	bcc.n	800235c <CopyDataInit>
  ldr r2, =_sbss
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002370:	e002      	b.n	8002378 <LoopFillZerobss>

08002372 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002374:	f842 3b04 	str.w	r3, [r2], #4

08002378 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800237a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800237c:	d3f9      	bcc.n	8002372 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800237e:	f7ff ffb7 	bl	80022f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002382:	f000 f80f 	bl	80023a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002386:	f7ff fc99 	bl	8001cbc <main>
  bx lr
 800238a:	4770      	bx	lr
  ldr r3, =_sidata
 800238c:	08002448 	.word	0x08002448
  ldr r0, =_sdata
 8002390:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002394:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002398:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800239c:	200000dc 	.word	0x200000dc

080023a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023a0:	e7fe      	b.n	80023a0 <ADC1_2_IRQHandler>
	...

080023a4 <__libc_init_array>:
 80023a4:	b570      	push	{r4, r5, r6, lr}
 80023a6:	2500      	movs	r5, #0
 80023a8:	4e0c      	ldr	r6, [pc, #48]	; (80023dc <__libc_init_array+0x38>)
 80023aa:	4c0d      	ldr	r4, [pc, #52]	; (80023e0 <__libc_init_array+0x3c>)
 80023ac:	1ba4      	subs	r4, r4, r6
 80023ae:	10a4      	asrs	r4, r4, #2
 80023b0:	42a5      	cmp	r5, r4
 80023b2:	d109      	bne.n	80023c8 <__libc_init_array+0x24>
 80023b4:	f000 f822 	bl	80023fc <_init>
 80023b8:	2500      	movs	r5, #0
 80023ba:	4e0a      	ldr	r6, [pc, #40]	; (80023e4 <__libc_init_array+0x40>)
 80023bc:	4c0a      	ldr	r4, [pc, #40]	; (80023e8 <__libc_init_array+0x44>)
 80023be:	1ba4      	subs	r4, r4, r6
 80023c0:	10a4      	asrs	r4, r4, #2
 80023c2:	42a5      	cmp	r5, r4
 80023c4:	d105      	bne.n	80023d2 <__libc_init_array+0x2e>
 80023c6:	bd70      	pop	{r4, r5, r6, pc}
 80023c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023cc:	4798      	blx	r3
 80023ce:	3501      	adds	r5, #1
 80023d0:	e7ee      	b.n	80023b0 <__libc_init_array+0xc>
 80023d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023d6:	4798      	blx	r3
 80023d8:	3501      	adds	r5, #1
 80023da:	e7f2      	b.n	80023c2 <__libc_init_array+0x1e>
 80023dc:	08002440 	.word	0x08002440
 80023e0:	08002440 	.word	0x08002440
 80023e4:	08002440 	.word	0x08002440
 80023e8:	08002444 	.word	0x08002444

080023ec <memset>:
 80023ec:	4603      	mov	r3, r0
 80023ee:	4402      	add	r2, r0
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d100      	bne.n	80023f6 <memset+0xa>
 80023f4:	4770      	bx	lr
 80023f6:	f803 1b01 	strb.w	r1, [r3], #1
 80023fa:	e7f9      	b.n	80023f0 <memset+0x4>

080023fc <_init>:
 80023fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fe:	bf00      	nop
 8002400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002402:	bc08      	pop	{r3}
 8002404:	469e      	mov	lr, r3
 8002406:	4770      	bx	lr

08002408 <_fini>:
 8002408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240a:	bf00      	nop
 800240c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800240e:	bc08      	pop	{r3}
 8002410:	469e      	mov	lr, r3
 8002412:	4770      	bx	lr

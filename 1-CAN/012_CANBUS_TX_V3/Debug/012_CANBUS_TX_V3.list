
012_CANBUS_TX_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002520  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800262c  0800262c  0001262c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002658  08002658  00012658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800265c  0800265c  0001265c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d0  2000000c  0800266c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000dc  0800266c  000200dc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006987  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000013be  00000000  00000000  000269bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000720  00000000  00000000  00027d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000678  00000000  00000000  000284a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002e80  00000000  00000000  00028b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002303  00000000  00000000  0002b998  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002dc9b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001c40  00000000  00000000  0002dd18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002614 	.word	0x08002614

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002614 	.word	0x08002614

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 ff73 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 f8b4 	bl	80022d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 ff8b 	bl	80010b2 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 ff53 	bl	800105e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000005c 	.word	0x2000005c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000005c 	.word	0x2000005c

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad2      	subs	r2, r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d3f7      	bcc.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d101      	bne.n	8000266 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000262:	2301      	movs	r3, #1
 8000264:	e0ec      	b.n	8000440 <HAL_CAN_Init+0x1ec>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	2b00      	cmp	r3, #0
 8000270:	d102      	bne.n	8000278 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000272:	6878      	ldr	r0, [r7, #4]
 8000274:	f002 f850 	bl	8002318 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	6812      	ldr	r2, [r2, #0]
 8000280:	6812      	ldr	r2, [r2, #0]
 8000282:	f022 0202 	bic.w	r2, r2, #2
 8000286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000288:	f7ff ffb8 	bl	80001fc <HAL_GetTick>
 800028c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800028e:	e012      	b.n	80002b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000290:	f7ff ffb4 	bl	80001fc <HAL_GetTick>
 8000294:	4602      	mov	r2, r0
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	1ad3      	subs	r3, r2, r3
 800029a:	2b0a      	cmp	r3, #10
 800029c:	d90b      	bls.n	80002b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2205      	movs	r2, #5
 80002ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002b2:	2301      	movs	r3, #1
 80002b4:	e0c4      	b.n	8000440 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	f003 0302 	and.w	r3, r3, #2
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1e5      	bne.n	8000290 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	6812      	ldr	r2, [r2, #0]
 80002cc:	6812      	ldr	r2, [r2, #0]
 80002ce:	f042 0201 	orr.w	r2, r2, #1
 80002d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002d4:	f7ff ff92 	bl	80001fc <HAL_GetTick>
 80002d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002da:	e012      	b.n	8000302 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002dc:	f7ff ff8e 	bl	80001fc <HAL_GetTick>
 80002e0:	4602      	mov	r2, r0
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	2b0a      	cmp	r3, #10
 80002e8:	d90b      	bls.n	8000302 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2205      	movs	r2, #5
 80002fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002fe:	2301      	movs	r3, #1
 8000300:	e09e      	b.n	8000440 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0e5      	beq.n	80002dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	7e1b      	ldrb	r3, [r3, #24]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d108      	bne.n	800032a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	6812      	ldr	r2, [r2, #0]
 8000320:	6812      	ldr	r2, [r2, #0]
 8000322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	e007      	b.n	800033a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	6812      	ldr	r2, [r2, #0]
 8000332:	6812      	ldr	r2, [r2, #0]
 8000334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000338:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	7e5b      	ldrb	r3, [r3, #25]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d108      	bne.n	8000354 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	6812      	ldr	r2, [r2, #0]
 800034a:	6812      	ldr	r2, [r2, #0]
 800034c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	e007      	b.n	8000364 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	6812      	ldr	r2, [r2, #0]
 800035c:	6812      	ldr	r2, [r2, #0]
 800035e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000362:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	7e9b      	ldrb	r3, [r3, #26]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d108      	bne.n	800037e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	6812      	ldr	r2, [r2, #0]
 8000374:	6812      	ldr	r2, [r2, #0]
 8000376:	f042 0220 	orr.w	r2, r2, #32
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	e007      	b.n	800038e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	6812      	ldr	r2, [r2, #0]
 8000386:	6812      	ldr	r2, [r2, #0]
 8000388:	f022 0220 	bic.w	r2, r2, #32
 800038c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	7edb      	ldrb	r3, [r3, #27]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d108      	bne.n	80003a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	6812      	ldr	r2, [r2, #0]
 800039e:	6812      	ldr	r2, [r2, #0]
 80003a0:	f022 0210 	bic.w	r2, r2, #16
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	e007      	b.n	80003b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	6812      	ldr	r2, [r2, #0]
 80003b0:	6812      	ldr	r2, [r2, #0]
 80003b2:	f042 0210 	orr.w	r2, r2, #16
 80003b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	7f1b      	ldrb	r3, [r3, #28]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d108      	bne.n	80003d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	6812      	ldr	r2, [r2, #0]
 80003c8:	6812      	ldr	r2, [r2, #0]
 80003ca:	f042 0208 	orr.w	r2, r2, #8
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	e007      	b.n	80003e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	6812      	ldr	r2, [r2, #0]
 80003da:	6812      	ldr	r2, [r2, #0]
 80003dc:	f022 0208 	bic.w	r2, r2, #8
 80003e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	7f5b      	ldrb	r3, [r3, #29]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d108      	bne.n	80003fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	6812      	ldr	r2, [r2, #0]
 80003f2:	6812      	ldr	r2, [r2, #0]
 80003f4:	f042 0204 	orr.w	r2, r2, #4
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	e007      	b.n	800040c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	6812      	ldr	r2, [r2, #0]
 8000404:	6812      	ldr	r2, [r2, #0]
 8000406:	f022 0204 	bic.w	r2, r2, #4
 800040a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	6891      	ldr	r1, [r2, #8]
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	68d2      	ldr	r2, [r2, #12]
 8000418:	4311      	orrs	r1, r2
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	6912      	ldr	r2, [r2, #16]
 800041e:	4311      	orrs	r1, r2
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	6952      	ldr	r2, [r2, #20]
 8000424:	4311      	orrs	r1, r2
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	6852      	ldr	r2, [r2, #4]
 800042a:	3a01      	subs	r2, #1
 800042c:	430a      	orrs	r2, r1
 800042e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2200      	movs	r2, #0
 8000434:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800043e:	2300      	movs	r3, #0
}
 8000440:	4618      	mov	r0, r3
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000448:	b480      	push	{r7}
 800044a:	b087      	sub	sp, #28
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800045e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000460:	7cfb      	ldrb	r3, [r7, #19]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d003      	beq.n	800046e <HAL_CAN_ConfigFilter+0x26>
 8000466:	7cfb      	ldrb	r3, [r7, #19]
 8000468:	2b02      	cmp	r3, #2
 800046a:	f040 80aa 	bne.w	80005c2 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000474:	f043 0201 	orr.w	r2, r3, #1
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f003 031f 	and.w	r3, r3, #31
 8000486:	2201      	movs	r2, #1
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	43db      	mvns	r3, r3
 8000498:	401a      	ands	r2, r3
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	69db      	ldr	r3, [r3, #28]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d123      	bne.n	80004f0 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	43db      	mvns	r3, r3
 80004b2:	401a      	ands	r2, r3
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80004ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	3248      	adds	r2, #72	; 0x48
 80004d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80004d8:	683a      	ldr	r2, [r7, #0]
 80004da:	6892      	ldr	r2, [r2, #8]
 80004dc:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80004de:	683a      	ldr	r2, [r7, #0]
 80004e0:	6812      	ldr	r2, [r2, #0]
 80004e2:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80004e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80004e6:	6979      	ldr	r1, [r7, #20]
 80004e8:	3348      	adds	r3, #72	; 0x48
 80004ea:	00db      	lsls	r3, r3, #3
 80004ec:	440b      	add	r3, r1
 80004ee:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d122      	bne.n	800053e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	431a      	orrs	r2, r3
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000518:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	3248      	adds	r2, #72	; 0x48
 800051e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000526:	683a      	ldr	r2, [r7, #0]
 8000528:	6892      	ldr	r2, [r2, #8]
 800052a:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	68d2      	ldr	r2, [r2, #12]
 8000530:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000532:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000534:	6979      	ldr	r1, [r7, #20]
 8000536:	3348      	adds	r3, #72	; 0x48
 8000538:	00db      	lsls	r3, r3, #3
 800053a:	440b      	add	r3, r1
 800053c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d109      	bne.n	800055a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	43db      	mvns	r3, r3
 8000550:	401a      	ands	r2, r3
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000558:	e007      	b.n	800056a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	431a      	orrs	r2, r3
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	691b      	ldr	r3, [r3, #16]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d109      	bne.n	8000586 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	43db      	mvns	r3, r3
 800057c:	401a      	ands	r2, r3
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000584:	e007      	b.n	8000596 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	431a      	orrs	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	6a1b      	ldr	r3, [r3, #32]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d107      	bne.n	80005ae <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	431a      	orrs	r2, r3
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005b4:	f023 0201 	bic.w	r2, r3, #1
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80005be:	2300      	movs	r3, #0
 80005c0:	e006      	b.n	80005d0 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
  }
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	371c      	adds	r7, #28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr

080005da <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d12e      	bne.n	800064c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2202      	movs	r2, #2
 80005f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	6812      	ldr	r2, [r2, #0]
 80005fe:	6812      	ldr	r2, [r2, #0]
 8000600:	f022 0201 	bic.w	r2, r2, #1
 8000604:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000606:	f7ff fdf9 	bl	80001fc <HAL_GetTick>
 800060a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800060c:	e012      	b.n	8000634 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800060e:	f7ff fdf5 	bl	80001fc <HAL_GetTick>
 8000612:	4602      	mov	r2, r0
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	2b0a      	cmp	r3, #10
 800061a:	d90b      	bls.n	8000634 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000620:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2205      	movs	r2, #5
 800062c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000630:	2301      	movs	r3, #1
 8000632:	e012      	b.n	800065a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1e5      	bne.n	800060e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2200      	movs	r2, #0
 8000646:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000648:	2300      	movs	r3, #0
 800064a:	e006      	b.n	800065a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000650:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000658:	2301      	movs	r3, #1
  }
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000662:	b480      	push	{r7}
 8000664:	b089      	sub	sp, #36	; 0x24
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	607a      	str	r2, [r7, #4]
 800066e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000676:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000680:	7ffb      	ldrb	r3, [r7, #31]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d003      	beq.n	800068e <HAL_CAN_AddTxMessage+0x2c>
 8000686:	7ffb      	ldrb	r3, [r7, #31]
 8000688:	2b02      	cmp	r3, #2
 800068a:	f040 80b4 	bne.w	80007f6 <HAL_CAN_AddTxMessage+0x194>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000694:	2b00      	cmp	r3, #0
 8000696:	d10a      	bne.n	80006ae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d105      	bne.n	80006ae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80006a2:	69bb      	ldr	r3, [r7, #24]
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	f000 809c 	beq.w	80007e6 <HAL_CAN_AddTxMessage+0x184>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	0e1b      	lsrs	r3, r3, #24
 80006b2:	f003 0303 	and.w	r3, r3, #3
 80006b6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d907      	bls.n	80006ce <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
 80006cc:	e09a      	b.n	8000804 <HAL_CAN_AddTxMessage+0x1a2>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80006ce:	2201      	movs	r2, #1
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	409a      	lsls	r2, r3
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d10d      	bne.n	80006fc <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	6819      	ldr	r1, [r3, #0]
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80006ee:	431a      	orrs	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	3318      	adds	r3, #24
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	440b      	add	r3, r1
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	e00f      	b.n	800071c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6819      	ldr	r1, [r3, #0]
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800070a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	68db      	ldr	r3, [r3, #12]
                                                           pHeader->IDE |
 8000710:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	3318      	adds	r3, #24
 8000716:	011b      	lsls	r3, r3, #4
 8000718:	440b      	add	r3, r1
 800071a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	6819      	ldr	r1, [r3, #0]
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	691a      	ldr	r2, [r3, #16]
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	3318      	adds	r3, #24
 8000728:	011b      	lsls	r3, r3, #4
 800072a:	440b      	add	r3, r1
 800072c:	3304      	adds	r3, #4
 800072e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	7d1b      	ldrb	r3, [r3, #20]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d111      	bne.n	800075c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	6819      	ldr	r1, [r3, #0]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	3318      	adds	r3, #24
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	4413      	add	r3, r2
 8000748:	3304      	adds	r3, #4
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	3318      	adds	r3, #24
 8000754:	011b      	lsls	r3, r3, #4
 8000756:	440b      	add	r3, r1
 8000758:	3304      	adds	r3, #4
 800075a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	6819      	ldr	r1, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3307      	adds	r3, #7
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	061a      	lsls	r2, r3, #24
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3306      	adds	r3, #6
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	041b      	lsls	r3, r3, #16
 8000770:	431a      	orrs	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	3305      	adds	r3, #5
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	3204      	adds	r2, #4
 8000780:	7812      	ldrb	r2, [r2, #0]
 8000782:	431a      	orrs	r2, r3
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	011b      	lsls	r3, r3, #4
 8000788:	440b      	add	r3, r1
 800078a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800078e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	6819      	ldr	r1, [r3, #0]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3303      	adds	r3, #3
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	061a      	lsls	r2, r3, #24
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3302      	adds	r3, #2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	041b      	lsls	r3, r3, #16
 80007a4:	431a      	orrs	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3301      	adds	r3, #1
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	4313      	orrs	r3, r2
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	7812      	ldrb	r2, [r2, #0]
 80007b4:	431a      	orrs	r2, r3
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	440b      	add	r3, r1
 80007bc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80007c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	6819      	ldr	r1, [r3, #0]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	3318      	adds	r3, #24
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	4413      	add	r3, r2
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f043 0201 	orr.w	r2, r3, #1
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	3318      	adds	r3, #24
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	440b      	add	r3, r1
 80007e0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e00e      	b.n	8000804 <HAL_CAN_AddTxMessage+0x1a2>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e006      	b.n	8000804 <HAL_CAN_AddTxMessage+0x1a2>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
  }
}
 8000804:	4618      	mov	r0, r3
 8000806:	3724      	adds	r7, #36	; 0x24
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr

0800080e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800080e:	b480      	push	{r7}
 8000810:	b087      	sub	sp, #28
 8000812:	af00      	add	r7, sp, #0
 8000814:	60f8      	str	r0, [r7, #12]
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	607a      	str	r2, [r7, #4]
 800081a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000822:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000824:	7dfb      	ldrb	r3, [r7, #23]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d003      	beq.n	8000832 <HAL_CAN_GetRxMessage+0x24>
 800082a:	7dfb      	ldrb	r3, [r7, #23]
 800082c:	2b02      	cmp	r3, #2
 800082e:	f040 80f3 	bne.w	8000a18 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d10e      	bne.n	8000856 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	f003 0303 	and.w	r3, r3, #3
 8000842:	2b00      	cmp	r3, #0
 8000844:	d116      	bne.n	8000874 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e0e7      	b.n	8000a26 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	f003 0303 	and.w	r3, r3, #3
 8000860:	2b00      	cmp	r3, #0
 8000862:	d107      	bne.n	8000874 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000868:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000870:	2301      	movs	r3, #1
 8000872:	e0d8      	b.n	8000a26 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	331b      	adds	r3, #27
 800087c:	011b      	lsls	r3, r3, #4
 800087e:	4413      	add	r3, r2
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f003 0204 	and.w	r2, r3, #4
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d10c      	bne.n	80008ac <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	331b      	adds	r3, #27
 800089a:	011b      	lsls	r3, r3, #4
 800089c:	4413      	add	r3, r2
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	0d5b      	lsrs	r3, r3, #21
 80008a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	e00b      	b.n	80008c4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	331b      	adds	r3, #27
 80008b4:	011b      	lsls	r3, r3, #4
 80008b6:	4413      	add	r3, r2
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	08db      	lsrs	r3, r3, #3
 80008bc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	331b      	adds	r3, #27
 80008cc:	011b      	lsls	r3, r3, #4
 80008ce:	4413      	add	r3, r2
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f003 0202 	and.w	r2, r3, #2
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	331b      	adds	r3, #27
 80008e2:	011b      	lsls	r3, r3, #4
 80008e4:	4413      	add	r3, r2
 80008e6:	3304      	adds	r3, #4
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f003 020f 	and.w	r2, r3, #15
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	331b      	adds	r3, #27
 80008fa:	011b      	lsls	r3, r3, #4
 80008fc:	4413      	add	r3, r2
 80008fe:	3304      	adds	r3, #4
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	0a1b      	lsrs	r3, r3, #8
 8000904:	b2da      	uxtb	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	331b      	adds	r3, #27
 8000912:	011b      	lsls	r3, r3, #4
 8000914:	4413      	add	r3, r2
 8000916:	3304      	adds	r3, #4
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	0c1b      	lsrs	r3, r3, #16
 800091c:	b29a      	uxth	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	011b      	lsls	r3, r3, #4
 800092a:	4413      	add	r3, r2
 800092c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	b2da      	uxtb	r2, r3
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	6811      	ldr	r1, [r2, #0]
 8000940:	68ba      	ldr	r2, [r7, #8]
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	440a      	add	r2, r1
 8000946:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	0a12      	lsrs	r2, r2, #8
 800094e:	b2d2      	uxtb	r2, r2
 8000950:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	3302      	adds	r3, #2
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	6811      	ldr	r1, [r2, #0]
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	0112      	lsls	r2, r2, #4
 800095e:	440a      	add	r2, r1
 8000960:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8000964:	6812      	ldr	r2, [r2, #0]
 8000966:	0c12      	lsrs	r2, r2, #16
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	3303      	adds	r3, #3
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	6811      	ldr	r1, [r2, #0]
 8000974:	68ba      	ldr	r2, [r7, #8]
 8000976:	0112      	lsls	r2, r2, #4
 8000978:	440a      	add	r2, r1
 800097a:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 800097e:	6812      	ldr	r2, [r2, #0]
 8000980:	0e12      	lsrs	r2, r2, #24
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	3304      	adds	r3, #4
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	6811      	ldr	r1, [r2, #0]
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	0112      	lsls	r2, r2, #4
 8000992:	440a      	add	r2, r1
 8000994:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000998:	6812      	ldr	r2, [r2, #0]
 800099a:	b2d2      	uxtb	r2, r2
 800099c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	3305      	adds	r3, #5
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	6811      	ldr	r1, [r2, #0]
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	0112      	lsls	r2, r2, #4
 80009aa:	440a      	add	r2, r1
 80009ac:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80009b0:	6812      	ldr	r2, [r2, #0]
 80009b2:	0a12      	lsrs	r2, r2, #8
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	3306      	adds	r3, #6
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	6811      	ldr	r1, [r2, #0]
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	0112      	lsls	r2, r2, #4
 80009c4:	440a      	add	r2, r1
 80009c6:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80009ca:	6812      	ldr	r2, [r2, #0]
 80009cc:	0c12      	lsrs	r2, r2, #16
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	3307      	adds	r3, #7
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	6811      	ldr	r1, [r2, #0]
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	0112      	lsls	r2, r2, #4
 80009de:	440a      	add	r2, r1
 80009e0:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80009e4:	6812      	ldr	r2, [r2, #0]
 80009e6:	0e12      	lsrs	r2, r2, #24
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d108      	bne.n	8000a04 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	6812      	ldr	r2, [r2, #0]
 80009fa:	68d2      	ldr	r2, [r2, #12]
 80009fc:	f042 0220 	orr.w	r2, r2, #32
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	e007      	b.n	8000a14 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	6812      	ldr	r2, [r2, #0]
 8000a0c:	6912      	ldr	r2, [r2, #16]
 8000a0e:	f042 0220 	orr.w	r2, r2, #32
 8000a12:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000a14:	2300      	movs	r3, #0
 8000a16:	e006      	b.n	8000a26 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
  }
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	371c      	adds	r7, #28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a40:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d002      	beq.n	8000a4e <HAL_CAN_ActivateNotification+0x1e>
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d109      	bne.n	8000a62 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	6812      	ldr	r2, [r2, #0]
 8000a56:	6951      	ldr	r1, [r2, #20]
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e006      	b.n	8000a70 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
  }
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b08a      	sub	sp, #40	; 0x28
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	691b      	ldr	r3, [r3, #16]
 8000aac:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ab6:	6a3b      	ldr	r3, [r7, #32]
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d07c      	beq.n	8000bba <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d023      	beq.n	8000b12 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2201      	movs	r2, #1
 8000ad0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f000 f97d 	bl	8000ddc <HAL_CAN_TxMailbox0CompleteCallback>
 8000ae2:	e016      	b.n	8000b12 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d004      	beq.n	8000af8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
 8000af6:	e00c      	b.n	8000b12 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d004      	beq.n	8000b0c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
 8000b0a:	e002      	b.n	8000b12 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f000 f980 	bl	8000e12 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d024      	beq.n	8000b66 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 f95c 	bl	8000dee <HAL_CAN_TxMailbox1CompleteCallback>
 8000b36:	e016      	b.n	8000b66 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d004      	beq.n	8000b4c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
 8000b4a:	e00c      	b.n	8000b66 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d004      	beq.n	8000b60 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b5e:	e002      	b.n	8000b66 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 f95f 	bl	8000e24 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d024      	beq.n	8000bba <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f000 f93b 	bl	8000e00 <HAL_CAN_TxMailbox2CompleteCallback>
 8000b8a:	e016      	b.n	8000bba <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d004      	beq.n	8000ba0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b9e:	e00c      	b.n	8000bba <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d004      	beq.n	8000bb4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb2:	e002      	b.n	8000bba <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f000 f93e 	bl	8000e36 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000bba:	6a3b      	ldr	r3, [r7, #32]
 8000bbc:	f003 0308 	and.w	r3, r3, #8
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d00c      	beq.n	8000bde <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d007      	beq.n	8000bde <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2210      	movs	r2, #16
 8000bdc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000bde:	6a3b      	ldr	r3, [r7, #32]
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d00b      	beq.n	8000c00 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d006      	beq.n	8000c00 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2208      	movs	r2, #8
 8000bf8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 f924 	bl	8000e48 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d009      	beq.n	8000c1e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d002      	beq.n	8000c1e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f001 fb2f 	bl	800227c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000c1e:	6a3b      	ldr	r3, [r7, #32]
 8000c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d00c      	beq.n	8000c42 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	f003 0310 	and.w	r3, r3, #16
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d007      	beq.n	8000c42 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2210      	movs	r2, #16
 8000c40:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000c42:	6a3b      	ldr	r3, [r7, #32]
 8000c44:	f003 0320 	and.w	r3, r3, #32
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00b      	beq.n	8000c64 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	f003 0308 	and.w	r3, r3, #8
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d006      	beq.n	8000c64 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2208      	movs	r2, #8
 8000c5c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 f904 	bl	8000e6c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d009      	beq.n	8000c82 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	691b      	ldr	r3, [r3, #16]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d002      	beq.n	8000c82 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 f8ec 	bl	8000e5a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000c82:	6a3b      	ldr	r3, [r7, #32]
 8000c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d00b      	beq.n	8000ca4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f003 0310 	and.w	r3, r3, #16
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d006      	beq.n	8000ca4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2210      	movs	r2, #16
 8000c9c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f000 f8ed 	bl	8000e7e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
 8000ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00b      	beq.n	8000cc6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	f003 0308 	and.w	r3, r3, #8
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 f8e5 	bl	8000e90 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000cc6:	6a3b      	ldr	r3, [r7, #32]
 8000cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d075      	beq.n	8000dbc <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f003 0304 	and.w	r3, r3, #4
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d06c      	beq.n	8000db4 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d008      	beq.n	8000cf6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000cf6:	6a3b      	ldr	r3, [r7, #32]
 8000cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d008      	beq.n	8000d12 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d12:	6a3b      	ldr	r3, [r7, #32]
 8000d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d008      	beq.n	8000d2e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d2e:	6a3b      	ldr	r3, [r7, #32]
 8000d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d03d      	beq.n	8000db4 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d038      	beq.n	8000db4 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000d48:	2b30      	cmp	r3, #48	; 0x30
 8000d4a:	d017      	beq.n	8000d7c <HAL_CAN_IRQHandler+0x302>
 8000d4c:	2b30      	cmp	r3, #48	; 0x30
 8000d4e:	d804      	bhi.n	8000d5a <HAL_CAN_IRQHandler+0x2e0>
 8000d50:	2b10      	cmp	r3, #16
 8000d52:	d009      	beq.n	8000d68 <HAL_CAN_IRQHandler+0x2ee>
 8000d54:	2b20      	cmp	r3, #32
 8000d56:	d00c      	beq.n	8000d72 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000d58:	e024      	b.n	8000da4 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000d5a:	2b50      	cmp	r3, #80	; 0x50
 8000d5c:	d018      	beq.n	8000d90 <HAL_CAN_IRQHandler+0x316>
 8000d5e:	2b60      	cmp	r3, #96	; 0x60
 8000d60:	d01b      	beq.n	8000d9a <HAL_CAN_IRQHandler+0x320>
 8000d62:	2b40      	cmp	r3, #64	; 0x40
 8000d64:	d00f      	beq.n	8000d86 <HAL_CAN_IRQHandler+0x30c>
            break;
 8000d66:	e01d      	b.n	8000da4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	f043 0308 	orr.w	r3, r3, #8
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d70:	e018      	b.n	8000da4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	f043 0310 	orr.w	r3, r3, #16
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d7a:	e013      	b.n	8000da4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	f043 0320 	orr.w	r3, r3, #32
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d84:	e00e      	b.n	8000da4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d8e:	e009      	b.n	8000da4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d98:	e004      	b.n	8000da4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000da2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	6812      	ldr	r2, [r2, #0]
 8000dac:	6992      	ldr	r2, [r2, #24]
 8000dae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000db2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2204      	movs	r2, #4
 8000dba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d008      	beq.n	8000dd4 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 f867 	bl	8000ea2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	; 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr

08000dee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr

08000e12 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr

08000e36 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <__NVIC_EnableIRQ+0x34>)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	095b      	lsrs	r3, r3, #5
 8000f32:	79fa      	ldrb	r2, [r7, #7]
 8000f34:	f002 021f 	and.w	r2, r2, #31
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	490d      	ldr	r1, [pc, #52]	; (8000f9c <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f78:	e00a      	b.n	8000f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	4909      	ldr	r1, [pc, #36]	; (8000fa0 <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	761a      	strb	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fea:	2101      	movs	r1, #1
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	1e59      	subs	r1, r3, #1
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001014:	d301      	bcc.n	800101a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001016:	2301      	movs	r3, #1
 8001018:	e00f      	b.n	800103a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <SysTick_Config+0x40>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001022:	210f      	movs	r1, #15
 8001024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001028:	f7ff ff92 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SysTick_Config+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SysTick_Config+0x40>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff2f 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001070:	f7ff ff44 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff ff92 	bl	8000fa4 <NVIC_EncodePriority>
 8001080:	4602      	mov	r2, r0
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff61 	bl	8000f50 <__NVIC_SetPriority>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff37 	bl	8000f18 <__NVIC_EnableIRQ>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffa2 	bl	8001004 <SysTick_Config>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b08b      	sub	sp, #44	; 0x2c
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010de:	e127      	b.n	8001330 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010e0:	2201      	movs	r2, #1
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	f040 8116 	bne.w	800132a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b12      	cmp	r3, #18
 8001104:	d034      	beq.n	8001170 <HAL_GPIO_Init+0xa4>
 8001106:	2b12      	cmp	r3, #18
 8001108:	d80d      	bhi.n	8001126 <HAL_GPIO_Init+0x5a>
 800110a:	2b02      	cmp	r3, #2
 800110c:	d02b      	beq.n	8001166 <HAL_GPIO_Init+0x9a>
 800110e:	2b02      	cmp	r3, #2
 8001110:	d804      	bhi.n	800111c <HAL_GPIO_Init+0x50>
 8001112:	2b00      	cmp	r3, #0
 8001114:	d031      	beq.n	800117a <HAL_GPIO_Init+0xae>
 8001116:	2b01      	cmp	r3, #1
 8001118:	d01c      	beq.n	8001154 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800111a:	e048      	b.n	80011ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800111c:	2b03      	cmp	r3, #3
 800111e:	d043      	beq.n	80011a8 <HAL_GPIO_Init+0xdc>
 8001120:	2b11      	cmp	r3, #17
 8001122:	d01b      	beq.n	800115c <HAL_GPIO_Init+0x90>
          break;
 8001124:	e043      	b.n	80011ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001126:	4a89      	ldr	r2, [pc, #548]	; (800134c <HAL_GPIO_Init+0x280>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d026      	beq.n	800117a <HAL_GPIO_Init+0xae>
 800112c:	4a87      	ldr	r2, [pc, #540]	; (800134c <HAL_GPIO_Init+0x280>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d806      	bhi.n	8001140 <HAL_GPIO_Init+0x74>
 8001132:	4a87      	ldr	r2, [pc, #540]	; (8001350 <HAL_GPIO_Init+0x284>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d020      	beq.n	800117a <HAL_GPIO_Init+0xae>
 8001138:	4a86      	ldr	r2, [pc, #536]	; (8001354 <HAL_GPIO_Init+0x288>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d01d      	beq.n	800117a <HAL_GPIO_Init+0xae>
          break;
 800113e:	e036      	b.n	80011ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001140:	4a85      	ldr	r2, [pc, #532]	; (8001358 <HAL_GPIO_Init+0x28c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d019      	beq.n	800117a <HAL_GPIO_Init+0xae>
 8001146:	4a85      	ldr	r2, [pc, #532]	; (800135c <HAL_GPIO_Init+0x290>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d016      	beq.n	800117a <HAL_GPIO_Init+0xae>
 800114c:	4a84      	ldr	r2, [pc, #528]	; (8001360 <HAL_GPIO_Init+0x294>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d013      	beq.n	800117a <HAL_GPIO_Init+0xae>
          break;
 8001152:	e02c      	b.n	80011ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	623b      	str	r3, [r7, #32]
          break;
 800115a:	e028      	b.n	80011ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	3304      	adds	r3, #4
 8001162:	623b      	str	r3, [r7, #32]
          break;
 8001164:	e023      	b.n	80011ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	3308      	adds	r3, #8
 800116c:	623b      	str	r3, [r7, #32]
          break;
 800116e:	e01e      	b.n	80011ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	330c      	adds	r3, #12
 8001176:	623b      	str	r3, [r7, #32]
          break;
 8001178:	e019      	b.n	80011ae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d102      	bne.n	8001188 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001182:	2304      	movs	r3, #4
 8001184:	623b      	str	r3, [r7, #32]
          break;
 8001186:	e012      	b.n	80011ae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d105      	bne.n	800119c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001190:	2308      	movs	r3, #8
 8001192:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	611a      	str	r2, [r3, #16]
          break;
 800119a:	e008      	b.n	80011ae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800119c:	2308      	movs	r3, #8
 800119e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	615a      	str	r2, [r3, #20]
          break;
 80011a6:	e002      	b.n	80011ae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
          break;
 80011ac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	2bff      	cmp	r3, #255	; 0xff
 80011b2:	d801      	bhi.n	80011b8 <HAL_GPIO_Init+0xec>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	e001      	b.n	80011bc <HAL_GPIO_Init+0xf0>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3304      	adds	r3, #4
 80011bc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	2bff      	cmp	r3, #255	; 0xff
 80011c2:	d802      	bhi.n	80011ca <HAL_GPIO_Init+0xfe>
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	e002      	b.n	80011d0 <HAL_GPIO_Init+0x104>
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	3b08      	subs	r3, #8
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	210f      	movs	r1, #15
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	401a      	ands	r2, r3
 80011e2:	6a39      	ldr	r1, [r7, #32]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	431a      	orrs	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 8096 	beq.w	800132a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011fe:	4a59      	ldr	r2, [pc, #356]	; (8001364 <HAL_GPIO_Init+0x298>)
 8001200:	4b58      	ldr	r3, [pc, #352]	; (8001364 <HAL_GPIO_Init+0x298>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6193      	str	r3, [r2, #24]
 800120a:	4b56      	ldr	r3, [pc, #344]	; (8001364 <HAL_GPIO_Init+0x298>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001216:	4a54      	ldr	r2, [pc, #336]	; (8001368 <HAL_GPIO_Init+0x29c>)
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001222:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	4013      	ands	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4b      	ldr	r2, [pc, #300]	; (800136c <HAL_GPIO_Init+0x2a0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0x19e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4a      	ldr	r2, [pc, #296]	; (8001370 <HAL_GPIO_Init+0x2a4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d00d      	beq.n	8001266 <HAL_GPIO_Init+0x19a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a49      	ldr	r2, [pc, #292]	; (8001374 <HAL_GPIO_Init+0x2a8>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d007      	beq.n	8001262 <HAL_GPIO_Init+0x196>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a48      	ldr	r2, [pc, #288]	; (8001378 <HAL_GPIO_Init+0x2ac>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <HAL_GPIO_Init+0x192>
 800125a:	2303      	movs	r3, #3
 800125c:	e006      	b.n	800126c <HAL_GPIO_Init+0x1a0>
 800125e:	2304      	movs	r3, #4
 8001260:	e004      	b.n	800126c <HAL_GPIO_Init+0x1a0>
 8001262:	2302      	movs	r3, #2
 8001264:	e002      	b.n	800126c <HAL_GPIO_Init+0x1a0>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <HAL_GPIO_Init+0x1a0>
 800126a:	2300      	movs	r3, #0
 800126c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126e:	f002 0203 	and.w	r2, r2, #3
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	4093      	lsls	r3, r2
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800127c:	493a      	ldr	r1, [pc, #232]	; (8001368 <HAL_GPIO_Init+0x29c>)
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3302      	adds	r3, #2
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d006      	beq.n	80012a4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001296:	4939      	ldr	r1, [pc, #228]	; (800137c <HAL_GPIO_Init+0x2b0>)
 8001298:	4b38      	ldr	r3, [pc, #224]	; (800137c <HAL_GPIO_Init+0x2b0>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]
 80012a2:	e006      	b.n	80012b2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012a4:	4935      	ldr	r1, [pc, #212]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012a6:	4b35      	ldr	r3, [pc, #212]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	4013      	ands	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d006      	beq.n	80012cc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012be:	492f      	ldr	r1, [pc, #188]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012c0:	4b2e      	ldr	r3, [pc, #184]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	604b      	str	r3, [r1, #4]
 80012ca:	e006      	b.n	80012da <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012cc:	492b      	ldr	r1, [pc, #172]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012ce:	4b2b      	ldr	r3, [pc, #172]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	4013      	ands	r3, r2
 80012d8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012e6:	4925      	ldr	r1, [pc, #148]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012e8:	4b24      	ldr	r3, [pc, #144]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	608b      	str	r3, [r1, #8]
 80012f2:	e006      	b.n	8001302 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012f4:	4921      	ldr	r1, [pc, #132]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <HAL_GPIO_Init+0x2b0>)
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	4013      	ands	r3, r2
 8001300:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d006      	beq.n	800131c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800130e:	491b      	ldr	r1, [pc, #108]	; (800137c <HAL_GPIO_Init+0x2b0>)
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <HAL_GPIO_Init+0x2b0>)
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	60cb      	str	r3, [r1, #12]
 800131a:	e006      	b.n	800132a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800131c:	4917      	ldr	r1, [pc, #92]	; (800137c <HAL_GPIO_Init+0x2b0>)
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <HAL_GPIO_Init+0x2b0>)
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	43db      	mvns	r3, r3
 8001326:	4013      	ands	r3, r2
 8001328:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	3301      	adds	r3, #1
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	fa22 f303 	lsr.w	r3, r2, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	f47f aed0 	bne.w	80010e0 <HAL_GPIO_Init+0x14>
  }
}
 8001340:	bf00      	nop
 8001342:	372c      	adds	r7, #44	; 0x2c
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	10210000 	.word	0x10210000
 8001350:	10110000 	.word	0x10110000
 8001354:	10120000 	.word	0x10120000
 8001358:	10310000 	.word	0x10310000
 800135c:	10320000 	.word	0x10320000
 8001360:	10220000 	.word	0x10220000
 8001364:	40021000 	.word	0x40021000
 8001368:	40010000 	.word	0x40010000
 800136c:	40010800 	.word	0x40010800
 8001370:	40010c00 	.word	0x40010c00
 8001374:	40011000 	.word	0x40011000
 8001378:	40011400 	.word	0x40011400
 800137c:	40010400 	.word	0x40010400

08001380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
 800138c:	4613      	mov	r3, r2
 800138e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001390:	787b      	ldrb	r3, [r7, #1]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001396:	887a      	ldrh	r2, [r7, #2]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800139c:	e003      	b.n	80013a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	041a      	lsls	r2, r3, #16
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	611a      	str	r2, [r3, #16]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013c8:	887a      	ldrh	r2, [r7, #2]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80013ce:	e002      	b.n	80013d6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013d0:	887a      	ldrh	r2, [r7, #2]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	611a      	str	r2, [r3, #16]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013ec:	695a      	ldr	r2, [r3, #20]
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f806 	bl	8001410 <HAL_GPIO_EXTI_Callback>
  }
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40010400 	.word	0x40010400

08001410 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e26c      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 8087 	beq.w	8001552 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001444:	4b92      	ldr	r3, [pc, #584]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	2b04      	cmp	r3, #4
 800144e:	d00c      	beq.n	800146a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001450:	4b8f      	ldr	r3, [pc, #572]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 030c 	and.w	r3, r3, #12
 8001458:	2b08      	cmp	r3, #8
 800145a:	d112      	bne.n	8001482 <HAL_RCC_OscConfig+0x5e>
 800145c:	4b8c      	ldr	r3, [pc, #560]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001468:	d10b      	bne.n	8001482 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146a:	4b89      	ldr	r3, [pc, #548]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d06c      	beq.n	8001550 <HAL_RCC_OscConfig+0x12c>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d168      	bne.n	8001550 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e246      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148a:	d106      	bne.n	800149a <HAL_RCC_OscConfig+0x76>
 800148c:	4a80      	ldr	r2, [pc, #512]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800148e:	4b80      	ldr	r3, [pc, #512]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	e02e      	b.n	80014f8 <HAL_RCC_OscConfig+0xd4>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x98>
 80014a2:	4a7b      	ldr	r2, [pc, #492]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	4b7a      	ldr	r3, [pc, #488]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4a78      	ldr	r2, [pc, #480]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	4b77      	ldr	r3, [pc, #476]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e01d      	b.n	80014f8 <HAL_RCC_OscConfig+0xd4>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c4:	d10c      	bne.n	80014e0 <HAL_RCC_OscConfig+0xbc>
 80014c6:	4a72      	ldr	r2, [pc, #456]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	4b71      	ldr	r3, [pc, #452]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	4a6f      	ldr	r2, [pc, #444]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	4b6e      	ldr	r3, [pc, #440]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	e00b      	b.n	80014f8 <HAL_RCC_OscConfig+0xd4>
 80014e0:	4a6b      	ldr	r2, [pc, #428]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	4b6b      	ldr	r3, [pc, #428]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4a68      	ldr	r2, [pc, #416]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014ee:	4b68      	ldr	r3, [pc, #416]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d013      	beq.n	8001528 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7fe fe7c 	bl	80001fc <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001508:	f7fe fe78 	bl	80001fc <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e1fa      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	4b5d      	ldr	r3, [pc, #372]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0xe4>
 8001526:	e014      	b.n	8001552 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7fe fe68 	bl	80001fc <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001530:	f7fe fe64 	bl	80001fc <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	; 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e1e6      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001542:	4b53      	ldr	r3, [pc, #332]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x10c>
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d063      	beq.n	8001626 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800155e:	4b4c      	ldr	r3, [pc, #304]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00b      	beq.n	8001582 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800156a:	4b49      	ldr	r3, [pc, #292]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b08      	cmp	r3, #8
 8001574:	d11c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x18c>
 8001576:	4b46      	ldr	r3, [pc, #280]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d116      	bne.n	80015b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001582:	4b43      	ldr	r3, [pc, #268]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d005      	beq.n	800159a <HAL_RCC_OscConfig+0x176>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d001      	beq.n	800159a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e1ba      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159a:	493d      	ldr	r1, [pc, #244]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800159c:	4b3c      	ldr	r3, [pc, #240]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ae:	e03a      	b.n	8001626 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d020      	beq.n	80015fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b8:	4b36      	ldr	r3, [pc, #216]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7fe fe1d 	bl	80001fc <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c6:	f7fe fe19 	bl	80001fc <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e19b      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e4:	492a      	ldr	r1, [pc, #168]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4313      	orrs	r3, r2
 80015f6:	600b      	str	r3, [r1, #0]
 80015f8:	e015      	b.n	8001626 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015fa:	4b26      	ldr	r3, [pc, #152]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7fe fdfc 	bl	80001fc <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001608:	f7fe fdf8 	bl	80001fc <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e17a      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d03a      	beq.n	80016a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d019      	beq.n	800166e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 800163c:	2201      	movs	r2, #1
 800163e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001640:	f7fe fddc 	bl	80001fc <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001648:	f7fe fdd8 	bl	80001fc <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e15a      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165a:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001666:	2001      	movs	r0, #1
 8001668:	f000 fada 	bl	8001c20 <RCC_Delay>
 800166c:	e01c      	b.n	80016a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001674:	f7fe fdc2 	bl	80001fc <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167a:	e00f      	b.n	800169c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167c:	f7fe fdbe 	bl	80001fc <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d908      	bls.n	800169c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e140      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000
 8001694:	42420000 	.word	0x42420000
 8001698:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169c:	4b9e      	ldr	r3, [pc, #632]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1e9      	bne.n	800167c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 80a6 	beq.w	8001802 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ba:	4b97      	ldr	r3, [pc, #604]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10d      	bne.n	80016e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	4a94      	ldr	r2, [pc, #592]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80016c8:	4b93      	ldr	r3, [pc, #588]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	61d3      	str	r3, [r2, #28]
 80016d2:	4b91      	ldr	r3, [pc, #580]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016de:	2301      	movs	r3, #1
 80016e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e2:	4b8e      	ldr	r3, [pc, #568]	; (800191c <HAL_RCC_OscConfig+0x4f8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d118      	bne.n	8001720 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ee:	4a8b      	ldr	r2, [pc, #556]	; (800191c <HAL_RCC_OscConfig+0x4f8>)
 80016f0:	4b8a      	ldr	r3, [pc, #552]	; (800191c <HAL_RCC_OscConfig+0x4f8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016fa:	f7fe fd7f 	bl	80001fc <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001702:	f7fe fd7b 	bl	80001fc <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b64      	cmp	r3, #100	; 0x64
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e0fd      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001714:	4b81      	ldr	r3, [pc, #516]	; (800191c <HAL_RCC_OscConfig+0x4f8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d106      	bne.n	8001736 <HAL_RCC_OscConfig+0x312>
 8001728:	4a7b      	ldr	r2, [pc, #492]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800172a:	4b7b      	ldr	r3, [pc, #492]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6213      	str	r3, [r2, #32]
 8001734:	e02d      	b.n	8001792 <HAL_RCC_OscConfig+0x36e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10c      	bne.n	8001758 <HAL_RCC_OscConfig+0x334>
 800173e:	4a76      	ldr	r2, [pc, #472]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001740:	4b75      	ldr	r3, [pc, #468]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	6213      	str	r3, [r2, #32]
 800174a:	4a73      	ldr	r2, [pc, #460]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800174c:	4b72      	ldr	r3, [pc, #456]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	f023 0304 	bic.w	r3, r3, #4
 8001754:	6213      	str	r3, [r2, #32]
 8001756:	e01c      	b.n	8001792 <HAL_RCC_OscConfig+0x36e>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b05      	cmp	r3, #5
 800175e:	d10c      	bne.n	800177a <HAL_RCC_OscConfig+0x356>
 8001760:	4a6d      	ldr	r2, [pc, #436]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001762:	4b6d      	ldr	r3, [pc, #436]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	f043 0304 	orr.w	r3, r3, #4
 800176a:	6213      	str	r3, [r2, #32]
 800176c:	4a6a      	ldr	r2, [pc, #424]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800176e:	4b6a      	ldr	r3, [pc, #424]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6213      	str	r3, [r2, #32]
 8001778:	e00b      	b.n	8001792 <HAL_RCC_OscConfig+0x36e>
 800177a:	4a67      	ldr	r2, [pc, #412]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800177c:	4b66      	ldr	r3, [pc, #408]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	6213      	str	r3, [r2, #32]
 8001786:	4a64      	ldr	r2, [pc, #400]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001788:	4b63      	ldr	r3, [pc, #396]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	f023 0304 	bic.w	r3, r3, #4
 8001790:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d015      	beq.n	80017c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179a:	f7fe fd2f 	bl	80001fc <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a0:	e00a      	b.n	80017b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a2:	f7fe fd2b 	bl	80001fc <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e0ab      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b8:	4b57      	ldr	r3, [pc, #348]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0ee      	beq.n	80017a2 <HAL_RCC_OscConfig+0x37e>
 80017c4:	e014      	b.n	80017f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c6:	f7fe fd19 	bl	80001fc <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7fe fd15 	bl	80001fc <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e095      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e4:	4b4c      	ldr	r3, [pc, #304]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1ee      	bne.n	80017ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d105      	bne.n	8001802 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f6:	4a48      	ldr	r2, [pc, #288]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	4b47      	ldr	r3, [pc, #284]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001800:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8081 	beq.w	800190e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800180c:	4b42      	ldr	r3, [pc, #264]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b08      	cmp	r3, #8
 8001816:	d061      	beq.n	80018dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d146      	bne.n	80018ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001820:	4b3f      	ldr	r3, [pc, #252]	; (8001920 <HAL_RCC_OscConfig+0x4fc>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7fe fce9 	bl	80001fc <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182e:	f7fe fce5 	bl	80001fc <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e067      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001840:	4b35      	ldr	r3, [pc, #212]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f0      	bne.n	800182e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001854:	d108      	bne.n	8001868 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001856:	4930      	ldr	r1, [pc, #192]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	4b2f      	ldr	r3, [pc, #188]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001868:	482b      	ldr	r0, [pc, #172]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800186a:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a19      	ldr	r1, [r3, #32]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	430b      	orrs	r3, r1
 800187c:	4313      	orrs	r3, r2
 800187e:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <HAL_RCC_OscConfig+0x4fc>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7fe fcb9 	bl	80001fc <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188e:	f7fe fcb5 	bl	80001fc <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e037      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x46a>
 80018ac:	e02f      	b.n	800190e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ae:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <HAL_RCC_OscConfig+0x4fc>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7fe fca2 	bl	80001fc <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018bc:	f7fe fc9e 	bl	80001fc <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e020      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x498>
 80018da:	e018      	b.n	800190e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e013      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d001      	beq.n	800190e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000
 800191c:	40007000 	.word	0x40007000
 8001920:	42420060 	.word	0x42420060

08001924 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0d0      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001938:	4b6a      	ldr	r3, [pc, #424]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0207 	and.w	r2, r3, #7
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d210      	bcs.n	8001968 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4967      	ldr	r1, [pc, #412]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001948:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f023 0207 	bic.w	r2, r3, #7
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001956:	4b63      	ldr	r3, [pc, #396]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0207 	and.w	r2, r3, #7
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d001      	beq.n	8001968 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0b8      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d020      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001980:	4a59      	ldr	r2, [pc, #356]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	4b59      	ldr	r3, [pc, #356]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800198a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001998:	4a53      	ldr	r2, [pc, #332]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	4b53      	ldr	r3, [pc, #332]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a4:	4950      	ldr	r1, [pc, #320]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	4b50      	ldr	r3, [pc, #320]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d040      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ca:	4b47      	ldr	r3, [pc, #284]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d115      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e07f      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e2:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e073      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f2:	4b3d      	ldr	r3, [pc, #244]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e06b      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a02:	4939      	ldr	r1, [pc, #228]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f023 0203 	bic.w	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a14:	f7fe fbf2 	bl	80001fc <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1c:	f7fe fbee 	bl	80001fc <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e053      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 020c 	and.w	r2, r3, #12
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1eb      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0207 	and.w	r2, r3, #7
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d910      	bls.n	8001a74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4924      	ldr	r1, [pc, #144]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 0207 	bic.w	r2, r3, #7
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0207 	and.w	r2, r3, #7
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e032      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a80:	4919      	ldr	r1, [pc, #100]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d009      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a9e:	4912      	ldr	r1, [pc, #72]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ab2:	f000 f821 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8001ab6:	4601      	mov	r1, r0
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_RCC_ClockConfig+0x1c8>)
 8001ac4:	5cd3      	ldrb	r3, [r2, r3]
 8001ac6:	fa21 f303 	lsr.w	r3, r1, r3
 8001aca:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <HAL_RCC_ClockConfig+0x1cc>)
 8001acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fb50 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40022000 	.word	0x40022000
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	08002640 	.word	0x08002640
 8001af0:	20000008 	.word	0x20000008
 8001af4:	20000000 	.word	0x20000000

08001af8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af8:	b490      	push	{r4, r7}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b00:	1d3c      	adds	r4, r7, #4
 8001b02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b08:	4b28      	ldr	r3, [pc, #160]	; (8001bac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d002      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x40>
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d003      	beq.n	8001b3e <HAL_RCC_GetSysClockFreq+0x46>
 8001b36:	e02d      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b38:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b3a:	623b      	str	r3, [r7, #32]
      break;
 8001b3c:	e02d      	b.n	8001b9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	0c9b      	lsrs	r3, r3, #18
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b4a:	4413      	add	r3, r2
 8001b4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d013      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b5c:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	0c5b      	lsrs	r3, r3, #17
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b76:	fb02 f203 	mul.w	r2, r2, r3
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
 8001b82:	e004      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	4a0c      	ldr	r2, [pc, #48]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b88:	fb02 f303 	mul.w	r3, r2, r3
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	623b      	str	r3, [r7, #32]
      break;
 8001b92:	e002      	b.n	8001b9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b96:	623b      	str	r3, [r7, #32]
      break;
 8001b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3728      	adds	r7, #40	; 0x28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc90      	pop	{r4, r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	0800262c 	.word	0x0800262c
 8001bac:	0800263c 	.word	0x0800263c
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	007a1200 	.word	0x007a1200
 8001bb8:	003d0900 	.word	0x003d0900

08001bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc0:	4b02      	ldr	r3, [pc, #8]	; (8001bcc <HAL_RCC_GetHCLKFreq+0x10>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	20000008 	.word	0x20000008

08001bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bd4:	f7ff fff2 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001bd8:	4601      	mov	r1, r0
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	4a03      	ldr	r2, [pc, #12]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001be6:	5cd3      	ldrb	r3, [r2, r3]
 8001be8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08002650 	.word	0x08002650

08001bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bfc:	f7ff ffde 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001c00:	4601      	mov	r1, r0
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	0adb      	lsrs	r3, r3, #11
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	4a03      	ldr	r2, [pc, #12]	; (8001c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
 8001c10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	08002650 	.word	0x08002650

08001c20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <RCC_Delay+0x34>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <RCC_Delay+0x38>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0a5b      	lsrs	r3, r3, #9
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c3c:	bf00      	nop
  }
  while (Delay --);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1e5a      	subs	r2, r3, #1
 8001c42:	60fa      	str	r2, [r7, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f9      	bne.n	8001c3c <RCC_Delay+0x1c>
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000008 	.word	0x20000008
 8001c58:	10624dd3 	.word	0x10624dd3

08001c5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e03f      	b.n	8001cee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fbb0 	bl	80023e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2224      	movs	r2, #36	; 0x24
 8001c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	68d2      	ldr	r2, [r2, #12]
 8001c9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f829 	bl	8001cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	6912      	ldr	r2, [r2, #16]
 8001cb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	6952      	ldr	r2, [r2, #20]
 8001cc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	68d2      	ldr	r2, [r2, #12]
 8001cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	6912      	ldr	r2, [r2, #16]
 8001d0a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68d2      	ldr	r2, [r2, #12]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d36:	f023 030c 	bic.w	r3, r3, #12
 8001d3a:	68f9      	ldr	r1, [r7, #12]
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	6952      	ldr	r2, [r2, #20]
 8001d4a:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6992      	ldr	r2, [r2, #24]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a52      	ldr	r2, [pc, #328]	; (8001ea4 <UART_SetConfig+0x1ac>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d14e      	bne.n	8001dfe <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d60:	f7ff ff4a 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 8001d64:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6819      	ldr	r1, [r3, #0]
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	009a      	lsls	r2, r3, #2
 8001d74:	441a      	add	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d80:	4a49      	ldr	r2, [pc, #292]	; (8001ea8 <UART_SetConfig+0x1b0>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	0118      	lsls	r0, r3, #4
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	009a      	lsls	r2, r3, #2
 8001d94:	441a      	add	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001da0:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <UART_SetConfig+0x1b0>)
 8001da2:	fba3 4302 	umull	r4, r3, r3, r2
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	2464      	movs	r4, #100	; 0x64
 8001daa:	fb04 f303 	mul.w	r3, r4, r3
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	3332      	adds	r3, #50	; 0x32
 8001db4:	4a3c      	ldr	r2, [pc, #240]	; (8001ea8 <UART_SetConfig+0x1b0>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc0:	4418      	add	r0, r3
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	009a      	lsls	r2, r3, #2
 8001dcc:	441a      	add	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dd8:	4b33      	ldr	r3, [pc, #204]	; (8001ea8 <UART_SetConfig+0x1b0>)
 8001dda:	fba3 4302 	umull	r4, r3, r3, r2
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	2464      	movs	r4, #100	; 0x64
 8001de2:	fb04 f303 	mul.w	r3, r4, r3
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	3332      	adds	r3, #50	; 0x32
 8001dec:	4a2e      	ldr	r2, [pc, #184]	; (8001ea8 <UART_SetConfig+0x1b0>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	4403      	add	r3, r0
 8001dfa:	608b      	str	r3, [r1, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001dfc:	e04d      	b.n	8001e9a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001dfe:	f7ff fee7 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 8001e02:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6819      	ldr	r1, [r3, #0]
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	009a      	lsls	r2, r3, #2
 8001e12:	441a      	add	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	4a22      	ldr	r2, [pc, #136]	; (8001ea8 <UART_SetConfig+0x1b0>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	095b      	lsrs	r3, r3, #5
 8001e26:	0118      	lsls	r0, r3, #4
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	009a      	lsls	r2, r3, #2
 8001e32:	441a      	add	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <UART_SetConfig+0x1b0>)
 8001e40:	fba3 4302 	umull	r4, r3, r3, r2
 8001e44:	095b      	lsrs	r3, r3, #5
 8001e46:	2464      	movs	r4, #100	; 0x64
 8001e48:	fb04 f303 	mul.w	r3, r4, r3
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	3332      	adds	r3, #50	; 0x32
 8001e52:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <UART_SetConfig+0x1b0>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	095b      	lsrs	r3, r3, #5
 8001e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e5e:	4418      	add	r0, r3
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	009a      	lsls	r2, r3, #2
 8001e6a:	441a      	add	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <UART_SetConfig+0x1b0>)
 8001e78:	fba3 4302 	umull	r4, r3, r3, r2
 8001e7c:	095b      	lsrs	r3, r3, #5
 8001e7e:	2464      	movs	r4, #100	; 0x64
 8001e80:	fb04 f303 	mul.w	r3, r4, r3
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	3332      	adds	r3, #50	; 0x32
 8001e8a:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <UART_SetConfig+0x1b0>)
 8001e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	4403      	add	r3, r0
 8001e98:	608b      	str	r3, [r1, #8]
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd90      	pop	{r4, r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40013800 	.word	0x40013800
 8001ea8:	51eb851f 	.word	0x51eb851f

08001eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  HAL_Init();
 8001eb0:	f7fe f94c 	bl	800014c <HAL_Init>
  SystemClock_Config();
 8001eb4:	f000 f870 	bl	8001f98 <SystemClock_Config>
  MX_GPIO_Init();
 8001eb8:	f000 f95a 	bl	8002170 <MX_GPIO_Init>
  MX_CAN_Init();
 8001ebc:	f000 f8b2 	bl	8002024 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001ec0:	f000 f92c 	bl	800211c <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8001ec4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ec8:	482e      	ldr	r0, [pc, #184]	; (8001f84 <main+0xd8>)
 8001eca:	f7ff fa71 	bl	80013b0 <HAL_GPIO_TogglePin>
	  TxHeader.StdId = 0x003; //red on
 8001ece:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <main+0xdc>)
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	601a      	str	r2, [r3, #0]
	  TxData[0] = 112;
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <main+0xe0>)
 8001ed6:	2270      	movs	r2, #112	; 0x70
 8001ed8:	701a      	strb	r2, [r3, #0]
	  TxData[1] = 112;
 8001eda:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <main+0xe0>)
 8001edc:	2270      	movs	r2, #112	; 0x70
 8001ede:	705a      	strb	r2, [r3, #1]
	  TxData[2] = 112;
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <main+0xe0>)
 8001ee2:	2270      	movs	r2, #112	; 0x70
 8001ee4:	709a      	strb	r2, [r3, #2]
	  TxData[3] = 112;
 8001ee6:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <main+0xe0>)
 8001ee8:	2270      	movs	r2, #112	; 0x70
 8001eea:	70da      	strb	r2, [r3, #3]
	  TxData[4] = 70;
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <main+0xe0>)
 8001eee:	2246      	movs	r2, #70	; 0x46
 8001ef0:	711a      	strb	r2, [r3, #4]
	  TxData[5] = 0;
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <main+0xe0>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	715a      	strb	r2, [r3, #5]
	  TxData[6] = 0;
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <main+0xe0>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	719a      	strb	r2, [r3, #6]
	  TxData[7] = 0;
 8001efe:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <main+0xe0>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	71da      	strb	r2, [r3, #7]
      if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001f04:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <main+0xe4>)
 8001f06:	4a21      	ldr	r2, [pc, #132]	; (8001f8c <main+0xe0>)
 8001f08:	491f      	ldr	r1, [pc, #124]	; (8001f88 <main+0xdc>)
 8001f0a:	4822      	ldr	r0, [pc, #136]	; (8001f94 <main+0xe8>)
 8001f0c:	f7fe fba9 	bl	8000662 <HAL_CAN_AddTxMessage>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <main+0x6e>
      {
        Error_Handler();
 8001f16:	f000 f9cf 	bl	80022b8 <Error_Handler>
      }
      HAL_Delay(3000);
 8001f1a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f1e:	f7fe f977 	bl	8000210 <HAL_Delay>

      HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8001f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f26:	4817      	ldr	r0, [pc, #92]	; (8001f84 <main+0xd8>)
 8001f28:	f7ff fa42 	bl	80013b0 <HAL_GPIO_TogglePin>
	  TxHeader.StdId = 0x003; //red on
 8001f2c:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <main+0xdc>)
 8001f2e:	2203      	movs	r2, #3
 8001f30:	601a      	str	r2, [r3, #0]
	  TxData[0] = 187;
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <main+0xe0>)
 8001f34:	22bb      	movs	r2, #187	; 0xbb
 8001f36:	701a      	strb	r2, [r3, #0]
	  TxData[1] = 112;
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <main+0xe0>)
 8001f3a:	2270      	movs	r2, #112	; 0x70
 8001f3c:	705a      	strb	r2, [r3, #1]
	  TxData[2] = 112;
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <main+0xe0>)
 8001f40:	2270      	movs	r2, #112	; 0x70
 8001f42:	709a      	strb	r2, [r3, #2]
	  TxData[3] = 112;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <main+0xe0>)
 8001f46:	2270      	movs	r2, #112	; 0x70
 8001f48:	70da      	strb	r2, [r3, #3]
	  TxData[4] = 0;
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <main+0xe0>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	711a      	strb	r2, [r3, #4]
	  TxData[5] = 0;
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <main+0xe0>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	715a      	strb	r2, [r3, #5]
	  TxData[6] = 0;
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <main+0xe0>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	719a      	strb	r2, [r3, #6]
	  TxData[7] = 0;
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <main+0xe0>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	71da      	strb	r2, [r3, #7]
      if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001f62:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <main+0xe4>)
 8001f64:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <main+0xe0>)
 8001f66:	4908      	ldr	r1, [pc, #32]	; (8001f88 <main+0xdc>)
 8001f68:	480a      	ldr	r0, [pc, #40]	; (8001f94 <main+0xe8>)
 8001f6a:	f7fe fb7a 	bl	8000662 <HAL_CAN_AddTxMessage>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <main+0xcc>
      {
        Error_Handler();
 8001f74:	f000 f9a0 	bl	80022b8 <Error_Handler>
      }
      HAL_Delay(3000);
 8001f78:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f7c:	f7fe f948 	bl	8000210 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8001f80:	e7a0      	b.n	8001ec4 <main+0x18>
 8001f82:	bf00      	nop
 8001f84:	40011000 	.word	0x40011000
 8001f88:	20000028 	.word	0x20000028
 8001f8c:	200000c8 	.word	0x200000c8
 8001f90:	200000d0 	.word	0x200000d0
 8001f94:	20000060 	.word	0x20000060

08001f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b090      	sub	sp, #64	; 0x40
 8001f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f9e:	f107 0318 	add.w	r3, r7, #24
 8001fa2:	2228      	movs	r2, #40	; 0x28
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fb2c 	bl	8002604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001fd6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fdc:	f107 0318 	add.w	r3, r7, #24
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fa1f 	bl	8001424 <HAL_RCC_OscConfig>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001fec:	f000 f964 	bl	80022b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ff0:	230f      	movs	r3, #15
 8001ff2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002000:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	2102      	movs	r1, #2
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fc8a 	bl	8001924 <HAL_RCC_ClockConfig>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002016:	f000 f94f 	bl	80022b8 <Error_Handler>





}
 800201a:	bf00      	nop
 800201c:	3740      	adds	r7, #64	; 0x40
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0

  /* Configure the CAN peripheral */
  hcan.Instance = CAN1;
 800202a:	4b39      	ldr	r3, [pc, #228]	; (8002110 <MX_CAN_Init+0xec>)
 800202c:	4a39      	ldr	r2, [pc, #228]	; (8002114 <MX_CAN_Init+0xf0>)
 800202e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8002030:	4b37      	ldr	r3, [pc, #220]	; (8002110 <MX_CAN_Init+0xec>)
 8002032:	2209      	movs	r2, #9
 8002034:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002036:	4b36      	ldr	r3, [pc, #216]	; (8002110 <MX_CAN_Init+0xec>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800203c:	4b34      	ldr	r3, [pc, #208]	; (8002110 <MX_CAN_Init+0xec>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002042:	4b33      	ldr	r3, [pc, #204]	; (8002110 <MX_CAN_Init+0xec>)
 8002044:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002048:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800204a:	4b31      	ldr	r3, [pc, #196]	; (8002110 <MX_CAN_Init+0xec>)
 800204c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002050:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002052:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <MX_CAN_Init+0xec>)
 8002054:	2200      	movs	r2, #0
 8002056:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002058:	4b2d      	ldr	r3, [pc, #180]	; (8002110 <MX_CAN_Init+0xec>)
 800205a:	2200      	movs	r2, #0
 800205c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800205e:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <MX_CAN_Init+0xec>)
 8002060:	2200      	movs	r2, #0
 8002062:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002064:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <MX_CAN_Init+0xec>)
 8002066:	2200      	movs	r2, #0
 8002068:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800206a:	4b29      	ldr	r3, [pc, #164]	; (8002110 <MX_CAN_Init+0xec>)
 800206c:	2200      	movs	r2, #0
 800206e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002070:	4b27      	ldr	r3, [pc, #156]	; (8002110 <MX_CAN_Init+0xec>)
 8002072:	2200      	movs	r2, #0
 8002074:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002076:	4826      	ldr	r0, [pc, #152]	; (8002110 <MX_CAN_Init+0xec>)
 8002078:	f7fe f8ec 	bl	8000254 <HAL_CAN_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8002082:	f000 f919 	bl	80022b8 <Error_Handler>
  }


  /* Configure the CAN Filter */
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800208e:	2301      	movs	r3, #1
 8002090:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8002092:	2300      	movs	r3, #0
 8002094:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80020a6:	2301      	movs	r3, #1
 80020a8:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80020aa:	230e      	movs	r3, #14
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80020ae:	463b      	mov	r3, r7
 80020b0:	4619      	mov	r1, r3
 80020b2:	4817      	ldr	r0, [pc, #92]	; (8002110 <MX_CAN_Init+0xec>)
 80020b4:	f7fe f9c8 	bl	8000448 <HAL_CAN_ConfigFilter>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_CAN_Init+0x9e>
  {
    /* Filter configuration Error */
    Error_Handler();
 80020be:	f000 f8fb 	bl	80022b8 <Error_Handler>
  }

  /* Start the CAN peripheral */
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80020c2:	4813      	ldr	r0, [pc, #76]	; (8002110 <MX_CAN_Init+0xec>)
 80020c4:	f7fe fa89 	bl	80005da <HAL_CAN_Start>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_CAN_Init+0xae>
  {
    /* Start Error */
    Error_Handler();
 80020ce:	f000 f8f3 	bl	80022b8 <Error_Handler>
  }


  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80020d2:	2102      	movs	r1, #2
 80020d4:	480e      	ldr	r0, [pc, #56]	; (8002110 <MX_CAN_Init+0xec>)
 80020d6:	f7fe fcab 	bl	8000a30 <HAL_CAN_ActivateNotification>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_CAN_Init+0xc0>
  {
	Error_Handler();
 80020e0:	f000 f8ea 	bl	80022b8 <Error_Handler>
  }


  /* Configure Transmission process */

  TxHeader.StdId = 0x010;
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <MX_CAN_Init+0xf4>)
 80020e6:	2210      	movs	r2, #16
 80020e8:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x01;
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <MX_CAN_Init+0xf4>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 80020f0:	4b09      	ldr	r3, [pc, #36]	; (8002118 <MX_CAN_Init+0xf4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <MX_CAN_Init+0xf4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <MX_CAN_Init+0xf4>)
 80020fe:	2208      	movs	r2, #8
 8002100:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <MX_CAN_Init+0xf4>)
 8002104:	2200      	movs	r2, #0
 8002106:	751a      	strb	r2, [r3, #20]

}
 8002108:	bf00      	nop
 800210a:	3728      	adds	r7, #40	; 0x28
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000060 	.word	0x20000060
 8002114:	40006400 	.word	0x40006400
 8002118:	20000028 	.word	0x20000028

0800211c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <MX_USART1_UART_Init+0x4c>)
 8002122:	4a12      	ldr	r2, [pc, #72]	; (800216c <MX_USART1_UART_Init+0x50>)
 8002124:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <MX_USART1_UART_Init+0x4c>)
 8002128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800212c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <MX_USART1_UART_Init+0x4c>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <MX_USART1_UART_Init+0x4c>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <MX_USART1_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <MX_USART1_UART_Init+0x4c>)
 8002142:	220c      	movs	r2, #12
 8002144:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <MX_USART1_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <MX_USART1_UART_Init+0x4c>)
 800214e:	2200      	movs	r2, #0
 8002150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002152:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_USART1_UART_Init+0x4c>)
 8002154:	f7ff fd82 	bl	8001c5c <HAL_UART_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800215e:	f000 f8ab 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000088 	.word	0x20000088
 800216c:	40013800 	.word	0x40013800

08002170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002184:	4a3a      	ldr	r2, [pc, #232]	; (8002270 <MX_GPIO_Init+0x100>)
 8002186:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <MX_GPIO_Init+0x100>)
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f043 0310 	orr.w	r3, r3, #16
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b37      	ldr	r3, [pc, #220]	; (8002270 <MX_GPIO_Init+0x100>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800219c:	4a34      	ldr	r2, [pc, #208]	; (8002270 <MX_GPIO_Init+0x100>)
 800219e:	4b34      	ldr	r3, [pc, #208]	; (8002270 <MX_GPIO_Init+0x100>)
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f043 0320 	orr.w	r3, r3, #32
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b31      	ldr	r3, [pc, #196]	; (8002270 <MX_GPIO_Init+0x100>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b4:	4a2e      	ldr	r2, [pc, #184]	; (8002270 <MX_GPIO_Init+0x100>)
 80021b6:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <MX_GPIO_Init+0x100>)
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <MX_GPIO_Init+0x100>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021cc:	4a28      	ldr	r2, [pc, #160]	; (8002270 <MX_GPIO_Init+0x100>)
 80021ce:	4b28      	ldr	r3, [pc, #160]	; (8002270 <MX_GPIO_Init+0x100>)
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f043 0308 	orr.w	r3, r3, #8
 80021d6:	6193      	str	r3, [r2, #24]
 80021d8:	4b25      	ldr	r3, [pc, #148]	; (8002270 <MX_GPIO_Init+0x100>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80021e4:	2201      	movs	r2, #1
 80021e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ea:	4822      	ldr	r0, [pc, #136]	; (8002274 <MX_GPIO_Init+0x104>)
 80021ec:	f7ff f8c8 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80021f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f6:	2301      	movs	r3, #1
 80021f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2302      	movs	r3, #2
 8002200:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002202:	f107 0310 	add.w	r3, r7, #16
 8002206:	4619      	mov	r1, r3
 8002208:	481a      	ldr	r0, [pc, #104]	; (8002274 <MX_GPIO_Init+0x104>)
 800220a:	f7fe ff5f 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800220e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	2301      	movs	r3, #1
 8002216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2302      	movs	r3, #2
 800221e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002220:	f107 0310 	add.w	r3, r7, #16
 8002224:	4619      	mov	r1, r3
 8002226:	4814      	ldr	r0, [pc, #80]	; (8002278 <MX_GPIO_Init+0x108>)
 8002228:	f7fe ff50 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800222c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002232:	2301      	movs	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223a:	2302      	movs	r3, #2
 800223c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223e:	f107 0310 	add.w	r3, r7, #16
 8002242:	4619      	mov	r1, r3
 8002244:	480c      	ldr	r0, [pc, #48]	; (8002278 <MX_GPIO_Init+0x108>)
 8002246:	f7fe ff41 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800224a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800224e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002250:	2301      	movs	r3, #1
 8002252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002258:	2302      	movs	r3, #2
 800225a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225c:	f107 0310 	add.w	r3, r7, #16
 8002260:	4619      	mov	r1, r3
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <MX_GPIO_Init+0x108>)
 8002264:	f7fe ff32 	bl	80010cc <HAL_GPIO_Init>



}
 8002268:	bf00      	nop
 800226a:	3720      	adds	r7, #32
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000
 8002274:	40011000 	.word	0x40011000
 8002278:	40010c00 	.word	0x40010c00

0800227c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8002284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002288:	4808      	ldr	r0, [pc, #32]	; (80022ac <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800228a:	f7ff f891 	bl	80013b0 <HAL_GPIO_TogglePin>
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002290:	4a08      	ldr	r2, [pc, #32]	; (80022b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002292:	2100      	movs	r1, #0
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7fe faba 	bl	800080e <HAL_CAN_GetRxMessage>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
  {
    /* Reception Error */
    Error_Handler();
 80022a0:	f000 f80a 	bl	80022b8 <Error_Handler>
  }
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40011000 	.word	0x40011000
 80022b0:	200000d4 	.word	0x200000d4
 80022b4:	20000040 	.word	0x20000040

080022b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80022bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022c0:	4803      	ldr	r0, [pc, #12]	; (80022d0 <Error_Handler+0x18>)
 80022c2:	f7ff f875 	bl	80013b0 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80022c6:	2064      	movs	r0, #100	; 0x64
 80022c8:	f7fd ffa2 	bl	8000210 <HAL_Delay>
  /* USER CODE END Error_Handler_Debug */
}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40011000 	.word	0x40011000

080022d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022da:	4a0e      	ldr	r2, [pc, #56]	; (8002314 <HAL_MspInit+0x40>)
 80022dc:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_MspInit+0x40>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6193      	str	r3, [r2, #24]
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_MspInit+0x40>)
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	4a08      	ldr	r2, [pc, #32]	; (8002314 <HAL_MspInit+0x40>)
 80022f4:	4b07      	ldr	r3, [pc, #28]	; (8002314 <HAL_MspInit+0x40>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fc:	61d3      	str	r3, [r2, #28]
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_MspInit+0x40>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	40021000 	.word	0x40021000

08002318 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a29      	ldr	r2, [pc, #164]	; (80023d8 <HAL_CAN_MspInit+0xc0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d14b      	bne.n	80023d0 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002338:	4a28      	ldr	r2, [pc, #160]	; (80023dc <HAL_CAN_MspInit+0xc4>)
 800233a:	4b28      	ldr	r3, [pc, #160]	; (80023dc <HAL_CAN_MspInit+0xc4>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002342:	61d3      	str	r3, [r2, #28]
 8002344:	4b25      	ldr	r3, [pc, #148]	; (80023dc <HAL_CAN_MspInit+0xc4>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002350:	4a22      	ldr	r2, [pc, #136]	; (80023dc <HAL_CAN_MspInit+0xc4>)
 8002352:	4b22      	ldr	r3, [pc, #136]	; (80023dc <HAL_CAN_MspInit+0xc4>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f043 0308 	orr.w	r3, r3, #8
 800235a:	6193      	str	r3, [r2, #24]
 800235c:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <HAL_CAN_MspInit+0xc4>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800236c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4619      	mov	r1, r3
 800237c:	4818      	ldr	r0, [pc, #96]	; (80023e0 <HAL_CAN_MspInit+0xc8>)
 800237e:	f7fe fea5 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002382:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800238c:	2303      	movs	r3, #3
 800238e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4619      	mov	r1, r3
 8002396:	4812      	ldr	r0, [pc, #72]	; (80023e0 <HAL_CAN_MspInit+0xc8>)
 8002398:	f7fe fe98 	bl	80010cc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_CAN_MspInit+0xcc>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ba:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <HAL_CAN_MspInit+0xcc>)
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2100      	movs	r1, #0
 80023c4:	2014      	movs	r0, #20
 80023c6:	f7fe fe4a 	bl	800105e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80023ca:	2014      	movs	r0, #20
 80023cc:	f7fe fe63 	bl	8001096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80023d0:	bf00      	nop
 80023d2:	3728      	adds	r7, #40	; 0x28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40006400 	.word	0x40006400
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40010c00 	.word	0x40010c00
 80023e4:	40010000 	.word	0x40010000

080023e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 0310 	add.w	r3, r7, #16
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1c      	ldr	r2, [pc, #112]	; (8002474 <HAL_UART_MspInit+0x8c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d131      	bne.n	800246c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002408:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <HAL_UART_MspInit+0x90>)
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_UART_MspInit+0x90>)
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002412:	6193      	str	r3, [r2, #24]
 8002414:	4b18      	ldr	r3, [pc, #96]	; (8002478 <HAL_UART_MspInit+0x90>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002420:	4a15      	ldr	r2, [pc, #84]	; (8002478 <HAL_UART_MspInit+0x90>)
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <HAL_UART_MspInit+0x90>)
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f043 0304 	orr.w	r3, r3, #4
 800242a:	6193      	str	r3, [r2, #24]
 800242c:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_UART_MspInit+0x90>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800243c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002442:	2303      	movs	r3, #3
 8002444:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002446:	f107 0310 	add.w	r3, r7, #16
 800244a:	4619      	mov	r1, r3
 800244c:	480b      	ldr	r0, [pc, #44]	; (800247c <HAL_UART_MspInit+0x94>)
 800244e:	f7fe fe3d 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002460:	f107 0310 	add.w	r3, r7, #16
 8002464:	4619      	mov	r1, r3
 8002466:	4805      	ldr	r0, [pc, #20]	; (800247c <HAL_UART_MspInit+0x94>)
 8002468:	f7fe fe30 	bl	80010cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800246c:	bf00      	nop
 800246e:	3720      	adds	r7, #32
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40013800 	.word	0x40013800
 8002478:	40021000 	.word	0x40021000
 800247c:	40010800 	.word	0x40010800

08002480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <HardFault_Handler+0x4>

08002492 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002496:	e7fe      	b.n	8002496 <MemManage_Handler+0x4>

08002498 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800249c:	e7fe      	b.n	800249c <BusFault_Handler+0x4>

0800249e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <UsageFault_Handler+0x4>

080024a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024cc:	f7fd fe84 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0

  HAL_CAN_IRQHandler(&hcan);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80024da:	f7fe face 	bl	8000a7a <HAL_CAN_IRQHandler>


}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000060 	.word	0x20000060

080024e8 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80024ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024f0:	4804      	ldr	r0, [pc, #16]	; (8002504 <EXTI15_10_IRQHandler+0x1c>)
 80024f2:	f7fe ff5d 	bl	80013b0 <HAL_GPIO_TogglePin>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80024f6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024fa:	f7fe ff71 	bl	80013e0 <HAL_GPIO_EXTI_IRQHandler>
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40011000 	.word	0x40011000

08002508 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800250c:	4a15      	ldr	r2, [pc, #84]	; (8002564 <SystemInit+0x5c>)
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <SystemInit+0x5c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002518:	4912      	ldr	r1, [pc, #72]	; (8002564 <SystemInit+0x5c>)
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <SystemInit+0x5c>)
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <SystemInit+0x60>)
 8002520:	4013      	ands	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002524:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <SystemInit+0x5c>)
 8002526:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <SystemInit+0x5c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800252e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002532:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002534:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <SystemInit+0x5c>)
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <SystemInit+0x5c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002540:	4a08      	ldr	r2, [pc, #32]	; (8002564 <SystemInit+0x5c>)
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <SystemInit+0x5c>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800254a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <SystemInit+0x5c>)
 800254e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002552:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <SystemInit+0x64>)
 8002556:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800255a:	609a      	str	r2, [r3, #8]
#endif 
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	40021000 	.word	0x40021000
 8002568:	f8ff0000 	.word	0xf8ff0000
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002570:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002572:	e003      	b.n	800257c <LoopCopyDataInit>

08002574 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002576:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002578:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800257a:	3104      	adds	r1, #4

0800257c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800257c:	480a      	ldr	r0, [pc, #40]	; (80025a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002580:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002582:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002584:	d3f6      	bcc.n	8002574 <CopyDataInit>
  ldr r2, =_sbss
 8002586:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002588:	e002      	b.n	8002590 <LoopFillZerobss>

0800258a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800258a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800258c:	f842 3b04 	str.w	r3, [r2], #4

08002590 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002592:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002594:	d3f9      	bcc.n	800258a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002596:	f7ff ffb7 	bl	8002508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800259a:	f000 f80f 	bl	80025bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800259e:	f7ff fc85 	bl	8001eac <main>
  bx lr
 80025a2:	4770      	bx	lr
  ldr r3, =_sidata
 80025a4:	08002660 	.word	0x08002660
  ldr r0, =_sdata
 80025a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80025ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80025b0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80025b4:	200000dc 	.word	0x200000dc

080025b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025b8:	e7fe      	b.n	80025b8 <ADC1_2_IRQHandler>
	...

080025bc <__libc_init_array>:
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	2500      	movs	r5, #0
 80025c0:	4e0c      	ldr	r6, [pc, #48]	; (80025f4 <__libc_init_array+0x38>)
 80025c2:	4c0d      	ldr	r4, [pc, #52]	; (80025f8 <__libc_init_array+0x3c>)
 80025c4:	1ba4      	subs	r4, r4, r6
 80025c6:	10a4      	asrs	r4, r4, #2
 80025c8:	42a5      	cmp	r5, r4
 80025ca:	d109      	bne.n	80025e0 <__libc_init_array+0x24>
 80025cc:	f000 f822 	bl	8002614 <_init>
 80025d0:	2500      	movs	r5, #0
 80025d2:	4e0a      	ldr	r6, [pc, #40]	; (80025fc <__libc_init_array+0x40>)
 80025d4:	4c0a      	ldr	r4, [pc, #40]	; (8002600 <__libc_init_array+0x44>)
 80025d6:	1ba4      	subs	r4, r4, r6
 80025d8:	10a4      	asrs	r4, r4, #2
 80025da:	42a5      	cmp	r5, r4
 80025dc:	d105      	bne.n	80025ea <__libc_init_array+0x2e>
 80025de:	bd70      	pop	{r4, r5, r6, pc}
 80025e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025e4:	4798      	blx	r3
 80025e6:	3501      	adds	r5, #1
 80025e8:	e7ee      	b.n	80025c8 <__libc_init_array+0xc>
 80025ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025ee:	4798      	blx	r3
 80025f0:	3501      	adds	r5, #1
 80025f2:	e7f2      	b.n	80025da <__libc_init_array+0x1e>
 80025f4:	08002658 	.word	0x08002658
 80025f8:	08002658 	.word	0x08002658
 80025fc:	08002658 	.word	0x08002658
 8002600:	0800265c 	.word	0x0800265c

08002604 <memset>:
 8002604:	4603      	mov	r3, r0
 8002606:	4402      	add	r2, r0
 8002608:	4293      	cmp	r3, r2
 800260a:	d100      	bne.n	800260e <memset+0xa>
 800260c:	4770      	bx	lr
 800260e:	f803 1b01 	strb.w	r1, [r3], #1
 8002612:	e7f9      	b.n	8002608 <memset+0x4>

08002614 <_init>:
 8002614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002616:	bf00      	nop
 8002618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261a:	bc08      	pop	{r3}
 800261c:	469e      	mov	lr, r3
 800261e:	4770      	bx	lr

08002620 <_fini>:
 8002620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002622:	bf00      	nop
 8002624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002626:	bc08      	pop	{r3}
 8002628:	469e      	mov	lr, r3
 800262a:	4770      	bx	lr

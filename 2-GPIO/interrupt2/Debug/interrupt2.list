
interrupt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080017bc  080017bc  000117bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080017e0  080017e0  000117e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080017e4  080017e4  000117e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080017e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  2000000c  080017f4  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000030  080017f4  00020030  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007116  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000130a  00000000  00000000  0002714b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000003d0  00000000  00000000  00028458  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  00028828  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001f1d  00000000  00000000  00028b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001538  00000000  00000000  0002aa8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002bfc5  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000dcc  00000000  00000000  0002c044  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080017a4 	.word	0x080017a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080017a4 	.word	0x080017a4

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060c:	4a08      	ldr	r2, [pc, #32]	; (8000630 <HAL_Init+0x28>)
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <HAL_Init+0x28>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 f91d 	bl	8000858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800061e:	2000      	movs	r0, #0
 8000620:	f000 f808 	bl	8000634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000624:	f000 ffe4 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40022000 	.word	0x40022000

08000634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_InitTick+0x54>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_InitTick+0x58>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064a:	fbb3 f3f1 	udiv	r3, r3, r1
 800064e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f935 	bl	80008c2 <HAL_SYSTICK_Config>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	e00e      	b.n	8000680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b0f      	cmp	r3, #15
 8000666:	d80a      	bhi.n	800067e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000668:	2200      	movs	r2, #0
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000670:	f000 f8fd 	bl	800086e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000674:	4a06      	ldr	r2, [pc, #24]	; (8000690 <HAL_InitTick+0x5c>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800067a:	2300      	movs	r3, #0
 800067c:	e000      	b.n	8000680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000008 	.word	0x20000008
 800068c:	20000004 	.word	0x20000004
 8000690:	20000000 	.word	0x20000000

08000694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <HAL_IncTick+0x1c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <HAL_IncTick+0x20>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <HAL_IncTick+0x20>)
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	20000004 	.word	0x20000004
 80006b4:	20000028 	.word	0x20000028

080006b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return uwTick;
 80006bc:	4b02      	ldr	r3, [pc, #8]	; (80006c8 <HAL_GetTick+0x10>)
 80006be:	681b      	ldr	r3, [r3, #0]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	20000028 	.word	0x20000028

080006cc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <NVIC_SetPriorityGrouping+0x44>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fe:	4a04      	ldr	r2, [pc, #16]	; (8000710 <NVIC_SetPriorityGrouping+0x44>)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	60d3      	str	r3, [r2, #12]
}
 8000704:	bf00      	nop
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <NVIC_GetPriorityGrouping+0x18>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	0a1b      	lsrs	r3, r3, #8
 800071e:	f003 0307 	and.w	r3, r3, #7
}
 8000722:	4618      	mov	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800073a:	4908      	ldr	r1, [pc, #32]	; (800075c <NVIC_EnableIRQ+0x2c>)
 800073c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000740:	095b      	lsrs	r3, r3, #5
 8000742:	79fa      	ldrb	r2, [r7, #7]
 8000744:	f002 021f 	and.w	r2, r2, #31
 8000748:	2001      	movs	r0, #1
 800074a:	fa00 f202 	lsl.w	r2, r0, r2
 800074e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	e000e100 	.word	0xe000e100

08000760 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	da0b      	bge.n	800078c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	490d      	ldr	r1, [pc, #52]	; (80007ac <NVIC_SetPriority+0x4c>)
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	f003 030f 	and.w	r3, r3, #15
 800077c:	3b04      	subs	r3, #4
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	0112      	lsls	r2, r2, #4
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	440b      	add	r3, r1
 8000788:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800078a:	e009      	b.n	80007a0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078c:	4908      	ldr	r1, [pc, #32]	; (80007b0 <NVIC_SetPriority+0x50>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	0112      	lsls	r2, r2, #4
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	440b      	add	r3, r1
 800079c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00
 80007b0:	e000e100 	.word	0xe000e100

080007b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	bf28      	it	cs
 80007d2:	2304      	movcs	r3, #4
 80007d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3304      	adds	r3, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d902      	bls.n	80007e4 <NVIC_EncodePriority+0x30>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b03      	subs	r3, #3
 80007e2:	e000      	b.n	80007e6 <NVIC_EncodePriority+0x32>
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	2201      	movs	r2, #1
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	401a      	ands	r2, r3
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fa:	2101      	movs	r1, #1
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	1e59      	subs	r1, r3, #1
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	4313      	orrs	r3, r2
         );
}
 800080a:	4618      	mov	r0, r3
 800080c:	3724      	adds	r7, #36	; 0x24
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000824:	d301      	bcc.n	800082a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000826:	2301      	movs	r3, #1
 8000828:	e00f      	b.n	800084a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <SysTick_Config+0x40>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000832:	210f      	movs	r1, #15
 8000834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000838:	f7ff ff92 	bl	8000760 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <SysTick_Config+0x40>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <SysTick_Config+0x40>)
 8000844:	2207      	movs	r2, #7
 8000846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	e000e010 	.word	0xe000e010

08000858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff ff33 	bl	80006cc <NVIC_SetPriorityGrouping>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000880:	f7ff ff48 	bl	8000714 <NVIC_GetPriorityGrouping>
 8000884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	68b9      	ldr	r1, [r7, #8]
 800088a:	6978      	ldr	r0, [r7, #20]
 800088c:	f7ff ff92 	bl	80007b4 <NVIC_EncodePriority>
 8000890:	4602      	mov	r2, r0
 8000892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff61 	bl	8000760 <NVIC_SetPriority>
}
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff3b 	bl	8000730 <NVIC_EnableIRQ>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ffa2 	bl	8000814 <SysTick_Config>
 80008d0:	4603      	mov	r3, r0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008dc:	b480      	push	{r7}
 80008de:	b08b      	sub	sp, #44	; 0x2c
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
 80008fe:	e127      	b.n	8000b50 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000900:	2201      	movs	r2, #1
 8000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	4013      	ands	r3, r2
 8000912:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	429a      	cmp	r2, r3
 800091a:	f040 8116 	bne.w	8000b4a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	2b12      	cmp	r3, #18
 8000924:	d034      	beq.n	8000990 <HAL_GPIO_Init+0xb4>
 8000926:	2b12      	cmp	r3, #18
 8000928:	d80d      	bhi.n	8000946 <HAL_GPIO_Init+0x6a>
 800092a:	2b02      	cmp	r3, #2
 800092c:	d02b      	beq.n	8000986 <HAL_GPIO_Init+0xaa>
 800092e:	2b02      	cmp	r3, #2
 8000930:	d804      	bhi.n	800093c <HAL_GPIO_Init+0x60>
 8000932:	2b00      	cmp	r3, #0
 8000934:	d031      	beq.n	800099a <HAL_GPIO_Init+0xbe>
 8000936:	2b01      	cmp	r3, #1
 8000938:	d01c      	beq.n	8000974 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800093a:	e048      	b.n	80009ce <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800093c:	2b03      	cmp	r3, #3
 800093e:	d043      	beq.n	80009c8 <HAL_GPIO_Init+0xec>
 8000940:	2b11      	cmp	r3, #17
 8000942:	d01b      	beq.n	800097c <HAL_GPIO_Init+0xa0>
          break;
 8000944:	e043      	b.n	80009ce <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000946:	4a87      	ldr	r2, [pc, #540]	; (8000b64 <HAL_GPIO_Init+0x288>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d026      	beq.n	800099a <HAL_GPIO_Init+0xbe>
 800094c:	4a85      	ldr	r2, [pc, #532]	; (8000b64 <HAL_GPIO_Init+0x288>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d806      	bhi.n	8000960 <HAL_GPIO_Init+0x84>
 8000952:	4a85      	ldr	r2, [pc, #532]	; (8000b68 <HAL_GPIO_Init+0x28c>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d020      	beq.n	800099a <HAL_GPIO_Init+0xbe>
 8000958:	4a84      	ldr	r2, [pc, #528]	; (8000b6c <HAL_GPIO_Init+0x290>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d01d      	beq.n	800099a <HAL_GPIO_Init+0xbe>
          break;
 800095e:	e036      	b.n	80009ce <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000960:	4a83      	ldr	r2, [pc, #524]	; (8000b70 <HAL_GPIO_Init+0x294>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d019      	beq.n	800099a <HAL_GPIO_Init+0xbe>
 8000966:	4a83      	ldr	r2, [pc, #524]	; (8000b74 <HAL_GPIO_Init+0x298>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d016      	beq.n	800099a <HAL_GPIO_Init+0xbe>
 800096c:	4a82      	ldr	r2, [pc, #520]	; (8000b78 <HAL_GPIO_Init+0x29c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d013      	beq.n	800099a <HAL_GPIO_Init+0xbe>
          break;
 8000972:	e02c      	b.n	80009ce <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	623b      	str	r3, [r7, #32]
          break;
 800097a:	e028      	b.n	80009ce <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	3304      	adds	r3, #4
 8000982:	623b      	str	r3, [r7, #32]
          break;
 8000984:	e023      	b.n	80009ce <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	68db      	ldr	r3, [r3, #12]
 800098a:	3308      	adds	r3, #8
 800098c:	623b      	str	r3, [r7, #32]
          break;
 800098e:	e01e      	b.n	80009ce <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	330c      	adds	r3, #12
 8000996:	623b      	str	r3, [r7, #32]
          break;
 8000998:	e019      	b.n	80009ce <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d102      	bne.n	80009a8 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009a2:	2304      	movs	r3, #4
 80009a4:	623b      	str	r3, [r7, #32]
          break;
 80009a6:	e012      	b.n	80009ce <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d105      	bne.n	80009bc <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009b0:	2308      	movs	r3, #8
 80009b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	69fa      	ldr	r2, [r7, #28]
 80009b8:	611a      	str	r2, [r3, #16]
          break;
 80009ba:	e008      	b.n	80009ce <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009bc:	2308      	movs	r3, #8
 80009be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	69fa      	ldr	r2, [r7, #28]
 80009c4:	615a      	str	r2, [r3, #20]
          break;
 80009c6:	e002      	b.n	80009ce <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
          break;
 80009cc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	2bff      	cmp	r3, #255	; 0xff
 80009d2:	d801      	bhi.n	80009d8 <HAL_GPIO_Init+0xfc>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	e001      	b.n	80009dc <HAL_GPIO_Init+0x100>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3304      	adds	r3, #4
 80009dc:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	2bff      	cmp	r3, #255	; 0xff
 80009e2:	d802      	bhi.n	80009ea <HAL_GPIO_Init+0x10e>
 80009e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	e002      	b.n	80009f0 <HAL_GPIO_Init+0x114>
 80009ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ec:	3b08      	subs	r3, #8
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	210f      	movs	r1, #15
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	43db      	mvns	r3, r3
 8000a00:	401a      	ands	r2, r3
 8000a02:	6a39      	ldr	r1, [r7, #32]
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	f000 8096 	beq.w	8000b4a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a1e:	4a57      	ldr	r2, [pc, #348]	; (8000b7c <HAL_GPIO_Init+0x2a0>)
 8000a20:	4b56      	ldr	r3, [pc, #344]	; (8000b7c <HAL_GPIO_Init+0x2a0>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6193      	str	r3, [r2, #24]
 8000a2a:	4b54      	ldr	r3, [pc, #336]	; (8000b7c <HAL_GPIO_Init+0x2a0>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000a36:	4a52      	ldr	r2, [pc, #328]	; (8000b80 <HAL_GPIO_Init+0x2a4>)
 8000a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a42:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a46:	f003 0303 	and.w	r3, r3, #3
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	220f      	movs	r2, #15
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	4013      	ands	r3, r2
 8000a58:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a49      	ldr	r2, [pc, #292]	; (8000b84 <HAL_GPIO_Init+0x2a8>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d013      	beq.n	8000a8a <HAL_GPIO_Init+0x1ae>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a48      	ldr	r2, [pc, #288]	; (8000b88 <HAL_GPIO_Init+0x2ac>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d00d      	beq.n	8000a86 <HAL_GPIO_Init+0x1aa>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a47      	ldr	r2, [pc, #284]	; (8000b8c <HAL_GPIO_Init+0x2b0>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d007      	beq.n	8000a82 <HAL_GPIO_Init+0x1a6>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a46      	ldr	r2, [pc, #280]	; (8000b90 <HAL_GPIO_Init+0x2b4>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d101      	bne.n	8000a7e <HAL_GPIO_Init+0x1a2>
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	e006      	b.n	8000a8c <HAL_GPIO_Init+0x1b0>
 8000a7e:	2304      	movs	r3, #4
 8000a80:	e004      	b.n	8000a8c <HAL_GPIO_Init+0x1b0>
 8000a82:	2302      	movs	r3, #2
 8000a84:	e002      	b.n	8000a8c <HAL_GPIO_Init+0x1b0>
 8000a86:	2301      	movs	r3, #1
 8000a88:	e000      	b.n	8000a8c <HAL_GPIO_Init+0x1b0>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a8e:	f002 0203 	and.w	r2, r2, #3
 8000a92:	0092      	lsls	r2, r2, #2
 8000a94:	4093      	lsls	r3, r2
 8000a96:	697a      	ldr	r2, [r7, #20]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000a9c:	4938      	ldr	r1, [pc, #224]	; (8000b80 <HAL_GPIO_Init+0x2a4>)
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	089b      	lsrs	r3, r3, #2
 8000aa2:	3302      	adds	r3, #2
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d006      	beq.n	8000ac4 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ab6:	4937      	ldr	r1, [pc, #220]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000ab8:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]
 8000ac2:	e006      	b.n	8000ad2 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ac4:	4933      	ldr	r1, [pc, #204]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000ac6:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	43db      	mvns	r3, r3
 8000ace:	4013      	ands	r3, r2
 8000ad0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d006      	beq.n	8000aec <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ade:	492d      	ldr	r1, [pc, #180]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	604b      	str	r3, [r1, #4]
 8000aea:	e006      	b.n	8000afa <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aec:	4929      	ldr	r1, [pc, #164]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000aee:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000af0:	685a      	ldr	r2, [r3, #4]
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	43db      	mvns	r3, r3
 8000af6:	4013      	ands	r3, r2
 8000af8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d006      	beq.n	8000b14 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b06:	4923      	ldr	r1, [pc, #140]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000b0a:	689a      	ldr	r2, [r3, #8]
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	608b      	str	r3, [r1, #8]
 8000b12:	e006      	b.n	8000b22 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b14:	491f      	ldr	r1, [pc, #124]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	4013      	ands	r3, r2
 8000b20:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d006      	beq.n	8000b3c <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b2e:	4919      	ldr	r1, [pc, #100]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000b32:	68da      	ldr	r2, [r3, #12]
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	60cb      	str	r3, [r1, #12]
 8000b3a:	e006      	b.n	8000b4a <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b3c:	4915      	ldr	r1, [pc, #84]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	4013      	ands	r3, r2
 8000b48:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b52:	2b0f      	cmp	r3, #15
 8000b54:	f67f aed4 	bls.w	8000900 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000b58:	bf00      	nop
 8000b5a:	372c      	adds	r7, #44	; 0x2c
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	10210000 	.word	0x10210000
 8000b68:	10110000 	.word	0x10110000
 8000b6c:	10120000 	.word	0x10120000
 8000b70:	10310000 	.word	0x10310000
 8000b74:	10320000 	.word	0x10320000
 8000b78:	10220000 	.word	0x10220000
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40010000 	.word	0x40010000
 8000b84:	40010800 	.word	0x40010800
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	40011000 	.word	0x40011000
 8000b90:	40011400 	.word	0x40011400
 8000b94:	40010400 	.word	0x40010400

08000b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	807b      	strh	r3, [r7, #2]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ba8:	787b      	ldrb	r3, [r7, #1]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bae:	887a      	ldrh	r2, [r7, #2]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bb4:	e003      	b.n	8000bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bb6:	887b      	ldrh	r3, [r7, #2]
 8000bb8:	041a      	lsls	r2, r3, #16
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	611a      	str	r2, [r3, #16]
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	887b      	ldrh	r3, [r7, #2]
 8000bda:	405a      	eors	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	60da      	str	r2, [r3, #12]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
	...

08000bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bf8:	695a      	ldr	r2, [r3, #20]
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d006      	beq.n	8000c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fcb4 	bl	8001578 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40010400 	.word	0x40010400

08000c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f000 8087 	beq.w	8000d44 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c36:	4b92      	ldr	r3, [pc, #584]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 030c 	and.w	r3, r3, #12
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	d00c      	beq.n	8000c5c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c42:	4b8f      	ldr	r3, [pc, #572]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 030c 	and.w	r3, r3, #12
 8000c4a:	2b08      	cmp	r3, #8
 8000c4c:	d112      	bne.n	8000c74 <HAL_RCC_OscConfig+0x58>
 8000c4e:	4b8c      	ldr	r3, [pc, #560]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c5a:	d10b      	bne.n	8000c74 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c5c:	4b88      	ldr	r3, [pc, #544]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d06c      	beq.n	8000d42 <HAL_RCC_OscConfig+0x126>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d168      	bne.n	8000d42 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e22d      	b.n	80010d0 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c7c:	d106      	bne.n	8000c8c <HAL_RCC_OscConfig+0x70>
 8000c7e:	4a80      	ldr	r2, [pc, #512]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000c80:	4b7f      	ldr	r3, [pc, #508]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	e02e      	b.n	8000cea <HAL_RCC_OscConfig+0xce>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10c      	bne.n	8000cae <HAL_RCC_OscConfig+0x92>
 8000c94:	4a7a      	ldr	r2, [pc, #488]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000c96:	4b7a      	ldr	r3, [pc, #488]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	4a77      	ldr	r2, [pc, #476]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000ca2:	4b77      	ldr	r3, [pc, #476]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	e01d      	b.n	8000cea <HAL_RCC_OscConfig+0xce>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cb6:	d10c      	bne.n	8000cd2 <HAL_RCC_OscConfig+0xb6>
 8000cb8:	4a71      	ldr	r2, [pc, #452]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000cba:	4b71      	ldr	r3, [pc, #452]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	4a6e      	ldr	r2, [pc, #440]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000cc6:	4b6e      	ldr	r3, [pc, #440]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	e00b      	b.n	8000cea <HAL_RCC_OscConfig+0xce>
 8000cd2:	4a6b      	ldr	r2, [pc, #428]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000cd4:	4b6a      	ldr	r3, [pc, #424]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	4a68      	ldr	r2, [pc, #416]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000ce0:	4b67      	ldr	r3, [pc, #412]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ce8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d013      	beq.n	8000d1a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf2:	f7ff fce1 	bl	80006b8 <HAL_GetTick>
 8000cf6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf8:	e008      	b.n	8000d0c <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cfa:	f7ff fcdd 	bl	80006b8 <HAL_GetTick>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	2b64      	cmp	r3, #100	; 0x64
 8000d06:	d901      	bls.n	8000d0c <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	e1e1      	b.n	80010d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0c:	4b5c      	ldr	r3, [pc, #368]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d0f0      	beq.n	8000cfa <HAL_RCC_OscConfig+0xde>
 8000d18:	e014      	b.n	8000d44 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1a:	f7ff fccd 	bl	80006b8 <HAL_GetTick>
 8000d1e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d20:	e008      	b.n	8000d34 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d22:	f7ff fcc9 	bl	80006b8 <HAL_GetTick>
 8000d26:	4602      	mov	r2, r0
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	2b64      	cmp	r3, #100	; 0x64
 8000d2e:	d901      	bls.n	8000d34 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e1cd      	b.n	80010d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d34:	4b52      	ldr	r3, [pc, #328]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1f0      	bne.n	8000d22 <HAL_RCC_OscConfig+0x106>
 8000d40:	e000      	b.n	8000d44 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d42:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d063      	beq.n	8000e18 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d50:	4b4b      	ldr	r3, [pc, #300]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 030c 	and.w	r3, r3, #12
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d00b      	beq.n	8000d74 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d5c:	4b48      	ldr	r3, [pc, #288]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 030c 	and.w	r3, r3, #12
 8000d64:	2b08      	cmp	r3, #8
 8000d66:	d11c      	bne.n	8000da2 <HAL_RCC_OscConfig+0x186>
 8000d68:	4b45      	ldr	r3, [pc, #276]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d116      	bne.n	8000da2 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d74:	4b42      	ldr	r3, [pc, #264]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d005      	beq.n	8000d8c <HAL_RCC_OscConfig+0x170>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d001      	beq.n	8000d8c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e1a1      	b.n	80010d0 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d8c:	493c      	ldr	r1, [pc, #240]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000d8e:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da0:	e03a      	b.n	8000e18 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d020      	beq.n	8000dec <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000daa:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <HAL_RCC_OscConfig+0x268>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fc82 	bl	80006b8 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000db8:	f7ff fc7e 	bl	80006b8 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e182      	b.n	80010d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dca:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f0      	beq.n	8000db8 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd6:	492a      	ldr	r1, [pc, #168]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000dd8:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	4313      	orrs	r3, r2
 8000de8:	600b      	str	r3, [r1, #0]
 8000dea:	e015      	b.n	8000e18 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dec:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <HAL_RCC_OscConfig+0x268>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df2:	f7ff fc61 	bl	80006b8 <HAL_GetTick>
 8000df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df8:	e008      	b.n	8000e0c <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dfa:	f7ff fc5d 	bl	80006b8 <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d901      	bls.n	8000e0c <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e161      	b.n	80010d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1f0      	bne.n	8000dfa <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0308 	and.w	r3, r3, #8
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d039      	beq.n	8000e98 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d019      	beq.n	8000e60 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e2c:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e32:	f7ff fc41 	bl	80006b8 <HAL_GetTick>
 8000e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e38:	e008      	b.n	8000e4c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e3a:	f7ff fc3d 	bl	80006b8 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e141      	b.n	80010d0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_RCC_OscConfig+0x264>)
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0f0      	beq.n	8000e3a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f000 fab1 	bl	80013c0 <RCC_Delay>
 8000e5e:	e01b      	b.n	8000e98 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_RCC_OscConfig+0x26c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e66:	f7ff fc27 	bl	80006b8 <HAL_GetTick>
 8000e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e6c:	e00e      	b.n	8000e8c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e6e:	f7ff fc23 	bl	80006b8 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d907      	bls.n	8000e8c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e127      	b.n	80010d0 <HAL_RCC_OscConfig+0x4b4>
 8000e80:	40021000 	.word	0x40021000
 8000e84:	42420000 	.word	0x42420000
 8000e88:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e8c:	4b92      	ldr	r3, [pc, #584]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1ea      	bne.n	8000e6e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80a6 	beq.w	8000ff2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eaa:	4b8b      	ldr	r3, [pc, #556]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10d      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	4a88      	ldr	r2, [pc, #544]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000eb8:	4b87      	ldr	r3, [pc, #540]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	61d3      	str	r3, [r2, #28]
 8000ec2:	4b85      	ldr	r3, [pc, #532]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed2:	4b82      	ldr	r3, [pc, #520]	; (80010dc <HAL_RCC_OscConfig+0x4c0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d118      	bne.n	8000f10 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ede:	4a7f      	ldr	r2, [pc, #508]	; (80010dc <HAL_RCC_OscConfig+0x4c0>)
 8000ee0:	4b7e      	ldr	r3, [pc, #504]	; (80010dc <HAL_RCC_OscConfig+0x4c0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eea:	f7ff fbe5 	bl	80006b8 <HAL_GetTick>
 8000eee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ef2:	f7ff fbe1 	bl	80006b8 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b64      	cmp	r3, #100	; 0x64
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e0e5      	b.n	80010d0 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f04:	4b75      	ldr	r3, [pc, #468]	; (80010dc <HAL_RCC_OscConfig+0x4c0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f0      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d106      	bne.n	8000f26 <HAL_RCC_OscConfig+0x30a>
 8000f18:	4a6f      	ldr	r2, [pc, #444]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000f1a:	4b6f      	ldr	r3, [pc, #444]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000f1c:	6a1b      	ldr	r3, [r3, #32]
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6213      	str	r3, [r2, #32]
 8000f24:	e02d      	b.n	8000f82 <HAL_RCC_OscConfig+0x366>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10c      	bne.n	8000f48 <HAL_RCC_OscConfig+0x32c>
 8000f2e:	4a6a      	ldr	r2, [pc, #424]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000f30:	4b69      	ldr	r3, [pc, #420]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	f023 0301 	bic.w	r3, r3, #1
 8000f38:	6213      	str	r3, [r2, #32]
 8000f3a:	4a67      	ldr	r2, [pc, #412]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000f3c:	4b66      	ldr	r3, [pc, #408]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	f023 0304 	bic.w	r3, r3, #4
 8000f44:	6213      	str	r3, [r2, #32]
 8000f46:	e01c      	b.n	8000f82 <HAL_RCC_OscConfig+0x366>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	2b05      	cmp	r3, #5
 8000f4e:	d10c      	bne.n	8000f6a <HAL_RCC_OscConfig+0x34e>
 8000f50:	4a61      	ldr	r2, [pc, #388]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000f52:	4b61      	ldr	r3, [pc, #388]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	6213      	str	r3, [r2, #32]
 8000f5c:	4a5e      	ldr	r2, [pc, #376]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000f5e:	4b5e      	ldr	r3, [pc, #376]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6213      	str	r3, [r2, #32]
 8000f68:	e00b      	b.n	8000f82 <HAL_RCC_OscConfig+0x366>
 8000f6a:	4a5b      	ldr	r2, [pc, #364]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000f6c:	4b5a      	ldr	r3, [pc, #360]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	f023 0301 	bic.w	r3, r3, #1
 8000f74:	6213      	str	r3, [r2, #32]
 8000f76:	4a58      	ldr	r2, [pc, #352]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000f78:	4b57      	ldr	r3, [pc, #348]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	f023 0304 	bic.w	r3, r3, #4
 8000f80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d015      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fb95 	bl	80006b8 <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f90:	e00a      	b.n	8000fa8 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f92:	f7ff fb91 	bl	80006b8 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e093      	b.n	80010d0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa8:	4b4b      	ldr	r3, [pc, #300]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000faa:	6a1b      	ldr	r3, [r3, #32]
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0ee      	beq.n	8000f92 <HAL_RCC_OscConfig+0x376>
 8000fb4:	e014      	b.n	8000fe0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb6:	f7ff fb7f 	bl	80006b8 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fbc:	e00a      	b.n	8000fd4 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fbe:	f7ff fb7b 	bl	80006b8 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e07d      	b.n	80010d0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd4:	4b40      	ldr	r3, [pc, #256]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1ee      	bne.n	8000fbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000fe0:	7dfb      	ldrb	r3, [r7, #23]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d105      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fe6:	4a3c      	ldr	r2, [pc, #240]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000fe8:	4b3b      	ldr	r3, [pc, #236]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000fea:	69db      	ldr	r3, [r3, #28]
 8000fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d069      	beq.n	80010ce <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ffa:	4b37      	ldr	r3, [pc, #220]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b08      	cmp	r3, #8
 8001004:	d061      	beq.n	80010ca <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	2b02      	cmp	r3, #2
 800100c:	d146      	bne.n	800109c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800100e:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001014:	f7ff fb50 	bl	80006b8 <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800101c:	f7ff fb4c 	bl	80006b8 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e050      	b.n	80010d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800102e:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f0      	bne.n	800101c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001042:	d108      	bne.n	8001056 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001044:	4924      	ldr	r1, [pc, #144]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8001046:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	4313      	orrs	r3, r2
 8001054:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001056:	4820      	ldr	r0, [pc, #128]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a19      	ldr	r1, [r3, #32]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	430b      	orrs	r3, r1
 800106a:	4313      	orrs	r3, r2
 800106c:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <HAL_RCC_OscConfig+0x4c4>)
 8001070:	2201      	movs	r2, #1
 8001072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fb20 	bl	80006b8 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800107c:	f7ff fb1c 	bl	80006b8 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e020      	b.n	80010d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f0      	beq.n	800107c <HAL_RCC_OscConfig+0x460>
 800109a:	e018      	b.n	80010ce <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a2:	f7ff fb09 	bl	80006b8 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010aa:	f7ff fb05 	bl	80006b8 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e009      	b.n	80010d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_RCC_OscConfig+0x4bc>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1f0      	bne.n	80010aa <HAL_RCC_OscConfig+0x48e>
 80010c8:	e001      	b.n	80010ce <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40007000 	.word	0x40007000
 80010e0:	42420060 	.word	0x42420060

080010e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010f2:	4b7e      	ldr	r3, [pc, #504]	; (80012ec <HAL_RCC_ClockConfig+0x208>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0207 	and.w	r2, r3, #7
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d210      	bcs.n	8001122 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001100:	497a      	ldr	r1, [pc, #488]	; (80012ec <HAL_RCC_ClockConfig+0x208>)
 8001102:	4b7a      	ldr	r3, [pc, #488]	; (80012ec <HAL_RCC_ClockConfig+0x208>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 0207 	bic.w	r2, r3, #7
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	4313      	orrs	r3, r2
 800110e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001110:	4b76      	ldr	r3, [pc, #472]	; (80012ec <HAL_RCC_ClockConfig+0x208>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0207 	and.w	r2, r3, #7
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	d001      	beq.n	8001122 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e0e0      	b.n	80012e4 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d020      	beq.n	8001170 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	2b00      	cmp	r3, #0
 8001138:	d005      	beq.n	8001146 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800113a:	4a6d      	ldr	r2, [pc, #436]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 800113c:	4b6c      	ldr	r3, [pc, #432]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001144:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d005      	beq.n	800115e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001152:	4a67      	ldr	r2, [pc, #412]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 8001154:	4b66      	ldr	r3, [pc, #408]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800115c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800115e:	4964      	ldr	r1, [pc, #400]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 8001160:	4b63      	ldr	r3, [pc, #396]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	4313      	orrs	r3, r2
 800116e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b00      	cmp	r3, #0
 800117a:	d06a      	beq.n	8001252 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d107      	bne.n	8001194 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001184:	4b5a      	ldr	r3, [pc, #360]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d115      	bne.n	80011bc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e0a7      	b.n	80012e4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d107      	bne.n	80011ac <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800119c:	4b54      	ldr	r3, [pc, #336]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d109      	bne.n	80011bc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e09b      	b.n	80012e4 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ac:	4b50      	ldr	r3, [pc, #320]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e093      	b.n	80012e4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011bc:	494c      	ldr	r1, [pc, #304]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 80011be:	4b4c      	ldr	r3, [pc, #304]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f023 0203 	bic.w	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011ce:	f7ff fa73 	bl	80006b8 <HAL_GetTick>
 80011d2:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d112      	bne.n	8001202 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80011dc:	e00a      	b.n	80011f4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011de:	f7ff fa6b 	bl	80006b8 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e077      	b.n	80012e4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80011f4:	4b3e      	ldr	r3, [pc, #248]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 030c 	and.w	r3, r3, #12
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d1ee      	bne.n	80011de <HAL_RCC_ClockConfig+0xfa>
 8001200:	e027      	b.n	8001252 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d11d      	bne.n	8001246 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800120a:	e00a      	b.n	8001222 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800120c:	f7ff fa54 	bl	80006b8 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	f241 3288 	movw	r2, #5000	; 0x1388
 800121a:	4293      	cmp	r3, r2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e060      	b.n	80012e4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001222:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b08      	cmp	r3, #8
 800122c:	d1ee      	bne.n	800120c <HAL_RCC_ClockConfig+0x128>
 800122e:	e010      	b.n	8001252 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001230:	f7ff fa42 	bl	80006b8 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	f241 3288 	movw	r2, #5000	; 0x1388
 800123e:	4293      	cmp	r3, r2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e04e      	b.n	80012e4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001246:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1ee      	bne.n	8001230 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001252:	4b26      	ldr	r3, [pc, #152]	; (80012ec <HAL_RCC_ClockConfig+0x208>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0207 	and.w	r2, r3, #7
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	d910      	bls.n	8001282 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001260:	4922      	ldr	r1, [pc, #136]	; (80012ec <HAL_RCC_ClockConfig+0x208>)
 8001262:	4b22      	ldr	r3, [pc, #136]	; (80012ec <HAL_RCC_ClockConfig+0x208>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f023 0207 	bic.w	r2, r3, #7
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	4313      	orrs	r3, r2
 800126e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <HAL_RCC_ClockConfig+0x208>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0207 	and.w	r2, r3, #7
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d001      	beq.n	8001282 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e030      	b.n	80012e4 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	2b00      	cmp	r3, #0
 800128c:	d008      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800128e:	4918      	ldr	r1, [pc, #96]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d009      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012ac:	4910      	ldr	r1, [pc, #64]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012c0:	f000 f81c 	bl	80012fc <HAL_RCC_GetSysClockFreq>
 80012c4:	4601      	mov	r1, r0
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_RCC_ClockConfig+0x20c>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <HAL_RCC_ClockConfig+0x210>)
 80012d2:	5cd3      	ldrb	r3, [r2, r3]
 80012d4:	fa21 f303 	lsr.w	r3, r1, r3
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_RCC_ClockConfig+0x214>)
 80012da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff f9a9 	bl	8000634 <HAL_InitTick>
  
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40022000 	.word	0x40022000
 80012f0:	40021000 	.word	0x40021000
 80012f4:	080017d0 	.word	0x080017d0
 80012f8:	20000008 	.word	0x20000008

080012fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012fc:	b490      	push	{r4, r7}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8001304:	1d3c      	adds	r4, r7, #4
 8001306:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001308:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800130c:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001326:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b04      	cmp	r3, #4
 8001334:	d002      	beq.n	800133c <HAL_RCC_GetSysClockFreq+0x40>
 8001336:	2b08      	cmp	r3, #8
 8001338:	d003      	beq.n	8001342 <HAL_RCC_GetSysClockFreq+0x46>
 800133a:	e02d      	b.n	8001398 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800133e:	623b      	str	r3, [r7, #32]
      break;
 8001340:	e02d      	b.n	800139e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	0c9b      	lsrs	r3, r3, #18
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800134e:	4413      	add	r3, r2
 8001350:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001354:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d013      	beq.n	8001388 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	0c5b      	lsrs	r3, r3, #17
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800136e:	4413      	add	r3, r2
 8001370:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001374:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800137a:	fb02 f203 	mul.w	r2, r2, r3
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	fbb2 f3f3 	udiv	r3, r2, r3
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
 8001386:	e004      	b.n	8001392 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	4a0c      	ldr	r2, [pc, #48]	; (80013bc <HAL_RCC_GetSysClockFreq+0xc0>)
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	623b      	str	r3, [r7, #32]
      break;
 8001396:	e002      	b.n	800139e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800139a:	623b      	str	r3, [r7, #32]
      break;
 800139c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800139e:	6a3b      	ldr	r3, [r7, #32]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3728      	adds	r7, #40	; 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc90      	pop	{r4, r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	080017bc 	.word	0x080017bc
 80013b0:	080017cc 	.word	0x080017cc
 80013b4:	40021000 	.word	0x40021000
 80013b8:	007a1200 	.word	0x007a1200
 80013bc:	003d0900 	.word	0x003d0900

080013c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <RCC_Delay+0x34>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <RCC_Delay+0x38>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	0a5b      	lsrs	r3, r3, #9
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	fb02 f303 	mul.w	r3, r2, r3
 80013da:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80013dc:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	1e5a      	subs	r2, r3, #1
 80013e2:	60fa      	str	r2, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f9      	bne.n	80013dc <RCC_Delay+0x1c>
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008
 80013f8:	10624dd3 	.word	0x10624dd3

080013fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001400:	f7ff f902 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001404:	f000 f803 	bl	800140e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001408:	f000 f846 	bl	8001498 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800140c:	e7fe      	b.n	800140c <main+0x10>

0800140e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b090      	sub	sp, #64	; 0x40
 8001412:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001414:	f107 0318 	add.w	r3, r7, #24
 8001418:	2228      	movs	r2, #40	; 0x28
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f000 f9b9 	bl	8001794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001430:	2301      	movs	r3, #1
 8001432:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001438:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143e:	2301      	movs	r3, #1
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001442:	2302      	movs	r3, #2
 8001444:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800144a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800144c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001450:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001452:	f107 0318 	add.w	r3, r7, #24
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fbe0 	bl	8000c1c <HAL_RCC_OscConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001462:	f000 f8bf 	bl	80015e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001466:	230f      	movs	r3, #15
 8001468:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146a:	2302      	movs	r3, #2
 800146c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001476:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2102      	movs	r1, #2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fe2f 	bl	80010e4 <HAL_RCC_ClockConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800148c:	f000 f8aa 	bl	80015e4 <Error_Handler>
  }
}
 8001490:	bf00      	nop
 8001492:	3740      	adds	r7, #64	; 0x40
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <MX_GPIO_Init>:
  * @retval None
  */


static void MX_GPIO_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ac:	4a2e      	ldr	r2, [pc, #184]	; (8001568 <MX_GPIO_Init+0xd0>)
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <MX_GPIO_Init+0xd0>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f043 0310 	orr.w	r3, r3, #16
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <MX_GPIO_Init+0xd0>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c4:	4a28      	ldr	r2, [pc, #160]	; (8001568 <MX_GPIO_Init+0xd0>)
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <MX_GPIO_Init+0xd0>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f043 0320 	orr.w	r3, r3, #32
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <MX_GPIO_Init+0xd0>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0320 	and.w	r3, r3, #32
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4a22      	ldr	r2, [pc, #136]	; (8001568 <MX_GPIO_Init+0xd0>)
 80014de:	4b22      	ldr	r3, [pc, #136]	; (8001568 <MX_GPIO_Init+0xd0>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <MX_GPIO_Init+0xd0>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	4a1c      	ldr	r2, [pc, #112]	; (8001568 <MX_GPIO_Init+0xd0>)
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <MX_GPIO_Init+0xd0>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f043 0308 	orr.w	r3, r3, #8
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <MX_GPIO_Init+0xd0>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001512:	4816      	ldr	r0, [pc, #88]	; (800156c <MX_GPIO_Init+0xd4>)
 8001514:	f7ff fb40 	bl	8000b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2302      	movs	r3, #2
 8001528:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	4619      	mov	r1, r3
 8001530:	480e      	ldr	r0, [pc, #56]	; (800156c <MX_GPIO_Init+0xd4>)
 8001532:	f7ff f9d3 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800153a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_GPIO_Init+0xd8>)
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	4619      	mov	r1, r3
 800154a:	480a      	ldr	r0, [pc, #40]	; (8001574 <MX_GPIO_Init+0xdc>)
 800154c:	f7ff f9c6 	bl	80008dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2100      	movs	r1, #0
 8001554:	2028      	movs	r0, #40	; 0x28
 8001556:	f7ff f98a 	bl	800086e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800155a:	2028      	movs	r0, #40	; 0x28
 800155c:	f7ff f9a3 	bl	80008a6 <HAL_NVIC_EnableIRQ>

}
 8001560:	bf00      	nop
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000
 800156c:	40011000 	.word	0x40011000
 8001570:	10110000 	.word	0x10110000
 8001574:	40010c00 	.word	0x40010c00

08001578 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == GPIO_PIN_10){
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001588:	d121      	bne.n	80015ce <HAL_GPIO_EXTI_Callback+0x56>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800158a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158e:	4812      	ldr	r0, [pc, #72]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x60>)
 8001590:	f7ff fb1a 	bl	8000bc8 <HAL_GPIO_TogglePin>


		rpm = (1/(HAL_GetTick() - rpm))*60000 ;
 8001594:	f7ff f890 	bl	80006b8 <HAL_GetTick>
 8001598:	4603      	mov	r3, r0
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe fe8c 	bl	80002b8 <__aeabi_ui2f>
 80015a0:	4602      	mov	r2, r0
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_GPIO_EXTI_Callback+0x64>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4619      	mov	r1, r3
 80015a8:	4610      	mov	r0, r2
 80015aa:	f7fe fdd3 	bl	8000154 <__aeabi_fsub>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4619      	mov	r1, r3
 80015b2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80015b6:	f7fe ff8b 	bl	80004d0 <__aeabi_fdiv>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4908      	ldr	r1, [pc, #32]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x68>)
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe fed2 	bl	8000368 <__aeabi_fmul>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <HAL_GPIO_EXTI_Callback+0x64>)
 80015ca:	601a      	str	r2, [r3, #0]


	}
	else
		__NOP ();
}
 80015cc:	e000      	b.n	80015d0 <HAL_GPIO_EXTI_Callback+0x58>
 80015ce:	bf00      	nop
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40011000 	.word	0x40011000
 80015dc:	2000002c 	.word	0x2000002c
 80015e0:	476a6000 	.word	0x476a6000

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015f6:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <HAL_MspInit+0x40>)
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <HAL_MspInit+0x40>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6193      	str	r3, [r2, #24]
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_MspInit+0x40>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4a08      	ldr	r2, [pc, #32]	; (8001630 <HAL_MspInit+0x40>)
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <HAL_MspInit+0x40>)
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_MspInit+0x40>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	40021000 	.word	0x40021000

08001634 <NMI_Handler>:
  * @brief This function handles Non maskable interrupt.
  */

//volatile uint32_t counter = 0;
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <HardFault_Handler+0x4>

08001646 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <MemManage_Handler+0x4>

0800164c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <BusFault_Handler+0x4>

08001652 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <UsageFault_Handler+0x4>

08001658 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001680:	f7ff f808 	bl	8000694 <HAL_IncTick>

  //counter++;
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800168c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001690:	f7ff faac 	bl	8000bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800169c:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <SystemInit+0x5c>)
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <SystemInit+0x5c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80016a8:	4912      	ldr	r1, [pc, #72]	; (80016f4 <SystemInit+0x5c>)
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <SystemInit+0x5c>)
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <SystemInit+0x60>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80016b4:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <SystemInit+0x5c>)
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <SystemInit+0x5c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80016be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016c4:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <SystemInit+0x5c>)
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <SystemInit+0x5c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ce:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80016d0:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <SystemInit+0x5c>)
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <SystemInit+0x5c>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80016da:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <SystemInit+0x5c>)
 80016de:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80016e2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <SystemInit+0x64>)
 80016e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ea:	609a      	str	r2, [r3, #8]
#endif 
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	40021000 	.word	0x40021000
 80016f8:	f8ff0000 	.word	0xf8ff0000
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001700:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001702:	e003      	b.n	800170c <LoopCopyDataInit>

08001704 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001706:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001708:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800170a:	3104      	adds	r1, #4

0800170c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800170c:	480a      	ldr	r0, [pc, #40]	; (8001738 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001710:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001712:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001714:	d3f6      	bcc.n	8001704 <CopyDataInit>
  ldr r2, =_sbss
 8001716:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001718:	e002      	b.n	8001720 <LoopFillZerobss>

0800171a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800171c:	f842 3b04 	str.w	r3, [r2], #4

08001720 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001722:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001724:	d3f9      	bcc.n	800171a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001726:	f7ff ffb7 	bl	8001698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172a:	f000 f80f 	bl	800174c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800172e:	f7ff fe65 	bl	80013fc <main>
  bx lr
 8001732:	4770      	bx	lr
  ldr r3, =_sidata
 8001734:	080017e8 	.word	0x080017e8
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800173c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001740:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001744:	20000030 	.word	0x20000030

08001748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC1_2_IRQHandler>
	...

0800174c <__libc_init_array>:
 800174c:	b570      	push	{r4, r5, r6, lr}
 800174e:	2500      	movs	r5, #0
 8001750:	4e0c      	ldr	r6, [pc, #48]	; (8001784 <__libc_init_array+0x38>)
 8001752:	4c0d      	ldr	r4, [pc, #52]	; (8001788 <__libc_init_array+0x3c>)
 8001754:	1ba4      	subs	r4, r4, r6
 8001756:	10a4      	asrs	r4, r4, #2
 8001758:	42a5      	cmp	r5, r4
 800175a:	d109      	bne.n	8001770 <__libc_init_array+0x24>
 800175c:	f000 f822 	bl	80017a4 <_init>
 8001760:	2500      	movs	r5, #0
 8001762:	4e0a      	ldr	r6, [pc, #40]	; (800178c <__libc_init_array+0x40>)
 8001764:	4c0a      	ldr	r4, [pc, #40]	; (8001790 <__libc_init_array+0x44>)
 8001766:	1ba4      	subs	r4, r4, r6
 8001768:	10a4      	asrs	r4, r4, #2
 800176a:	42a5      	cmp	r5, r4
 800176c:	d105      	bne.n	800177a <__libc_init_array+0x2e>
 800176e:	bd70      	pop	{r4, r5, r6, pc}
 8001770:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001774:	4798      	blx	r3
 8001776:	3501      	adds	r5, #1
 8001778:	e7ee      	b.n	8001758 <__libc_init_array+0xc>
 800177a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800177e:	4798      	blx	r3
 8001780:	3501      	adds	r5, #1
 8001782:	e7f2      	b.n	800176a <__libc_init_array+0x1e>
 8001784:	080017e0 	.word	0x080017e0
 8001788:	080017e0 	.word	0x080017e0
 800178c:	080017e0 	.word	0x080017e0
 8001790:	080017e4 	.word	0x080017e4

08001794 <memset>:
 8001794:	4603      	mov	r3, r0
 8001796:	4402      	add	r2, r0
 8001798:	4293      	cmp	r3, r2
 800179a:	d100      	bne.n	800179e <memset+0xa>
 800179c:	4770      	bx	lr
 800179e:	f803 1b01 	strb.w	r1, [r3], #1
 80017a2:	e7f9      	b.n	8001798 <memset+0x4>

080017a4 <_init>:
 80017a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a6:	bf00      	nop
 80017a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017aa:	bc08      	pop	{r3}
 80017ac:	469e      	mov	lr, r3
 80017ae:	4770      	bx	lr

080017b0 <_fini>:
 80017b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017b2:	bf00      	nop
 80017b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017b6:	bc08      	pop	{r3}
 80017b8:	469e      	mov	lr, r3
 80017ba:	4770      	bx	lr
